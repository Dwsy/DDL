--
-- PostgreSQL database dump
--

-- Dumped from database version 14.6
-- Dumped by pg_dump version 14.6

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: ddl; Type: DATABASE; Schema: -; Owner: dwsy
--

CREATE DATABASE ddl WITH TEMPLATE = template0 ENCODING = 'UTF8' LOCALE = 'en_US.UTF-8';


ALTER DATABASE ddl OWNER TO dwsy;

\connect ddl

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: article_comment; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.article_comment (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    comment_type integer,
    parent_comment_id bigint NOT NULL,
    text text,
    up_num integer NOT NULL,
    ua text,
    article_field_id bigint,
    user_id bigint,
    down_num integer,
    parent_user_id bigint,
    reply_user_comment_id bigint,
    comment_serial_number integer
);


ALTER TABLE public.article_comment OWNER TO postgres;

--
-- Name: article_comment_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.article_comment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.article_comment_id_seq OWNER TO postgres;

--
-- Name: article_comment_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.article_comment_id_seq OWNED BY public.article_comment.id;


--
-- Name: article_content; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.article_content (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    text_html text,
    text_md text,
    text_pure text,
    article_field_id bigint
);


ALTER TABLE public.article_content OWNER TO postgres;

--
-- Name: article_content_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.article_content_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.article_content_id_seq OWNER TO postgres;

--
-- Name: article_content_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.article_content_id_seq OWNED BY public.article_content.id;


--
-- Name: article_daily_data; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.article_daily_data (
    id bigint NOT NULL,
    article_field_id bigint NOT NULL,
    collect_num integer NOT NULL,
    comment_num integer NOT NULL,
    data_date date,
    down_num integer NOT NULL,
    score integer NOT NULL,
    tag_ids jsonb,
    up_num integer NOT NULL,
    view_num integer NOT NULL,
    user_id bigint,
    group_id bigint NOT NULL
);


ALTER TABLE public.article_daily_data OWNER TO postgres;

--
-- Name: article_field; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.article_field (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    allow_comment boolean NOT NULL,
    article_state integer,
    banner character varying(255),
    collect_num bigint NOT NULL,
    summary character varying(255),
    title character varying(255),
    view_num bigint NOT NULL,
    article_group_id bigint,
    user_id bigint,
    article_content_id bigint,
    down_num integer,
    up_num integer,
    article_source integer,
    article_source_url character varying(255),
    code_highlight_style character varying(255),
    mark_down_theme character varying(255),
    code_highlight_style_dark character varying(255),
    mark_down_theme_dark character varying(255),
    comment_num integer,
    version integer
);


ALTER TABLE public.article_field OWNER TO postgres;

--
-- Name: article_field_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.article_field_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.article_field_id_seq OWNER TO postgres;

--
-- Name: article_field_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.article_field_id_seq OWNED BY public.article_field.id;


--
-- Name: article_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.article_group (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    info character varying(255),
    name character varying(999),
    article_num integer
);


ALTER TABLE public.article_group OWNER TO postgres;

--
-- Name: article_group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.article_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.article_group_id_seq OWNER TO postgres;

--
-- Name: article_group_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.article_group_id_seq OWNED BY public.article_group.id;


--
-- Name: article_tag; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.article_tag (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    article_num bigint,
    name character varying(255),
    tag_info character varying(255),
    article_group_id bigint,
    weight integer,
    index_page_display boolean
);


ALTER TABLE public.article_tag OWNER TO postgres;

--
-- Name: article_tag_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.article_tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.article_tag_id_seq OWNER TO postgres;

--
-- Name: article_tag_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.article_tag_id_seq OWNED BY public.article_tag.id;


--
-- Name: article_tag_ref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.article_tag_ref (
    article_field_id bigint NOT NULL,
    article_tag_id bigint NOT NULL
);


ALTER TABLE public.article_tag_ref OWNER TO postgres;

--
-- Name: channel; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.channel (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    cover character varying(255),
    description character varying(255),
    is_public boolean NOT NULL,
    is_read_only boolean NOT NULL,
    name character varying(255),
    status integer,
    owner_id bigint
);


ALTER TABLE public.channel OWNER TO postgres;

--
-- Name: channel_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.channel_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.channel_id_seq OWNER TO postgres;

--
-- Name: channel_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.channel_id_seq OWNED BY public.channel.id;


--
-- Name: channel_message; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.channel_message (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    channel_id bigint,
    message text,
    state integer,
    user_id bigint
);


ALTER TABLE public.channel_message OWNER TO postgres;

--
-- Name: channel_message_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.channel_message_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.channel_message_id_seq OWNER TO postgres;

--
-- Name: channel_message_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.channel_message_id_seq OWNED BY public.channel_message.id;


--
-- Name: channel_user_ref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.channel_user_ref (
    channel_id bigint NOT NULL,
    user_id bigint NOT NULL
);


ALTER TABLE public.channel_user_ref OWNER TO postgres;

--
-- Name: hibernate_sequence; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.hibernate_sequence
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.hibernate_sequence OWNER TO postgres;

--
-- Name: infinity; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.infinity (
    id bigint NOT NULL,
    create_time timestamp without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp without time zone,
    collect_num bigint NOT NULL,
    content text,
    img_url1 character varying(255),
    img_url2 character varying(255),
    img_url3 character varying(255),
    img_url4 character varying(255),
    img_url5 character varying(255),
    img_url6 character varying(255),
    img_url7 character varying(255),
    img_url8 character varying(255),
    img_url9 character varying(255),
    parent_tweet_id bigint,
    parent_user_id bigint,
    ref_id bigint,
    reply_serial_number integer NOT NULL,
    reply_user_tweet_id bigint,
    type integer,
    up_num bigint NOT NULL,
    user_id bigint,
    ua character varying(255),
    infinity_club_id bigint,
    view_num bigint
);


ALTER TABLE public.infinity OWNER TO postgres;

--
-- Name: infinity_club; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.infinity_club (
    id bigint NOT NULL,
    create_time timestamp without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp without time zone,
    cover character varying(255),
    description character varying(255),
    follower_num bigint NOT NULL,
    infinity_num bigint NOT NULL,
    name character varying(255),
    notice character varying(255),
    view_num bigint NOT NULL,
    create_user_id bigint
);


ALTER TABLE public.infinity_club OWNER TO postgres;

--
-- Name: infinity_club_daily_data; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.infinity_club_daily_data (
    id bigint NOT NULL,
    infinity_club_id bigint NOT NULL,
    data_date date,
    follower_num bigint NOT NULL,
    infinity_num bigint NOT NULL,
    reply_num bigint NOT NULL,
    score integer NOT NULL,
    view_num bigint NOT NULL
);


ALTER TABLE public.infinity_club_daily_data OWNER TO postgres;

--
-- Name: infinity_club_follow_ref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.infinity_club_follow_ref (
    club_id bigint NOT NULL,
    user_id bigint NOT NULL,
    create_time timestamp without time zone
);


ALTER TABLE public.infinity_club_follow_ref OWNER TO postgres;

--
-- Name: infinity_topic; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.infinity_topic (
    id bigint NOT NULL,
    create_time timestamp without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp without time zone,
    cover character varying(255),
    description character varying(255),
    follower_num bigint NOT NULL,
    infinity_num bigint NOT NULL,
    name character varying(255),
    view_num bigint NOT NULL,
    notice character varying(255),
    create_user_id bigint
);


ALTER TABLE public.infinity_topic OWNER TO postgres;

--
-- Name: infinity_topic__ref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.infinity_topic__ref (
    infinity_id bigint NOT NULL,
    topic_id bigint NOT NULL
);


ALTER TABLE public.infinity_topic__ref OWNER TO postgres;

--
-- Name: infinity_topic_daily_data; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.infinity_topic_daily_data (
    id bigint NOT NULL,
    infinity_topic_id bigint NOT NULL,
    data_date date,
    follower_num bigint NOT NULL,
    infinity_num bigint NOT NULL,
    reply_num bigint NOT NULL,
    score integer NOT NULL,
    view_num bigint NOT NULL
);


ALTER TABLE public.infinity_topic_daily_data OWNER TO postgres;

--
-- Name: infinity_topic_follow_ref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.infinity_topic_follow_ref (
    topic_id bigint NOT NULL,
    user_id bigint NOT NULL,
    create_time timestamp without time zone
);


ALTER TABLE public.infinity_topic_follow_ref OWNER TO postgres;

--
-- Name: oauth_user_ref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.oauth_user_ref (
    id bigint NOT NULL,
    create_time timestamp without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp without time zone,
    oauth_avatar character varying(255),
    oauth_id bigint NOT NULL,
    oauth_name character varying(255),
    oauth_node_id character varying(255),
    oauth_type integer,
    user_id bigint NOT NULL
);


ALTER TABLE public.oauth_user_ref OWNER TO postgres;

--
-- Name: qa_answer; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.qa_answer (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    down_num integer NOT NULL,
    parent_answer_id bigint NOT NULL,
    text_html text,
    ua text,
    up_num integer NOT NULL,
    question_field_id bigint,
    user_id bigint,
    parent_user_id bigint,
    answer_type integer,
    text_md text,
    reply_user_answer_id bigint,
    answer_serial_number integer,
    accepted boolean,
    accepted_time timestamp without time zone
);


ALTER TABLE public.qa_answer OWNER TO postgres;

--
-- Name: qa_answer_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.qa_answer_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.qa_answer_id_seq OWNER TO postgres;

--
-- Name: qa_answer_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.qa_answer_id_seq OWNED BY public.qa_answer.id;


--
-- Name: qa_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.qa_group (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    info character varying(999),
    name character varying(255),
    question_num integer
);


ALTER TABLE public.qa_group OWNER TO postgres;

--
-- Name: qa_group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.qa_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.qa_group_id_seq OWNER TO postgres;

--
-- Name: qa_group_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.qa_group_id_seq OWNED BY public.qa_group.id;


--
-- Name: qa_question_content; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.qa_question_content (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    qa_question_field_id bigint,
    text_html text,
    text_md text,
    text_pure text
);


ALTER TABLE public.qa_question_content OWNER TO postgres;

--
-- Name: qa_question_content_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.qa_question_content_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.qa_question_content_id_seq OWNER TO postgres;

--
-- Name: qa_question_content_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.qa_question_content_id_seq OWNED BY public.qa_question_content.id;


--
-- Name: qa_question_field; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.qa_question_field (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    allow_answer boolean NOT NULL,
    answer_num integer NOT NULL,
    collect_num integer NOT NULL,
    down_num integer NOT NULL,
    question_state integer,
    summary character varying(255),
    title character varying(255),
    up_num integer NOT NULL,
    view_num integer NOT NULL,
    user_id bigint,
    qa_question_content_id bigint,
    qa_group_id bigint,
    code_highlight_style character varying(255),
    code_highlight_style_dark character varying(255),
    mark_down_theme character varying(255),
    mark_down_theme_dark character varying(255),
    version integer,
    before_question_state integer,
    watch_num integer
);


ALTER TABLE public.qa_question_field OWNER TO postgres;

--
-- Name: qa_question_field_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.qa_question_field_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.qa_question_field_id_seq OWNER TO postgres;

--
-- Name: qa_question_field_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.qa_question_field_id_seq OWNED BY public.qa_question_field.id;


--
-- Name: qa_tag; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.qa_tag (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    name character varying(255),
    question_num integer NOT NULL,
    tag_info character varying(255),
    qa_group_id bigint,
    weight integer,
    index_page_display boolean
);


ALTER TABLE public.qa_tag OWNER TO postgres;

--
-- Name: qa_tag_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.qa_tag_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.qa_tag_id_seq OWNER TO postgres;

--
-- Name: qa_tag_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.qa_tag_id_seq OWNED BY public.qa_tag.id;


--
-- Name: qa_tag_ref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.qa_tag_ref (
    qa_field_id bigint NOT NULL,
    qa_tag_id bigint NOT NULL
);


ALTER TABLE public.qa_tag_ref OWNER TO postgres;

--
-- Name: qa_user_watch_ref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.qa_user_watch_ref (
    user_id bigint NOT NULL,
    question_id bigint NOT NULL,
    delete boolean,
    create_time timestamp without time zone
);


ALTER TABLE public.qa_user_watch_ref OWNER TO postgres;

--
-- Name: question_daily_data; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.question_daily_data (
    id bigint NOT NULL,
    answer_num integer NOT NULL,
    collect_num integer NOT NULL,
    comment_num integer NOT NULL,
    data_date date,
    down_num integer NOT NULL,
    question_field_id bigint NOT NULL,
    score integer NOT NULL,
    up_num integer NOT NULL,
    view_num integer NOT NULL,
    user_id bigint NOT NULL,
    group_id bigint NOT NULL,
    tag_ids jsonb
);


ALTER TABLE public.question_daily_data OWNER TO postgres;

--
-- Name: system_message; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.system_message (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    content text,
    conversation_id character varying(255),
    form_system_user_id bigint NOT NULL,
    to_user_id bigint NOT NULL
);


ALTER TABLE public.system_message OWNER TO postgres;

--
-- Name: system_message_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.system_message_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.system_message_id_seq OWNER TO postgres;

--
-- Name: system_message_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.system_message_id_seq OWNED BY public.system_message.id;


--
-- Name: system_users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.system_users (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    area character varying(255),
    email character varying(255),
    nickname character varying(255),
    password character varying(255),
    phone character varying(255),
    salt character varying(255),
    username character varying(255)
);


ALTER TABLE public.system_users OWNER TO postgres;

--
-- Name: system_users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.system_users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.system_users_id_seq OWNER TO postgres;

--
-- Name: system_users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.system_users_id_seq OWNED BY public.system_users.id;


--
-- Name: user_active; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_active (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    source_id bigint,
    user_active_type integer,
    user_id bigint,
    ua character varying(255),
    ipv4 character varying(255)
);


ALTER TABLE public.user_active OWNER TO postgres;

--
-- Name: user_active_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_active_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_active_id_seq OWNER TO postgres;

--
-- Name: user_active_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_active_id_seq OWNED BY public.user_active.id;


--
-- Name: user_collection; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_collection (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    collection_type integer,
    source_id bigint,
    source_title text,
    user_id bigint,
    user_collection_group_id bigint
);


ALTER TABLE public.user_collection OWNER TO postgres;

--
-- Name: user_collection_group; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_collection_group (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    collection_num integer NOT NULL,
    group_name character varying(255),
    group_order integer NOT NULL,
    user_id bigint,
    introduction character varying(255)
);


ALTER TABLE public.user_collection_group OWNER TO postgres;

--
-- Name: user_collection_group_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_collection_group_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_collection_group_id_seq OWNER TO postgres;

--
-- Name: user_collection_group_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_collection_group_id_seq OWNED BY public.user_collection_group.id;


--
-- Name: user_collection_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_collection_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_collection_id_seq OWNER TO postgres;

--
-- Name: user_collection_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_collection_id_seq OWNED BY public.user_collection.id;


--
-- Name: user_file_ref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_file_ref (
    id bigint NOT NULL,
    create_time timestamp without time zone,
    deleted boolean,
    last_modified_time timestamp without time zone,
    ban boolean NOT NULL,
    file_md5 character varying(255),
    file_name character varying(255),
    file_storage integer,
    file_type integer,
    file_url character varying(255),
    user_id bigint
);


ALTER TABLE public.user_file_ref OWNER TO postgres;

--
-- Name: user_following; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_following (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    following_user_id bigint,
    user_id bigint,
    form_content character varying(255),
    notify_type integer,
    to_content character varying(255)
);


ALTER TABLE public.user_following OWNER TO postgres;

--
-- Name: user_following_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_following_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_following_id_seq OWNER TO postgres;

--
-- Name: user_following_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_following_id_seq OWNED BY public.user_following.id;


--
-- Name: user_info; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_info (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    avatar character varying(255),
    birth timestamp(6) without time zone,
    gender character varying(255),
    sign character varying(255)
);


ALTER TABLE public.user_info OWNER TO postgres;

--
-- Name: user_info_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_info_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_info_id_seq OWNER TO postgres;

--
-- Name: user_info_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_info_id_seq OWNED BY public.user_info.id;


--
-- Name: user_message; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_message (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    content character varying(255),
    conversation_id character varying(255),
    form_user_id bigint NOT NULL,
    status integer,
    to_user_id bigint NOT NULL
);


ALTER TABLE public.user_message OWNER TO postgres;

--
-- Name: user_message_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_message_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_message_id_seq OWNER TO postgres;

--
-- Name: user_message_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_message_id_seq OWNED BY public.user_message.id;


--
-- Name: user_notify; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_notify (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    answer_id bigint,
    article_id bigint,
    comment_id bigint,
    form_content text,
    from_user_id bigint NOT NULL,
    notify_type integer NOT NULL,
    question_id bigint,
    to_content text,
    to_user_id bigint NOT NULL,
    reply_comment_id bigint,
    notify_state integer,
    reply_answer_id bigint,
    cancel boolean,
    reply_infinity_id bigint,
    infinity_id bigint
);


ALTER TABLE public.user_notify OWNER TO postgres;

--
-- Name: user_notify_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_notify_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_notify_id_seq OWNER TO postgres;

--
-- Name: user_notify_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_notify_id_seq OWNED BY public.user_notify.id;


--
-- Name: user_points; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_points (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    point real NOT NULL,
    points_type integer,
    user_id bigint
);


ALTER TABLE public.user_points OWNER TO postgres;

--
-- Name: user_points_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.user_points_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.user_points_id_seq OWNER TO postgres;

--
-- Name: user_points_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.user_points_id_seq OWNED BY public.user_points.id;


--
-- Name: user_tag; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_tag (
    id bigint NOT NULL,
    create_time timestamp without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp without time zone,
    index_page_display boolean NOT NULL,
    name character varying(255),
    tag_info character varying(255),
    use_num integer NOT NULL,
    weight integer,
    qa_group_id bigint
);


ALTER TABLE public.user_tag OWNER TO postgres;

--
-- Name: user_tag_ref; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_tag_ref (
    user_id bigint NOT NULL,
    user_tag_id bigint NOT NULL,
    points integer
);


ALTER TABLE public.user_tag_ref OWNER TO postgres;

--
-- Name: users; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.users (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    area character varying(255),
    email character varying(255),
    level integer NOT NULL,
    password character varying(255),
    phone character varying(255),
    username character varying(255),
    user_info_id bigint,
    nickname character varying,
    salt character varying(255),
    experience integer,
    is_admin boolean
);


ALTER TABLE public.users OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.users_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.users_id_seq OWNER TO postgres;

--
-- Name: users_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.users_id_seq OWNED BY public.users.id;


--
-- Name: word; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.word (
    id bigint NOT NULL,
    create_time timestamp(6) without time zone,
    deleted boolean NOT NULL,
    last_modified_time timestamp(6) without time zone,
    type integer,
    word character varying(255)
);


ALTER TABLE public.word OWNER TO postgres;

--
-- Name: word_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.word_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.word_id_seq OWNER TO postgres;

--
-- Name: word_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.word_id_seq OWNED BY public.word.id;


--
-- Name: article_comment id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_comment ALTER COLUMN id SET DEFAULT nextval('public.article_comment_id_seq'::regclass);


--
-- Name: article_content id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_content ALTER COLUMN id SET DEFAULT nextval('public.article_content_id_seq'::regclass);


--
-- Name: article_field id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_field ALTER COLUMN id SET DEFAULT nextval('public.article_field_id_seq'::regclass);


--
-- Name: article_group id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_group ALTER COLUMN id SET DEFAULT nextval('public.article_group_id_seq'::regclass);


--
-- Name: article_tag id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_tag ALTER COLUMN id SET DEFAULT nextval('public.article_tag_id_seq'::regclass);


--
-- Name: channel id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.channel ALTER COLUMN id SET DEFAULT nextval('public.channel_id_seq'::regclass);


--
-- Name: channel_message id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.channel_message ALTER COLUMN id SET DEFAULT nextval('public.channel_message_id_seq'::regclass);


--
-- Name: qa_answer id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_answer ALTER COLUMN id SET DEFAULT nextval('public.qa_answer_id_seq'::regclass);


--
-- Name: qa_group id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_group ALTER COLUMN id SET DEFAULT nextval('public.qa_group_id_seq'::regclass);


--
-- Name: qa_question_content id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_question_content ALTER COLUMN id SET DEFAULT nextval('public.qa_question_content_id_seq'::regclass);


--
-- Name: qa_question_field id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_question_field ALTER COLUMN id SET DEFAULT nextval('public.qa_question_field_id_seq'::regclass);


--
-- Name: qa_tag id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_tag ALTER COLUMN id SET DEFAULT nextval('public.qa_tag_id_seq'::regclass);


--
-- Name: system_message id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.system_message ALTER COLUMN id SET DEFAULT nextval('public.system_message_id_seq'::regclass);


--
-- Name: system_users id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.system_users ALTER COLUMN id SET DEFAULT nextval('public.system_users_id_seq'::regclass);


--
-- Name: user_active id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_active ALTER COLUMN id SET DEFAULT nextval('public.user_active_id_seq'::regclass);


--
-- Name: user_collection id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_collection ALTER COLUMN id SET DEFAULT nextval('public.user_collection_id_seq'::regclass);


--
-- Name: user_collection_group id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_collection_group ALTER COLUMN id SET DEFAULT nextval('public.user_collection_group_id_seq'::regclass);


--
-- Name: user_following id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_following ALTER COLUMN id SET DEFAULT nextval('public.user_following_id_seq'::regclass);


--
-- Name: user_info id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_info ALTER COLUMN id SET DEFAULT nextval('public.user_info_id_seq'::regclass);


--
-- Name: user_message id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_message ALTER COLUMN id SET DEFAULT nextval('public.user_message_id_seq'::regclass);


--
-- Name: user_notify id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_notify ALTER COLUMN id SET DEFAULT nextval('public.user_notify_id_seq'::regclass);


--
-- Name: user_points id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_points ALTER COLUMN id SET DEFAULT nextval('public.user_points_id_seq'::regclass);


--
-- Name: users id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users ALTER COLUMN id SET DEFAULT nextval('public.users_id_seq'::regclass);


--
-- Name: word id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.word ALTER COLUMN id SET DEFAULT nextval('public.word_id_seq'::regclass);


--
-- Name: 50331; Type: BLOB; Schema: -; Owner: postgres
--

SELECT pg_catalog.lo_create('50331');


ALTER LARGE OBJECT 50331 OWNER TO postgres;

--
-- Name: 50332; Type: BLOB; Schema: -; Owner: postgres
--

SELECT pg_catalog.lo_create('50332');


ALTER LARGE OBJECT 50332 OWNER TO postgres;

--
-- Data for Name: article_comment; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.article_comment VALUES (3, '2022-08-26 23:32:14.29', false, '2022-08-26 23:32:14.29', 0, 2, '评论测试', 3, 'user-agent', 9, 3, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (77, '2022-09-30 12:53:14.48', false, '2022-09-30 12:53:14.48', 0, 0, '鹅鹅鹅', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 0, 0, 0, 11);
INSERT INTO public.article_comment VALUES (118, '2022-09-30 19:40:12.103', false, '2022-09-30 19:40:12.103', 0, 0, '渐进式
JavaScript 框架
易学易用，性能出色，适用场景丰富的 Web 前端框架。', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 0, 0, 14);
INSERT INTO public.article_comment VALUES (46, '2022-09-25 12:57:25.232', false, '2022-09-25 12:57:25.232', 0, 36, '123', 0, 'no-user-agent', 10, 3, 1, 3, 0, 4);
INSERT INTO public.article_comment VALUES (2, '2022-08-26 23:29:27.014', false, '2022-08-26 23:29:27.014', 0, 0, '表达式必须是函数或者方法调用；它不能使用括号括起来，调用内置函数会有一些限制。

每次执行 defer 语句执行时都会计算函数的参数和值，但是并不会调用函数。相反，函数的调用是在包裹函数返回后进行，它们的执行顺序与声明顺序正好相反。如果 defer 对应的函数值为 nil，会在调用函数的时候导致运行时恐慌而不是声明 defer 语句的时候。

例如：当 defer 函数为函数字面值且包裹函数具有命名结果值，此时，我们在defer 函数中可以访问和修改命名的结果值。defer 函数的所有返回值都会被忽略。', 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 1, 0, 0, 2);
INSERT INTO public.article_comment VALUES (47, '2022-09-25 12:58:12.306', false, '2022-09-25 12:58:12.306', 0, 36, '312', 1, 'no-user-agent', 10, 3, 0, 3, 0, 5);
INSERT INTO public.article_comment VALUES (50, '2022-09-25 13:50:12.401', false, '2022-09-25 13:50:12.401', 0, 0, '123', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 12, 3, 0, 0, 0, 2);
INSERT INTO public.article_comment VALUES (37, '2022-09-23 13:30:15.071', false, '2022-09-23 13:30:15.071', 0, 36, '评论test11', 1, 'no-user-agent', 10, 3, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (7, '2022-08-26 23:33:42.794', false, '2022-08-26 23:33:42.794', 0, 2, '评论测试', 2, 'user-agent', 9, 3, 0, 0, 0, 5);
INSERT INTO public.article_comment VALUES (1584444071718420480, '2022-10-24 15:17:58.903', true, '2022-10-24 15:18:01.425', 2, 1584422217242902528, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 10, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (1584444074809622528, '2022-10-24 15:17:59.64', true, '2022-10-24 15:18:01.438', 2, 1584422253892730880, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 10, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (1587360303333507072, '2022-11-01 16:26:02.704', false, '2022-11-01 16:26:02.704', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 101, 3, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1591358076357705728, '2022-11-12 17:11:46.079', false, '2022-11-12 17:11:46.079', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.0.0', 13, 3, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (18, '2022-09-22 21:30:05.457', false, '2022-09-23 05:18:15.425', 2, 5, NULL, 0, 'no-user-agent', 9, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (1598240898494234624, '2022-12-01 17:01:38.745', false, '2022-12-01 17:01:38.745', 2, 1581489737602957312, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 1580605959804289024, 20, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (35, '2022-09-23 05:44:12.648', false, '2022-09-24 05:16:30.487', 2, 26, NULL, 0, 'no-user-agent', 9, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (44, '2022-09-25 12:57:19.069', false, '2022-09-30 12:43:03.162', 3, 41, NULL, 0, 'no-user-agent', 10, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (45, '2022-09-25 12:57:20.022', false, '2022-09-25 12:57:20.318', 2, 42, NULL, 0, 'no-user-agent', 10, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (34, '2022-09-23 05:18:17.669', false, '2022-09-30 16:43:40.445', 2, 6, NULL, 0, 'no-user-agent', 9, 3, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (43, '2022-09-25 12:57:18.164', false, '2022-09-25 12:57:18.164', 2, 37, NULL, 0, 'no-user-agent', 10, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (1, '2022-08-26 23:26:05.28', false, '2022-08-26 23:26:05.28', 0, 0, '评论测试 <script>alert(/XSS/)</script>', 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 6, 0, 0, 1);
INSERT INTO public.article_comment VALUES (15, '2022-09-22 19:34:51.037', false, '2022-12-04 19:56:02.078', 2, 1, NULL, 0, 'no-user-agent', 9, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (129, '2022-09-30 22:29:10.726', false, '2022-09-30 22:29:10.726', 0, 1, '回复@Sumi：二级回复@通知测试', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 20, 0, 4, 93, 5);
INSERT INTO public.article_comment VALUES (1599371961635438592, '2022-12-04 19:56:05.205', false, '2022-12-04 19:56:05.205', 2, 129, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 9, 3, 0, 20, 0, 0);
INSERT INTO public.article_comment VALUES (131, '2022-09-30 22:34:44.679', false, '2022-09-30 22:34:44.679', 0, 1, '回复@Sumi：二级回复@通知测试 3！！！', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 20, 0, 4, 117, 7);
INSERT INTO public.article_comment VALUES (1599371988663533568, '2022-12-04 19:56:11.649', false, '2022-12-04 19:56:11.649', 2, 131, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 9, 3, 0, 20, 0, 0);
INSERT INTO public.article_comment VALUES (76, '2022-09-30 12:50:16.772', false, '2022-09-30 12:50:16.772', 0, 0, 'www', 2, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 0, 0, 10);
INSERT INTO public.article_comment VALUES (1600360363956633600, '2022-12-07 13:23:38.682', false, '2022-12-07 13:23:38.682', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 114, 3, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1601528841115795456, '2022-12-10 18:46:45.347', false, '2022-12-10 18:46:45.347', 0, 0, 'co', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 9, 3, 0, 0, 0, 22);
INSERT INTO public.article_comment VALUES (1602878645771173888, '2022-12-14 12:10:23.869', true, '2022-12-14 12:11:00.042', 0, 0, '1', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1599743283574079488, 3, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (1602878756307861504, '2022-12-14 12:10:50.208', true, '2022-12-14 12:11:18.134', 0, 1602878729573367808, '3', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1599743283574079488, 3, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (1602878729573367808, '2022-12-14 12:10:43.834', true, '2022-12-14 12:11:18.154', 0, 0, '2', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1599743283574079488, 3, 0, 0, 0, 2);
INSERT INTO public.article_comment VALUES (1602885970208751616, '2022-12-14 12:39:30.155', false, '2022-12-14 12:39:30.155', 0, 0, 'a', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1599743283574079488, 3, 0, 0, 0, 4);
INSERT INTO public.article_comment VALUES (26, '2022-09-23 03:37:02.997', false, '2022-09-23 03:37:02.997', 0, 2, '评论测试22', 2, 'no-user-agent', 9, 3, 0, 3, 0, 7);
INSERT INTO public.article_comment VALUES (1580405288891056128, '2022-10-13 11:49:18.04', true, '2022-10-24 15:30:14.616', 2, 94, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 9, 20, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (78, '2022-09-30 12:54:44.521', false, '2022-09-30 12:54:44.521', 0, 0, 'eee', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 0, 0, 0, 12);
INSERT INTO public.article_comment VALUES (126, '2022-09-30 22:07:20.853', false, '2022-09-30 22:07:20.853', 0, 0, '2', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 0, 0, 0, 15);
INSERT INTO public.article_comment VALUES (38, '2022-09-23 13:30:17.792', false, '2022-09-23 13:30:17.792', 0, 0, '评论test2', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 10, 3, 0, 0, 0, 2);
INSERT INTO public.article_comment VALUES (23, '2022-09-23 03:26:34.165', false, '2022-09-23 03:26:34.165', 0, 0, '评论测试～', 2, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 0, 0, 0, 5);
INSERT INTO public.article_comment VALUES (49, '2022-09-25 13:49:06.897', false, '2022-09-25 13:49:06.897', 0, 0, '111', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 12, 3, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (52, '2022-09-25 14:39:19.923', false, '2022-09-25 14:50:57.833', 2, 51, NULL, 0, 'no-user-agent', 11, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (22, '2022-09-23 03:18:41.609', false, '2022-09-23 03:18:41.609', 0, 0, '前端回复测试哈', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 0, 0, 0, 4);
INSERT INTO public.article_comment VALUES (74, '2022-09-30 12:43:17.977', false, '2022-09-30 12:43:17.977', 0, 0, 'kkk', 2, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 0, 0, 8);
INSERT INTO public.article_comment VALUES (20, '2022-09-22 21:34:02.424', false, '2022-09-30 16:42:37.415', 2, 4, NULL, 0, 'no-user-agent', 9, 3, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (30, '2022-09-23 03:45:10.883', false, '2022-09-23 03:45:18.509', 3, 27, NULL, 0, 'no-user-agent', 9, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (51, '2022-09-25 14:39:17.566', false, '2022-09-25 14:39:17.566', 0, 0, 'pinia Test', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 11, 3, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (36, '2022-09-23 13:30:09.917', false, '2022-09-23 13:30:09.917', 0, 0, '评论test1', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 10, 3, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (71, '2022-09-26 19:11:12.911', false, '2022-09-26 19:11:12.911', 0, 0, '33', 2, 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1 Edg/107.0.0.0', 9, 3, 0, 0, 0, 7);
INSERT INTO public.article_comment VALUES (8, '2022-08-26 23:33:42.794', false, '2022-08-26 23:33:42.794', 0, 0, '评论测试', 36, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 2, 0, 0, 3);
INSERT INTO public.article_comment VALUES (154, '2022-10-09 19:44:42.528', false, '2022-10-09 19:44:42.528', 0, 74, 'qqq', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 3, 0, 4, 0, 1);
INSERT INTO public.article_comment VALUES (137, '2022-09-30 22:51:10.471', false, '2022-09-30 22:51:10.471', 0, 1, '回复@Sumi：回复Vuetify 是一个纯手工精心打造的 Material 样式的 Vue UI 组件库。测试！', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 20, 0, 4, 117, 11);
INSERT INTO public.article_comment VALUES (16, '2022-09-22 19:45:14.991', false, '2022-09-30 16:42:19.671', 2, 2, NULL, 0, 'no-user-agent', 9, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (1599371983479373824, '2022-12-04 19:56:10.414', false, '2022-12-04 19:56:10.414', 2, 130, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 9, 3, 0, 20, 0, 0);
INSERT INTO public.article_comment VALUES (17, '2022-09-22 21:14:58.569', false, '2022-09-22 23:46:16.208', 2, 8, NULL, 0, 'no-user-agent', 9, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (31, '2022-09-23 03:45:13.628', false, '2022-09-23 03:45:13.628', 2, 29, NULL, 0, 'no-user-agent', 9, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (161, '2022-10-09 22:25:01.845', false, '2022-10-09 22:25:01.845', 0, 2, '回复@Sumi：sss', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 3, 0, 4, 147, 10);
INSERT INTO public.article_comment VALUES (25, '2022-09-23 03:36:50.736', false, '2022-09-24 05:16:29.396', 3, 24, NULL, 0, 'no-user-agent', 9, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (1598575839375523840, '2022-12-02 15:12:34.888', false, '2022-12-02 15:12:34.888', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64; rv:106.0) Gecko/20100101 Firefox/106.0', 9, 1597170473374842881, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (39, '2022-09-23 13:33:24.366', false, '2022-09-25 14:01:33.162', 2, 38, NULL, 0, 'no-user-agent', 10, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (32, '2022-09-23 03:45:20.852', false, '2022-09-23 03:45:20.852', 2, 22, NULL, 0, 'no-user-agent', 9, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (33, '2022-09-23 03:45:21.908', false, '2022-09-24 16:34:08.355', 2, 23, NULL, 0, 'no-user-agent', 9, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (40, '2022-09-23 13:33:32.752', false, '2022-09-25 16:11:42.791', 2, 36, NULL, 0, 'no-user-agent', 10, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (160, '2022-10-09 22:23:21.407', false, '2022-10-09 22:23:21.407', 0, 1, '回复@Megumin：aa', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 3, 0, 5, 143, 18);
INSERT INTO public.article_comment VALUES (152, '2022-10-09 19:43:18.953', false, '2022-10-09 19:43:18.953', 0, 1, '回复@Megumin：ttt', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 3, 0, 5, 143, 15);
INSERT INTO public.article_comment VALUES (135, '2022-09-30 22:49:12.768', false, '2022-09-30 22:49:12.768', 0, 51, '回复@Sumi：二级回复@通知测试 2', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 11, 20, 0, 4, 125, 7);
INSERT INTO public.article_comment VALUES (1597186148424220672, '2022-11-28 19:10:26.726', false, '2022-11-28 19:10:27.949', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 9, 1597170473374842880, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1598575884283936768, '2022-12-02 15:12:45.574', false, '2022-12-02 15:12:45.574', 0, 0, '注销测试', 0, 'Mozilla/5.0 (X11; Linux x86_64; rv:106.0) Gecko/20100101 Firefox/106.0', 9, 1597170473374842881, 0, 0, 0, 21);
INSERT INTO public.article_comment VALUES (1600385104088137728, '2022-12-07 15:01:57.209', false, '2022-12-07 15:01:57.209', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 1580605648092004352, 4, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1601528888960221184, '2022-12-10 18:46:56.753', false, '2022-12-10 18:46:56.753', 0, 1601528841115795456, 'co', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 9, 3, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (149, '2022-10-02 19:52:32.199', false, '2022-10-02 19:52:32.199', 0, 36, '回复@Dwsy：111alert(&quot;123&quot;)222', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 10, 4, 0, 3, 48, 8);
INSERT INTO public.article_comment VALUES (148, '2022-10-02 19:46:27.217', false, '2022-10-02 19:46:27.217', 0, 36, '回复@Dwsy： <script>alert("123")</script>', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 10, 20, 0, 3, 37, 7);
INSERT INTO public.article_comment VALUES (147, '2022-10-02 19:39:38.23', false, '2022-10-02 19:39:38.23', 0, 2, '回复@Sumi：评论测试 <script>alert("123")</script>
', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 4, 146, 9);
INSERT INTO public.article_comment VALUES (133, '2022-09-30 22:47:39.952', false, '2022-09-30 22:47:39.952', 0, 1, '回复@EMT：二级回复@通知测试 2', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 20, 0, 20, 129, 9);
INSERT INTO public.article_comment VALUES (157, '2022-10-09 21:44:41.304', false, '2022-10-09 21:44:41.304', 0, 1, '回复@Dwsy：哈哈哈', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 3, 0, 3, 153, 17);
INSERT INTO public.article_comment VALUES (151, '2022-10-09 19:41:35.796', false, '2022-10-09 19:41:35.796', 0, 1, '测试', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 3, 0, 3, 0, 14);
INSERT INTO public.article_comment VALUES (95, '2022-09-30 19:14:59.438', false, '2022-09-30 19:14:59.438', 0, 1, '操作复数
有三个函数可以组装或者分解复数。内置函数 complex 会构造一个复数，real 和 imag 会分解出复数的实部和虚部。

complex(realPart, imaginaryPart floatT) complexT
real(complexT) floatT
imag(complexT) floatT
参数的类型和返回值类型是对应的。对于 complex，两个参数必须是相同的浮点类型，并返回由相同浮点数组成的复数类型。complex64 是 float32 对应的类型，complex128 是 float64 对应的参数类型。如果参数是一个无类型常量，它会转换成另一个参数的类型。如果两个参数都是无类型常量，他们必须实数或者虚数部分为零，并且它会返回一个无类型的复数常量。

real 和 imag 函数和 complex 正好相反的，所以对于一个值复数类型 Z 的值 z，z==Z(complex(real(z),imag(z)))。

如果这么操作都是常量，那么返回的值也是常量。

var a = complex(2, -2)             // complex128
const b = complex(1.0, -1.4)       // untyped complex constant 1 - 1.4i
x := float32(math.Cos(math.Pi/2))  // float32
var c64 = complex(5, -x)           // complex64
var s uint = complex(1, 0)         // untyped complex constant 1 + 0i can be converted to uint
_ = complex(1, 2<~
', 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 3);
INSERT INTO public.article_comment VALUES (1598575931805401088, '2022-12-02 15:12:56.904', false, '2022-12-02 15:12:56.904', 0, 1598575884283936768, '注销测试', 0, 'Mozilla/5.0 (X11; Linux x86_64; rv:106.0) Gecko/20100101 Firefox/106.0', 9, 1597170473374842881, 0, 1597170473374842881, 0, 1);
INSERT INTO public.article_comment VALUES (41, '2022-09-25 12:48:29.72', false, '2022-09-25 12:48:29.72', 0, 36, '123', 0, 'no-user-agent', 10, 3, 1, 3, 0, 2);
INSERT INTO public.article_comment VALUES (146, '2022-10-02 19:38:39.907', false, '2022-10-02 19:38:39.907', 0, 2, '回复@Dwsy：评论测试 <script>alert(/XSS/)</script>', 2, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, -1, 3, 7, 8);
INSERT INTO public.article_comment VALUES (158, '2022-10-09 21:58:24.905', false, '2022-10-09 21:58:24.905', 0, 74, '回复@Dwsy：push test', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 3, 0, 3, 154, 2);
INSERT INTO public.article_comment VALUES (1599413960757477376, '2022-12-04 22:42:58.576', false, '2022-12-04 22:42:58.576', 2, 28, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 9, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (144, '2022-09-30 23:17:19.847', false, '2022-09-30 23:17:19.847', 2, 143, NULL, 0, 'Mozilla/5.0 (iPad; CPU OS 16_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Mobile/15E148 Safari/604.1', 9, 5, 0, 5, 0, 0);
INSERT INTO public.article_comment VALUES (145, '2022-09-30 23:17:20.905', false, '2022-09-30 23:17:20.905', 2, 142, NULL, 0, 'Mozilla/5.0 (iPad; CPU OS 16_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Mobile/15E148 Safari/604.1', 9, 5, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (1601535027915522048, '2022-12-10 19:11:20.396', false, '2022-12-10 19:15:47.93', 3, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1599428443726938112, 3, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1602878932120502272, '2022-12-14 12:11:32.126', false, '2022-12-14 12:11:32.126', 0, 1602878919042662400, '4', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1599743283574079488, 3, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (1602886145597767680, '2022-12-14 12:40:11.952', false, '2022-12-14 12:40:11.952', 0, 0, 'a', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1599743283574079488, 3, 0, 0, 0, 5);
INSERT INTO public.article_comment VALUES (1649256579016425472, '2023-04-21 11:39:44.817', false, '2023-04-21 11:39:44.817', 0, 0, '123', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', 1599374122381475840, 4, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (150, '2022-10-02 19:53:18.856', false, '2022-10-02 19:53:18.856', 2, 120, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 11, 4, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (155, '2022-10-09 21:10:13.941', false, '2022-10-09 21:10:14.985', 2, 146, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 3, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (156, '2022-10-09 21:44:31.015', false, '2022-10-11 21:55:27.096', 2, 95, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 3, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (1649256587979653120, '2023-04-21 11:39:46.937', false, '2023-04-21 11:39:46.937', 0, 1649256579016425472, '312', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', 1599374122381475840, 4, 0, 4, 0, 1);
INSERT INTO public.article_comment VALUES (1602878919042662400, '2022-12-14 12:11:29.008', false, '2022-12-14 12:11:29.008', 0, 0, '3', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1599743283574079488, 3, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (104, '2022-09-30 19:37:54.669', false, '2022-09-30 19:37:54.669', 0, 0, 'www', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 17, 4, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (24, '2022-09-23 03:36:11.762', false, '2022-09-23 03:36:11.762', 0, 2, '123', 0, 'no-user-agent', 9, 3, 1, 3, 0, 6);
INSERT INTO public.article_comment VALUES (5, '2022-08-26 23:33:42.789', false, '2022-08-26 23:33:42.789', 0, 2, '评论测试', 2, 'user-agent', 9, 3, 0, 0, 0, 3);
INSERT INTO public.article_comment VALUES (142, '2022-09-30 22:52:28.846', false, '2022-09-30 22:52:28.846', 0, 1, '回复@EMT：emt!', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 20, 137, 12);
INSERT INTO public.article_comment VALUES (153, '2022-10-09 19:44:29.204', false, '2022-10-09 19:44:29.204', 0, 1, '回复@Megumin：order', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 3, 0, 5, 143, 16);
INSERT INTO public.article_comment VALUES (128, '2022-09-30 22:07:30.463', false, '2022-09-30 22:07:30.463', 0, 126, '回复@Dwsy：222', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 0, 3, 127, 2);
INSERT INTO public.article_comment VALUES (27, '2022-09-23 03:40:42.095', false, '2022-09-23 03:40:42.095', 0, 23, '评论测试～评论测试～评论测试～', 0, 'no-user-agent', 9, 3, 1, 3, 0, 1);
INSERT INTO public.article_comment VALUES (6, '2022-08-26 23:33:42.791', false, '2022-08-26 23:33:42.791', 0, 2, '评论测试', 4, 'user-agent', 9, 4, 2, 0, 0, 4);
INSERT INTO public.article_comment VALUES (48, '2022-09-25 12:58:21.824', false, '2022-09-25 12:58:21.824', 0, 36, '123', 1, 'no-user-agent', 10, 3, 0, 3, 0, 6);
INSERT INTO public.article_comment VALUES (163, '2022-10-09 22:30:32.03', false, '2022-10-09 22:30:32.03', 0, 51, '回复@Sumi：www', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 11, 3, 0, 4, 120, 8);
INSERT INTO public.article_comment VALUES (136, '2022-09-30 22:49:40.702', false, '2022-09-30 22:49:40.702', 0, 1, '回复@Sumi：二级回复@通知测试 2', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 20, 0, 4, 117, 10);
INSERT INTO public.article_comment VALUES (162, '2022-10-09 22:29:14.521', false, '2022-10-09 22:29:14.521', 0, 1, '回复@EMT：eee', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 3, 0, 20, 133, 19);
INSERT INTO public.article_comment VALUES (124, '2022-09-30 21:04:45.622', false, '2022-09-30 21:04:45.622', 0, 51, 'ddd', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 11, 4, 0, 3, 0, 4);
INSERT INTO public.article_comment VALUES (132, '2022-09-30 22:47:03.029', false, '2022-09-30 22:47:03.029', 0, 1, '回复@EMT：回复 （回复 二级评论）文本处理测试 4', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 20, 0, 20, 131, 8);
INSERT INTO public.article_comment VALUES (134, '2022-09-30 22:48:59.542', false, '2022-09-30 22:48:59.542', 0, 51, '回复@Sumi：二级回复@通知测试 2', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 11, 20, 0, 4, 120, 6);
INSERT INTO public.article_comment VALUES (143, '2022-09-30 23:17:08.346', false, '2022-09-30 23:17:08.346', 0, 1, '回复@Sumi：好', 1, 'Mozilla/5.0 (iPad; CPU OS 16_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Mobile/15E148 Safari/604.1', 9, 5, 0, 4, 93, 13);
INSERT INTO public.article_comment VALUES (164, '2022-10-10 13:28:37.522', false, '2022-10-10 13:28:37.522', 0, 1, '回复@Dwsy：www', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 20, 0, 3, 162, 20);
INSERT INTO public.article_comment VALUES (127, '2022-09-30 22:07:27.152', false, '2022-09-30 22:07:27.152', 0, 126, '22', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (42, '2022-09-25 12:49:07.943', false, '2022-09-25 12:49:07.943', 0, 36, '123', 1, 'no-user-agent', 10, 3, 0, 3, 0, 3);
INSERT INTO public.article_comment VALUES (4, '2022-08-26 23:33:42.729', false, '2022-08-26 23:33:42.729', 0, 2, '评论测试', 112, 'user-agent', 9, 4, 22, 0, 0, 2);
INSERT INTO public.article_comment VALUES (159, '2022-10-09 22:05:06.167', false, '2022-10-09 22:05:06.167', 0, 74, '回复@Dwsy：push test', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 3, 0, 3, 154, 3);
INSERT INTO public.article_comment VALUES (117, '2022-09-30 19:39:50.366', false, '2022-09-30 19:39:50.366', 0, 1, 'Vuetify 是一个纯手工精心打造的 Material 样式的 Vue UI 组件库。 不需要任何设计技能 — 创建叹为观止的应用程序所需的一切都触手可及。', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 4);
INSERT INTO public.article_comment VALUES (21, '2022-09-22 21:35:09.506', false, '2022-09-30 16:43:52.939', 2, 7, NULL, 0, 'no-user-agent', 9, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (111, '2022-09-30 19:38:17.676', false, '2022-09-30 19:38:17.676', 2, 26, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (180, '2022-10-12 12:08:37.416', false, '2022-10-12 12:08:37.416', 0, 38, 'commentSerialNumber Test 1', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 10, 4, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (105, '2022-09-30 19:38:04.614', false, '2022-09-30 19:38:04.614', 2, 71, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (181, '2022-10-12 12:08:43.606', false, '2022-10-12 12:08:43.606', 0, 38, 'commentSerialNumber Test 2', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 10, 4, 0, 3, 0, 2);
INSERT INTO public.article_comment VALUES (185, '2022-10-12 12:15:19.157', false, '2022-10-12 12:15:19.157', 0, 38, '回复@Sumi：commentSerialNumber Test 3', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 10, 4, 0, 4, 181, 3);
INSERT INTO public.article_comment VALUES (1583856646667370496, '2022-10-23 00:23:45.856', false, '2022-10-23 00:23:45.856', 0, 1583854448885628928, '333', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 1582308065313554432, 3, 0, 3, 0, 3);
INSERT INTO public.article_comment VALUES (1580806240114573312, '2022-10-14 14:22:32.26', false, '2022-10-14 14:28:16.123', 4, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 17, 20, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1583858753478852608, '2022-10-23 00:32:08.159', false, '2022-10-23 00:32:08.159', 0, 0, '123', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 9, 3, 0, 0, 0, 20);
INSERT INTO public.article_comment VALUES (130, '2022-09-30 22:30:29.989', false, '2022-09-30 22:30:29.989', 0, 1, '回复@Sumi：回复@Sumi：二级回复@通知测试 2', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1387.2', 9, 20, 0, 4, 117, 6);
INSERT INTO public.article_comment VALUES (174, '2022-10-12 12:00:16.522', false, '2022-10-12 12:00:16.522', 0, 0, 'commentSerialNumber Test 1', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 114, 4, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (175, '2022-10-12 12:00:23.863', false, '2022-10-12 12:00:23.863', 0, 0, 'commentSerialNumber Test 2', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 114, 4, 0, 0, 0, 2);
INSERT INTO public.article_comment VALUES (176, '2022-10-12 12:00:27.896', false, '2022-10-12 12:00:27.896', 0, 0, 'commentSerialNumber Test 3', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 114, 4, 0, 0, 0, 3);
INSERT INTO public.article_comment VALUES (177, '2022-10-12 12:00:30.935', false, '2022-10-12 12:00:30.935', 0, 0, 'commentSerialNumber Test 4', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 114, 4, 0, 0, 0, 4);
INSERT INTO public.article_comment VALUES (182, '2022-10-12 12:08:55.446', false, '2022-10-12 12:08:55.446', 0, 36, '回复@EMT：commentSerialNumber Test 9', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 10, 4, 0, 20, 148, 9);
INSERT INTO public.article_comment VALUES (186, '2022-10-12 12:17:06.315', false, '2022-10-12 12:17:06.315', 0, 36, '回复@Sumi：12', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 10, 4, 0, 4, 149, 12);
INSERT INTO public.article_comment VALUES (187, '2022-10-12 12:17:24.185', false, '2022-10-12 12:17:24.185', 0, 36, '回复@Sumi：13', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 10, 4, 0, 4, 149, 13);
INSERT INTO public.article_comment VALUES (1580789233252040704, '2022-10-14 13:14:57.513', false, '2022-10-14 13:14:57.513', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 1580788796385918976, 20, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1581283680981090304, '2022-10-15 21:59:43.048', false, '2022-10-15 21:59:43.048', 2, 158, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (1583121913117409280, '2022-10-20 23:44:11.731', false, '2022-10-20 23:44:11.731', 0, 0, 'www', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1402.2', 16, 3, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (1583854448885628928, '2022-10-23 00:15:01.868', false, '2022-10-23 00:15:01.868', 0, 0, 'RR', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 1582308065313554432, 3, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (1583857186344271872, '2022-10-23 00:25:54.542', false, '2022-10-23 00:25:54.542', 0, 1, '213', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 9, 3, 0, 3, 0, 21);
INSERT INTO public.article_comment VALUES (1583858785166819328, '2022-10-23 00:32:15.715', false, '2022-10-23 00:32:15.715', 0, 1, '456', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 9, 3, 0, 3, 0, 22);
INSERT INTO public.article_comment VALUES (1584435454520852480, '2022-10-24 14:43:44.402', true, '2022-10-24 15:17:10.801', 2, 1584432942573158400, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 93, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (1584433268663517184, '2022-10-24 14:35:03.253', true, '2022-10-24 15:17:18.523', 0, 1584433253673074688, 'del1231233123', 2, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 93, 3, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (1584433253673074688, '2022-10-24 14:34:59.679', true, '2022-10-24 15:17:18.534', 0, 0, 'del1123', 2, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 93, 3, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (1602887147193368576, '2022-12-14 12:44:10.751', false, '2022-12-14 12:44:10.751', 0, 0, '123', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1598952212040515584, 3, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (1584422253892730880, '2022-10-24 13:51:17.127', true, '2022-10-24 15:18:01.442', 0, 1584422217242902528, '312', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 10, 3, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (1598575962662895616, '2022-12-02 15:13:04.261', false, '2022-12-02 15:13:04.261', 0, 8, '注销测试', 0, 'Mozilla/5.0 (X11; Linux x86_64; rv:106.0) Gecko/20100101 Firefox/106.0', 9, 1597170473374842881, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (1584435449835814912, '2022-10-24 14:43:43.286', true, '2022-10-24 15:17:10.76', 2, 1584432915855441920, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 93, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (1584435451769389056, '2022-10-24 14:43:43.746', true, '2022-10-24 15:17:10.791', 2, 1584432933492490240, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 93, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (1599413985357070336, '2022-12-04 22:43:04.441', false, '2022-12-04 22:43:04.441', 2, 76, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 9, 3, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (1602881404239085568, '2022-12-14 12:21:21.524', false, '2022-12-14 12:21:21.524', 0, 0, '123', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1599743283574079488, 3, 0, 0, 0, 2);
INSERT INTO public.article_comment VALUES (1604749277345611776, '2022-12-19 16:03:37.176', false, '2022-12-19 16:05:05.971', 3, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', 15, 3, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1604366718874943488, '2022-12-18 14:43:28.142', false, '2023-03-03 23:04:45.987', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', 1599743283574079488, 3, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1649270113548894208, '2023-04-21 12:33:31.7', false, '2023-04-21 12:33:31.7', 2, 1602878919042662400, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', 1599743283574079488, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (106, '2022-09-30 19:38:08.15', false, '2022-09-30 19:38:08.15', 2, 28, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (1649270122008805376, '2023-04-21 12:33:33.701', false, '2023-04-21 12:33:33.701', 0, 1602878919042662400, '123', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', 1599743283574079488, 3, 0, 3, 0, 4);
INSERT INTO public.article_comment VALUES (1584432923153530880, '2022-10-24 14:33:40.877', true, '2022-10-24 15:17:17.633', 0, 0, 'del', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 93, 3, 0, 0, 0, 2);
INSERT INTO public.article_comment VALUES (1602887769628082176, '2022-12-14 12:46:39.151', false, '2022-12-14 12:46:39.151', 0, 1602887725759856640, 'asd', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1598952212040515584, 3, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (1602887787609063424, '2022-12-14 12:46:43.439', false, '2022-12-14 12:46:43.439', 0, 1602887725759856640, '回复@Dwsy：zxc', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1598952212040515584, 3, 0, 3, 1602887769628082176, 2);
INSERT INTO public.article_comment VALUES (29, '2022-09-23 03:45:01.435', false, '2022-09-23 03:45:01.435', 0, 23, '子评论测试。', 2, 'no-user-agent', 9, 3, 0, 3, 0, 2);
INSERT INTO public.article_comment VALUES (178, '2022-10-12 12:01:09.708', false, '2022-10-12 12:01:09.708', 0, 0, 'commentSerialNumber Test 16', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 9, 4, 0, 0, 0, 16);
INSERT INTO public.article_comment VALUES (183, '2022-10-12 12:12:59.565', false, '2022-10-12 12:12:59.565', 0, 36, '回复@Sumi：commentSerialNumber Test 10', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 10, 4, 0, 4, 182, 10);
INSERT INTO public.article_comment VALUES (1580405270465478656, '2022-10-13 11:49:13.647', false, '2022-10-13 11:49:13.647', 2, 93, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 9, 20, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (1580790046661804032, '2022-10-14 13:18:11.44', false, '2022-10-14 13:18:11.44', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 1580605648092004352, 20, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1602887823667494912, '2022-12-14 12:46:52.035', false, '2022-12-14 12:46:52.035', 0, 1602887725759856640, '回复@Dwsy：rty', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1598952212040515584, 3, 0, 3, 1602887787609063424, 3);
INSERT INTO public.article_comment VALUES (1581489743797944320, '2022-10-16 11:38:32.237', false, '2022-10-16 11:38:32.237', 2, 1581489737602957312, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 1580605959804289024, 4, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (1581489756628320256, '2022-10-16 11:38:35.296', false, '2022-10-16 11:38:35.296', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 1580605959804289024, 4, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1583856278285844480, '2022-10-23 00:22:18.046', false, '2022-10-23 00:22:18.046', 0, 1583854448885628928, 'EE', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 1582308065313554432, 3, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (1583856311148216320, '2022-10-23 00:22:25.862', false, '2022-10-23 00:22:25.862', 0, 1583854448885628928, '回复@Dwsy：MM', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 1582308065313554432, 3, 0, 3, 1583856278285844480, 2);
INSERT INTO public.article_comment VALUES (1583856320979664896, '2022-10-23 00:22:28.206', false, '2022-10-23 00:22:28.206', 0, 0, 'www', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 1582308065313554432, 3, 0, 0, 0, 2);
INSERT INTO public.article_comment VALUES (1583857309858136064, '2022-10-23 00:26:23.974', false, '2022-10-23 00:26:23.974', 0, 0, 'articleFieldRepository.commentNumIncrement(articleFieldId, 1);', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 9, 3, 0, 0, 0, 19);
INSERT INTO public.article_comment VALUES (1584432933492490240, '2022-10-24 14:33:43.342', true, '2022-10-24 15:17:10.796', 0, 1584432915855441920, 'del', 2, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 93, 3, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (1584432942573158400, '2022-10-24 14:33:45.507', true, '2022-10-24 15:17:10.806', 0, 1584432915855441920, '回复@Dwsy：del', 2, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 93, 3, 0, 3, 1584432933492490240, 2);
INSERT INTO public.article_comment VALUES (1604440241744117760, '2022-12-18 19:35:37.361', false, '2022-12-18 19:35:37.361', 0, 0, '1', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', 11, 1597170473374842880, 0, 0, 0, 2);
INSERT INTO public.article_comment VALUES (1584432915855441920, '2022-10-24 14:33:39.151', true, '2022-10-24 15:17:10.811', 0, 0, 'del', 2, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 93, 3, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (1584433022709530624, '2022-10-24 14:34:04.613', true, '2022-10-24 15:17:17.611', 0, 1584432923153530880, 'del', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 93, 3, 0, 3, 0, 2);
INSERT INTO public.article_comment VALUES (1604440248576638976, '2022-12-18 19:35:38.976', false, '2022-12-18 19:35:38.976', 0, 0, '2', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', 11, 1597170473374842880, 0, 0, 0, 3);
INSERT INTO public.article_comment VALUES (1584433079890477056, '2022-10-24 14:34:18.246', true, '2022-10-24 15:17:17.624', 0, 1584432923153530880, 'del123', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 93, 3, 0, 3, 0, 3);
INSERT INTO public.article_comment VALUES (1604440263911014400, '2022-12-18 19:35:42.632', false, '2022-12-18 19:35:42.632', 0, 1604440248576638976, '3', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', 11, 1597170473374842880, 0, 1597170473374842880, 0, 1);
INSERT INTO public.article_comment VALUES (1584433009925292032, '2022-10-24 14:34:01.565', true, '2022-10-24 15:17:17.629', 0, 1584432923153530880, 'del', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 93, 3, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (1584422217242902528, '2022-10-24 13:51:08.408', true, '2022-10-24 15:18:01.446', 0, 0, '123', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 10, 3, 0, 0, 0, 7);
INSERT INTO public.article_comment VALUES (19, '2022-09-22 21:31:32.572', false, '2022-09-30 16:42:24.657', 2, 3, NULL, 0, 'no-user-agent', 9, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (1581489737602957312, '2022-10-16 11:38:30.76', false, '2022-10-16 11:38:30.76', 0, 0, 'www', 2, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 1580605959804289024, 4, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (28, '2022-09-23 03:41:10.986', false, '2022-09-23 03:41:10.986', 0, 0, '？？？', 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 0, 0, 0, 6);
INSERT INTO public.article_comment VALUES (1602882588966387712, '2022-12-14 12:26:03.986', false, '2022-12-14 12:26:03.986', 0, 1602878919042662400, '回复@Dwsy：5', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1599743283574079488, 3, 0, 3, 1602878932120502272, 2);
INSERT INTO public.article_comment VALUES (1602887725759856640, '2022-12-14 12:46:28.692', false, '2022-12-14 12:46:28.692', 0, 0, 'qwe', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1598952212040515584, 3, 0, 0, 0, 2);
INSERT INTO public.article_comment VALUES (1604750798820999168, '2022-12-19 16:09:39.924', false, '2022-12-19 16:09:39.924', 0, 0, 'https://segmentfault.com/a/1190000041717210', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', 15, 3, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (172, '2022-10-11 21:37:02.638', true, '2022-10-24 15:30:14.605', 2, 94, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1402.2', 9, 3, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (1602883037001940992, '2022-12-14 12:27:50.805', true, '2022-12-14 12:54:02.969', 0, 0, '1', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1599743283574079488, 3, 0, 0, 0, 3);
INSERT INTO public.article_comment VALUES (1602954153137537024, '2022-12-14 17:10:26.229', false, '2022-12-14 17:10:26.229', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 1599743283574079488, 5, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1602954187816042496, '2022-12-14 17:10:34.481', false, '2022-12-14 17:10:34.481', 0, 0, '123', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 1599743283574079488, 5, 0, 0, 0, 6);
INSERT INTO public.article_comment VALUES (1604440278062596096, '2022-12-18 19:35:46.006', false, '2022-12-18 19:35:46.006', 0, 1604440248576638976, '回复@Dwsy_57082013：4', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', 11, 1597170473374842880, 0, 1597170473374842880, 1604440263911014400, 2);
INSERT INTO public.article_comment VALUES (140, '2022-09-30 22:52:21.01', false, '2022-09-30 22:52:21.01', 2, 136, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 20, 0, 0);
INSERT INTO public.article_comment VALUES (141, '2022-09-30 22:52:21.604', false, '2022-09-30 22:52:21.604', 2, 133, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 20, 0, 0);
INSERT INTO public.article_comment VALUES (1604750880035307520, '2022-12-19 16:09:59.288', false, '2022-12-19 16:09:59.288', 3, 1604750798820999168, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', 15, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (139, '2022-09-30 22:52:18.549', false, '2022-09-30 22:55:35.723', 2, 137, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 20, 0, 0);
INSERT INTO public.article_comment VALUES (138, '2022-09-30 22:52:15.43', false, '2022-09-30 22:52:15.43', 2, 93, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (173, '2022-10-11 21:37:04.509', false, '2022-10-11 21:37:04.509', 2, 93, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1402.2', 9, 3, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (167, '2022-10-10 16:55:40.002', false, '2022-10-10 16:55:40.002', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 10, 20, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (171, '2022-10-10 17:03:04.076', false, '2022-10-10 17:03:14.481', 2, 28, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 20, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (165, '2022-10-10 16:55:33.878', false, '2022-10-13 11:48:53.014', 2, 1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 20, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (166, '2022-10-10 16:55:35.182', false, '2022-10-14 14:20:24.969', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 20, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (169, '2022-10-10 17:03:01.417', false, '2022-10-10 17:03:01.417', 2, 74, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 20, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (170, '2022-10-10 17:03:03.186', false, '2022-10-10 17:03:03.186', 2, 71, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 20, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (84, '2022-09-30 13:03:38.995', false, '2022-09-30 16:02:05.3', 4, 79, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (92, '2022-09-30 16:43:58.231', false, '2022-10-11 21:38:22.626', 2, 74, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (94, '2022-09-30 17:34:42.135', true, '2022-10-24 15:30:14.619', 0, 1, 'reply2', 2, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 2);
INSERT INTO public.article_comment VALUES (91, '2022-09-30 16:09:10.151', false, '2022-09-30 16:09:10.151', 2, 88, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 10, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (68, '2022-09-25 19:54:42.45', false, '2022-09-25 20:30:48.81', 3, 46, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1375.0', 10, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (69, '2022-09-25 19:54:43.064', false, '2022-09-25 19:54:43.064', 2, 47, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1375.0', 10, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (70, '2022-09-25 19:54:43.569', false, '2022-09-25 20:30:49.602', 3, 48, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1375.0', 10, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (90, '2022-09-30 16:02:05.997', false, '2022-09-30 16:02:05.997', 2, 89, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (67, '2022-09-25 18:48:35.349', false, '2022-09-25 18:48:41.286', 3, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1375.0', 12, 3, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (66, '2022-09-25 18:48:11.645', false, '2022-09-25 18:48:11.645', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1375.0', 11, 3, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (116, '2022-09-30 19:38:28.701', false, '2022-09-30 19:38:28.701', 2, 1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (85, '2022-09-30 15:21:53.268', false, '2022-09-30 15:21:53.268', 0, 0, 'hah', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 10, 3, 0, 0, 0, 3);
INSERT INTO public.article_comment VALUES (75, '2022-09-30 12:50:03.564', false, '2022-09-30 12:50:03.564', 0, 0, 'qqq', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 0, 0, 9);
INSERT INTO public.article_comment VALUES (87, '2022-09-30 15:42:49.224', false, '2022-09-30 15:42:49.224', 0, 0, 'hhh', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 10, 3, 0, 0, 0, 5);
INSERT INTO public.article_comment VALUES (88, '2022-09-30 15:56:48.589', false, '2022-09-30 15:56:48.589', 0, 0, 'fff', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 10, 3, 0, 0, 0, 6);
INSERT INTO public.article_comment VALUES (86, '2022-09-30 15:36:57.853', false, '2022-09-30 15:36:57.853', 0, 0, 'hhh', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 10, 3, 0, 0, 0, 4);
INSERT INTO public.article_comment VALUES (89, '2022-09-30 15:58:48.577', false, '2022-09-30 15:58:48.577', 0, 79, 'sss', 2, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 3, 0, 4, 0, 1);
INSERT INTO public.article_comment VALUES (93, '2022-09-30 16:56:32.102', false, '2022-09-30 16:56:32.102', 0, 1, 'reply', 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (65, '2022-09-25 18:48:08.607', false, '2022-12-10 18:57:20.214', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1375.0', 10, 3, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1602883746959196160, '2022-12-14 12:30:40.072', false, '2022-12-14 12:30:40.072', 0, 1602878919042662400, '回复@Dwsy：6', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1599743283574079488, 3, 0, 3, 1602878932120502272, 3);
INSERT INTO public.article_comment VALUES (1604789286270402560, '2022-12-19 18:42:36.048', false, '2022-12-19 18:42:36.048', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36', 1599743283574079488, 4, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1605868033731985408, '2022-12-22 18:09:09.497', false, '2022-12-22 18:09:09.497', 0, 0, '00', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', 1599743283574079488, 3, 0, 0, 0, 7);
INSERT INTO public.article_comment VALUES (64, '2022-09-25 18:48:03.738', false, '2023-04-14 20:42:34.352', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1375.0', 9, 3, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (1649244424699379712, '2023-04-21 10:51:27.002', false, '2023-04-21 10:51:27.002', 0, 0, '123', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', 1599743283574079488, 3, 0, 0, 0, 8);
INSERT INTO public.article_comment VALUES (1649244432102326272, '2023-04-21 10:51:28.75', false, '2023-04-21 10:51:28.75', 2, 1649244424699379712, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', 1599743283574079488, 3, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (115, '2022-09-30 19:38:26.69', false, '2022-09-30 19:38:26.69', 2, 95, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (112, '2022-09-30 19:38:20.377', false, '2022-09-30 19:38:20.377', 2, 6, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (113, '2022-09-30 19:38:22.959', false, '2022-09-30 19:38:22.959', 2, 4, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (114, '2022-09-30 19:38:25.66', false, '2022-09-30 19:38:25.66', 2, 2, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (100, '2022-09-30 19:15:24.661', false, '2022-09-30 19:15:24.661', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 16, 4, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (101, '2022-09-30 19:20:27.364', false, '2022-09-30 19:20:27.364', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 22, 4, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (122, '2022-09-30 21:03:47.741', false, '2022-09-30 21:03:47.741', 2, 120, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 11, 3, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (108, '2022-09-30 19:38:12.357', false, '2022-09-30 19:38:12.357', 2, 29, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (109, '2022-09-30 19:38:14.406', false, '2022-09-30 19:38:14.406', 2, 23, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (110, '2022-09-30 19:38:16.178', false, '2022-09-30 19:38:16.178', 2, 8, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (103, '2022-09-30 19:21:21.695', false, '2022-09-30 19:37:48.6', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 17, 4, 0, 0, 0, 0);
INSERT INTO public.article_comment VALUES (96, '2022-09-30 19:15:06.094', false, '2022-09-30 19:15:06.094', 2, 89, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (97, '2022-09-30 19:15:06.968', false, '2022-09-30 19:15:06.968', 2, 78, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (98, '2022-09-30 19:15:07.844', false, '2022-09-30 19:15:07.844', 2, 77, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (107, '2022-09-30 19:38:09.952', false, '2022-09-30 19:38:09.952', 2, 72, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 3, 0, 0);
INSERT INTO public.article_comment VALUES (123, '2022-09-30 21:04:11.338', false, '2022-09-30 21:04:11.338', 0, 51, 'ccc', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 11, 3, 0, 3, 0, 3);
INSERT INTO public.article_comment VALUES (79, '2022-09-30 12:56:28.386', false, '2022-09-30 12:56:28.386', 0, 0, 'rrr', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 0, 0, 13);
INSERT INTO public.article_comment VALUES (102, '2022-09-30 19:20:34.616', false, '2022-09-30 19:20:34.616', 0, 0, '111', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 22, 4, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (73, '2022-09-30 12:15:58.443', false, '2022-09-30 12:15:58.443', 0, 0, '1', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 101, 3, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (119, '2022-09-30 21:01:58.904', false, '2022-09-30 21:01:58.904', 0, 0, 'ttt', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 91, 4, 0, 0, 0, 1);
INSERT INTO public.article_comment VALUES (120, '2022-09-30 21:02:46.007', false, '2022-09-30 21:02:46.007', 0, 51, 'aaa', 2, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 11, 4, 0, 3, 0, 1);
INSERT INTO public.article_comment VALUES (121, '2022-09-30 21:03:46.23', false, '2022-09-30 21:03:46.23', 0, 51, 'bbb', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 11, 3, 0, 3, 0, 2);
INSERT INTO public.article_comment VALUES (72, '2022-09-27 12:53:54.923', false, '2022-09-27 12:53:54.923', 0, 23, '123', 1, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36 Edg/107.0.1375.0', 9, 3, 0, 3, 0, 3);
INSERT INTO public.article_comment VALUES (125, '2022-09-30 21:41:51.862', false, '2022-09-30 21:41:51.862', 0, 51, 'r b', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 11, 4, 0, 3, 0, 5);
INSERT INTO public.article_comment VALUES (1580405295899738112, '2022-10-13 11:49:19.71', false, '2022-10-13 11:49:19.71', 2, 95, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 9, 20, 0, 4, 0, 0);
INSERT INTO public.article_comment VALUES (179, '2022-10-12 12:01:38.472', false, '2022-10-12 12:01:38.472', 0, 0, 'commentSerialNumber Test 17', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 9, 4, 0, 0, 0, 17);
INSERT INTO public.article_comment VALUES (184, '2022-10-12 12:13:45.62', false, '2022-10-12 12:13:45.62', 0, 36, '回复@Sumi：commentSerialNumber Test 11', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 10, 4, 0, 4, 183, 11);
INSERT INTO public.article_comment VALUES (1580405330691489792, '2022-10-13 11:49:28.005', false, '2022-10-13 11:49:28.005', 0, 0, 'EE', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 9, 20, 0, 0, 0, 18);
INSERT INTO public.article_comment VALUES (1580405384173060096, '2022-10-13 11:49:40.756', false, '2022-10-13 11:49:40.756', 0, 1580405330691489792, 'MM', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 9, 20, 0, 20, 0, 1);
INSERT INTO public.article_comment VALUES (1580405396101660672, '2022-10-13 11:49:43.6', false, '2022-10-13 11:49:43.6', 0, 1580405330691489792, '回复@EMT：TT', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 9, 20, 0, 20, 1580405384173060096, 2);
INSERT INTO public.article_comment VALUES (1583856616090894336, '2022-10-23 00:23:38.566', false, '2022-10-23 00:23:38.566', 0, 0, '111', 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36', 1582308065313554432, 3, 0, 0, 0, 3);
INSERT INTO public.article_comment VALUES (99, '2022-09-30 19:15:19.086', false, '2022-10-16 11:23:47.519', 2, -1, NULL, 0, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 9, 4, 0, 0, 0, 0);


--
-- Data for Name: article_content; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.article_content VALUES (1580605648180084736, '2022-10-14 01:05:27.418', false, '2022-10-14 01:05:27.418', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>
<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', 'Nuxt 3 Minimal Starter
Look at the nuxt 3 documentation to learn more.
Setup
Make sure to install the dependencies:
# yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  
Development Server
npm run dev  
Production
Build the application for production:
npm run build  
Locally preview production build:
npm run preview  
Checkout the deployment documentation for more information.
', 1580605648092004352);
INSERT INTO public.article_content VALUES (7, '2022-08-27 05:29:03.948', false, '2022-10-21 00:59:31.413', '<p><img src="http://qiniu.dwsy.link/ddl/45e6449f341a4f9fa49a882b9aa473a8.webp?imageslim" alt="v2-027e12f21f01d129c636c425caa77ed7_720w.webp" align=right width="30%"></img></p>
<blockquote>
<p>0正常的 正常的 正常的 正常的 正常的 <code>test</code></p>
</blockquote>
<p><blockquote class="d-tip d-tip-share"><p class="mdi mdi-at">1这是灰色的短代码框，常用来引用资料什么的 <a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow">http://nuxt.localhost/article/editor/draft?id=16</a></p></blockquote></p>
<p><blockquote class="d-tip d-tip-warning"><p class="mdi mdi-exclamation-thick">2这是黄色的短代码框，常用来做提示，引起读者注意。 <code>test</code></p></blockquote></p>
<p><blockquote class="d-tip d-tip-error"><p class="mdi mdi-close">3这是红色的短代码框，用于严重警告什么的。 <code>test</code></p></blockquote></p>
<p><blockquote class="d-tip d-tip-info"><p class="mdi mdi-information-variant">4这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code></p></blockquote></p>
<p><blockquote class="d-tip d-tip-success"><p class="mdi mdi-check">5这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p></blockquote></p>
<p><blockquote class="d-tip d-tip-success"><p class="mdi mdi-check">5这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p></blockquote></p>
<p><blockquote class="d-tip d-tip-success"><p class="mdi mdi-check">5这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p></blockquote></p>
<p><blockquote class="d-tip d-tip-info"><p class="mdi mdi-information-variant">nfo:这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code></p></blockquote></p>
<p><blockquote class="d-tip d-tip-error"><p class="mdi mdi-close">这是红色的短代码框，用于严重警告什么的。 <code>test</code></p></blockquote></p>
', '<img src="http://qiniu.dwsy.link/ddl/45e6449f341a4f9fa49a882b9aa473a8.webp?imageslim" alt="v2-027e12f21f01d129c636c425caa77ed7_720w.webp" align=right width="30%"></img>
> 0正常的 正常的 正常的 正常的 正常的 `test`

> @1这是灰色的短代码框，常用来引用资料什么的 http://nuxt.localhost/article/editor/draft?id=16

> !2这是黄色的短代码框，常用来做提示，引起读者注意。 `test`

> x3这是红色的短代码框，用于严重警告什么的。 `test`

> i4这是浅蓝色的短代码框，用于显示一些信息。 `test`

> √5这是绿色的短代码框，显示一些推荐信息。 `test`

> good:5这是绿色的短代码框，显示一些推荐信息。 `test`

> right:5这是绿色的短代码框，显示一些推荐信息。 `test`

> info:这是浅蓝色的短代码框，用于显示一些信息。 `test`

> bad:这是红色的短代码框，用于严重警告什么的。 `test`', '

0正常的 正常的 正常的 正常的 正常的 test

1这是灰色的短代码框，常用来引用资料什么的 http://nuxt.localhost/article/editor/draft?id=16
2这是黄色的短代码框，常用来做提示，引起读者注意。 test
3这是红色的短代码框，用于严重警告什么的。 test
4这是浅蓝色的短代码框，用于显示一些信息。 test
5这是绿色的短代码框，显示一些推荐信息。 test
5这是绿色的短代码框，显示一些推荐信息。 test
5这是绿色的短代码框，显示一些推荐信息。 test
nfo:这是浅蓝色的短代码框，用于显示一些信息。 test
这是红色的短代码框，用于严重警告什么的。 test
', 14);
INSERT INTO public.article_content VALUES (1580788796473999360, '2022-10-14 13:13:13.374', false, '2022-12-01 16:55:30.163', '<p>删除文章测试 删除文章测试</p>
', '删除文章测试 删除文章测试', '删除文章测试 删除文章测试
', 1580788796385918976);
INSERT INTO public.article_content VALUES (1598576125783572480, '2022-12-02 15:13:43.154', false, '2022-12-02 15:13:43.154', '<p>注销测试</p>
', '注销测试', '注销测试
', 1598576125758406656);
INSERT INTO public.article_content VALUES (1599428443735326720, '2022-12-04 23:40:31.587', false, '2022-12-04 23:40:31.587', '<p><img src="http://qiniu.dwsy.link/ddl/45e6449f341a4f9fa49a882b9aa473a8.webp?imageslim" alt="v2-027e12f21f01d129c636c425caa77ed7_720w.webp" align=right width="40%"></img></p>
<blockquote>
<p>Rem<br />
誕生日	2月2日<br />
年齢	17歳<br />
身長	154cm<br />
体重	53kg<br />
名前の由来	Left<br />
特技	料理・洗濯・掃除・裁縫<br />
趣味	演劇鑑賞・詩文<br />
CV	水瀬いのり<br />
エミリアの暮らすロズワール邸でメイド頭を任される水色髪ショートが特徴の鬼族の少女。<br />
一人称は「レム」。<br />
姉のラムとは対照的に右目に前髪が掛かっている。<br />
ラムと二人、広大な屋敷を維持する有能メイド。雑務全般を一手に担っており、屋敷の仕事の9割は彼女が行っているお陰で屋敷の機能は維持されている。本人曰く「ラムはただいるだけで満足」。<br />
性格は温和で献身的だが、それは心を許した相手にだけ見せる表情で、敵対者には容赦をしない。<br />
意外と感情の抑制が利かず、暴走しやすい一面もある。目下、レムの愛情はラムとスバルの二人に捧げられている。なお、姉より胸が大きいことがコンプレックスだったが、最近それを克服した。<br />
ラムが姉らしく「傲岸不遜な毒舌担当」と形容されるなら、妹のレムは「慇懃無礼な毒舌担当」と紹介されている。<br />
とある事情からラムに対して負い目を持っており、自己評価が極端に低い。<br />
姉への贖罪の為に生きていたが、主人公のスバルに救われ諭されたことで、トラウマを克服する。<br />
スバルを「レムの英雄」として絶対視し身を尽くすが、彼の逃避を許さない厳しさの象徴でもある。</p>
</blockquote>
', '<img src="http://qiniu.dwsy.link/ddl/45e6449f341a4f9fa49a882b9aa473a8.webp?imageslim" alt="v2-027e12f21f01d129c636c425caa77ed7_720w.webp" align=right width="40%"></img>
> Rem
> 誕生日	2月2日
年齢	17歳
身長	154cm
体重	53kg
名前の由来	Left
特技	料理・洗濯・掃除・裁縫
趣味	演劇鑑賞・詩文
CV	水瀬いのり
エミリアの暮らすロズワール邸でメイド頭を任される水色髪ショートが特徴の鬼族の少女。
一人称は「レム」。
姉のラムとは対照的に右目に前髪が掛かっている。
ラムと二人、広大な屋敷を維持する有能メイド。雑務全般を一手に担っており、屋敷の仕事の9割は彼女が行っているお陰で屋敷の機能は維持されている。本人曰く「ラムはただいるだけで満足」。
性格は温和で献身的だが、それは心を許した相手にだけ見せる表情で、敵対者には容赦をしない。
意外と感情の抑制が利かず、暴走しやすい一面もある。目下、レムの愛情はラムとスバルの二人に捧げられている。なお、姉より胸が大きいことがコンプレックスだったが、最近それを克服した。
ラムが姉らしく「傲岸不遜な毒舌担当」と形容されるなら、妹のレムは「慇懃無礼な毒舌担当」と紹介されている。
とある事情からラムに対して負い目を持っており、自己評価が極端に低い。
姉への贖罪の為に生きていたが、主人公のスバルに救われ諭されたことで、トラウマを克服する。
スバルを「レムの英雄」として絶対視し身を尽くすが、彼の逃避を許さない厳しさの象徴でもある。

', '

Rem
誕生日	2月2日
年齢	17歳
身長	154cm
体重	53kg
名前の由来	Left
特技	料理・洗濯・掃除・裁縫
趣味	演劇鑑賞・詩文
CV	水瀬いのり
エミリアの暮らすロズワール邸でメイド頭を任される水色髪ショートが特徴の鬼族の少女。
一人称は「レム」。
姉のラムとは対照的に右目に前髪が掛かっている。
ラムと二人、広大な屋敷を維持する有能メイド。雑務全般を一手に担っており、屋敷の仕事の9割は彼女が行っているお陰で屋敷の機能は維持されている。本人曰く「ラムはただいるだけで満足」。
性格は温和で献身的だが、それは心を許した相手にだけ見せる表情で、敵対者には容赦をしない。
意外と感情の抑制が利かず、暴走しやすい一面もある。目下、レムの愛情はラムとスバルの二人に捧げられている。なお、姉より胸が大きいことがコンプレックスだったが、最近それを克服した。
ラムが姉らしく「傲岸不遜な毒舌担当」と形容されるなら、妹のレムは「慇懃無礼な毒舌担当」と紹介されている。
とある事情からラムに対して負い目を持っており、自己評価が極端に低い。
姉への贖罪の為に生きていたが、主人公のスバルに救われ諭されたことで、トラウマを克服する。
スバルを「レムの英雄」として絶対視し身を尽くすが、彼の逃避を許さない厳しさの象徴でもある。

', 1599428443726938112);
INSERT INTO public.article_content VALUES (4, '2022-08-26 23:39:05.9', false, '2022-10-24 16:17:41.297', '<p>JUnit5学习之六：参数化测试(Parameterized Tests)基础</p>
<p>程序员欣宸</p>
<p>于 2020-10-08 10:03:29 发布</p>
<p>2175<br />
收藏 5<br />
分类专栏： java服务端 文章标签： java 单元测试 junit<br />
版权</p>
<p>java服务端<br />
专栏收录该内容<br />
175 篇文章46 订阅<br />
订阅专栏<br />
欢迎访问我的GitHub<br />
这里分类和汇总了欣宸的全部原创(含配套源码)：<a href="https://github.com/zq2599/blog_demos" rel="nofollow">https://github.com/zq2599/blog_demos</a></p>
<p>关于《JUnit5学习》系列<br />
《JUnit5学习》系列旨在通过实战提升SpringBoot环境下的单元测试技能，一共八篇文章，链接如下：</p>
<p>基本操作<br />
Assumptions类<br />
Assertions类<br />
按条件执行<br />
标签(Tag)和自定义注解<br />
参数化测试(Parameterized Tests)基础<br />
参数化测试(Parameterized Tests)进阶<br />
综合进阶（终篇）<br />
本篇概览<br />
本文是《JUnit5学习》系列的第六篇，一起来实战强大参数化测试(Parameterized Tests)，即多次执行同一个测试方法，每次使用不同的参数；<br />
由于参数化测试功能强大，内容也比前几篇的知识点多，为了方便大家阅读和实践，这里分为《基础》和《进阶》两篇来介绍，本篇以学习参数化测试(Parameterized Tests)的基础知识为主，包含以下内容：<br />
极速体验；<br />
版本依赖；<br />
ValueSource数据源<br />
null、空字符串数据源<br />
枚举数据源<br />
方法数据源<br />
Csv格式数据源<br />
Csv文件数据源<br />
源码下载<br />
如果您不想编码，可以在GitHub下载所有源码，地址和链接信息如下表所示：<br />
名称	链接	备注<br />
项目主页	<a href="https://github.com/zq2599/blog_demos" rel="nofollow">https://github.com/zq2599/blog_demos</a>	该项目在GitHub上的主页<br />
git仓库地址(https)	<a href="https://github.com/zq2599/blog_demos.git" rel="nofollow">https://github.com/zq2599/blog_demos.git</a>	该项目源码的仓库地址，https协议<br />
git仓库地址(ssh)	<a href="&#109;&#97;&#105;&#x6c;&#116;o&#x3a;&#103;&#105;&#x74;&#64;&#x67;&#105;&#116;&#104;&#x75;&#x62;&#x2e;&#99;&#111;&#109;">&#x67;&#x69;&#116;&#64;g&#x69;t&#104;&#117;b&#x2e;&#x63;&#x6f;&#109;</a>:zq2599/blog_demos.git	该项目源码的仓库地址，ssh协议<br />
这个git项目中有多个文件夹，本章的应用在junitpractice文件夹下，如下图红框所示：</p>
<p>junitpractice是父子结构的工程，本篇的代码在parameterized子工程中，如下图：</p>
<p>极速体验<br />
现在，咱们以最少的步骤体验最简单的参数化测试；<br />
在父工程junitpractice里新建名为parameterized的子工程，pom.xml内容如下：</p>
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.bolingcavalry</groupId>
        <artifactId>junitpractice</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <groupId>com.bolingcavalry</groupId>
    <artifactId>parameterized</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>parameterized</name>
    <description>Demo project for parameterized expirence in Spring Boot junit</description>
    <properties>
        <java.version>1.8</java.version>
    </properties>
<pre><code>&lt;dependencyManagement&gt;
    &lt;dependencies&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.junit&lt;/groupId&gt;
            &lt;artifactId&gt;junit-bom&lt;/artifactId&gt;
            &lt;version&gt;5.7.0&lt;/version&gt;
            &lt;type&gt;pom&lt;/type&gt;
            &lt;scope&gt;import&lt;/scope&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;

&lt;/dependencyManagement&gt;

&lt;dependencies&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;
        &lt;artifactId&gt;lombok&lt;/artifactId&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
        &lt;exclusions&gt;
            &lt;exclusion&gt;
                &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;
                &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;
            &lt;/exclusion&gt;
        &lt;/exclusions&gt;
    &lt;/dependency&gt;

    &lt;dependency&gt;
        &lt;groupId&gt;org.junit.jupiter&lt;/groupId&gt;
        &lt;artifactId&gt;junit-jupiter&lt;/artifactId&gt;
        &lt;scope&gt;test&lt;/scope&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;

&lt;build&gt;
    &lt;plugins&gt;
        &lt;plugin&gt;
            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;
        &lt;/plugin&gt;
    &lt;/plugins&gt;
&lt;/build&gt;
</code></pre>
<p></project><br />
1<br />
2<br />
3<br />
4<br />
5<br />
6<br />
7<br />
8<br />
9<br />
10<br />
11<br />
12<br />
13<br />
14<br />
15<br />
16<br />
17<br />
18<br />
19<br />
20<br />
21<br />
22<br />
23<br />
24<br />
25<br />
26<br />
27<br />
28<br />
29<br />
30<br />
31<br />
32<br />
33<br />
34<br />
35<br />
36<br />
37<br />
38<br />
39<br />
40<br />
41<br />
42<br />
43<br />
44<br />
45<br />
46<br />
47<br />
48<br />
49<br />
50<br />
51<br />
52<br />
53<br />
54<br />
55<br />
56<br />
57<br />
58<br />
59<br />
60<br />
61<br />
62<br />
63<br />
64<br />
65<br />
66<br />
67<br />
68<br />
69<br />
70<br />
71<br />
新建测试类HelloTest.java，在这个位置：junitpractice\parameterized\src\test\java\com\bolingcavalry\parameterized\service\impl，内容如下：<br />
package com.bolingcavalry.parameterized.service.impl;</p>
<p>import lombok.extern.slf4j.Slf4j;<br />
import org.junit.jupiter.api.DisplayName;<br />
import org.junit.jupiter.api.MethodOrderer;<br />
import org.junit.jupiter.api.Order;<br />
import org.junit.jupiter.api.TestMethodOrder;<br />
import org.junit.jupiter.params.ParameterizedTest;<br />
import org.junit.jupiter.params.provider.ValueSource;<br />
import org.springframework.boot.test.context.SpringBootTest;<br />
import static org.junit.jupiter.api.Assertions.assertTrue;</p>
<p>@SpringBootTest<br />
@Slf4j<br />
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)<br />
public class HelloTest {</p>
<pre><code>@Order(1)
@DisplayName(&quot;多个字符串型入参&quot;)
@ParameterizedTest
@ValueSource(strings = { &quot;a&quot;, &quot;b&quot;, &quot;c&quot; })
void stringsTest(String candidate) {
    log.info(&quot;stringsTest [{}]&quot;, candidate);
    assertTrue(null!=candidate);
}
</code></pre>
<p>}<br />
1<br />
2<br />
3<br />
4<br />
5<br />
6<br />
7<br />
8<br />
9<br />
10<br />
11<br />
12<br />
13<br />
14<br />
15<br />
16<br />
17<br />
18<br />
19<br />
20<br />
21<br />
22<br />
23<br />
24<br />
25<br />
26<br />
执行该测试类，结果如下图：</p>
<p>从上图可见执行参数化测试需要两步：首先用@ParameterizedTest取代@Test，表名此方法要执行参数化测试，然后用@ValueSource指定每次测试时的参数来自字符串类型的数组：{ “a”, “b”, “c” }，每个元素执行一次；<br />
至此，咱们已体验过最简单的参数化测试，可见就是想办法使一个测试方法多次执行，每次都用不同的参数，接下来有关参数化测试的更多配置和规则将配合实战编码逐个展开，一起来体验吧；<br />
版本要求<br />
先看看SpringBoot-2.3.4.RELEASE间接依赖的junit-jupiter-5.6.2版本中，ParameterizedTest的源码，如下图红框所示，此时的ParameterizedTest还只是体验版：</p>
<p>再看看junit-jupiter-5.7.0版本的ParameterizedTest源码，此时已经是稳定版了：</p>
<p>综上所述，如果要使用参数化测试，最好是将junit-jupiter升级到5.7.0或更高版本，如果您的应用使用了SpringBoot框架，junit-jupiter是被spring-boot-starter-test间接依赖进来的，需要排除这个间接依赖，再手动依赖进来才能确保使用指定版本，在pom.xml中执行如下三步操作：<br />
dependencyManagement节点添加junit-bom，并指定版本号：<br />
<dependencyManagement><br />
<dependencies><br />
<dependency><br />
<groupId>org.junit</groupId><br />
<artifactId>junit-bom</artifactId><br />
<version>5.7.0</version><br />
<type>pom</type><br />
<scope>import</scope><br />
</dependency><br />
</dependencies><br />
</dependencyManagement><br />
1<br />
2<br />
3<br />
4<br />
5<br />
6<br />
7<br />
8<br />
9<br />
10<br />
11<br />
排除spring-boot-starter-test和junit-jupiter的间接依赖关系：<br />
<dependency><br />
<groupId>org.springframework.boot</groupId><br />
<artifactId>spring-boot-starter-test</artifactId><br />
<scope>test</scope><br />
<exclusions><br />
<exclusion><br />
<groupId>org.junit.jupiter</groupId><br />
<artifactId>junit-jupiter</artifactId><br />
</exclusion><br />
</exclusions><br />
</dependency><br />
1<br />
2<br />
3<br />
4<br />
5<br />
6<br />
7<br />
8<br />
9<br />
10<br />
11<br />
添加junit-jupiter依赖，此时会使用dependencyManagement中指定的版本号：<br />
<dependency><br />
<groupId>org.junit.jupiter</groupId><br />
<artifactId>junit-jupiter</artifactId><br />
<scope>test</scope><br />
</dependency><br />
1<br />
2<br />
3<br />
4<br />
5<br />
如下图，刷新可见已经用上了5.7.0版本：</p>
<p>版本问题解决了，接下来正式开始学习Parameterized Tests，先要了解的是有哪些数据源；<br />
ValueSource数据源<br />
ValueSource是最简单常用的数据源，支持以下类型的数组：<br />
short</p>
<pre><code>byte

int

long

float

double

char

boolean

java.lang.String

java.lang.Class
</code></pre>
<p>1<br />
2<br />
3<br />
4<br />
5<br />
6<br />
7<br />
8<br />
9<br />
10<br />
11<br />
12<br />
13<br />
14<br />
15<br />
16<br />
17<br />
18<br />
19<br />
下面是整形数组的演示：<br />
@Order(2)<br />
@DisplayName(&ldquo;多个int型入参&rdquo;)<br />
@ParameterizedTest<br />
@ValueSource(ints = { 1,2,3 })<br />
void intsTest(int candidate) {<br />
log.info(&ldquo;ints [{}]&rdquo;, candidate);<br />
assertTrue(candidate&lt;3);<br />
}<br />
1<br />
2<br />
3<br />
4<br />
5<br />
6<br />
7<br />
8<br />
从上述代码可见，入参等于3的时候assertTrue无法通过，测试方法会失败，来看看实际执行效果，如下图：</p>
<p>null、空字符串数据源<br />
在用字符串作为入参时，通常要考虑入参为null的情况，此时ValueSource一般会这样写：<br />
@ValueSource(strings = { null, &ldquo;a&rdquo;, &ldquo;b&rdquo;, &ldquo;c&rdquo; })<br />
1<br />
此时可以使用@NullSource注解来取代上面的null元素，下面这种写法和上面的效果一模一样：<br />
@NullSource<br />
@ValueSource(strings = { &ldquo;a&rdquo;, &ldquo;b&rdquo;, &ldquo;c&rdquo; })<br />
1<br />
2<br />
执行结果如下图红框，可见null作为入参被执行了一次：</p>
<p>与@NullSource代表null入参类似，@EmptySource代表空字符串入参，用法和执行结果如下图所示：</p>
<p>如果想同时用null和空字符串做测试方法的入参，可以使用@NullAndEmptySource，用法和执行结果如下图所示：</p>
<p>枚举数据源(EnumSource)<br />
EnumSource可以让一个枚举类中的全部或者部分值作为测试方法的入参；<br />
创建枚举类Types.java，用于接下来的实战，如下，很简单只有三个值：<br />
public enum Types {<br />
SMALL,<br />
BIG,<br />
UNKNOWN<br />
}<br />
1<br />
2<br />
3<br />
4<br />
5<br />
先尝试用Types的每个值作为入参执行测试，可见只要添加@EnumSource即可，JUnit根据测试方法的入参类型知道要使用哪个枚举：<br />
@Order(6)<br />
@DisplayName(&ldquo;多个枚举型入参&rdquo;)<br />
@ParameterizedTest<br />
@EnumSource<br />
void enumSourceTest(Types type) {<br />
log.info(&ldquo;enumSourceTest [{}]&rdquo;, type);<br />
}<br />
1<br />
2<br />
3<br />
4<br />
5<br />
6<br />
7<br />
执行结果如下图所示：</p>
<p>如果不想执行枚举的所有值，而只要其中一部分，可以在name属性中指定：<br />
@EnumSource(names={&ldquo;SMALL&rdquo;, &ldquo;UNKNOWN&rdquo;})<br />
1<br />
执行结果如下图所示：</p>
<p>也可以指定哪些值不被执行，此时要添加mode属性并设置为EXCLUDE（mode属性如果不写，默认值是INCLUDE，前面的例子中就是默认值）：<br />
@EnumSource(mode= EnumSource.Mode.EXCLUDE, names={&ldquo;SMALL&rdquo;, &ldquo;UNKNOWN&rdquo;})<br />
1<br />
执行结果如下，可见SMALL和UNKNOWN都没有执行：</p>
<p>方法数据源(MethodSource)<br />
@MethodSource可以指定一个方法名称，该方法返回的元素集合作为测试方法的入参；<br />
先来定义一个方法，该方法一般是static类型(否则要用@TestInstance修饰)，并且返回值是Stream类型：<br />
static Stream<String> stringProvider() {<br />
return Stream.of(&ldquo;apple1&rdquo;, &ldquo;banana1&rdquo;);<br />
}<br />
1<br />
2<br />
3<br />
然后，测试方法用@MethodSource，并指定方法名stringProvider：<br />
@Order(9)<br />
@DisplayName(&ldquo;静态方法返回集合，用此集合中每个元素作为入参&rdquo;)<br />
@ParameterizedTest<br />
@MethodSource(&ldquo;stringProvider&rdquo;)<br />
void methodSourceTest(String candidate) {<br />
log.info(&ldquo;methodSourceTest [{}]&rdquo;, candidate);<br />
}<br />
1<br />
2<br />
3<br />
4<br />
5<br />
6<br />
7<br />
上面的stringProvider方法和测试方法methodSourceTest在同一个类中，如果它们不在同一个类中，就要指定静态方法的整个package路径、类名、方法名，如下所示，类名和方法名之间用#连接：<br />
@Order(10)<br />
@DisplayName(&ldquo;静态方法返回集合，该静态方法在另一个类中&rdquo;)<br />
@ParameterizedTest<br />
@MethodSource(&ldquo;com.bolingcavalry.parameterized.service.impl.Utils#getStringStream&rdquo;)<br />
void methodSourceFromOtherClassTest(String candidate) {<br />
log.info(&ldquo;methodSourceFromOtherClassTest [{}]&rdquo;, candidate);<br />
}<br />
1<br />
2<br />
3<br />
4<br />
5<br />
6<br />
7<br />
如果不在@MethodSource中指定方法名，JUnit会寻找和测试方法同名的静态方法，举例如下，静态方法methodSourceWithoutMethodNameTest会被作为测试方法的数据来源：<br />
static Stream<String> methodSourceWithoutMethodNameTest() {<br />
return Stream.of(&ldquo;apple3&rdquo;, &ldquo;banana3&rdquo;);<br />
}</p>
<pre><code>@Order(11)
@DisplayName(&quot;静态方法返回集合，不指定静态方法名，自动匹配&quot;)
@ParameterizedTest
@MethodSource
void methodSourceWithoutMethodNameTest(String candidate) {
    log.info(&quot;methodSourceWithoutMethodNameTest [{}]&quot;, candidate);
}
</code></pre>
<p>1<br />
2<br />
3<br />
4<br />
5<br />
6<br />
7<br />
8<br />
9<br />
10<br />
11<br />
执行结果如下：</p>
<p>Csv格式数据源(CsvSource)<br />
前面的测试方法入参都只有一个，在面对多个入参的测试方法时，@CsvSource就派上用场了，演示代码如下所示，可见数据是普通的CSV格式，每条记录有两个字段，对应测试方法的两个入参：<br />
@Order(12)<br />
@DisplayName(&ldquo;CSV格式多条记录入参&rdquo;)<br />
@ParameterizedTest<br />
@CsvSource({<br />
&ldquo;apple1, 11&rdquo;,<br />
&ldquo;banana1, 12&rdquo;,<br />
&ldquo;&lsquo;lemon1, lime1&rsquo;, 0x0A&rdquo;<br />
})<br />
void csvSourceTest(String fruit, int rank) {<br />
log.info(&ldquo;csvSourceTest, fruit [{}], rank [{}]&rdquo;, fruit, rank);<br />
}<br />
1<br />
2<br />
3<br />
4<br />
5<br />
6<br />
7<br />
8<br />
9<br />
10<br />
11<br />
执行结果如下，通过日志可以确定，每条记录的两个字段能匹配到测试方法的两个入参中：</p>
<p>另外@CsvSource还提供了一个属性nullValues，作用是将指定的字符串识别为null，下面这个设置就是把CSV数据中所有的NIL识别为null，再传给测试方法：</p>
<pre><code>@Order(13)
@DisplayName(&quot;CSV格式多条记录入参(识别null)&quot;)
@ParameterizedTest
@CsvSource(value = {
        &quot;apple2, 21&quot;,
        &quot;banana2, 22&quot;,
        &quot;''lemon2, lime2'', 0x0A&quot;,
        &quot;NIL, 3&quot; },
        nullValues = &quot;NIL&quot;
)
void csvSourceWillNullTokenTest(String fruit, int rank) {
    log.info(&quot;csvSourceWillNullTokenTest, fruit [{}], rank [{}]&quot;, fruit, rank);
}
</code></pre>
<p>1<br />
2<br />
3<br />
4<br />
5<br />
6<br />
7<br />
8<br />
9<br />
10<br />
11<br />
12<br />
13<br />
执行结果如下，可见字符串NIL到测试方法后已变成null：</p>
<p>Csv文件数据源<br />
@CsvSource解决了测试方法入参有多个字段的问题，但是把作为入参的测试数据写在源文件中似乎不合适，尤其是数据量很大的情况下，这种场景适合用@CsvFileSource，该注解用于指定csv文件作为数据源，注意numLinesToSkip属性指定跳过的行数，可以用来跳过表头：<br />
@Order(14)<br />
@DisplayName(&ldquo;CSV文件多条记录入参&rdquo;)<br />
@ParameterizedTest<br />
@CsvFileSource(files = &ldquo;src/test/resources/two-column.csv&rdquo;, numLinesToSkip = 1)<br />
void csvFileTest(String country, int reference) {<br />
log.info(&ldquo;csvSourceTest, country [{}], reference [{}]&rdquo;, country, reference);<br />
}<br />
1<br />
2<br />
3<br />
4<br />
5<br />
6<br />
7<br />
在src/test/resources/创建文件two-column.csv，内容如下：<br />
Country, reference<br />
Sweden, 1<br />
Poland, 2<br />
&ldquo;United States of America&rdquo;, 3<br />
1<br />
2<br />
3<br />
4<br />
上述代码执行结果如下，代码中没有测试数据，显得更加简洁一些：</p>
<p>期待《进阶》篇<br />
至此，咱们队JUnit5的参数化测试(Parameterized)有了初步的了解，可以通过各种数据源注解给测试方法制造更多的参数，但仅掌握这些还是不够的，依然有一些问题待解决，例如更自由的数据源定制、跟完善的多字段处理方案等等，下一篇《进阶》咱们一起来体验更多参数化测试的高级功能；<br />
欢迎关注公众号：程序员欣宸<br />
微信搜索「程序员欣宸」，我是欣宸，期待与您一同畅游Java世界…</p>
<p>文章知识点与官方知识档案匹配，可进一步学习相关知识<br />
Java技能树注解基于注解的单元测试57978 人正在系统学习中</p>
<p>程序员欣宸<br />
已关注</p>
<p>2</p>
<p>5</p>
<p>1</p>
<p>专栏目录<br />
JUnit5学习之七：参数化测试(Parameterized Tests)进阶<br />
m0_63174529的博客<br />
177<br />
参数化测试的数据源和测试方法入参的数据类型必须要保持一致吗？其实JUnit5并没有严格要求，而事实上JUnit5是可以做一些自动或手动的类型转换的； 如下代码，数据源是int型数组，但测试方法的入参却是double： @Order(16) @DisplayName(“int型自动转为double型入参”) @ParameterizedTest @ValueSource(ints = { 1,2,3 }) void argumentConversionTest(double candidate) ..<br />
action-junit:在github上尝试一个juint测试<br />
04-18<br />
尝试对github动作进行一次juint测试。<br />
评论1条写评论<br />
血夜之末<br />
热评<br />
这么好的文章，看的人这么少。实在可惜啊。<br />
Junit5中的参数化测试（Parameterized Tests）指南<br />
爱穿格子裤的专栏<br />
3537<br />
作为新一代的测试框架，Junit5中有很多大家喜欢的测试方案，个人认为最突出的就是能够进行参数化的测试（Parameterized Tests）。 简介 通常，会遇到这样的情况，同一个测试案例，改变的只是测试时候输入的参数不同。按照之前的做法，可能会是通过每个输入参数都写一个测试，或者将测试参数封装到集合中循环遍历执行测试。在新版的Junit5中，已经提供了一种更加优雅的方式来进行。 该特性允许我&hellip;<br />
Junit5使用CsvFileSource创建csv文件进行参数化测试<br />
@ZhengLan的博客<br />
1839<br />
一、创建工程，建一个maven项目 二、导入Junit5的依赖，自动导入包 <dependencies> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-engine</artifactId> <version>5.5.2&lt;/v<br />
JUnit4 参数化测试（ Parameterized tests）<br />
热门推荐<br />
明明如月的技术博客<br />
1万+<br />
@RunWith　　当类被@RunWith注解修饰，或者类继承了一个被该注解修饰的类，JUnit将会使用这个注解所指明的运行器（runner）来运行测试，而不使用JUnit默认的运行器。　　要进行参数化测试，需要在类上面指定如下的运行器：@RunWith (Parameterized.class)然后，在提供数据的方法上加上一个@Parameters注解，这个方法必须是静态static的，并且返回&hellip;<br />
JUnit5学习之六：参数化测试(Parameterized Tests)基础，java架构师的简历模板<br />
m0_63174811的博客<br />
279<br />
Assertions类 按条件执行 标签(Tag)和自定义注解 参数化测试(Parameterized Tests)基础 参数化测试(Parameterized Tests)进阶 综合进阶（终篇） 本篇概览 本文是《JUnit5学习》系列的第六篇，一起来实战强大参数化测试(Parameterized Tests)，即多次执行同一个测试方法，每次使用不同的参数； 由于参数化测试功能强大，内容也比前几篇的知识点多，为了方便大家阅读和实践，这里分为《基础》和《进阶》两篇来介绍，..<br />
JUnit5学习之七：参数化测试(Parameterized Tests)进阶，java面试项目描述<br />
m0_64867003的博客<br />
105<br />
自定义数据源 前文使用了很多种数据源，如果您对它们的各种限制不满意，想要做更彻底的个性化定制，可以开发ArgumentsProvider接口的实现类，并使用@ArgumentsSource指定； 举个例子，先开发ArgumentsProvider的实现类MyArgumentsProvider.java： package com.bolingcavalry.parameterized.service.impl; import org.junit.jupiter.api.extension.Exte<br />
junit 内部类测试_JUnit5学习之七：参数化测试进阶<br />
weixin_39934302的博客<br />
31<br />
欢迎访问我的<a href="GitHubhttps://github.com/zq2599/blog_demos内容：所有原创文章分类和汇总，及配套源码，涉及Java、Docker、Kubernetes、DevOPS等；本篇概览本文是《JUnit5学习》系列的第七篇，前文《Junit5学习之六：参数化测试基础" rel="nofollow">GitHubhttps://github.com/zq2599/blog_demos内容：所有原创文章分类和汇总，及配套源码，涉及Java、Docker、Kubernetes、DevOPS等；本篇概览本文是《JUnit5学习》系列的第七篇，前文《Junit5学习之六：参数化测试基础</a> 》咱们对JUnit5的参数化测试(Parameterized Tests)有了基本了解，可以使用各种数据&hellip;<br />
JUnit5学习之一：基本操作<br />
程序员欣宸的博客<br />
6911<br />
《JUnit5学习》是欣宸的又一个实战主题的Java技术栈原创系列，欢迎大家一起来学习和掌握最新的单元测试技术<br />
Junit5中实现参数化测试<br />
HD243608836的博客<br />
2259<br />
从Junit5开始，对参数化测试支持进行了大幅度的改进和提升。下面我们就一起来详细看看Junit5参数化测试的方法。 部署和依赖 和Junit4相比，Junit5框架更多在向测试平台演进。其核心组成也从以前的一个Junit的jar包更换成由多个模块组成。本文所需要依赖模块如下： junit-jupiter-engine: Junit的核心测试引擎 junit-jupiter-params:&hellip;<br />
JUnit5学习之三：Assertions类<br />
程序员欣宸的博客<br />
3296<br />
断言是单元测试中最常用的测试手段，本文就来学习和操作常用的断言功能<br />
JUnit5学习之八：综合进阶（终篇）<br />
程序员欣宸的博客<br />
1313<br />
将JUnit5的一些常用高级功能以实战的形式展现<br />
JUnit5学习之二：Assumptions类<br />
程序员欣宸的博客<br />
1831<br />
学习Assumptions类的用法<br />
JUnit5学习之四：按条件执行<br />
程序员欣宸的博客<br />
1741<br />
学习和实战如何设置单元测试的执行条件<br />
JUnit5学习之五：标签(Tag)和自定义注解<br />
程序员欣宸的博客<br />
2552<br />
学习和实践JUnit5的标签过滤和自定义注解功能<br />
深入探索：单元测试之Parameterized tests<br />
chutongg028083的博客<br />
65<br />
相关文章 深入探索：单元测试之Test runners 深入探索：单元测试之基于 suites 的聚合测试 深入探索：单元测试之测试执行顺序 深入探索：单元测试之异常测试 深入探索：单元测试之Ignnore测试和TimeOut测试 深入探索：单元测试之Categories 深入探索：单元测&hellip;<br />
单元测试之JUnit 5 参数化测试使用手册<br />
qq_35448165的博客<br />
1189<br />
1. 概要 junit5是下一代JUnit测试框架，新增了很多特性帮助开发人员更好得编写测试用例。其中一大特性就是参数化测试，其目的就是让我们可以使用不同的参数多次执行一个测试方法，从而覆盖不同的条件分支。(简单来说就是既Cover 所有的情况，还能减少 Duplicate Code ) 在这边教程中，我们将深度探索参数化教程。现在开始吧! 2. 依赖 为了使用JUnit 5的参数化测试，我们需要从JUnit平台引入 junit-jupiter-params包。 如果我们项目使用Maven来管理，那么就需要<br />
工业智能网关BL110应用之三十： 如何连接配置MQTT Client One服务器<br />
最新发布<br />
钡铼技术工业物联网<br />
393<br />
MQTT Client One 支持多个发布主题，在发布主题项点击“添加”填写发布主题，在发布主题项的下拉框可以查看发布主题名。选择发布主题名，点击“删除”，就可以删除要删除的发布主题。MQTT Client One 同时也支持每个发布主题选择不同的数据点发布，鼠标光标放在右边方框内，点击鼠标右键，弹出提示框，点击“添加”，弹出数据点框，点击要发布的数据点，点击“确定”。如下图：发布主题“topic”只发布“COM1”的“FX3U”的设备的数据点“Y0”，其他的数据点不发布。工业智能网关BL110。<br />
关于我们<br />
招贤纳士<br />
商务合作<br />
寻求报道</p>
<p>400-660-0108</p>
<p><a href="&#109;a&#105;&#108;&#x74;o&#58;&#107;&#101;&#x66;&#117;@&#99;sdn&#46;&#x6e;&#x65;&#x74;">k&#x65;fu&#64;&#99;&#115;&#100;n&#46;&#110;&#101;&#x74;</a></p>
<p>在线客服<br />
工作时间 8:30-22:00<br />
公安备案号11010502030143<br />
京ICP备19004658号<br />
京网文〔2020〕1039-165号<br />
经营性网站备案信息<br />
北京互联网违法和不良信息举报中心<br />
家长监护<br />
网络110报警服务<br />
中国互联网举报中心<br />
Chrome商店下载<br />
账号管理规范<br />
版权与免责声明<br />
版权申诉<br />
出版物许可证<br />
营业执照<br />
©1999-2022北京创新乐知网络技术有限公司</p>
<p>脚本设置</p>
<p>当前背景图:<br />
rgb(255, 255, 255)<br />
刷新背景图片<br />
背景图片类目范围(点选):<br />
热门<br />
冒险岛2<br />
守望先锋<br />
魔兽世界<br />
炉石传说<br />
风暴英雄<br />
暗黑破坏神Ⅲ<br />
星际争霸II<br />
冷兔<br />
阿狸<br />
炮炮兵<br />
林心如<br />
郑爽<br />
戚薇<br />
佟丽娅<br />
Angelababy<br />
唐嫣<br />
李冰冰<br />
高圆圆<br />
孙俪<br />
姚晨<br />
杨幂<br />
刘诗诗<br />
胡歌<br />
邓紫棋<br />
赵丽颖<br />
马天宇<br />
陈晓<br />
陈伟霆<br />
柳岩<br />
吴奇隆<br />
风景<br />
简约<br />
小清新<br />
自定义背景图片链接(固定使用此链接):<br />
您可以选择上传百度首页自定义背景图片, 然后将链接填入<br />
清除<br />
保存<br />
使用当前图片<br />
文章宽度:<br />
宽度基于源码中的 .container 的宽度, 详见 #4<br />
100%<br />
Very Speed<br />
纯色背景(优先使用):<br />
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除</p>
<p>H</p>
<p>S</p>
<p>L</p>
<p>R</p>
<p>G</p>
<p>B</p>
<p>HEX</p>
<p>+<br />
是否显示 原文链接:<br />
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误<br />
隐藏<br />
显示<br />
是否隐藏 设置(小齿轮)按钮:<br />
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏<br />
隐藏<br />
显示<br />
是否隐藏所有 推荐文章:<br />
隐藏之后将不会显示底部的推荐文章列表<br />
隐藏<br />
显示<br />
是否隐藏最底部 csdn版权信息:<br />
隐藏之后将不会显示页面最底部的 footer<br />
隐藏<br />
显示<br />
是否显示目录栏:<br />
开启之后会显示文章目录(若存在)<br />
隐藏<br />
显示<br />
联系作者:<br />
源码:<br />
Github<br />
反馈:<br />
greasyfork page</p>
', 'JUnit5学习之六：参数化测试(Parameterized Tests)基础

程序员欣宸

于 2020-10-08 10:03:29 发布

2175
 收藏 5
分类专栏： java服务端 文章标签： java 单元测试 junit
版权

java服务端
专栏收录该内容
175 篇文章46 订阅
订阅专栏
欢迎访问我的GitHub
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos

关于《JUnit5学习》系列
《JUnit5学习》系列旨在通过实战提升SpringBoot环境下的单元测试技能，一共八篇文章，链接如下：

基本操作
Assumptions类
Assertions类
按条件执行
标签(Tag)和自定义注解
参数化测试(Parameterized Tests)基础
参数化测试(Parameterized Tests)进阶
综合进阶（终篇）
本篇概览
本文是《JUnit5学习》系列的第六篇，一起来实战强大参数化测试(Parameterized Tests)，即多次执行同一个测试方法，每次使用不同的参数；
由于参数化测试功能强大，内容也比前几篇的知识点多，为了方便大家阅读和实践，这里分为《基础》和《进阶》两篇来介绍，本篇以学习参数化测试(Parameterized Tests)的基础知识为主，包含以下内容：
极速体验；
版本依赖；
ValueSource数据源
null、空字符串数据源
枚举数据源
方法数据源
Csv格式数据源
Csv文件数据源
源码下载
如果您不想编码，可以在GitHub下载所有源码，地址和链接信息如下表所示：
名称	链接	备注
项目主页	https://github.com/zq2599/blog_demos	该项目在GitHub上的主页
git仓库地址(https)	https://github.com/zq2599/blog_demos.git	该项目源码的仓库地址，https协议
git仓库地址(ssh)	git@github.com:zq2599/blog_demos.git	该项目源码的仓库地址，ssh协议
这个git项目中有多个文件夹，本章的应用在junitpractice文件夹下，如下图红框所示：


junitpractice是父子结构的工程，本篇的代码在parameterized子工程中，如下图：


极速体验
现在，咱们以最少的步骤体验最简单的参数化测试；
在父工程junitpractice里新建名为parameterized的子工程，pom.xml内容如下：
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.bolingcavalry</groupId>
        <artifactId>junitpractice</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
    <groupId>com.bolingcavalry</groupId>
    <artifactId>parameterized</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>parameterized</name>
    <description>Demo project for parameterized expirence in Spring Boot junit</description>
    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>5.7.0</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>

    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.jupiter</groupId>
                    <artifactId>junit-jupiter</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
新建测试类HelloTest.java，在这个位置：junitpractice\parameterized\src\test\java\com\bolingcavalry\parameterized\service\impl，内容如下：
package com.bolingcavalry.parameterized.service.impl;

import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.springframework.boot.test.context.SpringBootTest;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest
@Slf4j
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class HelloTest {

    @Order(1)
    @DisplayName("多个字符串型入参")
    @ParameterizedTest
    @ValueSource(strings = { "a", "b", "c" })
    void stringsTest(String candidate) {
        log.info("stringsTest [{}]", candidate);
        assertTrue(null!=candidate);
    }
}    
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
执行该测试类，结果如下图：

从上图可见执行参数化测试需要两步：首先用@ParameterizedTest取代@Test，表名此方法要执行参数化测试，然后用@ValueSource指定每次测试时的参数来自字符串类型的数组：{ “a”, “b”, “c” }，每个元素执行一次；
至此，咱们已体验过最简单的参数化测试，可见就是想办法使一个测试方法多次执行，每次都用不同的参数，接下来有关参数化测试的更多配置和规则将配合实战编码逐个展开，一起来体验吧；
版本要求
先看看SpringBoot-2.3.4.RELEASE间接依赖的junit-jupiter-5.6.2版本中，ParameterizedTest的源码，如下图红框所示，此时的ParameterizedTest还只是体验版：

再看看junit-jupiter-5.7.0版本的ParameterizedTest源码，此时已经是稳定版了：

综上所述，如果要使用参数化测试，最好是将junit-jupiter升级到5.7.0或更高版本，如果您的应用使用了SpringBoot框架，junit-jupiter是被spring-boot-starter-test间接依赖进来的，需要排除这个间接依赖，再手动依赖进来才能确保使用指定版本，在pom.xml中执行如下三步操作：
dependencyManagement节点添加junit-bom，并指定版本号：
<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>org.junit</groupId>
      <artifactId>junit-bom</artifactId>
      <version>5.7.0</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>
1
2
3
4
5
6
7
8
9
10
11
排除spring-boot-starter-test和junit-jupiter的间接依赖关系：
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-test</artifactId>
  <scope>test</scope>
  <exclusions>
    <exclusion>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
    </exclusion>
  </exclusions>
</dependency>
1
2
3
4
5
6
7
8
9
10
11
添加junit-jupiter依赖，此时会使用dependencyManagement中指定的版本号：
<dependency>
  <groupId>org.junit.jupiter</groupId>
  <artifactId>junit-jupiter</artifactId>
  <scope>test</scope>
</dependency>
1
2
3
4
5
如下图，刷新可见已经用上了5.7.0版本：

版本问题解决了，接下来正式开始学习Parameterized Tests，先要了解的是有哪些数据源；
ValueSource数据源
ValueSource是最简单常用的数据源，支持以下类型的数组：
    short

    byte

    int

    long

    float

    double

    char

    boolean

    java.lang.String
    
    java.lang.Class
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
下面是整形数组的演示：
    @Order(2)
    @DisplayName("多个int型入参")
    @ParameterizedTest
    @ValueSource(ints = { 1,2,3 })
    void intsTest(int candidate) {
        log.info("ints [{}]", candidate);
        assertTrue(candidate<3);
    }
1
2
3
4
5
6
7
8
从上述代码可见，入参等于3的时候assertTrue无法通过，测试方法会失败，来看看实际执行效果，如下图：

null、空字符串数据源
在用字符串作为入参时，通常要考虑入参为null的情况，此时ValueSource一般会这样写：
@ValueSource(strings = { null, "a", "b", "c" })
1
此时可以使用@NullSource注解来取代上面的null元素，下面这种写法和上面的效果一模一样：
    @NullSource
    @ValueSource(strings = { "a", "b", "c" })
1
2
执行结果如下图红框，可见null作为入参被执行了一次：

与@NullSource代表null入参类似，@EmptySource代表空字符串入参，用法和执行结果如下图所示：

如果想同时用null和空字符串做测试方法的入参，可以使用@NullAndEmptySource，用法和执行结果如下图所示：

枚举数据源(EnumSource)
EnumSource可以让一个枚举类中的全部或者部分值作为测试方法的入参；
创建枚举类Types.java，用于接下来的实战，如下，很简单只有三个值：
public enum Types {
    SMALL,
    BIG,
    UNKNOWN
}
1
2
3
4
5
先尝试用Types的每个值作为入参执行测试，可见只要添加@EnumSource即可，JUnit根据测试方法的入参类型知道要使用哪个枚举：
    @Order(6)
    @DisplayName("多个枚举型入参")
    @ParameterizedTest
    @EnumSource
    void enumSourceTest(Types type) {
        log.info("enumSourceTest [{}]", type);
    }
1
2
3
4
5
6
7
执行结果如下图所示：

如果不想执行枚举的所有值，而只要其中一部分，可以在name属性中指定：
@EnumSource(names={"SMALL", "UNKNOWN"})
1
执行结果如下图所示：

也可以指定哪些值不被执行，此时要添加mode属性并设置为EXCLUDE（mode属性如果不写，默认值是INCLUDE，前面的例子中就是默认值）：
@EnumSource(mode= EnumSource.Mode.EXCLUDE, names={"SMALL", "UNKNOWN"})
1
执行结果如下，可见SMALL和UNKNOWN都没有执行：

方法数据源(MethodSource)
@MethodSource可以指定一个方法名称，该方法返回的元素集合作为测试方法的入参；
先来定义一个方法，该方法一般是static类型(否则要用@TestInstance修饰)，并且返回值是Stream类型：
    static Stream<String> stringProvider() {
        return Stream.of("apple1", "banana1");
    }
1
2
3
然后，测试方法用@MethodSource，并指定方法名stringProvider：
    @Order(9)
    @DisplayName("静态方法返回集合，用此集合中每个元素作为入参")
    @ParameterizedTest
    @MethodSource("stringProvider")
    void methodSourceTest(String candidate) {
        log.info("methodSourceTest [{}]", candidate);
    }
1
2
3
4
5
6
7
上面的stringProvider方法和测试方法methodSourceTest在同一个类中，如果它们不在同一个类中，就要指定静态方法的整个package路径、类名、方法名，如下所示，类名和方法名之间用#连接：
@Order(10)
    @DisplayName("静态方法返回集合，该静态方法在另一个类中")
    @ParameterizedTest
    @MethodSource("com.bolingcavalry.parameterized.service.impl.Utils#getStringStream")
    void methodSourceFromOtherClassTest(String candidate) {
        log.info("methodSourceFromOtherClassTest [{}]", candidate);
    }
1
2
3
4
5
6
7
如果不在@MethodSource中指定方法名，JUnit会寻找和测试方法同名的静态方法，举例如下，静态方法methodSourceWithoutMethodNameTest会被作为测试方法的数据来源：
    static Stream<String> methodSourceWithoutMethodNameTest() {
        return Stream.of("apple3", "banana3");
    }

    @Order(11)
    @DisplayName("静态方法返回集合，不指定静态方法名，自动匹配")
    @ParameterizedTest
    @MethodSource
    void methodSourceWithoutMethodNameTest(String candidate) {
        log.info("methodSourceWithoutMethodNameTest [{}]", candidate);
    }
1
2
3
4
5
6
7
8
9
10
11
执行结果如下：

Csv格式数据源(CsvSource)
前面的测试方法入参都只有一个，在面对多个入参的测试方法时，@CsvSource就派上用场了，演示代码如下所示，可见数据是普通的CSV格式，每条记录有两个字段，对应测试方法的两个入参：
    @Order(12)
    @DisplayName("CSV格式多条记录入参")
    @ParameterizedTest
    @CsvSource({
            "apple1, 11",
            "banana1, 12",
            "''lemon1, lime1'', 0x0A"
    })
    void csvSourceTest(String fruit, int rank) {
        log.info("csvSourceTest, fruit [{}], rank [{}]", fruit, rank);
    }
1
2
3
4
5
6
7
8
9
10
11
执行结果如下，通过日志可以确定，每条记录的两个字段能匹配到测试方法的两个入参中：


另外@CsvSource还提供了一个属性nullValues，作用是将指定的字符串识别为null，下面这个设置就是把CSV数据中所有的NIL识别为null，再传给测试方法：

    @Order(13)
    @DisplayName("CSV格式多条记录入参(识别null)")
    @ParameterizedTest
    @CsvSource(value = {
            "apple2, 21",
            "banana2, 22",
            "''lemon2, lime2'', 0x0A",
            "NIL, 3" },
            nullValues = "NIL"
    )
    void csvSourceWillNullTokenTest(String fruit, int rank) {
        log.info("csvSourceWillNullTokenTest, fruit [{}], rank [{}]", fruit, rank);
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
执行结果如下，可见字符串NIL到测试方法后已变成null：

Csv文件数据源
@CsvSource解决了测试方法入参有多个字段的问题，但是把作为入参的测试数据写在源文件中似乎不合适，尤其是数据量很大的情况下，这种场景适合用@CsvFileSource，该注解用于指定csv文件作为数据源，注意numLinesToSkip属性指定跳过的行数，可以用来跳过表头：
    @Order(14)
    @DisplayName("CSV文件多条记录入参")
    @ParameterizedTest
    @CsvFileSource(files = "src/test/resources/two-column.csv", numLinesToSkip = 1)
    void csvFileTest(String country, int reference) {
        log.info("csvSourceTest, country [{}], reference [{}]", country, reference);
    }
1
2
3
4
5
6
7
在src/test/resources/创建文件two-column.csv，内容如下：
Country, reference
Sweden, 1
Poland, 2
"United States of America", 3
1
2
3
4
上述代码执行结果如下，代码中没有测试数据，显得更加简洁一些：

期待《进阶》篇
至此，咱们队JUnit5的参数化测试(Parameterized)有了初步的了解，可以通过各种数据源注解给测试方法制造更多的参数，但仅掌握这些还是不够的，依然有一些问题待解决，例如更自由的数据源定制、跟完善的多字段处理方案等等，下一篇《进阶》咱们一起来体验更多参数化测试的高级功能；
欢迎关注公众号：程序员欣宸
微信搜索「程序员欣宸」，我是欣宸，期待与您一同畅游Java世界…

文章知识点与官方知识档案匹配，可进一步学习相关知识
Java技能树注解基于注解的单元测试57978 人正在系统学习中

程序员欣宸
已关注

2


5


1

专栏目录
JUnit5学习之七：参数化测试(Parameterized Tests)进阶
m0_63174529的博客
 177
参数化测试的数据源和测试方法入参的数据类型必须要保持一致吗？其实JUnit5并没有严格要求，而事实上JUnit5是可以做一些自动或手动的类型转换的； 如下代码，数据源是int型数组，但测试方法的入参却是double： @Order(16) @DisplayName(“int型自动转为double型入参”) @ParameterizedTest @ValueSource(ints = { 1,2,3 }) void argumentConversionTest(double candidate) ..
action-junit:在github上尝试一个juint测试
04-18
尝试对github动作进行一次juint测试。
评论1条写评论
血夜之末
热评
这么好的文章，看的人这么少。实在可惜啊。
Junit5中的参数化测试（Parameterized Tests）指南
爱穿格子裤的专栏
 3537
作为新一代的测试框架，Junit5中有很多大家喜欢的测试方案，个人认为最突出的就是能够进行参数化的测试（Parameterized Tests）。 简介 通常，会遇到这样的情况，同一个测试案例，改变的只是测试时候输入的参数不同。按照之前的做法，可能会是通过每个输入参数都写一个测试，或者将测试参数封装到集合中循环遍历执行测试。在新版的Junit5中，已经提供了一种更加优雅的方式来进行。 该特性允许我...
Junit5使用CsvFileSource创建csv文件进行参数化测试
@ZhengLan的博客
 1839
一、创建工程，建一个maven项目 二、导入Junit5的依赖，自动导入包 <dependencies> <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-engine</artifactId> <version>5.5.2</v
JUnit4 参数化测试（ Parameterized tests）
热门推荐
明明如月的技术博客
 1万+
@RunWith　　当类被@RunWith注解修饰，或者类继承了一个被该注解修饰的类，JUnit将会使用这个注解所指明的运行器（runner）来运行测试，而不使用JUnit默认的运行器。　　要进行参数化测试，需要在类上面指定如下的运行器：@RunWith (Parameterized.class)然后，在提供数据的方法上加上一个@Parameters注解，这个方法必须是静态static的，并且返回...
JUnit5学习之六：参数化测试(Parameterized Tests)基础，java架构师的简历模板
m0_63174811的博客
 279
Assertions类 按条件执行 标签(Tag)和自定义注解 参数化测试(Parameterized Tests)基础 参数化测试(Parameterized Tests)进阶 综合进阶（终篇） 本篇概览 本文是《JUnit5学习》系列的第六篇，一起来实战强大参数化测试(Parameterized Tests)，即多次执行同一个测试方法，每次使用不同的参数； 由于参数化测试功能强大，内容也比前几篇的知识点多，为了方便大家阅读和实践，这里分为《基础》和《进阶》两篇来介绍，..
JUnit5学习之七：参数化测试(Parameterized Tests)进阶，java面试项目描述
m0_64867003的博客
 105
自定义数据源 前文使用了很多种数据源，如果您对它们的各种限制不满意，想要做更彻底的个性化定制，可以开发ArgumentsProvider接口的实现类，并使用@ArgumentsSource指定； 举个例子，先开发ArgumentsProvider的实现类MyArgumentsProvider.java： package com.bolingcavalry.parameterized.service.impl; import org.junit.jupiter.api.extension.Exte
junit 内部类测试_JUnit5学习之七：参数化测试进阶
weixin_39934302的博客
 31
欢迎访问我的GitHubhttps://github.com/zq2599/blog_demos内容：所有原创文章分类和汇总，及配套源码，涉及Java、Docker、Kubernetes、DevOPS等；本篇概览本文是《JUnit5学习》系列的第七篇，前文《Junit5学习之六：参数化测试基础 》咱们对JUnit5的参数化测试(Parameterized Tests)有了基本了解，可以使用各种数据...
JUnit5学习之一：基本操作
程序员欣宸的博客
 6911
《JUnit5学习》是欣宸的又一个实战主题的Java技术栈原创系列，欢迎大家一起来学习和掌握最新的单元测试技术
Junit5中实现参数化测试
HD243608836的博客
 2259
从Junit5开始，对参数化测试支持进行了大幅度的改进和提升。下面我们就一起来详细看看Junit5参数化测试的方法。 部署和依赖 和Junit4相比，Junit5框架更多在向测试平台演进。其核心组成也从以前的一个Junit的jar包更换成由多个模块组成。本文所需要依赖模块如下： junit-jupiter-engine: Junit的核心测试引擎 junit-jupiter-params:...
JUnit5学习之三：Assertions类
程序员欣宸的博客
 3296
断言是单元测试中最常用的测试手段，本文就来学习和操作常用的断言功能
JUnit5学习之八：综合进阶（终篇）
程序员欣宸的博客
 1313
将JUnit5的一些常用高级功能以实战的形式展现
JUnit5学习之二：Assumptions类
程序员欣宸的博客
 1831
学习Assumptions类的用法
JUnit5学习之四：按条件执行
程序员欣宸的博客
 1741
学习和实战如何设置单元测试的执行条件
JUnit5学习之五：标签(Tag)和自定义注解
程序员欣宸的博客
 2552
学习和实践JUnit5的标签过滤和自定义注解功能
深入探索：单元测试之Parameterized tests
chutongg028083的博客
 65
相关文章 深入探索：单元测试之Test runners 深入探索：单元测试之基于 suites 的聚合测试 深入探索：单元测试之测试执行顺序 深入探索：单元测试之异常测试 深入探索：单元测试之Ignnore测试和TimeOut测试 深入探索：单元测试之Categories 深入探索：单元测...
单元测试之JUnit 5 参数化测试使用手册
qq_35448165的博客
 1189
1. 概要 junit5是下一代JUnit测试框架，新增了很多特性帮助开发人员更好得编写测试用例。其中一大特性就是参数化测试，其目的就是让我们可以使用不同的参数多次执行一个测试方法，从而覆盖不同的条件分支。(简单来说就是既Cover 所有的情况，还能减少 Duplicate Code ) 在这边教程中，我们将深度探索参数化教程。现在开始吧! 2. 依赖 为了使用JUnit 5的参数化测试，我们需要从JUnit平台引入 junit-jupiter-params包。 如果我们项目使用Maven来管理，那么就需要
工业智能网关BL110应用之三十： 如何连接配置MQTT Client One服务器
最新发布
钡铼技术工业物联网
 393
MQTT Client One 支持多个发布主题，在发布主题项点击“添加”填写发布主题，在发布主题项的下拉框可以查看发布主题名。选择发布主题名，点击“删除”，就可以删除要删除的发布主题。MQTT Client One 同时也支持每个发布主题选择不同的数据点发布，鼠标光标放在右边方框内，点击鼠标右键，弹出提示框，点击“添加”，弹出数据点框，点击要发布的数据点，点击“确定”。如下图：发布主题“topic”只发布“COM1”的“FX3U”的设备的数据点“Y0”，其他的数据点不发布。工业智能网关BL110。
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 'JUnit5学习之六：参数化测试(Parameterized Tests)基础
程序员欣宸
于 2020-10-08 10:03:29 发布
2175
收藏 5
分类专栏： java服务端 文章标签： java 单元测试 junit
版权
java服务端
专栏收录该内容
175 篇文章46 订阅
订阅专栏
欢迎访问我的GitHub
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos
关于《JUnit5学习》系列
《JUnit5学习》系列旨在通过实战提升SpringBoot环境下的单元测试技能，一共八篇文章，链接如下：
基本操作
Assumptions类
Assertions类
按条件执行
标签(Tag)和自定义注解
参数化测试(Parameterized Tests)基础
参数化测试(Parameterized Tests)进阶
综合进阶（终篇）
本篇概览
本文是《JUnit5学习》系列的第六篇，一起来实战强大参数化测试(Parameterized Tests)，即多次执行同一个测试方法，每次使用不同的参数；
由于参数化测试功能强大，内容也比前几篇的知识点多，为了方便大家阅读和实践，这里分为《基础》和《进阶》两篇来介绍，本篇以学习参数化测试(Parameterized Tests)的基础知识为主，包含以下内容：
极速体验；
版本依赖；
ValueSource数据源
null、空字符串数据源
枚举数据源
方法数据源
Csv格式数据源
Csv文件数据源
源码下载
如果您不想编码，可以在GitHub下载所有源码，地址和链接信息如下表所示：
名称	链接	备注
项目主页	https://github.com/zq2599/blog_demos	该项目在GitHub上的主页
git仓库地址(https)	https://github.com/zq2599/blog_demos.git	该项目源码的仓库地址，https协议
git仓库地址(ssh)	git@github.com:zq2599/blog_demos.git	该项目源码的仓库地址，ssh协议
这个git项目中有多个文件夹，本章的应用在junitpractice文件夹下，如下图红框所示：
junitpractice是父子结构的工程，本篇的代码在parameterized子工程中，如下图：
极速体验
现在，咱们以最少的步骤体验最简单的参数化测试；
在父工程junitpractice里新建名为parameterized的子工程，pom.xml内容如下：


    4.0.0
    
        com.bolingcavalry
        junitpractice
        1.0-SNAPSHOT
        ../pom.xml
    
    com.bolingcavalry
    parameterized
    0.0.1-SNAPSHOT
    parameterized
    Demo project for parameterized expirence in Spring Boot junit
    
        1.8
    
<dependencyManagement>
    <dependencies>
        <dependency>
            <groupId>org.junit</groupId>
            <artifactId>junit-bom</artifactId>
            <version>5.7.0</version>
            <type>pom</type>
            <scope>import</scope>
        </dependency>
    </dependencies>

</dependencyManagement>

<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-web</artifactId>
    </dependency>

    <dependency>
        <groupId>org.projectlombok</groupId>
        <artifactId>lombok</artifactId>
    </dependency>

    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-test</artifactId>
        <scope>test</scope>
        <exclusions>
            <exclusion>
                <groupId>org.junit.jupiter</groupId>
                <artifactId>junit-jupiter</artifactId>
            </exclusion>
        </exclusions>
    </dependency>

    <dependency>
        <groupId>org.junit.jupiter</groupId>
        <artifactId>junit-jupiter</artifactId>
        <scope>test</scope>
    </dependency>
</dependencies>

<build>
    <plugins>
        <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
        </plugin>
    </plugins>
</build>


1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
新建测试类HelloTest.java，在这个位置：junitpractice\parameterized\src\test\java\com\bolingcavalry\parameterized\service\impl，内容如下：
package com.bolingcavalry.parameterized.service.impl;
import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.MethodOrderer;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.springframework.boot.test.context.SpringBootTest;
import static org.junit.jupiter.api.Assertions.assertTrue;
@SpringBootTest
@Slf4j
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class HelloTest {
@Order(1)
@DisplayName("多个字符串型入参")
@ParameterizedTest
@ValueSource(strings = { "a", "b", "c" })
void stringsTest(String candidate) {
    log.info("stringsTest [{}]", candidate);
    assertTrue(null!=candidate);
}

}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
执行该测试类，结果如下图：
从上图可见执行参数化测试需要两步：首先用@ParameterizedTest取代@Test，表名此方法要执行参数化测试，然后用@ValueSource指定每次测试时的参数来自字符串类型的数组：{ “a”, “b”, “c” }，每个元素执行一次；
至此，咱们已体验过最简单的参数化测试，可见就是想办法使一个测试方法多次执行，每次都用不同的参数，接下来有关参数化测试的更多配置和规则将配合实战编码逐个展开，一起来体验吧；
版本要求
先看看SpringBoot-2.3.4.RELEASE间接依赖的junit-jupiter-5.6.2版本中，ParameterizedTest的源码，如下图红框所示，此时的ParameterizedTest还只是体验版：
再看看junit-jupiter-5.7.0版本的ParameterizedTest源码，此时已经是稳定版了：
综上所述，如果要使用参数化测试，最好是将junit-jupiter升级到5.7.0或更高版本，如果您的应用使用了SpringBoot框架，junit-jupiter是被spring-boot-starter-test间接依赖进来的，需要排除这个间接依赖，再手动依赖进来才能确保使用指定版本，在pom.xml中执行如下三步操作：
dependencyManagement节点添加junit-bom，并指定版本号：



org.junit
junit-bom
5.7.0
pom
import



1
2
3
4
5
6
7
8
9
10
11
排除spring-boot-starter-test和junit-jupiter的间接依赖关系：

org.springframework.boot
spring-boot-starter-test
test


org.junit.jupiter
junit-jupiter



1
2
3
4
5
6
7
8
9
10
11
添加junit-jupiter依赖，此时会使用dependencyManagement中指定的版本号：

org.junit.jupiter
junit-jupiter
test

1
2
3
4
5
如下图，刷新可见已经用上了5.7.0版本：
版本问题解决了，接下来正式开始学习Parameterized Tests，先要了解的是有哪些数据源；
ValueSource数据源
ValueSource是最简单常用的数据源，支持以下类型的数组：
short
byte

int

long

float

double

char

boolean

java.lang.String

java.lang.Class

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
下面是整形数组的演示：
@Order(2)
@DisplayName(“多个int型入参”)
@ParameterizedTest
@ValueSource(ints = { 1,2,3 })
void intsTest(int candidate) {
log.info(“ints [{}]”, candidate);
assertTrue(candidate<3);
}
1
2
3
4
5
6
7
8
从上述代码可见，入参等于3的时候assertTrue无法通过，测试方法会失败，来看看实际执行效果，如下图：
null、空字符串数据源
在用字符串作为入参时，通常要考虑入参为null的情况，此时ValueSource一般会这样写：
@ValueSource(strings = { null, “a”, “b”, “c” })
1
此时可以使用@NullSource注解来取代上面的null元素，下面这种写法和上面的效果一模一样：
@NullSource
@ValueSource(strings = { “a”, “b”, “c” })
1
2
执行结果如下图红框，可见null作为入参被执行了一次：
与@NullSource代表null入参类似，@EmptySource代表空字符串入参，用法和执行结果如下图所示：
如果想同时用null和空字符串做测试方法的入参，可以使用@NullAndEmptySource，用法和执行结果如下图所示：
枚举数据源(EnumSource)
EnumSource可以让一个枚举类中的全部或者部分值作为测试方法的入参；
创建枚举类Types.java，用于接下来的实战，如下，很简单只有三个值：
public enum Types {
SMALL,
BIG,
UNKNOWN
}
1
2
3
4
5
先尝试用Types的每个值作为入参执行测试，可见只要添加@EnumSource即可，JUnit根据测试方法的入参类型知道要使用哪个枚举：
@Order(6)
@DisplayName(“多个枚举型入参”)
@ParameterizedTest
@EnumSource
void enumSourceTest(Types type) {
log.info(“enumSourceTest [{}]”, type);
}
1
2
3
4
5
6
7
执行结果如下图所示：
如果不想执行枚举的所有值，而只要其中一部分，可以在name属性中指定：
@EnumSource(names={“SMALL”, “UNKNOWN”})
1
执行结果如下图所示：
也可以指定哪些值不被执行，此时要添加mode属性并设置为EXCLUDE（mode属性如果不写，默认值是INCLUDE，前面的例子中就是默认值）：
@EnumSource(mode= EnumSource.Mode.EXCLUDE, names={“SMALL”, “UNKNOWN”})
1
执行结果如下，可见SMALL和UNKNOWN都没有执行：
方法数据源(MethodSource)
@MethodSource可以指定一个方法名称，该方法返回的元素集合作为测试方法的入参；
先来定义一个方法，该方法一般是static类型(否则要用@TestInstance修饰)，并且返回值是Stream类型：
static Stream stringProvider() {
return Stream.of(“apple1”, “banana1”);
}
1
2
3
然后，测试方法用@MethodSource，并指定方法名stringProvider：
@Order(9)
@DisplayName(“静态方法返回集合，用此集合中每个元素作为入参”)
@ParameterizedTest
@MethodSource(“stringProvider”)
void methodSourceTest(String candidate) {
log.info(“methodSourceTest [{}]”, candidate);
}
1
2
3
4
5
6
7
上面的stringProvider方法和测试方法methodSourceTest在同一个类中，如果它们不在同一个类中，就要指定静态方法的整个package路径、类名、方法名，如下所示，类名和方法名之间用#连接：
@Order(10)
@DisplayName(“静态方法返回集合，该静态方法在另一个类中”)
@ParameterizedTest
@MethodSource(“com.bolingcavalry.parameterized.service.impl.Utils#getStringStream”)
void methodSourceFromOtherClassTest(String candidate) {
log.info(“methodSourceFromOtherClassTest [{}]”, candidate);
}
1
2
3
4
5
6
7
如果不在@MethodSource中指定方法名，JUnit会寻找和测试方法同名的静态方法，举例如下，静态方法methodSourceWithoutMethodNameTest会被作为测试方法的数据来源：
static Stream methodSourceWithoutMethodNameTest() {
return Stream.of(“apple3”, “banana3”);
}
@Order(11)
@DisplayName("静态方法返回集合，不指定静态方法名，自动匹配")
@ParameterizedTest
@MethodSource
void methodSourceWithoutMethodNameTest(String candidate) {
    log.info("methodSourceWithoutMethodNameTest [{}]", candidate);
}

1
2
3
4
5
6
7
8
9
10
11
执行结果如下：
Csv格式数据源(CsvSource)
前面的测试方法入参都只有一个，在面对多个入参的测试方法时，@CsvSource就派上用场了，演示代码如下所示，可见数据是普通的CSV格式，每条记录有两个字段，对应测试方法的两个入参：
@Order(12)
@DisplayName(“CSV格式多条记录入参”)
@ParameterizedTest
@CsvSource({
“apple1, 11”,
“banana1, 12”,
“‘lemon1, lime1’, 0x0A”
})
void csvSourceTest(String fruit, int rank) {
log.info(“csvSourceTest, fruit [{}], rank [{}]”, fruit, rank);
}
1
2
3
4
5
6
7
8
9
10
11
执行结果如下，通过日志可以确定，每条记录的两个字段能匹配到测试方法的两个入参中：
另外@CsvSource还提供了一个属性nullValues，作用是将指定的字符串识别为null，下面这个设置就是把CSV数据中所有的NIL识别为null，再传给测试方法：
@Order(13)
@DisplayName("CSV格式多条记录入参(识别null)")
@ParameterizedTest
@CsvSource(value = {
        "apple2, 21",
        "banana2, 22",
        "''lemon2, lime2'', 0x0A",
        "NIL, 3" },
        nullValues = "NIL"
)
void csvSourceWillNullTokenTest(String fruit, int rank) {
    log.info("csvSourceWillNullTokenTest, fruit [{}], rank [{}]", fruit, rank);
}

1
2
3
4
5
6
7
8
9
10
11
12
13
执行结果如下，可见字符串NIL到测试方法后已变成null：
Csv文件数据源
@CsvSource解决了测试方法入参有多个字段的问题，但是把作为入参的测试数据写在源文件中似乎不合适，尤其是数据量很大的情况下，这种场景适合用@CsvFileSource，该注解用于指定csv文件作为数据源，注意numLinesToSkip属性指定跳过的行数，可以用来跳过表头：
@Order(14)
@DisplayName(“CSV文件多条记录入参”)
@ParameterizedTest
@CsvFileSource(files = “src/test/resources/two-column.csv”, numLinesToSkip = 1)
void csvFileTest(String country, int reference) {
log.info(“csvSourceTest, country [{}], reference [{}]”, country, reference);
}
1
2
3
4
5
6
7
在src/test/resources/创建文件two-column.csv，内容如下：
Country, reference
Sweden, 1
Poland, 2
“United States of America”, 3
1
2
3
4
上述代码执行结果如下，代码中没有测试数据，显得更加简洁一些：
期待《进阶》篇
至此，咱们队JUnit5的参数化测试(Parameterized)有了初步的了解，可以通过各种数据源注解给测试方法制造更多的参数，但仅掌握这些还是不够的，依然有一些问题待解决，例如更自由的数据源定制、跟完善的多字段处理方案等等，下一篇《进阶》咱们一起来体验更多参数化测试的高级功能；
欢迎关注公众号：程序员欣宸
微信搜索「程序员欣宸」，我是欣宸，期待与您一同畅游Java世界…
文章知识点与官方知识档案匹配，可进一步学习相关知识
Java技能树注解基于注解的单元测试57978 人正在系统学习中
程序员欣宸
已关注
2
5
1
专栏目录
JUnit5学习之七：参数化测试(Parameterized Tests)进阶
m0_63174529的博客
177
参数化测试的数据源和测试方法入参的数据类型必须要保持一致吗？其实JUnit5并没有严格要求，而事实上JUnit5是可以做一些自动或手动的类型转换的； 如下代码，数据源是int型数组，但测试方法的入参却是double： @Order(16) @DisplayName(“int型自动转为double型入参”) @ParameterizedTest @ValueSource(ints = { 1,2,3 }) void argumentConversionTest(double candidate) ..
action-junit:在github上尝试一个juint测试
04-18
尝试对github动作进行一次juint测试。
评论1条写评论
血夜之末
热评
这么好的文章，看的人这么少。实在可惜啊。
Junit5中的参数化测试（Parameterized Tests）指南
爱穿格子裤的专栏
3537
作为新一代的测试框架，Junit5中有很多大家喜欢的测试方案，个人认为最突出的就是能够进行参数化的测试（Parameterized Tests）。 简介 通常，会遇到这样的情况，同一个测试案例，改变的只是测试时候输入的参数不同。按照之前的做法，可能会是通过每个输入参数都写一个测试，或者将测试参数封装到集合中循环遍历执行测试。在新版的Junit5中，已经提供了一种更加优雅的方式来进行。 该特性允许我…
Junit5使用CsvFileSource创建csv文件进行参数化测试
@ZhengLan的博客
1839
一、创建工程，建一个maven项目 二、导入Junit5的依赖，自动导入包   org.junit.jupiter junit-jupiter-engine 5.5.2</v
JUnit4 参数化测试（ Parameterized tests）
热门推荐
明明如月的技术博客
1万+
@RunWith　　当类被@RunWith注解修饰，或者类继承了一个被该注解修饰的类，JUnit将会使用这个注解所指明的运行器（runner）来运行测试，而不使用JUnit默认的运行器。　　要进行参数化测试，需要在类上面指定如下的运行器：@RunWith (Parameterized.class)然后，在提供数据的方法上加上一个@Parameters注解，这个方法必须是静态static的，并且返回…
JUnit5学习之六：参数化测试(Parameterized Tests)基础，java架构师的简历模板
m0_63174811的博客
279
Assertions类 按条件执行 标签(Tag)和自定义注解 参数化测试(Parameterized Tests)基础 参数化测试(Parameterized Tests)进阶 综合进阶（终篇） 本篇概览 本文是《JUnit5学习》系列的第六篇，一起来实战强大参数化测试(Parameterized Tests)，即多次执行同一个测试方法，每次使用不同的参数； 由于参数化测试功能强大，内容也比前几篇的知识点多，为了方便大家阅读和实践，这里分为《基础》和《进阶》两篇来介绍，..
JUnit5学习之七：参数化测试(Parameterized Tests)进阶，java面试项目描述
m0_64867003的博客
105
自定义数据源 前文使用了很多种数据源，如果您对它们的各种限制不满意，想要做更彻底的个性化定制，可以开发ArgumentsProvider接口的实现类，并使用@ArgumentsSource指定； 举个例子，先开发ArgumentsProvider的实现类MyArgumentsProvider.java： package com.bolingcavalry.parameterized.service.impl; import org.junit.jupiter.api.extension.Exte
junit 内部类测试_JUnit5学习之七：参数化测试进阶
weixin_39934302的博客
31
欢迎访问我的GitHubhttps://github.com/zq2599/blog_demos内容：所有原创文章分类和汇总，及配套源码，涉及Java、Docker、Kubernetes、DevOPS等；本篇概览本文是《JUnit5学习》系列的第七篇，前文《Junit5学习之六：参数化测试基础 》咱们对JUnit5的参数化测试(Parameterized Tests)有了基本了解，可以使用各种数据…
JUnit5学习之一：基本操作
程序员欣宸的博客
6911
《JUnit5学习》是欣宸的又一个实战主题的Java技术栈原创系列，欢迎大家一起来学习和掌握最新的单元测试技术
Junit5中实现参数化测试
HD243608836的博客
2259
从Junit5开始，对参数化测试支持进行了大幅度的改进和提升。下面我们就一起来详细看看Junit5参数化测试的方法。 部署和依赖 和Junit4相比，Junit5框架更多在向测试平台演进。其核心组成也从以前的一个Junit的jar包更换成由多个模块组成。本文所需要依赖模块如下： junit-jupiter-engine: Junit的核心测试引擎 junit-jupiter-params:…
JUnit5学习之三：Assertions类
程序员欣宸的博客
3296
断言是单元测试中最常用的测试手段，本文就来学习和操作常用的断言功能
JUnit5学习之八：综合进阶（终篇）
程序员欣宸的博客
1313
将JUnit5的一些常用高级功能以实战的形式展现
JUnit5学习之二：Assumptions类
程序员欣宸的博客
1831
学习Assumptions类的用法
JUnit5学习之四：按条件执行
程序员欣宸的博客
1741
学习和实战如何设置单元测试的执行条件
JUnit5学习之五：标签(Tag)和自定义注解
程序员欣宸的博客
2552
学习和实践JUnit5的标签过滤和自定义注解功能
深入探索：单元测试之Parameterized tests
chutongg028083的博客
65
相关文章 深入探索：单元测试之Test runners 深入探索：单元测试之基于 suites 的聚合测试 深入探索：单元测试之测试执行顺序 深入探索：单元测试之异常测试 深入探索：单元测试之Ignnore测试和TimeOut测试 深入探索：单元测试之Categories 深入探索：单元测…
单元测试之JUnit 5 参数化测试使用手册
qq_35448165的博客
1189
1. 概要 junit5是下一代JUnit测试框架，新增了很多特性帮助开发人员更好得编写测试用例。其中一大特性就是参数化测试，其目的就是让我们可以使用不同的参数多次执行一个测试方法，从而覆盖不同的条件分支。(简单来说就是既Cover 所有的情况，还能减少 Duplicate Code ) 在这边教程中，我们将深度探索参数化教程。现在开始吧! 2. 依赖 为了使用JUnit 5的参数化测试，我们需要从JUnit平台引入 junit-jupiter-params包。 如果我们项目使用Maven来管理，那么就需要
工业智能网关BL110应用之三十： 如何连接配置MQTT Client One服务器
最新发布
钡铼技术工业物联网
393
MQTT Client One 支持多个发布主题，在发布主题项点击“添加”填写发布主题，在发布主题项的下拉框可以查看发布主题名。选择发布主题名，点击“删除”，就可以删除要删除的发布主题。MQTT Client One 同时也支持每个发布主题选择不同的数据点发布，鼠标光标放在右边方框内，点击鼠标右键，弹出提示框，点击“添加”，弹出数据点框，点击要发布的数据点，点击“确定”。如下图：发布主题“topic”只发布“COM1”的“FX3U”的设备的数据点“Y0”，其他的数据点不发布。工业智能网关BL110。
关于我们
招贤纳士
商务合作
寻求报道
400-660-0108
kefu@csdn.net
在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司
脚本设置
当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除
H
S
L
R
G
B
HEX
+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
隐藏
显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
隐藏
显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
隐藏
显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
隐藏
显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
隐藏
显示
联系作者:
源码:
Github
反馈:
greasyfork page
', 11);
INSERT INTO public.article_content VALUES (5, '2022-08-26 23:39:05.915', false, '2022-11-15 00:03:32.816', '<blockquote>
<h2 id="[https://www.cnblogs.com/bmilk/p/13225817.html](https://www.cnblogs.com/bmilk/p/13225817.html)
历史版本测试2
[Buffer简介](#buffer简介)"><a href="#httpswwwcnblogscombmilkp13225817html历史版本测试2buffer简介" id="httpswwwcnblogscombmilkp13225817html历史版本测试2buffer简介"><a href="https://www.cnblogs.com/bmilk/p/13225817.html" rel="nofollow" target="_blank">https://www.cnblogs.com/bmilk/p/13225817.html</a><br />
历史版本测试2<br />
<a href="#buffer简介" rel="nofollow" target="_blank">Buffer简介</a></a></h2>
</blockquote>
<p>缓冲区(Buffer):本质上是一个数组，用于临时保存、写入以及读取数据。在Java NIO中，该内存块包含在NIO Buffer对象当中，NIO Buffer对象还提供了一组接口来访问该内存块。<br />
根据数据类型的不同，Java为除了boolean类型之外的其余7种基本类型提供了相应类型的缓冲区，分别是ByteBuffer、CharBuffer、ShortBuffer、IntBuffer、LongBuffer、FloatBuffer、DoubleBuffer。他们都继承自抽象类Buffer类，他们的管理方式也都几乎一样。UML类图如下：<br />
<img src="https://cdn.nlark.com/yuque/0/2022/png/2853013/1645865638270-e8a946e6-58e2-4b49-9897-5deb1032dd23.png#clientId=u553119fb-8c4f-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=ub971b1ef&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=166&amp;originWidth=1285&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=16392&amp;status=done&amp;style=none&amp;taskId=u530d4693-6f60-4613-9d14-8be48462aaa&amp;title=" alt="image.png" loading="lazy" referrerPolicy="no-referrer" /></p>
<div class="mermaid">
pie title Pets adopted by volunteers
&quot;Dogs&quot; : 386
&quot;Cats&quot; : 85
&quot;Rats&quot; : 15
</div>
<p><a href="#imagepng" rel="nofollow" target="_blank"><img src="https://cdn.nlark.com/yuque/0/2022/png/2853013/1645866062612-d4a94d0a-72ac-471d-a30b-0f8220867671.png#clientId=u352ceb3e-7f07-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=709&amp;id=u6600b435&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=709&amp;originWidth=1173&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=1019200&amp;status=done&amp;style=none&amp;taskId=ub49e9b87-8bc0-46cd-8561-1b496a256c9&amp;title=&amp;width=1173" alt="image.png" loading="lazy" referrerPolicy="no-referrer" /></a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2853013/1645866108724-171b4292-0436-4af6-938b-37889e0e5528.png#clientId=u352ceb3e-7f07-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;height=363&amp;id=u2e42ab89&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=363&amp;originWidth=1184&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=729502&amp;status=done&amp;style=none&amp;taskId=u825a8448-2b87-401a-a0eb-83dbae46660&amp;title=&amp;width=1184" alt="image.png" loading="lazy" referrerPolicy="no-referrer" /></p>
<h2 id="[Buffer的核心属性](#buffer的核心属性)"><a href="#buffer的核心属性" id="buffer的核心属性"><a href="#buffer的核心属性" rel="nofollow" target="_blank">Buffer的核心属性</a></a></h2>
<p>BUffer类的部分实现如下：</p>
<pre><code>public abstract class Buffer {
    // Invariants: mark &lt;= position &lt;= limit &lt;= capacity
    private int mark = -1;
    private int position = 0;
    private int limit;
    private int capacity;

    //构造方法
    Buffer(int mark, int pos, int lim, int cap) {       // package-private
        if (cap &lt; 0)
            throw new IllegalArgumentException(&quot;Negative capacity: &quot; + cap);
        this.capacity = cap;
        limit(lim);
        position(pos);
        if (mark &gt;= 0) {
            if (mark &gt; pos)
                throw new IllegalArgumentException(&quot;mark &gt; position: (&quot;
                                                   + mark + &quot; &gt; &quot; + pos + &quot;)&quot;);
            this.mark = mark;
        }
    }
    
    /**
     * Returns this buffer''s capacity.
     *
     * @return  The capacity of this buffer
     */
    //返回这个Buffer的容量
    public final int capacity() {
        return capacity;
    }

    /**
     * Returns this buffer''s position.
     *
     * @return  The position of this buffer
     */
    //返回这个Buffer中当前的位置(当前操作数)
    public final int position() {
        return position;
    }

    /**
     * Returns this buffer''s limit.
     *
     * @return  The limit of this buffer
     */
    //返回当前Buffer中可以被操作的元素的个数
    public final int limit() {
        return limit;
    }

    /**
     * Sets this buffer''s mark at its position.
     *
     * @return  This buffer
     */
    //记录当前position的位置
    public final Buffer mark() {
        mark = position;
        return this;
    }
    
    public final Buffer reset() {
        int m = mark;
        if (m &lt; 0)
            throw new InvalidMarkException();
        position = m;
        return this;
    }

}
</code></pre>
<p>其中定义了四个Buffer属性，对应的描述如下</p>
<p>属性</p>
<p>描述</p>
<p>capacity</p>
<p>容量；用于描述这个Buffer大小，即创建的数组的长度，一旦声明不可以被改变</p>
<p>position</p>
<p>位置，表示当前缓冲区中正在操作的数据的位置，在切换读取时会将其置0</p>
<p>limit</p>
<p>界限、限制；表示当前缓冲区中可以操作的数据的大小，默认情况下为Buffer的大小，切换为读取模式后为数组中元素的个数(准确的说时切换之前position的值)</p>
<p>mark</p>
<p>标记；用于记录当前position的位置，后续操作过程中可以使用reset()方法将position还原至最后一次mark的位置</p>
<h2 id="[Buffer的创建与使用(ByteBuffer为例)](#buffer的创建与使用bytebuffer为例)"><a href="#buffer的创建与使用bytebuffer为例" id="buffer的创建与使用bytebuffer为例"><a href="#buffer的创建与使用bytebuffer为例" rel="nofollow" target="_blank">Buffer的创建与使用(ByteBuffer为例)</a></a></h2>
<h4 id="[Buffer的创建](#buffer的创建)"><a href="#buffer的创建" id="buffer的创建"><a href="#buffer的创建" rel="nofollow" target="_blank">Buffer的创建</a></a></h4>
<p>在Java NIO中可以使用对应Buffer类的allocate()或者allocateDirect()静态方法创建。<br />
//使用allocate()创建<br />
<code>ByteBuffer byteBuffer=ByteBuffer.allocate(1024);</code><br />
//使用allocateDirect()创建<br />
<code>ByteBuffer byteBuffer = ByteBuffer.allocateDirect(1024);</code><br />
而Buffer的本质是一个数组，创建时需要指定数组的大小</p>
<h4 id="[Buffer的使用](#buffer的使用)"><a href="#buffer的使用" id="buffer的使用"><a href="#buffer的使用" rel="nofollow" target="_blank">Buffer的使用</a></a></h4>
<p>Buffer的使用一般分为四个步骤</p>
<ol>
<li>向Buffer中写入数据</li>
<li>将Buffer切换为读取模式</li>
<li>读取Buffer</li>
<li>将Buffer清空，供后续写入使用</li>
</ol>
<p><strong>1. 写如数据</strong></p>
<pre><code>//使用put()方法向Buffer中写入数据
byteBuffer.put(&quot;bmilk&quot;.getBytes());

//使用Channel#read()向Buffer中写入数据
channel.read(byteBuffer);
</code></pre>
<p>调用flip()方法会将position设回0，并将limit设置成之前position的值。即，现在使用position标记读的位置，limit表示之前写进了多少个byte,也就是现在能读取多少个byte等。<br />
<strong>3. 读取Buffer</strong><br />
读取Buffer有两种方式：</p>
<ol>
<li>从Buffer种读取数据到Channel</li>
<li>使用get()方法从Buffer种读取数据
<p>//从Buffe中将数据写入通道<br />
inChannel.write(byteBuffer)</p>
<p>//使用get()方法从BUffer中读取数据<br />
byte[] bytes=new byte[byteBuffer.limit()];<br />
byteBuffer.get(bytes);</p>
</li>
</ol>
<h4 id="[其他的一些方法](#其他的一些方法)"><a href="#其他的一些方法" id="其他的一些方法"><a href="#其他的一些方法" rel="nofollow" target="_blank">其他的一些方法</a></a></h4>
<ol>
<li>
<p>使用rewind()从Buffer重复读取数据</p>
<p>使用<code>rewind()</code>从<code>Buffer</code>重复读取数据<br />
//Buffer.rewind()将position设回0，所以你可以重读Buffer中的所有数据。<br />
//limit保持不变，仍然表示能从Buffer中读取多少个元素（byte、char等）。<br />
Buffer rewind = byteBuffer.rewind();</p>
</li>
<li>
<p>compact()方法</p>
</li>
</ol>
<p>clear()会使使各个指针恢复初始位置，但是实际中可能存在部分数据还没有被使用，而后续需要使用。又必须清理一部分Buffer的空间，compact()方法会将所有未读数据拷贝到Buffer的起始处，然后将position指针设置到最后一个未读元素的后面，现在Buffer可以进行写数据，但是不会覆盖前面的未读的数据。</p>
<ol>
<li>mark()方法与reset()方法</li>
</ol>
<p>通过调用Buffer.mark()方法，可以标记Buffer中的当前的position。之后可以通过调用Buffer.reset()方法恢复到这个position。</p>
<pre><code>//使用mark标记当前的position位置
byteBUffer.mark()
//使用reset方法使position指针返回这个位置
byteBuffer.reset()
</code></pre>
<p>4.equals()方法与compareTo()方法<br />
当需要比较两个Buffer时可以使用equals()方法与compareTo()方法。<br />
equals()方法判断两个方式是否相等，当满足下列条件时，表示两个Buffer相等</p>
<ul>
<li>有相同的类型（byte、char、int等）</li>
<li>Buffer中剩余的byte、char等的个数相等。</li>
<li>‘Buffer‘中所有剩余的‘byte‘、‘char‘等都相同</li>
</ul>
<p>compareTo()方法比较两个两个Buffer的大小，仅比较剩余元素(byte、char等)<br />
如果满足下列条件，则认为一个Buffer“小于”另一个Buffer：</p>
<ul>
<li>第一个不相等的元素小于另一个Buffer中对应的元素</li>
<li>所有元素都相等，但第一个Buffer比另一个先耗尽(第一个Buffer的元素个数比另一个少)。</li>
</ul>
<h2 id="[直接缓冲区与非直接缓冲区](#直接缓冲区与非直接缓冲区)"><a href="#直接缓冲区与非直接缓冲区" id="直接缓冲区与非直接缓冲区"><a href="#直接缓冲区与非直接缓冲区" rel="nofollow" target="_blank">直接缓冲区与非直接缓冲区</a></a></h2>
<ul>
<li>非直接缓冲区：通过allocate()方法分配缓冲区，将缓冲区建立在JVM内存中</li>
<li>直接俄缓冲区：通过allocateDirect()方法分配直接缓冲区，将缓冲区建立在物理内存中，可以在某些情况下提高效率</li>
</ul>
<h4 id="[非直接缓冲区](#非直接缓冲区)"><a href="#非直接缓冲区" id="非直接缓冲区"><a href="#非直接缓冲区" rel="nofollow" target="_blank">非直接缓冲区</a></a></h4>
<ul>
<li>非直接缓冲区数据流向图</li>
<li><img src="https://cdn.nlark.com/yuque/0/2022/png/2853013/1645865812333-701a34a7-f8df-4d90-99b9-32d42d77806f.png#clientId=u553119fb-8c4f-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=u7b0356c5&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=563&amp;originWidth=935&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50991&amp;status=done&amp;style=none&amp;taskId=uf0f39458-572f-4752-8904-4344b33f336&amp;title=" alt="image.png" loading="lazy" referrerPolicy="no-referrer" /></li>
</ul>
<h4 id="[直接缓冲区](#直接缓冲区)"><a href="#直接缓冲区" id="直接缓冲区"><a href="#直接缓冲区" rel="nofollow" target="_blank">直接缓冲区</a></a></h4>
<ul>
<li>直接缓冲区数据流向图</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/2853013/1645865823029-daad8ac8-1343-47ea-976f-3010bc0a91d6.png#clientId=u553119fb-8c4f-4&amp;crop=0&amp;crop=0&amp;crop=1&amp;crop=1&amp;from=paste&amp;id=uacf5d2be&amp;margin=%5Bobject%20Object%5D&amp;name=image.png&amp;originHeight=580&amp;originWidth=935&amp;originalType=url&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=55610&amp;status=done&amp;style=none&amp;taskId=ua9c8765d-993f-4ea0-9369-0aaea559663&amp;title=" alt="image.png" loading="lazy" referrerPolicy="no-referrer" /><br />
直接缓冲区（物理内存映射文件）：相比非直接缓冲区省略了copy的过程，所以说直接缓区可以一定程度上提高效率<br />
弊端：</p>
<ul>
<li>开辟空间时资源消耗大</li>
<li>不安全，java程序将数据写入物理内存映射文件中，之后数据将不受Java程序控制，<br />
什么时候写入硬盘无法控制（由操作系统控制），当垃圾回收机制释放引用后才能断开与之的连接</li>
</ul>
<h4 id="[小结](#小结)"><a href="#小结" id="小结"><a href="#小结" rel="nofollow" target="_blank">小结</a></a></h4>
<ul>
<li>缓冲区要么是直接的，要么是非直接的如果为直接字节缓冲区，则java虚拟机会见最大努力直接在此缓冲区上执行本机I/O。也就是说，每次调用基础操作系统的I/O之前或之后，虚拟机都回尽量避免将缓冲区的内容复制到中间缓冲区或者从中间缓冲区中复制内容。</li>
<li>直接字节缓冲区可以通过调用此类的allocateDirect()工厂方法来创建，此方法返回的缓冲区进行分配和取消分配所需的程本通常高于非直接缓冲区，直接缓冲区的内容可以驻留在常规的垃圾回收堆之外，因此他们对应用程序内存需求造成的影响可能并不明显，所以建议直接缓冲区主要分配给易受基础系统的本机I/O操作影响的大型、持久得缓冲区。一般情况下，最好尽在直接缓冲区能在程序性能方面带来明显好处时分配他们。</li>
<li>直接字节缓冲区还可以通过FileChannel的map()方法，将文件区域直接映射到内存中来创建，该方法返回MappedByteBuffer。Java的实现有助于JNI从本地及代码创建直接字节缓冲区，如果以上这些缓冲区中的某个缓冲区实例指的是不可访问的内存区域。则试图访问该区域不会更改缓冲区的内容，并且将会在访问期间或稍后的时间导致抛出不确定的异常</li>
<li>字节缓冲区是直接缓冲区还是非直接缓冲区可以通过调用其isDirect()方法来确定，提供此方法是为了能够在性能关键型代码中执行显式缓冲区管理。</li>
</ul>
<h2 id="[总结](#总结)"><a href="#总结" id="总结"><a href="#总结" rel="nofollow" target="_blank">总结</a></a></h2>
<p>本文简单介绍了Buffer的种类，并对常用方法进行简单的介绍</p>
', '> [https://www.cnblogs.com/bmilk/p/13225817.html](https://www.cnblogs.com/bmilk/p/13225817.html)
历史版本测试2
[Buffer简介](#buffer简介)
---------------------

缓冲区(Buffer):本质上是一个数组，用于临时保存、写入以及读取数据。在Java NIO中，该内存块包含在NIO Buffer对象当中，NIO Buffer对象还提供了一组接口来访问该内存块。  
根据数据类型的不同，Java为除了boolean类型之外的其余7种基本类型提供了相应类型的缓冲区，分别是ByteBuffer、CharBuffer、ShortBuffer、IntBuffer、LongBuffer、FloatBuffer、DoubleBuffer。他们都继承自抽象类Buffer类，他们的管理方式也都几乎一样。UML类图如下：  
![image.png](https://cdn.nlark.com/yuque/0/2022/png/2853013/1645865638270-e8a946e6-58e2-4b49-9897-5deb1032dd23.png#clientId=u553119fb-8c4f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=ub971b1ef&margin=%5Bobject%20Object%5D&name=image.png&originHeight=166&originWidth=1285&originalType=url&ratio=1&rotation=0&showTitle=false&size=16392&status=done&style=none&taskId=u530d4693-6f60-4613-9d14-8be48462aaa&title=)  

```mermaid
pie title Pets adopted by volunteers
"Dogs" : 386
"Cats" : 85
"Rats" : 15
```
[![image.png](https://cdn.nlark.com/yuque/0/2022/png/2853013/1645866062612-d4a94d0a-72ac-471d-a30b-0f8220867671.png#clientId=u352ceb3e-7f07-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=709&id=u6600b435&margin=%5Bobject%20Object%5D&name=image.png&originHeight=709&originWidth=1173&originalType=binary&ratio=1&rotation=0&showTitle=false&size=1019200&status=done&style=none&taskId=ub49e9b87-8bc0-46cd-8561-1b496a256c9&title=&width=1173)](#imagepng)

![image.png](https://cdn.nlark.com/yuque/0/2022/png/2853013/1645866108724-171b4292-0436-4af6-938b-37889e0e5528.png#clientId=u352ceb3e-7f07-4&crop=0&crop=0&crop=1&crop=1&from=paste&height=363&id=u2e42ab89&margin=%5Bobject%20Object%5D&name=image.png&originHeight=363&originWidth=1184&originalType=binary&ratio=1&rotation=0&showTitle=false&size=729502&status=done&style=none&taskId=u825a8448-2b87-401a-a0eb-83dbae46660&title=&width=1184)  

[Buffer的核心属性](#buffer的核心属性)
---------------------------

BUffer类的部分实现如下：

    public abstract class Buffer {
        // Invariants: mark <= position <= limit <= capacity
        private int mark = -1;
        private int position = 0;
        private int limit;
        private int capacity;
    
        //构造方法
        Buffer(int mark, int pos, int lim, int cap) {       // package-private
            if (cap < 0)
                throw new IllegalArgumentException("Negative capacity: " + cap);
            this.capacity = cap;
            limit(lim);
            position(pos);
            if (mark >= 0) {
                if (mark > pos)
                    throw new IllegalArgumentException("mark > position: ("
                                                       + mark + " > " + pos + ")");
                this.mark = mark;
            }
        }
        
        /**
         * Returns this buffer''s capacity.
         *
         * @return  The capacity of this buffer
         */
        //返回这个Buffer的容量
        public final int capacity() {
            return capacity;
        }
    
        /**
         * Returns this buffer''s position.
         *
         * @return  The position of this buffer
         */
        //返回这个Buffer中当前的位置(当前操作数)
        public final int position() {
            return position;
        }
    
        /**
         * Returns this buffer''s limit.
         *
         * @return  The limit of this buffer
         */
        //返回当前Buffer中可以被操作的元素的个数
        public final int limit() {
            return limit;
        }
    
        /**
         * Sets this buffer''s mark at its position.
         *
         * @return  This buffer
         */
        //记录当前position的位置
        public final Buffer mark() {
            mark = position;
            return this;
        }
        
        public final Buffer reset() {
            int m = mark;
            if (m < 0)
                throw new InvalidMarkException();
            position = m;
            return this;
        }
    
    }
    
    

其中定义了四个Buffer属性，对应的描述如下

属性

描述

capacity

容量；用于描述这个Buffer大小，即创建的数组的长度，一旦声明不可以被改变

position

位置，表示当前缓冲区中正在操作的数据的位置，在切换读取时会将其置0

limit

界限、限制；表示当前缓冲区中可以操作的数据的大小，默认情况下为Buffer的大小，切换为读取模式后为数组中元素的个数(准确的说时切换之前position的值)

mark

标记；用于记录当前position的位置，后续操作过程中可以使用reset()方法将position还原至最后一次mark的位置

  
  

[Buffer的创建与使用(ByteBuffer为例)](#buffer的创建与使用bytebuffer为例)
-------------------------------------------------------

#### [Buffer的创建](#buffer的创建)

在Java NIO中可以使用对应Buffer类的allocate()或者allocateDirect()静态方法创建。  
//使用allocate()创建  
`ByteBuffer byteBuffer=ByteBuffer.allocate(1024);`  
//使用allocateDirect()创建  
`ByteBuffer byteBuffer = ByteBuffer.allocateDirect(1024);`  
而Buffer的本质是一个数组，创建时需要指定数组的大小  

#### [Buffer的使用](#buffer的使用)

Buffer的使用一般分为四个步骤

1.  向Buffer中写入数据
2.  将Buffer切换为读取模式
3.  读取Buffer
4.  将Buffer清空，供后续写入使用

**1\. 写如数据**

    //使用put()方法向Buffer中写入数据
    byteBuffer.put("bmilk".getBytes());
    
    //使用Channel#read()向Buffer中写入数据
    channel.read(byteBuffer);
    

调用flip()方法会将position设回0，并将limit设置成之前position的值。即，现在使用position标记读的位置，limit表示之前写进了多少个byte,也就是现在能读取多少个byte等。  
**3\. 读取Buffer**  
读取Buffer有两种方式：

1.  从Buffer种读取数据到Channel
2.  使用get()方法从Buffer种读取数据

    //从Buffe中将数据写入通道
    inChannel.write(byteBuffer)
    
    //使用get()方法从BUffer中读取数据
    byte[] bytes=new byte[byteBuffer.limit()];
    byteBuffer.get(bytes);
    

#### [其他的一些方法](#其他的一些方法)

1.  使用rewind()从Buffer重复读取数据

    使用`rewind()`从`Buffer`重复读取数据
    //Buffer.rewind()将position设回0，所以你可以重读Buffer中的所有数据。
    //limit保持不变，仍然表示能从Buffer中读取多少个元素（byte、char等）。
    Buffer rewind = byteBuffer.rewind();
    

1.  compact()方法

clear()会使使各个指针恢复初始位置，但是实际中可能存在部分数据还没有被使用，而后续需要使用。又必须清理一部分Buffer的空间，compact()方法会将所有未读数据拷贝到Buffer的起始处，然后将position指针设置到最后一个未读元素的后面，现在Buffer可以进行写数据，但是不会覆盖前面的未读的数据。

1.  mark()方法与reset()方法

通过调用Buffer.mark()方法，可以标记Buffer中的当前的position。之后可以通过调用Buffer.reset()方法恢复到这个position。

    //使用mark标记当前的position位置
    byteBUffer.mark()
    //使用reset方法使position指针返回这个位置
    byteBuffer.reset()
    

4.equals()方法与compareTo()方法  
当需要比较两个Buffer时可以使用equals()方法与compareTo()方法。  
equals()方法判断两个方式是否相等，当满足下列条件时，表示两个Buffer相等

*   有相同的类型（byte、char、int等）
*   Buffer中剩余的byte、char等的个数相等。
*   ‘Buffer‘中所有剩余的‘byte‘、‘char‘等都相同

compareTo()方法比较两个两个Buffer的大小，仅比较剩余元素(byte、char等)  
如果满足下列条件，则认为一个Buffer“小于”另一个Buffer：

*   第一个不相等的元素小于另一个Buffer中对应的元素
*   所有元素都相等，但第一个Buffer比另一个先耗尽(第一个Buffer的元素个数比另一个少)。  
    

[直接缓冲区与非直接缓冲区](#直接缓冲区与非直接缓冲区)
-----------------------------

*   非直接缓冲区：通过allocate()方法分配缓冲区，将缓冲区建立在JVM内存中
*   直接俄缓冲区：通过allocateDirect()方法分配直接缓冲区，将缓冲区建立在物理内存中，可以在某些情况下提高效率  
    

#### [非直接缓冲区](#非直接缓冲区)

*   非直接缓冲区数据流向图
*   ![image.png](https://cdn.nlark.com/yuque/0/2022/png/2853013/1645865812333-701a34a7-f8df-4d90-99b9-32d42d77806f.png#clientId=u553119fb-8c4f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=u7b0356c5&margin=%5Bobject%20Object%5D&name=image.png&originHeight=563&originWidth=935&originalType=url&ratio=1&rotation=0&showTitle=false&size=50991&status=done&style=none&taskId=uf0f39458-572f-4752-8904-4344b33f336&title=)  
    

#### [直接缓冲区](#直接缓冲区)

*   直接缓冲区数据流向图

![image.png](https://cdn.nlark.com/yuque/0/2022/png/2853013/1645865823029-daad8ac8-1343-47ea-976f-3010bc0a91d6.png#clientId=u553119fb-8c4f-4&crop=0&crop=0&crop=1&crop=1&from=paste&id=uacf5d2be&margin=%5Bobject%20Object%5D&name=image.png&originHeight=580&originWidth=935&originalType=url&ratio=1&rotation=0&showTitle=false&size=55610&status=done&style=none&taskId=ua9c8765d-993f-4ea0-9369-0aaea559663&title=)  
直接缓冲区（物理内存映射文件）：相比非直接缓冲区省略了copy的过程，所以说直接缓区可以一定程度上提高效率  
弊端：

*   开辟空间时资源消耗大
*   不安全，java程序将数据写入物理内存映射文件中，之后数据将不受Java程序控制，  
    什么时候写入硬盘无法控制（由操作系统控制），当垃圾回收机制释放引用后才能断开与之的连接  
    

#### [小结](#小结)

*   缓冲区要么是直接的，要么是非直接的如果为直接字节缓冲区，则java虚拟机会见最大努力直接在此缓冲区上执行本机I/O。也就是说，每次调用基础操作系统的I/O之前或之后，虚拟机都回尽量避免将缓冲区的内容复制到中间缓冲区或者从中间缓冲区中复制内容。
*   直接字节缓冲区可以通过调用此类的allocateDirect()工厂方法来创建，此方法返回的缓冲区进行分配和取消分配所需的程本通常高于非直接缓冲区，直接缓冲区的内容可以驻留在常规的垃圾回收堆之外，因此他们对应用程序内存需求造成的影响可能并不明显，所以建议直接缓冲区主要分配给易受基础系统的本机I/O操作影响的大型、持久得缓冲区。一般情况下，最好尽在直接缓冲区能在程序性能方面带来明显好处时分配他们。
*   直接字节缓冲区还可以通过FileChannel的map()方法，将文件区域直接映射到内存中来创建，该方法返回MappedByteBuffer。Java的实现有助于JNI从本地及代码创建直接字节缓冲区，如果以上这些缓冲区中的某个缓冲区实例指的是不可访问的内存区域。则试图访问该区域不会更改缓冲区的内容，并且将会在访问期间或稍后的时间导致抛出不确定的异常
*   字节缓冲区是直接缓冲区还是非直接缓冲区可以通过调用其isDirect()方法来确定，提供此方法是为了能够在性能关键型代码中执行显式缓冲区管理。  
    

[总结](#总结)
---------

本文简单介绍了Buffer的种类，并对常用方法进行简单的介绍', '
https://www.cnblogs.com/bmilk/p/13225817.html
历史版本测试2
Buffer简介

缓冲区(Buffer):本质上是一个数组，用于临时保存、写入以及读取数据。在Java NIO中，该内存块包含在NIO Buffer对象当中，NIO Buffer对象还提供了一组接口来访问该内存块。
根据数据类型的不同，Java为除了boolean类型之外的其余7种基本类型提供了相应类型的缓冲区，分别是ByteBuffer、CharBuffer、ShortBuffer、IntBuffer、LongBuffer、FloatBuffer、DoubleBuffer。他们都继承自抽象类Buffer类，他们的管理方式也都几乎一样。UML类图如下：


pie title Pets adopted by volunteers
"Dogs" : 386
"Cats" : 85
"Rats" : 15



Buffer的核心属性
BUffer类的部分实现如下：
public abstract class Buffer {
    // Invariants: mark <= position <= limit <= capacity
    private int mark = -1;
    private int position = 0;
    private int limit;
    private int capacity;

    //构造方法
    Buffer(int mark, int pos, int lim, int cap) {       // package-private
        if (cap < 0)
            throw new IllegalArgumentException("Negative capacity: " + cap);
        this.capacity = cap;
        limit(lim);
        position(pos);
        if (mark >= 0) {
            if (mark > pos)
                throw new IllegalArgumentException("mark > position: ("
                                                   + mark + " > " + pos + ")");
            this.mark = mark;
        }
    }
    
    /**
     * Returns this buffer''s capacity.
     *
     * @return  The capacity of this buffer
     */
    //返回这个Buffer的容量
    public final int capacity() {
        return capacity;
    }

    /**
     * Returns this buffer''s position.
     *
     * @return  The position of this buffer
     */
    //返回这个Buffer中当前的位置(当前操作数)
    public final int position() {
        return position;
    }

    /**
     * Returns this buffer''s limit.
     *
     * @return  The limit of this buffer
     */
    //返回当前Buffer中可以被操作的元素的个数
    public final int limit() {
        return limit;
    }

    /**
     * Sets this buffer''s mark at its position.
     *
     * @return  This buffer
     */
    //记录当前position的位置
    public final Buffer mark() {
        mark = position;
        return this;
    }
    
    public final Buffer reset() {
        int m = mark;
        if (m < 0)
            throw new InvalidMarkException();
        position = m;
        return this;
    }

}

其中定义了四个Buffer属性，对应的描述如下
属性
描述
capacity
容量；用于描述这个Buffer大小，即创建的数组的长度，一旦声明不可以被改变
position
位置，表示当前缓冲区中正在操作的数据的位置，在切换读取时会将其置0
limit
界限、限制；表示当前缓冲区中可以操作的数据的大小，默认情况下为Buffer的大小，切换为读取模式后为数组中元素的个数(准确的说时切换之前position的值)
mark
标记；用于记录当前position的位置，后续操作过程中可以使用reset()方法将position还原至最后一次mark的位置
Buffer的创建与使用(ByteBuffer为例)
Buffer的创建
在Java NIO中可以使用对应Buffer类的allocate()或者allocateDirect()静态方法创建。
//使用allocate()创建
ByteBuffer byteBuffer=ByteBuffer.allocate(1024);
//使用allocateDirect()创建
ByteBuffer byteBuffer = ByteBuffer.allocateDirect(1024);
而Buffer的本质是一个数组，创建时需要指定数组的大小
Buffer的使用
Buffer的使用一般分为四个步骤

向Buffer中写入数据
将Buffer切换为读取模式
读取Buffer
将Buffer清空，供后续写入使用

1. 写如数据
//使用put()方法向Buffer中写入数据
byteBuffer.put("bmilk".getBytes());

//使用Channel#read()向Buffer中写入数据
channel.read(byteBuffer);

调用flip()方法会将position设回0，并将limit设置成之前position的值。即，现在使用position标记读的位置，limit表示之前写进了多少个byte,也就是现在能读取多少个byte等。
3. 读取Buffer
读取Buffer有两种方式：

从Buffer种读取数据到Channel
使用get()方法从Buffer种读取数据
//从Buffe中将数据写入通道
inChannel.write(byteBuffer)
//使用get()方法从BUffer中读取数据
byte[] bytes=new byte[byteBuffer.limit()];
byteBuffer.get(bytes);


其他的一些方法


使用rewind()从Buffer重复读取数据
使用rewind()从Buffer重复读取数据
//Buffer.rewind()将position设回0，所以你可以重读Buffer中的所有数据。
//limit保持不变，仍然表示能从Buffer中读取多少个元素（byte、char等）。
Buffer rewind = byteBuffer.rewind();


compact()方法


clear()会使使各个指针恢复初始位置，但是实际中可能存在部分数据还没有被使用，而后续需要使用。又必须清理一部分Buffer的空间，compact()方法会将所有未读数据拷贝到Buffer的起始处，然后将position指针设置到最后一个未读元素的后面，现在Buffer可以进行写数据，但是不会覆盖前面的未读的数据。

mark()方法与reset()方法

通过调用Buffer.mark()方法，可以标记Buffer中的当前的position。之后可以通过调用Buffer.reset()方法恢复到这个position。
//使用mark标记当前的position位置
byteBUffer.mark()
//使用reset方法使position指针返回这个位置
byteBuffer.reset()

4.equals()方法与compareTo()方法
当需要比较两个Buffer时可以使用equals()方法与compareTo()方法。
equals()方法判断两个方式是否相等，当满足下列条件时，表示两个Buffer相等

有相同的类型（byte、char、int等）
Buffer中剩余的byte、char等的个数相等。
‘Buffer‘中所有剩余的‘byte‘、‘char‘等都相同

compareTo()方法比较两个两个Buffer的大小，仅比较剩余元素(byte、char等)
如果满足下列条件，则认为一个Buffer“小于”另一个Buffer：

第一个不相等的元素小于另一个Buffer中对应的元素
所有元素都相等，但第一个Buffer比另一个先耗尽(第一个Buffer的元素个数比另一个少)。

直接缓冲区与非直接缓冲区

非直接缓冲区：通过allocate()方法分配缓冲区，将缓冲区建立在JVM内存中
直接俄缓冲区：通过allocateDirect()方法分配直接缓冲区，将缓冲区建立在物理内存中，可以在某些情况下提高效率

非直接缓冲区

非直接缓冲区数据流向图


直接缓冲区

直接缓冲区数据流向图


直接缓冲区（物理内存映射文件）：相比非直接缓冲区省略了copy的过程，所以说直接缓区可以一定程度上提高效率
弊端：

开辟空间时资源消耗大
不安全，java程序将数据写入物理内存映射文件中，之后数据将不受Java程序控制，
什么时候写入硬盘无法控制（由操作系统控制），当垃圾回收机制释放引用后才能断开与之的连接

小结

缓冲区要么是直接的，要么是非直接的如果为直接字节缓冲区，则java虚拟机会见最大努力直接在此缓冲区上执行本机I/O。也就是说，每次调用基础操作系统的I/O之前或之后，虚拟机都回尽量避免将缓冲区的内容复制到中间缓冲区或者从中间缓冲区中复制内容。
直接字节缓冲区可以通过调用此类的allocateDirect()工厂方法来创建，此方法返回的缓冲区进行分配和取消分配所需的程本通常高于非直接缓冲区，直接缓冲区的内容可以驻留在常规的垃圾回收堆之外，因此他们对应用程序内存需求造成的影响可能并不明显，所以建议直接缓冲区主要分配给易受基础系统的本机I/O操作影响的大型、持久得缓冲区。一般情况下，最好尽在直接缓冲区能在程序性能方面带来明显好处时分配他们。
直接字节缓冲区还可以通过FileChannel的map()方法，将文件区域直接映射到内存中来创建，该方法返回MappedByteBuffer。Java的实现有助于JNI从本地及代码创建直接字节缓冲区，如果以上这些缓冲区中的某个缓冲区实例指的是不可访问的内存区域。则试图访问该区域不会更改缓冲区的内容，并且将会在访问期间或稍后的时间导致抛出不确定的异常
字节缓冲区是直接缓冲区还是非直接缓冲区可以通过调用其isDirect()方法来确定，提供此方法是为了能够在性能关键型代码中执行显式缓冲区管理。

总结
本文简单介绍了Buffer的种类，并对常用方法进行简单的介绍
', 12);
INSERT INTO public.article_content VALUES (1580605959804289025, '2022-10-14 01:06:41.713', false, '2022-12-01 17:10:45.858', '<p>草稿测试</p>
', '草稿测试', '草稿测试
', 1580605959804289024);
INSERT INTO public.article_content VALUES (6, '2022-08-27 05:12:34.381', false, '2022-10-20 00:58:00.826', '<h1 id="Nuxt 3 Minimal Starter"><a href="#nuxt-3-minimal-starter" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</a></h1>
<p>Look at the <a href="https://v3.nuxtjs.org" rel="nofollow">nuxt 3 documentation</a> to learn more.</p>
<h2 id="Setup"><a href="#setup" id="setup">Setup</a></h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="language-bash"># yarn yarn install # npm npm install # pnpm pnpm install --shamefully-hoist 
</code></pre>
<p><img align=right src="https://tva1.sinaimg.cn/large/005NWBIgly1go8137mdujj30k70k70x2.jpg" width="40%" alt="EMT"></p>
<h2 id="Development Server"><a href="#development-server" id="development-server">Development Server</a></h2>
<pre><code class="language-bash">npm run dev 
</code></pre>
<h2 id="Production"><a href="#production" id="production">Production</a></h2>
<p>Build the application for production:</p>
<pre><code class="language-bash">npm run build 
</code></pre>
<p>Locally preview production build:</p>
<pre><code class="language-bash">npm run preview 
</code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets" rel="nofollow">deployment documentation</a> for more information.</p>
', '# Nuxt 3 Minimal Starter


Look at the [nuxt 3 documentation](https://v3.nuxtjs.org) to learn more.

## Setup

Make sure to install the dependencies:

```bash
# yarn yarn install # npm npm install # pnpm pnpm install --shamefully-hoist 
```

<img align=right src="https://tva1.sinaimg.cn/large/005NWBIgly1go8137mdujj30k70k70x2.jpg" width="40%" alt="EMT">




## Development Server

```bash
npm run dev 
```

## Production

Build the application for production:

```bash
npm run build 
```

Locally preview production build:

```bash
npm run preview 
```

Checkout the [deployment documentation](https://v3.nuxtjs.org/guide/deploy/presets) for more information.', 'Nuxt 3 Minimal Starter
Look at the nuxt 3 documentation to learn more.
Setup
Make sure to install the dependencies:
# yarn yarn install # npm npm install # pnpm pnpm install --shamefully-hoist 


Development Server
npm run dev 

Production
Build the application for production:
npm run build 

Locally preview production build:
npm run preview 

Checkout the deployment documentation for more information.
', 13);
INSERT INTO public.article_content VALUES (1580798166561718272, '2022-10-14 13:50:27.387', false, '2022-10-14 14:18:55.384', '<h1><a href="#test" id="test">Test</a></h1>
<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>
<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', '# Test
<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>
<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', 'Test
Nuxt 3 Minimal Starter
Look at the nuxt 3 documentation to learn more.
Setup
Make sure to install the dependencies:
# yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  
Development Server
npm run dev  
Production
Build the application for production:
npm run build  
Locally preview production build:
npm run preview  
Checkout the deployment documentation for more information.
', 17);
INSERT INTO public.article_content VALUES (1582307902738137088, '2022-10-18 17:49:36.53', false, '2022-10-18 17:49:36.53', '<p>test</p>
', 'test', 'test
', 1582307902671028224);
INSERT INTO public.article_content VALUES (1583860253257105408, '2022-10-23 00:38:05.736', false, '2022-10-23 00:38:05.736', '<pre><code class="language-java">package link.dwsy.ddl.mq.listener;

import link.dwsy.ddl.mq.ArticleSearchConstants;
import link.dwsy.ddl.mq.process.ArticleSearchProcess;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.util.Set;
import java.util.concurrent.TimeUnit;

/**
 * @Author Dwsy
 * @Date 2022/9/11
 */
@Component
@Slf4j
public class ArticleSearch {

    public final String scoreKey = &quot;article:search:update:score&quot;;
    public final int bufferSize = 10;
    @Resource
    ArticleSearchProcess articleSearchProcess;
    @Resource
    RedisTemplate&lt;String, String&gt; redisTemplate;

    @RabbitListener(queues = ArticleSearchConstants.QUEUE_DDL_ARTICLE_SEARCH_UPDATE_SCORE)
    public void updateScore(Long articleId) {
        if (articleId != null) {

            Long size = redisTemplate.opsForValue().increment(scoreKey + &quot;num&quot;);
            redisTemplate.opsForSet().add(scoreKey, articleId.toString());
            String timeOut = redisTemplate.opsForValue().get(scoreKey + &quot;time:out&quot;);
            System.out.println(&quot;timeOut&quot; + timeOut);

            if (timeOut == null) {
                if (size != null &amp;&amp; size &gt;= bufferSize / 10) {
                    size = (long) bufferSize;
                    redisTemplate.delete(scoreKey + &quot;time:out&quot;);
                }
            }


            if (size != null &amp;&amp; size &gt;= bufferSize) {
                Boolean lock = redisTemplate.opsForValue().setIfAbsent(scoreKey + &quot;lock&quot;, &quot;1&quot;, 60, TimeUnit.SECONDS);
                if (Boolean.TRUE.equals(lock)) {
                    Set&lt;String&gt; articleIds = redisTemplate.opsForSet().members(scoreKey);
                    redisTemplate.delete(scoreKey);
                    redisTemplate.delete(scoreKey + &quot;num&quot;);
                    assert articleIds != null;
                    articleIds.stream().map(Long::parseLong).forEach(articleSearchProcess::updateScoreDataById);
                    redisTemplate.delete(scoreKey + &quot;lock&quot;);
                    log.info(&quot;article doc:{} score字段更新成功&quot;, articleIds);
                } else {
                    redisTemplate.opsForSet().add(scoreKey, articleId.toString());
                }

            } else {
                redisTemplate.opsForValue().set(scoreKey + &quot;time:out&quot;, &quot;1&quot;, 10, TimeUnit.SECONDS);
                log.info(&quot;bufferSize:{} QUEUE_DDL_ARTICLE_SEARCH_UPDATE_SCORE&quot;,size);
                redisTemplate.opsForSet().add(scoreKey, articleId.toString());
            }

        }

    }

    @RabbitListener(queues = {
            ArticleSearchConstants.QUEUE_DDL_ARTICLE_SEARCH_UPDATE,
            ArticleSearchConstants.QUEUE_DDL_ARTICLE_SEARCH_CREATE})
    public void updateAllDataById(Long articleId) {
        if (articleId != null) {
            if (articleSearchProcess.updateOrSaveAllDataById(articleId)) {
                log.info(&quot;article doc:{}新增或更新成功&quot;, articleId);
            }
        }
    }

    @RabbitListener(queues = ArticleSearchConstants.QUEUE_DDL_ARTICLE_SEARCH_DELETE)
    public void delById(Long articleId) {
        if (articleId != null) {
            if (articleSearchProcess.delDocById(articleId)) {
                log.info(&quot;article doc:{}删除成功&quot;, articleId);
            }
        }
    }
}
</code></pre>
', '```java
package link.dwsy.ddl.mq.listener;

import link.dwsy.ddl.mq.ArticleSearchConstants;
import link.dwsy.ddl.mq.process.ArticleSearchProcess;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.util.Set;
import java.util.concurrent.TimeUnit;

/**
 * @Author Dwsy
 * @Date 2022/9/11
 */
@Component
@Slf4j
public class ArticleSearch {

    public final String scoreKey = "article:search:update:score";
    public final int bufferSize = 10;
    @Resource
    ArticleSearchProcess articleSearchProcess;
    @Resource
    RedisTemplate<String, String> redisTemplate;

    @RabbitListener(queues = ArticleSearchConstants.QUEUE_DDL_ARTICLE_SEARCH_UPDATE_SCORE)
    public void updateScore(Long articleId) {
        if (articleId != null) {

            Long size = redisTemplate.opsForValue().increment(scoreKey + "num");
            redisTemplate.opsForSet().add(scoreKey, articleId.toString());
            String timeOut = redisTemplate.opsForValue().get(scoreKey + "time:out");
            System.out.println("timeOut" + timeOut);

            if (timeOut == null) {
                if (size != null && size >= bufferSize / 10) {
                    size = (long) bufferSize;
                    redisTemplate.delete(scoreKey + "time:out");
                }
            }


            if (size != null && size >= bufferSize) {
                Boolean lock = redisTemplate.opsForValue().setIfAbsent(scoreKey + "lock", "1", 60, TimeUnit.SECONDS);
                if (Boolean.TRUE.equals(lock)) {
                    Set<String> articleIds = redisTemplate.opsForSet().members(scoreKey);
                    redisTemplate.delete(scoreKey);
                    redisTemplate.delete(scoreKey + "num");
                    assert articleIds != null;
                    articleIds.stream().map(Long::parseLong).forEach(articleSearchProcess::updateScoreDataById);
                    redisTemplate.delete(scoreKey + "lock");
                    log.info("article doc:{} score字段更新成功", articleIds);
                } else {
                    redisTemplate.opsForSet().add(scoreKey, articleId.toString());
                }

            } else {
                redisTemplate.opsForValue().set(scoreKey + "time:out", "1", 10, TimeUnit.SECONDS);
                log.info("bufferSize:{} QUEUE_DDL_ARTICLE_SEARCH_UPDATE_SCORE",size);
                redisTemplate.opsForSet().add(scoreKey, articleId.toString());
            }

        }

    }

    @RabbitListener(queues = {
            ArticleSearchConstants.QUEUE_DDL_ARTICLE_SEARCH_UPDATE,
            ArticleSearchConstants.QUEUE_DDL_ARTICLE_SEARCH_CREATE})
    public void updateAllDataById(Long articleId) {
        if (articleId != null) {
            if (articleSearchProcess.updateOrSaveAllDataById(articleId)) {
                log.info("article doc:{}新增或更新成功", articleId);
            }
        }
    }

    @RabbitListener(queues = ArticleSearchConstants.QUEUE_DDL_ARTICLE_SEARCH_DELETE)
    public void delById(Long articleId) {
        if (articleId != null) {
            if (articleSearchProcess.delDocById(articleId)) {
                log.info("article doc:{}删除成功", articleId);
            }
        }
    }
}
```', 'package link.dwsy.ddl.mq.listener;

import link.dwsy.ddl.mq.ArticleSearchConstants;
import link.dwsy.ddl.mq.process.ArticleSearchProcess;
import lombok.extern.slf4j.Slf4j;
import org.springframework.amqp.rabbit.annotation.RabbitListener;
import org.springframework.data.redis.core.RedisTemplate;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.util.Set;
import java.util.concurrent.TimeUnit;

/**
 * @Author Dwsy
 * @Date 2022/9/11
 */
@Component
@Slf4j
public class ArticleSearch {

    public final String scoreKey = &quot;article:search:update:score&quot;;
    public final int bufferSize = 10;
    @Resource
    ArticleSearchProcess articleSearchProcess;
    @Resource
    RedisTemplate&lt;String, String&gt; redisTemplate;

    @RabbitListener(queues = ArticleSearchConstants.QUEUE_DDL_ARTICLE_SEARCH_UPDATE_SCORE)
    public void updateScore(Long articleId) {
        if (articleId != null) {

            Long size = redisTemplate.opsForValue().increment(scoreKey + &quot;num&quot;);
            redisTemplate.opsForSet().add(scoreKey, articleId.toString());
            String timeOut = redisTemplate.opsForValue().get(scoreKey + &quot;time:out&quot;);
            System.out.println(&quot;timeOut&quot; + timeOut);

            if (timeOut == null) {
                if (size != null &amp;&amp; size &gt;= bufferSize / 10) {
                    size = (long) bufferSize;
                    redisTemplate.delete(scoreKey + &quot;time:out&quot;);
                }
            }


            if (size != null &amp;&amp; size &gt;= bufferSize) {
                Boolean lock = redisTemplate.opsForValue().setIfAbsent(scoreKey + &quot;lock&quot;, &quot;1&quot;, 60, TimeUnit.SECONDS);
                if (Boolean.TRUE.equals(lock)) {
                    Set&lt;String&gt; articleIds = redisTemplate.opsForSet().members(scoreKey);
                    redisTemplate.delete(scoreKey);
                    redisTemplate.delete(scoreKey + &quot;num&quot;);
                    assert articleIds != null;
                    articleIds.stream().map(Long::parseLong).forEach(articleSearchProcess::updateScoreDataById);
                    redisTemplate.delete(scoreKey + &quot;lock&quot;);
                    log.info(&quot;article doc:{} score字段更新成功&quot;, articleIds);
                } else {
                    redisTemplate.opsForSet().add(scoreKey, articleId.toString());
                }

            } else {
                redisTemplate.opsForValue().set(scoreKey + &quot;time:out&quot;, &quot;1&quot;, 10, TimeUnit.SECONDS);
                log.info(&quot;bufferSize:{} QUEUE_DDL_ARTICLE_SEARCH_UPDATE_SCORE&quot;,size);
                redisTemplate.opsForSet().add(scoreKey, articleId.toString());
            }

        }

    }

    @RabbitListener(queues = {
            ArticleSearchConstants.QUEUE_DDL_ARTICLE_SEARCH_UPDATE,
            ArticleSearchConstants.QUEUE_DDL_ARTICLE_SEARCH_CREATE})
    public void updateAllDataById(Long articleId) {
        if (articleId != null) {
            if (articleSearchProcess.updateOrSaveAllDataById(articleId)) {
                log.info(&quot;article doc:{}新增或更新成功&quot;, articleId);
            }
        }
    }

    @RabbitListener(queues = ArticleSearchConstants.QUEUE_DDL_ARTICLE_SEARCH_DELETE)
    public void delById(Long articleId) {
        if (articleId != null) {
            if (articleSearchProcess.delDocById(articleId)) {
                log.info(&quot;article doc:{}删除成功&quot;, articleId);
            }
        }
    }
}

', 1583860253252911104);
INSERT INTO public.article_content VALUES (98, '2022-08-27 06:16:12.434', false, '2022-09-15 10:41:12.563', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', '实战maven私有仓库三部曲之二：上传到私有仓库

程序员欣宸

于 2018-01-19 23:58:19 发布

6919
 收藏 11
分类专栏： 持续构建 文章标签： maven m
版权

持续构建
专栏收录该内容
20 篇文章5 订阅
订阅专栏
在上一章《实战maven私有仓库三部曲之一：搭建和使用》我们搭建了maven私有仓库，并体验了私有仓库缓存jar包的能力，避免了局域网内开发人员去远程中央仓库下载的痛苦等待，本章我们再来体验私有仓库的另一个功能：保存二方库；

原文地址：http://blog.csdn.net/boling_cavalry/article/details/79070744

使用场景
mvndemoserver是个web应用，提供http接口getuserinfo，返回用户信息；
mvnDemoClient是个java应用，调用mvndemoserver的getuserinfo接口查用户信息；
用户信息对应的java类：UserInfo.java，代码如下:
public class UserInfo {

    /**
     * 用户名
     */
    private String name;

    /**
     * 用户年龄
     */
    private int age;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
mvndemoserver的getuserinfo接口，返回的数据是将UserInfo对象序列化成的json对象；
mvnDemoClient收到mvndemoserver返回的json字符串后，反序列化成UserInfo对象；
UserInfo.java放在哪里合适？
mvnDemoClient和mvndemoserver两个应用都要用UserInfo类，所以我们创建一个maven工程：mvnDemoLib，此工程中将UserInfo类做成jar包，放到私有maven仓库（这就是二方库了），这样mvnDemoClient和mvndemoserver在各自的pom.xml中依赖mvnDemoLib就都能使用UserInfo类了；

实战步骤梳理
本次实战先在maven私有仓库发布jar包，再在应用中使用jar包，所有的步骤列举如下：

修改私有仓库的配置信息，允许上传jar包；
修改当前电脑的maven配置文件apache-maven-3.3.3\conf\settings.xml；
创建mvnDemoLib工程，里面有UserInfo.java，执行mvn命令打包并上传到maven私有仓库；
创建mvndemoserver工程，pom.xml中添加mvnDemoLib的依赖，开发http服务的controller；
创建mvnDemoClient工程，pom.xml中添加mvnDemoLib的依赖，发起http请求，将得到的响应转成UserInfo对象；
接下来实战每个步骤：

实战源码下载
本次实战创建的三个maven工程，源码的git地址是：git@github.com:zq2599/blog_demos.git，用浏览器访问的地址是：https://github.com/zq2599/blog_demos，这里面有多个工程，本次用到的工程如下图红框所示：


修改私有仓库的配置信息，允许上传jar包
登录nexus，我搭建私有仓库的机器IP是192.168.119.155，所以访问地址是http://192.168.119.155:8081/nexus，然后点击右上角的"Log In"登录；
设置好deploy用户的密码，操作如下图所示：

我这里设置的密码是admin123；
设置为允许上传release的jar包，操作如下图：

设置为允许上传snapshots的jar包，操作如下图：

修改当前电脑的maven配置文件
打开当前电脑的maven配置文件apache-maven-3.3.3\conf\settings.xml，添加如下信息：

找到servers节点，添加如下两个子节点：
<server>   
	<id>bolingcavalry-nexus-releases</id>   
    <username>deployment</username>   
    <password>admin123</password>   
</server>
<server>   
	<id>bolingcavalry-nexus-snapshots</id>   
    <username>deployment</username>   
    <password>admin123</password>   
</server>
1
2
3
4
5
6
7
8
9
10
以上配置了两个server的用户名和密码信息 ，接下来需要身份验证的时候，都可以通过bolingcavalry-nexus-releases和bolingcavalry-nexus-snapshots这两个id来使用对应的用户名和密码；
2. 找到mirrors节点，添加如下两个子节点：

<mirror>     
	<id>bolingcavalry-nexus-releases</id>     
    <mirrorOf>*</mirrorOf>     
    <url>http://192.168.119.155:8081/nexus/content/groups/public</url>     
</mirror>    
<mirror>     
    <id>bolingcavalry-nexus-snapshots</id>     
    <mirrorOf>*</mirrorOf>     
    <url>http://192.168.119.155:8081/nexus/content/groups/public-snapshots</url>     
</mirror>      
1
2
3
4
5
6
7
8
9
10
以上配置了不同的仓库地址；
3. 找到profile节点下面的repositories节点，添加如下两个子节点：

<repository>  
  <id>bolingcavalry-nexus-releases</id>  
  <url>http://nexus-releases</url>  
  <releases><enabled>true</enabled></releases>  
  <snapshots><enabled>true</enabled></snapshots>
</repository>
<repository>  
  <id>bolingcavalry-nexus-snapshots</id>  
  <url>http://nexus-snapshots</url>  
  <releases><enabled>true</enabled></releases>  
   <snapshots><enabled>true</enabled></snapshots>  
</repository>
1
2
3
4
5
6
7
8
9
10
11
12
以上配置release和snapshots的部署时，使用哪个仓库和server的配置信息；
4. 找到profile节点下面的pluginRepositories节点，添加如下两个子节点：

<pluginRepository>  
	<id>bolingcavalry-nexus-releases</id>  
    <url>http://nexus-releases</url>  
    <releases><enabled>true</enabled></releases>  
    <snapshots><enabled>true</enabled></snapshots>  
</pluginRepository>  
<pluginRepository>  
	<id>bolingcavalry-nexus-snapshots</id>  
	<url>http://nexus-snapshots</url>  
	<releases><enabled>true</enabled></releases>  
	<snapshots><enabled>true</enabled></snapshots>  
</pluginRepository>
1
2
3
4
5
6
7
8
9
10
11
12
以上配置release和snapshots的部署时的插件仓库配置；

至此，本地maven配置就完成了，接下来我们开始创建三个maven工程；

创建mvnDemoLib工程
创建一个maven工程mvnDemoLib，pom.xml内容如下：
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.bolingcavalry</groupId>
    <artifactId>mvndemolib</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <distributionManagement>
        <repository>
            <id>bolingcavalry-nexus-releases</id>
            <name>Nexus Release Repository</name>
            <url>http://192.168.119.155:8081/nexus/content/repositories/releases</url>
        </repository>
        <snapshotRepository>
            <id>bolingcavalry-nexus-snapshots</id>
            <name>Nexus Snapshot Repository</name>
            <url>http://192.168.119.155:8081/nexus/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

</project>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
如上所示，mvnDemoLib是个普通的java工程，repository和snapshotRepository定义了deploy的时候用到的服务器信息，id和我们前面在maven配置信息中增加的id一致；
2. 工程的源码只有一个文件：UserInfo.java；
3. 在pom.xml所在文件夹下执行命令：

mvn clean deploy -U
1
看到类似如下的输出信息：

.....
http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/1.0-SNAPSHOT/mvndemolib-1.0-20180119.044938-1.jar
Uploaded: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/1.0-SNAPSHOT/mvndemolib-1.0-20180119.044938-1.jar (3 KB at 30.4 KB/sec)
Uploading: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/1.0-SNAPSHOT/mvndemolib-1.0-20180119.044938-1.pom
Uploaded: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/1.0-SNAPSHOT/mvndemolib-1.0-20180119.044938-1.pom (1000 B at 17.4 KB/sec)
Downloading: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/maven-metadata.xml
Uploading: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/1.0-SNAPSHOT/maven-metadata.xml
Uploaded: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/1.0-SNAPSHOT/maven-metadata.xml (771 B at 17.1 KB/sec)
Uploading: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/maven-metadata.xml
Uploaded: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/maven-metadata.xml (285 B at 9.6 KB/sec)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 28.919 s
[INFO] Finished at: 2018-01-19T12:49:38+08:00
[INFO] Final Memory: 18M/211M
[INFO] ------------------------------------------------------------------------
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
如果提示失败，请看具体的错误码，我之前由于在settings.xml中将密码填写错误，导致此处返回的错误码为401；
4. 在nexus的网页上已经可以上传成功的jar包了，如下图：


至此，我们上传二方库到maven私有仓库的操作已经完成，使用私有仓库的开发和构建环境都可以使用这个二方库了，接下来试试如何在工程中使用此二方库；

创建mvndemoserver工程
创建一个springboot的web工程mvndemoserver，里面有个controller，提供一个http接口服务，pom.xml中添加二方库的依赖，如下：
<dependency>
	<groupId>com.bolingcavalry</groupId>
	<artifactId>mvndemolib</artifactId>
	<version>1.0-SNAPSHOT</version>
</dependency>
1
2
3
4
5
创建一个controller，提供http服务，会用到UserInfo类，代码如下：
@RequestMapping(value = "/getuserinfo/{name}", method = RequestMethod.GET)
@ResponseBody
public UserInfo getuserinfo(@PathVariable("name") final String name) {
	UserInfo userInfo = new UserInfo();
    userInfo.setName(name);
    userInfo.setAge(name.length());
    return userInfo;
}
1
2
3
4
5
6
7
8
服务启动后，在浏览器输入地址：http://localhost:8080/getuserinfo/tom，可以看到以下json返回：


创建mvnDemoClient工程
我们再创建mvnDemoClient工程，访问http://localhost:8080/getuserinfo/tom，将取得的json转成UserInfo对象；
mvnDemoClinet工程的pom.xml如下，除了mvndemolib，还依赖了httpclient和fastjson：
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.bolingcavalry</groupId>
    <artifactId>mvnDemoClient</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <dependency>
            <groupId>com.bolingcavalry</groupId>
            <artifactId>mvndemolib</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.3</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.23</version>
        </dependency>
    </dependencies>

</project>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
发起http请求，将字符串转成UserInfo对象的代码如下：
 public static void main(String[] args) throws Exception{
        CloseableHttpClient httpclient = HttpClientBuilder.create().build();
        HttpGet httpGet = new HttpGet("http://localhost:8080/getuserinfo/jerry");
        //response
        HttpResponse response = httpclient.execute(httpGet);
        HttpEntity entity = response.getEntity();
        //收到原始的响应
        String rawStr = EntityUtils.toString(entity,"UTF-8");
        //打印原始的字符串
        System.out.println("raw string : " + rawStr);
        //将字符串转成UserInfo对象
        UserInfo userInfo = JSONObject.parseObject(rawStr, UserInfo.class);
        System.out.println("userName : " + userInfo.getName() + ", userAge : " + userInfo.getAge());
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
直接运行这个类，得到的结果如下：
raw string : {"name":"jerry","age":5}
userName : jerry, userAge : 5
1
2
以上就是将二方库工程上传到maven私有仓库、并在其他工程中使用此二方库的全部过程，希望能对您的开发有所帮助，接下来的实战，我们将在Docker下简单快捷的完成maven仓库的搭建；

欢迎关注我的公众号：程序员欣宸


文章知识点与官方知识档案匹配，可进一步学习相关知识
Java技能树Java概览Maven基础57995 人正在系统学习中

程序员欣宸
已关注

5


11


1

专栏目录
评论1条写评论
yanchencore
热评
请问，不需要使用activeProfile来激活你的私服配置吗?我按照你的做法，配置到mirrors中，同时也配置了阿里云镜像。导致私服和阿里云镜像不能共存。 根据下文，去掉私服mirror，activeProfile 私服配置解决。 [Maven仓库理解和优先级 | ShenWenFang](http://yoursite.com/2018/06/03/Maven-Priority/)
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', '实战maven私有仓库三部曲之二：上传到私有仓库

程序员欣宸

于 2018-01-19 23:58:19 发布

6919
 收藏 11
分类专栏： 持续构建 文章标签： maven m
版权

持续构建
专栏收录该内容
20 篇文章5 订阅
订阅专栏
在上一章《实战maven私有仓库三部曲之一：搭建和使用》我们搭建了maven私有仓库，并体验了私有仓库缓存jar包的能力，避免了局域网内开发人员去远程中央仓库下载的痛苦等待，本章我们再来体验私有仓库的另一个功能：保存二方库；

原文地址：http://blog.csdn.net/boling_cavalry/article/details/79070744

使用场景
mvndemoserver是个web应用，提供http接口getuserinfo，返回用户信息；
mvnDemoClient是个java应用，调用mvndemoserver的getuserinfo接口查用户信息；
用户信息对应的java类：UserInfo.java，代码如下:
public class UserInfo {

    /**
     * 用户名
     */
    private String name;

    /**
     * 用户年龄
     */
    private int age;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public int getAge() {
        return age;
    }

    public void setAge(int age) {
        this.age = age;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
mvndemoserver的getuserinfo接口，返回的数据是将UserInfo对象序列化成的json对象；
mvnDemoClient收到mvndemoserver返回的json字符串后，反序列化成UserInfo对象；
UserInfo.java放在哪里合适？
mvnDemoClient和mvndemoserver两个应用都要用UserInfo类，所以我们创建一个maven工程：mvnDemoLib，此工程中将UserInfo类做成jar包，放到私有maven仓库（这就是二方库了），这样mvnDemoClient和mvndemoserver在各自的pom.xml中依赖mvnDemoLib就都能使用UserInfo类了；

实战步骤梳理
本次实战先在maven私有仓库发布jar包，再在应用中使用jar包，所有的步骤列举如下：

修改私有仓库的配置信息，允许上传jar包；
修改当前电脑的maven配置文件apache-maven-3.3.3\conf\settings.xml；
创建mvnDemoLib工程，里面有UserInfo.java，执行mvn命令打包并上传到maven私有仓库；
创建mvndemoserver工程，pom.xml中添加mvnDemoLib的依赖，开发http服务的controller；
创建mvnDemoClient工程，pom.xml中添加mvnDemoLib的依赖，发起http请求，将得到的响应转成UserInfo对象；
接下来实战每个步骤：

实战源码下载
本次实战创建的三个maven工程，源码的git地址是：git@github.com:zq2599/blog_demos.git，用浏览器访问的地址是：https://github.com/zq2599/blog_demos，这里面有多个工程，本次用到的工程如下图红框所示：


修改私有仓库的配置信息，允许上传jar包
登录nexus，我搭建私有仓库的机器IP是192.168.119.155，所以访问地址是http://192.168.119.155:8081/nexus，然后点击右上角的"Log In"登录；
设置好deploy用户的密码，操作如下图所示：

我这里设置的密码是admin123；
设置为允许上传release的jar包，操作如下图：

设置为允许上传snapshots的jar包，操作如下图：

修改当前电脑的maven配置文件
打开当前电脑的maven配置文件apache-maven-3.3.3\conf\settings.xml，添加如下信息：

找到servers节点，添加如下两个子节点：
<server>   
	<id>bolingcavalry-nexus-releases</id>   
    <username>deployment</username>   
    <password>admin123</password>   
</server>
<server>   
	<id>bolingcavalry-nexus-snapshots</id>   
    <username>deployment</username>   
    <password>admin123</password>   
</server>
1
2
3
4
5
6
7
8
9
10
以上配置了两个server的用户名和密码信息 ，接下来需要身份验证的时候，都可以通过bolingcavalry-nexus-releases和bolingcavalry-nexus-snapshots这两个id来使用对应的用户名和密码；
2. 找到mirrors节点，添加如下两个子节点：

<mirror>     
	<id>bolingcavalry-nexus-releases</id>     
    <mirrorOf>*</mirrorOf>     
    <url>http://192.168.119.155:8081/nexus/content/groups/public</url>     
</mirror>    
<mirror>     
    <id>bolingcavalry-nexus-snapshots</id>     
    <mirrorOf>*</mirrorOf>     
    <url>http://192.168.119.155:8081/nexus/content/groups/public-snapshots</url>     
</mirror>      
1
2
3
4
5
6
7
8
9
10
以上配置了不同的仓库地址；
3. 找到profile节点下面的repositories节点，添加如下两个子节点：

<repository>  
  <id>bolingcavalry-nexus-releases</id>  
  <url>http://nexus-releases</url>  
  <releases><enabled>true</enabled></releases>  
  <snapshots><enabled>true</enabled></snapshots>
</repository>
<repository>  
  <id>bolingcavalry-nexus-snapshots</id>  
  <url>http://nexus-snapshots</url>  
  <releases><enabled>true</enabled></releases>  
   <snapshots><enabled>true</enabled></snapshots>  
</repository>
1
2
3
4
5
6
7
8
9
10
11
12
以上配置release和snapshots的部署时，使用哪个仓库和server的配置信息；
4. 找到profile节点下面的pluginRepositories节点，添加如下两个子节点：

<pluginRepository>  
	<id>bolingcavalry-nexus-releases</id>  
    <url>http://nexus-releases</url>  
    <releases><enabled>true</enabled></releases>  
    <snapshots><enabled>true</enabled></snapshots>  
</pluginRepository>  
<pluginRepository>  
	<id>bolingcavalry-nexus-snapshots</id>  
	<url>http://nexus-snapshots</url>  
	<releases><enabled>true</enabled></releases>  
	<snapshots><enabled>true</enabled></snapshots>  
</pluginRepository>
1
2
3
4
5
6
7
8
9
10
11
12
以上配置release和snapshots的部署时的插件仓库配置；

至此，本地maven配置就完成了，接下来我们开始创建三个maven工程；

创建mvnDemoLib工程
创建一个maven工程mvnDemoLib，pom.xml内容如下：
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.bolingcavalry</groupId>
    <artifactId>mvndemolib</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <distributionManagement>
        <repository>
            <id>bolingcavalry-nexus-releases</id>
            <name>Nexus Release Repository</name>
            <url>http://192.168.119.155:8081/nexus/content/repositories/releases</url>
        </repository>
        <snapshotRepository>
            <id>bolingcavalry-nexus-snapshots</id>
            <name>Nexus Snapshot Repository</name>
            <url>http://192.168.119.155:8081/nexus/content/repositories/snapshots</url>
        </snapshotRepository>
    </distributionManagement>

</project>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
如上所示，mvnDemoLib是个普通的java工程，repository和snapshotRepository定义了deploy的时候用到的服务器信息，id和我们前面在maven配置信息中增加的id一致；
2. 工程的源码只有一个文件：UserInfo.java；
3. 在pom.xml所在文件夹下执行命令：

mvn clean deploy -U
1
看到类似如下的输出信息：

.....
http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/1.0-SNAPSHOT/mvndemolib-1.0-20180119.044938-1.jar
Uploaded: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/1.0-SNAPSHOT/mvndemolib-1.0-20180119.044938-1.jar (3 KB at 30.4 KB/sec)
Uploading: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/1.0-SNAPSHOT/mvndemolib-1.0-20180119.044938-1.pom
Uploaded: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/1.0-SNAPSHOT/mvndemolib-1.0-20180119.044938-1.pom (1000 B at 17.4 KB/sec)
Downloading: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/maven-metadata.xml
Uploading: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/1.0-SNAPSHOT/maven-metadata.xml
Uploaded: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/1.0-SNAPSHOT/maven-metadata.xml (771 B at 17.1 KB/sec)
Uploading: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/maven-metadata.xml
Uploaded: http://192.168.119.155:8081/nexus/content/repositories/snapshots/com/bolingcavalry/mvndemolib/maven-metadata.xml (285 B at 9.6 KB/sec)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 28.919 s
[INFO] Finished at: 2018-01-19T12:49:38+08:00
[INFO] Final Memory: 18M/211M
[INFO] ------------------------------------------------------------------------
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
如果提示失败，请看具体的错误码，我之前由于在settings.xml中将密码填写错误，导致此处返回的错误码为401；
4. 在nexus的网页上已经可以上传成功的jar包了，如下图：


至此，我们上传二方库到maven私有仓库的操作已经完成，使用私有仓库的开发和构建环境都可以使用这个二方库了，接下来试试如何在工程中使用此二方库；

创建mvndemoserver工程
创建一个springboot的web工程mvndemoserver，里面有个controller，提供一个http接口服务，pom.xml中添加二方库的依赖，如下：
<dependency>
	<groupId>com.bolingcavalry</groupId>
	<artifactId>mvndemolib</artifactId>
	<version>1.0-SNAPSHOT</version>
</dependency>
1
2
3
4
5
创建一个controller，提供http服务，会用到UserInfo类，代码如下：
@RequestMapping(value = "/getuserinfo/{name}", method = RequestMethod.GET)
@ResponseBody
public UserInfo getuserinfo(@PathVariable("name") final String name) {
	UserInfo userInfo = new UserInfo();
    userInfo.setName(name);
    userInfo.setAge(name.length());
    return userInfo;
}
1
2
3
4
5
6
7
8
服务启动后，在浏览器输入地址：http://localhost:8080/getuserinfo/tom，可以看到以下json返回：


创建mvnDemoClient工程
我们再创建mvnDemoClient工程，访问http://localhost:8080/getuserinfo/tom，将取得的json转成UserInfo对象；
mvnDemoClinet工程的pom.xml如下，除了mvndemolib，还依赖了httpclient和fastjson：
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.bolingcavalry</groupId>
    <artifactId>mvnDemoClient</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <dependency>
            <groupId>com.bolingcavalry</groupId>
            <artifactId>mvndemolib</artifactId>
            <version>1.0-SNAPSHOT</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.3</version>
        </dependency>
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>1.2.23</version>
        </dependency>
    </dependencies>

</project>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
发起http请求，将字符串转成UserInfo对象的代码如下：
 public static void main(String[] args) throws Exception{
        CloseableHttpClient httpclient = HttpClientBuilder.create().build();
        HttpGet httpGet = new HttpGet("http://localhost:8080/getuserinfo/jerry");
        //response
        HttpResponse response = httpclient.execute(httpGet);
        HttpEntity entity = response.getEntity();
        //收到原始的响应
        String rawStr = EntityUtils.toString(entity,"UTF-8");
        //打印原始的字符串
        System.out.println("raw string : " + rawStr);
        //将字符串转成UserInfo对象
        UserInfo userInfo = JSONObject.parseObject(rawStr, UserInfo.class);
        System.out.println("userName : " + userInfo.getName() + ", userAge : " + userInfo.getAge());
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
直接运行这个类，得到的结果如下：
raw string : {"name":"jerry","age":5}
userName : jerry, userAge : 5
1
2
以上就是将二方库工程上传到maven私有仓库、并在其他工程中使用此二方库的全部过程，希望能对您的开发有所帮助，接下来的实战，我们将在Docker下简单快捷的完成maven仓库的搭建；

欢迎关注我的公众号：程序员欣宸


文章知识点与官方知识档案匹配，可进一步学习相关知识
Java技能树Java概览Maven基础57995 人正在系统学习中

程序员欣宸
已关注

5


11


1

专栏目录
评论1条写评论
yanchencore
热评
请问，不需要使用activeProfile来激活你的私服配置吗?我按照你的做法，配置到mirrors中，同时也配置了阿里云镜像。导致私服和阿里云镜像不能共存。 根据下文，去掉私服mirror，activeProfile 私服配置解决。 [Maven仓库理解和优先级 | ShenWenFang](http://yoursite.com/2018/06/03/Maven-Priority/)
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 97);
INSERT INTO public.article_content VALUES (111, '2022-08-27 12:06:32.517', false, '2022-09-15 10:41:12.561', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', 'JUnit5学习之八：综合进阶（终篇）

程序员欣宸

于 2020-10-08 10:25:25 发布

1313
 收藏 2
分类专栏： java服务端 文章标签： java 单元测试 junit
版权

java服务端
专栏收录该内容
175 篇文章46 订阅
订阅专栏
欢迎访问我的GitHub
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos

关于《JUnit5学习》系列
《JUnit5学习》系列旨在通过实战提升SpringBoot环境下的单元测试技能，一共八篇文章，链接如下：

基本操作
Assumptions类
Assertions类
按条件执行
标签(Tag)和自定义注解
参数化测试(Parameterized Tests)基础
参数化测试(Parameterized Tests)进阶
综合进阶（终篇）
本篇概览
本文是《JUnit5学习》系列的终篇，将JUnit5提供的一些高级特性以实战的形式展现出来；
JUnit5的特性非常多，《JUnit5学习》系列也只是将常用部分写出来，未能覆盖全部；
本文由以下章节组成：
版本设置
测试方法展现名称生成器
重复测试
嵌套
动态测试(Dynamic Tests)
多线程并发执行测试方法
源码下载
如果您不想编码，可以在GitHub下载所有源码，地址和链接信息如下表所示：
名称	链接	备注
项目主页	https://github.com/zq2599/blog_demos	该项目在GitHub上的主页
git仓库地址(https)	https://github.com/zq2599/blog_demos.git	该项目源码的仓库地址，https协议
git仓库地址(ssh)	git@github.com:zq2599/blog_demos.git	该项目源码的仓库地址，ssh协议
这个git项目中有多个文件夹，本章的应用在junitpractice文件夹下，如下图红框所示：


junitpractice是父子结构的工程，本篇的代码在advanced子工程中，如下图：


版本设置
《JUnit5学习》系列的代码都在用SpringBoot：2.3.4.RELEASE框架，间接依赖的JUnit版本是5.6.2；
本文有两个特性要求JUnit版本达到5.7或者更高，它们是测试方法展现名称生成器和动态生成测试方法；
对于使用SpringBoot：2.3.4.RELEASE框架的工程，如果要指定JUnit版本，需要做以下三步操作：
dependencyManagement节点添加junit-bom，并指定版本号：
<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>org.junit</groupId>
      <artifactId>junit-bom</artifactId>
      <version>5.7.0</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>
1
2
3
4
5
6
7
8
9
10
11
排除spring-boot-starter-test和junit-jupiter的间接依赖关系：
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-test</artifactId>
  <scope>test</scope>
  <exclusions>
    <exclusion>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
    </exclusion>
  </exclusions>
</dependency>
1
2
3
4
5
6
7
8
9
10
11
添加junit-jupiter依赖，此时会使用dependencyManagement中指定的版本号：
<dependency>
  <groupId>org.junit.jupiter</groupId>
  <artifactId>junit-jupiter</artifactId>
  <scope>test</scope>
</dependency>
1
2
3
4
5
如下图，刷新可见已经用上了5.7.0版本：

版本问题解决了，接下来正式进入进阶实战；
测试方法展现名称生成器(Display Name Generators)
把Display Name Generators翻译成测试方法展现名称生成器，可能刷新了读者们对本文作者英文水平的认知，请您多包含…
先回顾一下如何指定测试方法的展现名称，如果测试方法使用了@DisplayName，在展示单元测试执行结果时，就会显示@DisplayName指定的字符串，如下图所示：

除了用@DisplayName指定展示名称，JUnit5还提供了一种自动生成展示名称的功能：@DisplayNameGeneration，来看看它是如何生成展示名称的；
演示代码如下所示，当@DisplayNameGeneration的value设置为ReplaceUnderscores时，会把方法名的所有下划线替换为空格：
package com.bolingcavalry.advanced.service.impl;

import org.junit.jupiter.api.DisplayNameGeneration;
import org.junit.jupiter.api.DisplayNameGenerator;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class)
public class ReplaceUnderscoresTest {

    @Test
    void if_it_is_zero() {
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
执行结果如下图，方法if_it_is_zero展示出的名字为if it is zero：

在上述替换方式的基础上，JUnit5还提供了另一种生成展示名称的方法：测试类名+连接符+测试方法名，并且类名和方法名的下划线都会被替换成空格，演示代码如下，使用了注解@IndicativeSentencesGeneration，其separator属性就是类名和方法名之间的连接符：
package com.bolingcavalry.advanced.service.impl;

import org.junit.jupiter.api.DisplayNameGenerator;
import org.junit.jupiter.api.IndicativeSentencesGeneration;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
@IndicativeSentencesGeneration(separator = "，测试方法：", generator = DisplayNameGenerator.ReplaceUnderscores.class)
public class IndicativeSentences_Test {

    @Test
    void if_it_is_one_of_the_following_years() {
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
执行结果如下：

重复测试（Repeated Tests）
重复测试就是指定某个测试方法反复执行多次，演示代码如下，可见@Test已被@RepeatedTest(5)取代，数字5表示重复执行5次：
    @Order(1)
    @DisplayName("重复测试")
    @RepeatedTest(5)
    void repeatTest(TestInfo testInfo) {
        log.info("测试方法 [{}]", testInfo.getTestMethod().get().getName());
    }
1
2
3
4
5
6
执行结果如下图：

在测试方法执行时，如果想了解当前是第几次执行，以及总共有多少次，只要给测试方法增加RepetitionInfo类型的入参即可，演示代码如下，可见RepetitionInfo提供的API可以得到总数和当前次数：
    @Order(2)
    @DisplayName("重复测试，从入参获取执行情况")
    @RepeatedTest(5)
    void repeatWithParamTest(TestInfo testInfo, RepetitionInfo repetitionInfo) {
        log.info("测试方法 [{}]，当前第[{}]次，共[{}]次",
                testInfo.getTestMethod().get().getName(),
                repetitionInfo.getCurrentRepetition(),
                repetitionInfo.getTotalRepetitions());
    }
1
2
3
4
5
6
7
8
9
上述代码执行结果如下：

在上图的左下角可见，重复执行的结果被展示为"repetition X of X"这样的内容，其实这部分信息是可以定制的，就是RepeatedTest注解的name属性，演示代码如下，可见currentRepetition和totalRepetitions是占位符，在真正展示的时候会被分别替换成当前值和总次数：
    @Order(3)
    @DisplayName("重复测试，使用定制名称")
    @RepeatedTest(value = 5, name="完成度：{currentRepetition}/{totalRepetitions}")
    void repeatWithCustomDisplayNameTest(TestInfo testInfo, RepetitionInfo repetitionInfo) {
        log.info("测试方法 [{}]，当前第[{}]次，共[{}]次",
                testInfo.getTestMethod().get().getName(),
                repetitionInfo.getCurrentRepetition(),
                repetitionInfo.getTotalRepetitions());
    }
1
2
3
4
5
6
7
8
9
上述代码执行结果如下：

嵌套测试(Nested Tests)
如果一个测试类中有很多测试方法（如增删改查，每种操作都有多个测试方法），那么不论是管理还是结果展现都会显得比较复杂，此时嵌套测试(Nested Tests)就派上用场了；
嵌套测试(Nested Tests)功能就是在测试类中创建一些内部类，以增删改查为例，将所有测试查找的方法放入一个内部类，将所有测试删除的方法放入另一个内部类，再给每个内部类增加@Nested注解，这样就会以内部类为单位执行测试和展现结果，如下图所示：

嵌套测试的演示代码如下：
package com.bolingcavalry.advanced.service.impl;

import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
@Slf4j
@DisplayName("嵌套测试演示")
public class NestedTest {

    @Nested
    @DisplayName("查找服务相关的测试")
    class FindService {
        @Test
        void findByIdTest() {}
        @Test
        void findByNameTest() {}
    }

    @Nested
    @DisplayName("删除服务相关的测试")
    class DeleteService {
        @Test
        void deleteByIdTest() {}
        @Test
        void deleteByNameTest() {}
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
上述代码执行结果如下，可见从代码管理再到执行和结果展示，都被分组管理了：

动态测试(Dynamic Tests)
之前咱们写的测试方法，主要是用@Test修饰，这些方法的特点就是在编译阶段就已经明确了，在运行阶段也已经固定；
JUnit5推出了另一种类型的测试方法：动态测试(Dynamic Tests)，首先，测试方法是可以在运行期间被生产出来的，生产它们的地方，就是被@TestFactory修饰的方法，等到测试方法被生产出来后再像传统的测试方法那样被执行和结果展示；
下面是演示代码，testFactoryTest方法被@TestFactory修饰，返回值是Iterable类型，里面是多个DynamicTest实例，每个DynamicTest实例代表一个测试方法，因此，整个DynamicDemoTest类中有多少个测试方法，在编译阶段是不能确定的，只有在运行阶段执行了testFactoryTest方法后，才能根据返回值确定下来：
package com.bolingcavalry.advanced.service.impl;

import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.DynamicTest;
import org.junit.jupiter.api.TestFactory;
import org.springframework.boot.test.context.SpringBootTest;
import java.util.Arrays;
import static org.junit.jupiter.api.DynamicTest.dynamicTest;

@SpringBootTest
@Slf4j
class DynamicDemoTest {

    @TestFactory
    Iterable<org.junit.jupiter.api.DynamicTest> testFactoryTest() {

        DynamicTest firstTest = dynamicTest(
            "一号动态测试用例",
            () -> {
                log.info("一号用例，这里编写单元测试逻辑代码");
            }
        );

        DynamicTest secondTest = dynamicTest(
                "二号动态测试用例",
                () -> {
                    log.info("二号用例，这里编写单元测试逻辑代码");
                }
        );

        return Arrays.asList(firstTest, secondTest);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
上述代码的执行结果如下，可见每个DynamicTest实例就相当于以前的一个@Test修饰的方法，会被执行和统计：

多线程并发执行(Parallel Execution)的介绍
《JUnit5学习》系列的最后，咱们来看一个既容易理解又实用的特性：多线程并发执行(Parallel Execution)
JUnit5中的并发执行测试可以分为以下三种场景：
多个测试类，它们各自的测试方法同时执行；
一个测试类，里面的多个测试方法同时执行；
一个测试类，里面的一个测试方法，在重复测试(Repeated Tests)或者参数化测试(Parameterized Tests)的时候，这个测试方法被多个线程同时执行；
多线程并发执行(Parallel Execution)实战
前面介绍了多线程并发执行有三种场景，文章篇幅所限就不逐个编码实战了，就选择第三种场景来实践吧，即：一个测试类里面的一个测试方法，在重复测试时多线程并发执行，至于其他两种场景如何设置，接下来的文中也会讲清楚，您自行实践即可；

首先是创建JUnit5的配置文件，如下图，在test文件夹上点击鼠标右键，在弹出的菜单选择"New"->“Directory”:


弹出的窗口如下图，双击红框位置的"resources"，即可新建resources目录：


在新增的resources目录中新建文件junit-platform.properties，内容如下，每个配置项都有详细的说明：

# 并行开关true/false
junit.jupiter.execution.parallel.enabled=true
# 方法级多线程开关 same_thread/concurrent
junit.jupiter.execution.parallel.mode.default = same_thread
# 类级多线程开关 same_thread/concurrent
junit.jupiter.execution.parallel.mode.classes.default = same_thread

# 并发策略有以下三种可选：
# fixed：固定线程数，此时还要通过junit.jupiter.execution.parallel.config.fixed.parallelism指定线程数
# dynamic：表示根据处理器和核数计算线程数
# custom：自定义并发策略，通过这个配置来指定：junit.jupiter.execution.parallel.config.custom.class
junit.jupiter.execution.parallel.config.strategy = fixed

# 并发线程数，该配置项只有当并发策略为fixed的时候才有用
junit.jupiter.execution.parallel.config.fixed.parallelism = 5
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
由于实践的是同一个类同一个方法多次执行的并发，因此上述配置中，类级多线程开关和方法级多线程开关都选择了"同一个线程"，也就是说不需要并发执行多个类或者多个方法，请您根据自己的需求自行调整；
关于并发策略，这里选择的是动态调整，我这里是i5-8400处理器，拥有六核心六线程，稍后咱们看看执行效果与这个硬件配置是否有关系；
接下来编写测试代码，先写一个单线程执行的，可见@Execution的值为SAME_THREAD，限制了重复测试时在同一个线程内顺序执行：
package com.bolingcavalry.advanced.service.impl;

import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.parallel.Execution;
import org.junit.jupiter.api.parallel.ExecutionMode;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.springframework.boot.test.context.SpringBootTest;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest
@Slf4j
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class ParallelExecutionTest {

    @Order(1)
    @Execution(ExecutionMode.SAME_THREAD)
    @DisplayName("单线程执行10次")
    @RepeatedTest(value = 10, name="完成度：{currentRepetition}/{totalRepetitions}")
    void sameThreadTest(TestInfo testInfo, RepetitionInfo repetitionInfo) {
        log.info("测试方法 [{}]，当前第[{}]次，共[{}]次",
                testInfo.getTestMethod().get().getName(),
                repetitionInfo.getCurrentRepetition(),
                repetitionInfo.getTotalRepetitions());
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
执行结果如下，可见确实是单线程：


重复测试时并发执行的代码如下，@Execution的值为CONCURRENT：

    @Order(2)
    @Execution(ExecutionMode.CONCURRENT)
    @DisplayName("多线程执行10次")
    @RepeatedTest(value = 10, name="完成度：{currentRepetition}/{totalRepetitions}")
    void concurrentTest(TestInfo testInfo, RepetitionInfo repetitionInfo) {
        log.info("测试方法 [{}]，当前第[{}]次，共[{}]次",
                testInfo.getTestMethod().get().getName(),
                repetitionInfo.getCurrentRepetition(),
                repetitionInfo.getTotalRepetitions());
    }
1
2
3
4
5
6
7
8
9
10
执行结果如下，从红框1可见顺序已经乱了，从红框2可见十次测试方法是在五个线程中执行的：

最后是参数化测试的演示，也可以设置为多线程并行执行：
    @Order(3)
    @Execution(ExecutionMode.CONCURRENT)
    @DisplayName("多个int型入参")
    @ParameterizedTest
    @ValueSource(ints = { 1,2,3,4,5,6,7,8,9,0 })
    void intsTest(int candidate) {
        log.info("ints [{}]", candidate);
    }
1
2
3
4
5
6
7
8
执行结果如下图，可见也是5个线程并行执行的：

结束语
至此，《JUnit5学习》系列已经全部完成，感谢您的耐心阅读，希望这个原创系列能够带给您一些有用的信息，为您的单元测试提供一些参考，如果发现文章有错误，期待您能指点一二；

欢迎关注公众号：程序员欣宸
微信搜索「程序员欣宸」，我是欣宸，期待与您一同畅游Java世界…

文章知识点与官方知识档案匹配，可进一步学习相关知识
Java技能树进阶任务Java问答57989 人正在系统学习中

程序员欣宸
已关注

1


2


1

专栏目录
junit5 入门系列教程-14-junit5 重复测试(@RepeatedTest)
 3万+
目录 目录 重复测试 特性说明 测试案例 实例 系列导航 重复测试 JUnit Jupiter提供了通过使用@RepeatedTest注释方法并指定所需重复次数的能力。重复测试的每次调用都表现为对相同生命周期回调和扩展的完全支持的常规@Test方法的执行。 下面的示例演示如何声明一个名为repeatedTest()的测试，它将自动重复10次。 @RepeatedTest...
java moreexecutor_NoSuchMethodError: MoreExecutors.sameThreadExecutor 错误解决
weixin_29048309的博客
 1222
报错详情:java.lang.NoSuchMethodError: com.google.common.util.concurrent.MoreExecutors.sameThreadExecutor()Lcom/google/common/util/concurrent/ListeningExecutorService;at org.apache.curator.framework.listen...
评论1条写评论
weixin_51101670
热评
你好，我想请教下，我现在在做接口测试，所以要用到@RunWith(SpringRunner.class)@SpringBootTest ，但是我想实现@CsvFileSource的功能，我看到有@RunWith(Parameterized.class)这个可以实现参数化，但是不是我想要的CSV文件读取参数的方式，而是直接把参数写在代码里，大佬有什么好的思路吗？
java单元测试面试,Java必备！JUnit面试题和答案汇总
weixin_34312809的博客
 1195
下面列出了最常见的JUnit面试问题和答案。1)什么是测试？测试是检查应用程序功能是否满足要求的过程。2)什么是JUnit？JUnit是测试框架, 它用于Java代码的单元测试。JUnit = Java + Unit Testing更多细节…3)什么是单元测试？测试应用程序的各个功能(称为单元)的过程称为单元测试。4)手动测试和自动测试有什么区别？手动测试是由人工执行的, 因此既费时又昂贵。自动化...
java白盒测试面试题_面试之JAVA基础Junit了解
weixin_39614109的博客
 180
什么叫Junit Junit是一个java单元测试框架 是对程序进行白盒测试一般来说要对一个方法进行测试其结果 可以写一个main入口 然后调用其方法来进行测试结果；而junit就是省去这部分可以对一个方法进行测试如下代码 对一个方法进行测试只要在方法上加上@Test 注解就噢啦package com.java.xiong.test1;import org.junit.After;imp...
Junit5的并行执行
m0_37607945的博客
 1874
本文参考：https://junit.org/junit5/docs/current/user-guide/#writing-tests-parallel-execution 默认情况下，junit测试是在一个线程中串行执行的，从5.3开始支持并行测试。首先需要在配置文件junit-platform.properties中配置如下参数： junit.jupiter.execution.parallel.enabled=true 但是仅仅开启这个参数是不会起效的，测试仍然是按照单个线程去执行的。在测试树上的
JUnit5学习之八：综合进阶（终篇），助你面试一臂之力
m0_63174529的博客
 53
《JUnit5学习》系列旨在通过实战提升SpringBoot环境下的单元测试技能，一共八篇文章，链接如下： 基本操作 Assumptions类 Assertions类 按条件执行 标签(Tag)和自定义注解 参数化测试(Parameterized Tests)基础 参数化测试(Parameterized Tests)进阶 综合进阶（终篇） 本篇概览 本文是《JUnit5学习》系列的终篇，将JUnit5提供的一些高级特性以实战的形式展现出来； JUnit5的特性非常
JUnit5学习之八：综合进阶（终篇，2021Java精选面试实战总结整理
m0_64867688的博客
 86
void if_it_is_zero() { } } 执行结果如下图，方法if_it_is_zero展示出的名字为if it is zero： 在上述替换方式的基础上，JUnit5还提供了另一种生成展示名称的方法：测试类名+连接符+测试方法名，并且类名和方法名的下划线都会被替换成空格，演示代码如下，使用了注解@IndicativeSentencesGeneration，其separator属性就是类名和方法名之间的连接符： package com.bolingcavalry.advanced.se
JUnit5学习之七：参数化测试(Parameterized Tests)进阶
程序员欣宸的博客
 3272
了解JUnit5参数化测试的高级功能
JUnit5学习之一：基本操作
程序员欣宸的博客
 6911
《JUnit5学习》是欣宸的又一个实战主题的Java技术栈原创系列，欢迎大家一起来学习和掌握最新的单元测试技术
Maven 编译打包报错：程序包org.junit不存在 Error:(3, 29) java: 程序包org.junit.jupiter.api不存在 IDEA
旅经Java的博客
 8957
报错的原因是java.junit.的版本问题，IDEA里默认的版本为3.8.1，修改为高版本就可以了,因为3.x使用的为编程的方式，4.x以后为注解的形式。 1、双击打开pom.xml文件。 2、在org.junit.vintage 依赖后面补充一段 代码块如下 <dependency> <groupId>org.junit.jupiter</groupI...
测试面试 | Java 经典面试题汇总
weixin_46635091的博客
 862
Java 目前仍然是业界应用最为广泛的编程语言，在很多互联网大厂，深度掌握 Java 是中高级测试开发／测试架构师的必备核心技能。技术面试中，Java 编程技能也一直是考核重点。 本文整理汇总了常见的经典 Java 面试题目（较偏向初级和中级水平），供各位测试开发同学参考。这里只给出问题，不列出参考答案（很多问题答案并不唯一），有兴趣的可以留言讨论，进阶学习文末加群。 一、基础篇 1.1、Java 基础 面向对象的特征：继承、封装和多态 final, finally, finalize 的区别 Excep
[Spring Boot] [解决] 新建的代码工程，org.junit.jupiter报错，org.junit.jupiter.api.test报错
H_O_W_E的专栏
 3784
问题： [Spring Boot] [解决] 新建的代码工程，org.junit.jupiter报错，org.junit.jupiter.api.test报错 解决： 在pom.xml添加依赖 <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.5.0...
Java测试框架-junit5详解
最新发布
chenjxj123的博客
 4544
Java测试框架-junit5 java当前主流的测试框架有两个：TESTNG、Junit5；这两个框架在功能上都比较完善，也没有说哪个更好，因为笔者平时用的比较多的是Junit5，所以本文主要讲的是Junit5的使用 1、Junit5的构成 Junit5的框架主要有三个部分组成分别是：JUnit Platform + JUnit Jupiter + JUnit Vintage3 JUnit Platform : 其主要作用是在 JVM 上启动测试框架。它定义了一个抽象的 TestEngine AP
Junit关于并发执行测试的源码简单分析和使用
吟啸徐行
 1517
并发执行测试用例目的很简单：就是为了高效使用资源降低测试时间，俗话说天下武功，唯快不破，对，就是求追速度。Junit中有关并行执行测试的关键组件为ParallelComputer，ParallelComputer的基类为Computer。Computer在Junit项目中是一个执行runners或者suites的角色（Runner是一个执行测试用例的执行器；Suite继承至Runner，Suite...
JUnit5学习之三：Assertions类
程序员欣宸的博客
 3296
断言是单元测试中最常用的测试手段，本文就来学习和操作常用的断言功能
JUnit5学习之二：Assumptions类
程序员欣宸的博客
 1831
学习Assumptions类的用法
JUnit5学习之四：按条件执行
程序员欣宸的博客
 1741
学习和实战如何设置单元测试的执行条件
JUnit5学习之五：标签(Tag)和自定义注解
程序员欣宸的博客
 2552
学习和实践JUnit5的标签过滤和自定义注解功能
JUnit5学习之六：参数化测试(Parameterized Tests)基础
程序员欣宸的博客
 2176
了解JUnit5的参数化测试的基本知识
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 'JUnit5学习之八：综合进阶（终篇）

程序员欣宸

于 2020-10-08 10:25:25 发布

1313
 收藏 2
分类专栏： java服务端 文章标签： java 单元测试 junit
版权

java服务端
专栏收录该内容
175 篇文章46 订阅
订阅专栏
欢迎访问我的GitHub
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos

关于《JUnit5学习》系列
《JUnit5学习》系列旨在通过实战提升SpringBoot环境下的单元测试技能，一共八篇文章，链接如下：

基本操作
Assumptions类
Assertions类
按条件执行
标签(Tag)和自定义注解
参数化测试(Parameterized Tests)基础
参数化测试(Parameterized Tests)进阶
综合进阶（终篇）
本篇概览
本文是《JUnit5学习》系列的终篇，将JUnit5提供的一些高级特性以实战的形式展现出来；
JUnit5的特性非常多，《JUnit5学习》系列也只是将常用部分写出来，未能覆盖全部；
本文由以下章节组成：
版本设置
测试方法展现名称生成器
重复测试
嵌套
动态测试(Dynamic Tests)
多线程并发执行测试方法
源码下载
如果您不想编码，可以在GitHub下载所有源码，地址和链接信息如下表所示：
名称	链接	备注
项目主页	https://github.com/zq2599/blog_demos	该项目在GitHub上的主页
git仓库地址(https)	https://github.com/zq2599/blog_demos.git	该项目源码的仓库地址，https协议
git仓库地址(ssh)	git@github.com:zq2599/blog_demos.git	该项目源码的仓库地址，ssh协议
这个git项目中有多个文件夹，本章的应用在junitpractice文件夹下，如下图红框所示：


junitpractice是父子结构的工程，本篇的代码在advanced子工程中，如下图：


版本设置
《JUnit5学习》系列的代码都在用SpringBoot：2.3.4.RELEASE框架，间接依赖的JUnit版本是5.6.2；
本文有两个特性要求JUnit版本达到5.7或者更高，它们是测试方法展现名称生成器和动态生成测试方法；
对于使用SpringBoot：2.3.4.RELEASE框架的工程，如果要指定JUnit版本，需要做以下三步操作：
dependencyManagement节点添加junit-bom，并指定版本号：
<dependencyManagement>
  <dependencies>
    <dependency>
      <groupId>org.junit</groupId>
      <artifactId>junit-bom</artifactId>
      <version>5.7.0</version>
      <type>pom</type>
      <scope>import</scope>
    </dependency>
  </dependencies>
</dependencyManagement>
1
2
3
4
5
6
7
8
9
10
11
排除spring-boot-starter-test和junit-jupiter的间接依赖关系：
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-test</artifactId>
  <scope>test</scope>
  <exclusions>
    <exclusion>
      <groupId>org.junit.jupiter</groupId>
      <artifactId>junit-jupiter</artifactId>
    </exclusion>
  </exclusions>
</dependency>
1
2
3
4
5
6
7
8
9
10
11
添加junit-jupiter依赖，此时会使用dependencyManagement中指定的版本号：
<dependency>
  <groupId>org.junit.jupiter</groupId>
  <artifactId>junit-jupiter</artifactId>
  <scope>test</scope>
</dependency>
1
2
3
4
5
如下图，刷新可见已经用上了5.7.0版本：

版本问题解决了，接下来正式进入进阶实战；
测试方法展现名称生成器(Display Name Generators)
把Display Name Generators翻译成测试方法展现名称生成器，可能刷新了读者们对本文作者英文水平的认知，请您多包含…
先回顾一下如何指定测试方法的展现名称，如果测试方法使用了@DisplayName，在展示单元测试执行结果时，就会显示@DisplayName指定的字符串，如下图所示：

除了用@DisplayName指定展示名称，JUnit5还提供了一种自动生成展示名称的功能：@DisplayNameGeneration，来看看它是如何生成展示名称的；
演示代码如下所示，当@DisplayNameGeneration的value设置为ReplaceUnderscores时，会把方法名的所有下划线替换为空格：
package com.bolingcavalry.advanced.service.impl;

import org.junit.jupiter.api.DisplayNameGeneration;
import org.junit.jupiter.api.DisplayNameGenerator;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
@DisplayNameGeneration(DisplayNameGenerator.ReplaceUnderscores.class)
public class ReplaceUnderscoresTest {

    @Test
    void if_it_is_zero() {
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
执行结果如下图，方法if_it_is_zero展示出的名字为if it is zero：

在上述替换方式的基础上，JUnit5还提供了另一种生成展示名称的方法：测试类名+连接符+测试方法名，并且类名和方法名的下划线都会被替换成空格，演示代码如下，使用了注解@IndicativeSentencesGeneration，其separator属性就是类名和方法名之间的连接符：
package com.bolingcavalry.advanced.service.impl;

import org.junit.jupiter.api.DisplayNameGenerator;
import org.junit.jupiter.api.IndicativeSentencesGeneration;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
@IndicativeSentencesGeneration(separator = "，测试方法：", generator = DisplayNameGenerator.ReplaceUnderscores.class)
public class IndicativeSentences_Test {

    @Test
    void if_it_is_one_of_the_following_years() {
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
执行结果如下：

重复测试（Repeated Tests）
重复测试就是指定某个测试方法反复执行多次，演示代码如下，可见@Test已被@RepeatedTest(5)取代，数字5表示重复执行5次：
    @Order(1)
    @DisplayName("重复测试")
    @RepeatedTest(5)
    void repeatTest(TestInfo testInfo) {
        log.info("测试方法 [{}]", testInfo.getTestMethod().get().getName());
    }
1
2
3
4
5
6
执行结果如下图：

在测试方法执行时，如果想了解当前是第几次执行，以及总共有多少次，只要给测试方法增加RepetitionInfo类型的入参即可，演示代码如下，可见RepetitionInfo提供的API可以得到总数和当前次数：
    @Order(2)
    @DisplayName("重复测试，从入参获取执行情况")
    @RepeatedTest(5)
    void repeatWithParamTest(TestInfo testInfo, RepetitionInfo repetitionInfo) {
        log.info("测试方法 [{}]，当前第[{}]次，共[{}]次",
                testInfo.getTestMethod().get().getName(),
                repetitionInfo.getCurrentRepetition(),
                repetitionInfo.getTotalRepetitions());
    }
1
2
3
4
5
6
7
8
9
上述代码执行结果如下：

在上图的左下角可见，重复执行的结果被展示为"repetition X of X"这样的内容，其实这部分信息是可以定制的，就是RepeatedTest注解的name属性，演示代码如下，可见currentRepetition和totalRepetitions是占位符，在真正展示的时候会被分别替换成当前值和总次数：
    @Order(3)
    @DisplayName("重复测试，使用定制名称")
    @RepeatedTest(value = 5, name="完成度：{currentRepetition}/{totalRepetitions}")
    void repeatWithCustomDisplayNameTest(TestInfo testInfo, RepetitionInfo repetitionInfo) {
        log.info("测试方法 [{}]，当前第[{}]次，共[{}]次",
                testInfo.getTestMethod().get().getName(),
                repetitionInfo.getCurrentRepetition(),
                repetitionInfo.getTotalRepetitions());
    }
1
2
3
4
5
6
7
8
9
上述代码执行结果如下：

嵌套测试(Nested Tests)
如果一个测试类中有很多测试方法（如增删改查，每种操作都有多个测试方法），那么不论是管理还是结果展现都会显得比较复杂，此时嵌套测试(Nested Tests)就派上用场了；
嵌套测试(Nested Tests)功能就是在测试类中创建一些内部类，以增删改查为例，将所有测试查找的方法放入一个内部类，将所有测试删除的方法放入另一个内部类，再给每个内部类增加@Nested注解，这样就会以内部类为单位执行测试和展现结果，如下图所示：

嵌套测试的演示代码如下：
package com.bolingcavalry.advanced.service.impl;

import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
@Slf4j
@DisplayName("嵌套测试演示")
public class NestedTest {

    @Nested
    @DisplayName("查找服务相关的测试")
    class FindService {
        @Test
        void findByIdTest() {}
        @Test
        void findByNameTest() {}
    }

    @Nested
    @DisplayName("删除服务相关的测试")
    class DeleteService {
        @Test
        void deleteByIdTest() {}
        @Test
        void deleteByNameTest() {}
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
上述代码执行结果如下，可见从代码管理再到执行和结果展示，都被分组管理了：

动态测试(Dynamic Tests)
之前咱们写的测试方法，主要是用@Test修饰，这些方法的特点就是在编译阶段就已经明确了，在运行阶段也已经固定；
JUnit5推出了另一种类型的测试方法：动态测试(Dynamic Tests)，首先，测试方法是可以在运行期间被生产出来的，生产它们的地方，就是被@TestFactory修饰的方法，等到测试方法被生产出来后再像传统的测试方法那样被执行和结果展示；
下面是演示代码，testFactoryTest方法被@TestFactory修饰，返回值是Iterable类型，里面是多个DynamicTest实例，每个DynamicTest实例代表一个测试方法，因此，整个DynamicDemoTest类中有多少个测试方法，在编译阶段是不能确定的，只有在运行阶段执行了testFactoryTest方法后，才能根据返回值确定下来：
package com.bolingcavalry.advanced.service.impl;

import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.DynamicTest;
import org.junit.jupiter.api.TestFactory;
import org.springframework.boot.test.context.SpringBootTest;
import java.util.Arrays;
import static org.junit.jupiter.api.DynamicTest.dynamicTest;

@SpringBootTest
@Slf4j
class DynamicDemoTest {

    @TestFactory
    Iterable<org.junit.jupiter.api.DynamicTest> testFactoryTest() {

        DynamicTest firstTest = dynamicTest(
            "一号动态测试用例",
            () -> {
                log.info("一号用例，这里编写单元测试逻辑代码");
            }
        );

        DynamicTest secondTest = dynamicTest(
                "二号动态测试用例",
                () -> {
                    log.info("二号用例，这里编写单元测试逻辑代码");
                }
        );

        return Arrays.asList(firstTest, secondTest);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
上述代码的执行结果如下，可见每个DynamicTest实例就相当于以前的一个@Test修饰的方法，会被执行和统计：

多线程并发执行(Parallel Execution)的介绍
《JUnit5学习》系列的最后，咱们来看一个既容易理解又实用的特性：多线程并发执行(Parallel Execution)
JUnit5中的并发执行测试可以分为以下三种场景：
多个测试类，它们各自的测试方法同时执行；
一个测试类，里面的多个测试方法同时执行；
一个测试类，里面的一个测试方法，在重复测试(Repeated Tests)或者参数化测试(Parameterized Tests)的时候，这个测试方法被多个线程同时执行；
多线程并发执行(Parallel Execution)实战
前面介绍了多线程并发执行有三种场景，文章篇幅所限就不逐个编码实战了，就选择第三种场景来实践吧，即：一个测试类里面的一个测试方法，在重复测试时多线程并发执行，至于其他两种场景如何设置，接下来的文中也会讲清楚，您自行实践即可；

首先是创建JUnit5的配置文件，如下图，在test文件夹上点击鼠标右键，在弹出的菜单选择"New"->“Directory”:


弹出的窗口如下图，双击红框位置的"resources"，即可新建resources目录：


在新增的resources目录中新建文件junit-platform.properties，内容如下，每个配置项都有详细的说明：

# 并行开关true/false
junit.jupiter.execution.parallel.enabled=true
# 方法级多线程开关 same_thread/concurrent
junit.jupiter.execution.parallel.mode.default = same_thread
# 类级多线程开关 same_thread/concurrent
junit.jupiter.execution.parallel.mode.classes.default = same_thread

# 并发策略有以下三种可选：
# fixed：固定线程数，此时还要通过junit.jupiter.execution.parallel.config.fixed.parallelism指定线程数
# dynamic：表示根据处理器和核数计算线程数
# custom：自定义并发策略，通过这个配置来指定：junit.jupiter.execution.parallel.config.custom.class
junit.jupiter.execution.parallel.config.strategy = fixed

# 并发线程数，该配置项只有当并发策略为fixed的时候才有用
junit.jupiter.execution.parallel.config.fixed.parallelism = 5
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
由于实践的是同一个类同一个方法多次执行的并发，因此上述配置中，类级多线程开关和方法级多线程开关都选择了"同一个线程"，也就是说不需要并发执行多个类或者多个方法，请您根据自己的需求自行调整；
关于并发策略，这里选择的是动态调整，我这里是i5-8400处理器，拥有六核心六线程，稍后咱们看看执行效果与这个硬件配置是否有关系；
接下来编写测试代码，先写一个单线程执行的，可见@Execution的值为SAME_THREAD，限制了重复测试时在同一个线程内顺序执行：
package com.bolingcavalry.advanced.service.impl;

import lombok.extern.slf4j.Slf4j;
import org.junit.jupiter.api.*;
import org.junit.jupiter.api.parallel.Execution;
import org.junit.jupiter.api.parallel.ExecutionMode;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.ValueSource;
import org.springframework.boot.test.context.SpringBootTest;
import static org.junit.jupiter.api.Assertions.assertTrue;

@SpringBootTest
@Slf4j
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
class ParallelExecutionTest {

    @Order(1)
    @Execution(ExecutionMode.SAME_THREAD)
    @DisplayName("单线程执行10次")
    @RepeatedTest(value = 10, name="完成度：{currentRepetition}/{totalRepetitions}")
    void sameThreadTest(TestInfo testInfo, RepetitionInfo repetitionInfo) {
        log.info("测试方法 [{}]，当前第[{}]次，共[{}]次",
                testInfo.getTestMethod().get().getName(),
                repetitionInfo.getCurrentRepetition(),
                repetitionInfo.getTotalRepetitions());
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
执行结果如下，可见确实是单线程：


重复测试时并发执行的代码如下，@Execution的值为CONCURRENT：

    @Order(2)
    @Execution(ExecutionMode.CONCURRENT)
    @DisplayName("多线程执行10次")
    @RepeatedTest(value = 10, name="完成度：{currentRepetition}/{totalRepetitions}")
    void concurrentTest(TestInfo testInfo, RepetitionInfo repetitionInfo) {
        log.info("测试方法 [{}]，当前第[{}]次，共[{}]次",
                testInfo.getTestMethod().get().getName(),
                repetitionInfo.getCurrentRepetition(),
                repetitionInfo.getTotalRepetitions());
    }
1
2
3
4
5
6
7
8
9
10
执行结果如下，从红框1可见顺序已经乱了，从红框2可见十次测试方法是在五个线程中执行的：

最后是参数化测试的演示，也可以设置为多线程并行执行：
    @Order(3)
    @Execution(ExecutionMode.CONCURRENT)
    @DisplayName("多个int型入参")
    @ParameterizedTest
    @ValueSource(ints = { 1,2,3,4,5,6,7,8,9,0 })
    void intsTest(int candidate) {
        log.info("ints [{}]", candidate);
    }
1
2
3
4
5
6
7
8
执行结果如下图，可见也是5个线程并行执行的：

结束语
至此，《JUnit5学习》系列已经全部完成，感谢您的耐心阅读，希望这个原创系列能够带给您一些有用的信息，为您的单元测试提供一些参考，如果发现文章有错误，期待您能指点一二；

欢迎关注公众号：程序员欣宸
微信搜索「程序员欣宸」，我是欣宸，期待与您一同畅游Java世界…

文章知识点与官方知识档案匹配，可进一步学习相关知识
Java技能树进阶任务Java问答57989 人正在系统学习中

程序员欣宸
已关注

1


2


1

专栏目录
junit5 入门系列教程-14-junit5 重复测试(@RepeatedTest)
 3万+
目录 目录 重复测试 特性说明 测试案例 实例 系列导航 重复测试 JUnit Jupiter提供了通过使用@RepeatedTest注释方法并指定所需重复次数的能力。重复测试的每次调用都表现为对相同生命周期回调和扩展的完全支持的常规@Test方法的执行。 下面的示例演示如何声明一个名为repeatedTest()的测试，它将自动重复10次。 @RepeatedTest...
java moreexecutor_NoSuchMethodError: MoreExecutors.sameThreadExecutor 错误解决
weixin_29048309的博客
 1222
报错详情:java.lang.NoSuchMethodError: com.google.common.util.concurrent.MoreExecutors.sameThreadExecutor()Lcom/google/common/util/concurrent/ListeningExecutorService;at org.apache.curator.framework.listen...
评论1条写评论
weixin_51101670
热评
你好，我想请教下，我现在在做接口测试，所以要用到@RunWith(SpringRunner.class)@SpringBootTest ，但是我想实现@CsvFileSource的功能，我看到有@RunWith(Parameterized.class)这个可以实现参数化，但是不是我想要的CSV文件读取参数的方式，而是直接把参数写在代码里，大佬有什么好的思路吗？
java单元测试面试,Java必备！JUnit面试题和答案汇总
weixin_34312809的博客
 1195
下面列出了最常见的JUnit面试问题和答案。1)什么是测试？测试是检查应用程序功能是否满足要求的过程。2)什么是JUnit？JUnit是测试框架, 它用于Java代码的单元测试。JUnit = Java + Unit Testing更多细节…3)什么是单元测试？测试应用程序的各个功能(称为单元)的过程称为单元测试。4)手动测试和自动测试有什么区别？手动测试是由人工执行的, 因此既费时又昂贵。自动化...
java白盒测试面试题_面试之JAVA基础Junit了解
weixin_39614109的博客
 180
什么叫Junit Junit是一个java单元测试框架 是对程序进行白盒测试一般来说要对一个方法进行测试其结果 可以写一个main入口 然后调用其方法来进行测试结果；而junit就是省去这部分可以对一个方法进行测试如下代码 对一个方法进行测试只要在方法上加上@Test 注解就噢啦package com.java.xiong.test1;import org.junit.After;imp...
Junit5的并行执行
m0_37607945的博客
 1874
本文参考：https://junit.org/junit5/docs/current/user-guide/#writing-tests-parallel-execution 默认情况下，junit测试是在一个线程中串行执行的，从5.3开始支持并行测试。首先需要在配置文件junit-platform.properties中配置如下参数： junit.jupiter.execution.parallel.enabled=true 但是仅仅开启这个参数是不会起效的，测试仍然是按照单个线程去执行的。在测试树上的
JUnit5学习之八：综合进阶（终篇），助你面试一臂之力
m0_63174529的博客
 53
《JUnit5学习》系列旨在通过实战提升SpringBoot环境下的单元测试技能，一共八篇文章，链接如下： 基本操作 Assumptions类 Assertions类 按条件执行 标签(Tag)和自定义注解 参数化测试(Parameterized Tests)基础 参数化测试(Parameterized Tests)进阶 综合进阶（终篇） 本篇概览 本文是《JUnit5学习》系列的终篇，将JUnit5提供的一些高级特性以实战的形式展现出来； JUnit5的特性非常
JUnit5学习之八：综合进阶（终篇，2021Java精选面试实战总结整理
m0_64867688的博客
 86
void if_it_is_zero() { } } 执行结果如下图，方法if_it_is_zero展示出的名字为if it is zero： 在上述替换方式的基础上，JUnit5还提供了另一种生成展示名称的方法：测试类名+连接符+测试方法名，并且类名和方法名的下划线都会被替换成空格，演示代码如下，使用了注解@IndicativeSentencesGeneration，其separator属性就是类名和方法名之间的连接符： package com.bolingcavalry.advanced.se
JUnit5学习之七：参数化测试(Parameterized Tests)进阶
程序员欣宸的博客
 3272
了解JUnit5参数化测试的高级功能
JUnit5学习之一：基本操作
程序员欣宸的博客
 6911
《JUnit5学习》是欣宸的又一个实战主题的Java技术栈原创系列，欢迎大家一起来学习和掌握最新的单元测试技术
Maven 编译打包报错：程序包org.junit不存在 Error:(3, 29) java: 程序包org.junit.jupiter.api不存在 IDEA
旅经Java的博客
 8957
报错的原因是java.junit.的版本问题，IDEA里默认的版本为3.8.1，修改为高版本就可以了,因为3.x使用的为编程的方式，4.x以后为注解的形式。 1、双击打开pom.xml文件。 2、在org.junit.vintage 依赖后面补充一段 代码块如下 <dependency> <groupId>org.junit.jupiter</groupI...
测试面试 | Java 经典面试题汇总
weixin_46635091的博客
 862
Java 目前仍然是业界应用最为广泛的编程语言，在很多互联网大厂，深度掌握 Java 是中高级测试开发／测试架构师的必备核心技能。技术面试中，Java 编程技能也一直是考核重点。 本文整理汇总了常见的经典 Java 面试题目（较偏向初级和中级水平），供各位测试开发同学参考。这里只给出问题，不列出参考答案（很多问题答案并不唯一），有兴趣的可以留言讨论，进阶学习文末加群。 一、基础篇 1.1、Java 基础 面向对象的特征：继承、封装和多态 final, finally, finalize 的区别 Excep
[Spring Boot] [解决] 新建的代码工程，org.junit.jupiter报错，org.junit.jupiter.api.test报错
H_O_W_E的专栏
 3784
问题： [Spring Boot] [解决] 新建的代码工程，org.junit.jupiter报错，org.junit.jupiter.api.test报错 解决： 在pom.xml添加依赖 <dependency> <groupId>org.junit.jupiter</groupId> <artifactId>junit-jupiter-api</artifactId> <version>5.5.0...
Java测试框架-junit5详解
最新发布
chenjxj123的博客
 4544
Java测试框架-junit5 java当前主流的测试框架有两个：TESTNG、Junit5；这两个框架在功能上都比较完善，也没有说哪个更好，因为笔者平时用的比较多的是Junit5，所以本文主要讲的是Junit5的使用 1、Junit5的构成 Junit5的框架主要有三个部分组成分别是：JUnit Platform + JUnit Jupiter + JUnit Vintage3 JUnit Platform : 其主要作用是在 JVM 上启动测试框架。它定义了一个抽象的 TestEngine AP
Junit关于并发执行测试的源码简单分析和使用
吟啸徐行
 1517
并发执行测试用例目的很简单：就是为了高效使用资源降低测试时间，俗话说天下武功，唯快不破，对，就是求追速度。Junit中有关并行执行测试的关键组件为ParallelComputer，ParallelComputer的基类为Computer。Computer在Junit项目中是一个执行runners或者suites的角色（Runner是一个执行测试用例的执行器；Suite继承至Runner，Suite...
JUnit5学习之三：Assertions类
程序员欣宸的博客
 3296
断言是单元测试中最常用的测试手段，本文就来学习和操作常用的断言功能
JUnit5学习之二：Assumptions类
程序员欣宸的博客
 1831
学习Assumptions类的用法
JUnit5学习之四：按条件执行
程序员欣宸的博客
 1741
学习和实战如何设置单元测试的执行条件
JUnit5学习之五：标签(Tag)和自定义注解
程序员欣宸的博客
 2552
学习和实践JUnit5的标签过滤和自定义注解功能
JUnit5学习之六：参数化测试(Parameterized Tests)基础
程序员欣宸的博客
 2176
了解JUnit5的参数化测试的基本知识
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 110);
INSERT INTO public.article_content VALUES (115, '2022-08-27 12:17:45.047', false, '2022-09-23 20:36:36.908', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', 'quarkus实战之三：开发模式(Development mode)

程序员欣宸

于 2022-03-05 11:50:48 发布

533
 收藏
分类专栏： java服务端 文章标签： quarkus cloud native
版权

java服务端
专栏收录该内容
175 篇文章46 订阅
订阅专栏
欢迎访问我的GitHub
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos

本篇概览
前文咱们曾提到过几种启动方式，有一种用maven命令启动的，可以进入开发模式，命令如下：
mvn quarkus:dev
1
当时只提到此模式能看到详细系统信息，并未展开说明更多信息，实际上，此模式下还有很多实用的功能
作为《quarkus实战》系列的第三篇，今天咱们一起来学习开发模式(Development mode)，这是quarkus为开发者准备的实用工具
关于开发模式(Development mode)
开发模式是quarkus框架提供的内置工具(built-in)，可直接使用
开发模式提供以下功能：
系统信息：即前文提到过的，查看对象和配置、修改配置、操作单元测试等功能
热部署：修改java代码、资源文件、配置文件等类型的文件后，会立即生效
断点：这是常用功能就不多说了，稍后直接操作
接下来实际体验上述功能，用的是《quarkus实战之二：体验HelloWorld》一文中创建的demo工程
系统信息
访问http://localhost:8080/q/dev/，可以看到丰富的系统信息，该地址只在dev模式有效：

热部署
热部署是日常开发的常用功能，回顾demo中的HobbyResource.java，如下所示，非常简单：
package com.bolingcavalry;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import java.time.LocalDateTime;

@Path("/actions")
public class HobbyResource {

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return "Hello RESTEasy " + LocalDateTime.now();
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
为了演示修改配置可以立即生效的效果，把代码改成下面这样，注意注解ConfigProperty的作用是将指定配置的值注入修饰的成员变量中：
package com.bolingcavalry;

import org.eclipse.microprofile.config.inject.ConfigProperty;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import java.time.LocalDateTime;

@Path("/actions")
public class HobbyResource {

    @ConfigProperty(name = "greeting.message")
    String message;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return "Hello RESTEasy " + LocalDateTime.now() + " " + message;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
打开文件application.properties，增加一个配置：
# 这是一个自定义属性
greeting.message=message from configuration
1
2
用命令mvn quarkus:dev将应用以开发模式启动，用浏览器访问http://localhost:8080/actions，响应如下图，符合预期，配置的属性可以被正常使用：


现在去修改代码，如下图红框：


再把文件application.properties中的配置也改了，我这里改成了abcdef
再去刷新页面，如下图所示，代码和配置的修改都生效了：


以上就是热部署了，接下来去看另一个实用的功能：断点
断点
打断点、单步调试等都是Java程序员的日常操作，就不做介绍了，直接聊聊quarkus上如何操作吧

在开发模式下，断点功能是默认开启的，不过为了安全起见，quarkus断点只监听了localhost网卡，端口是5005

在代码中打个断点，如下图，我这里用的是IDEA：



在IDEA上新增一个断点，操作如下图：


如下图所示，确认端口号正确：


配置完成后，点击下图红框中的按钮即可发起断点请求：


如果应用正常监听，应该能立即连接成功，如下图：


刷新浏览器，请求会立即停留在断点位置，一切都是熟悉的样子，可以像以前一样查看变量和堆栈，也可以做单步执行和条件断点等操作：


以上是通过localhost:5005进行本地调试的操作步骤，如果另外一台电脑想连接到到这个quarkus应用进行远程调式，是连接不成功的，因为quarkus应用启动后监听的是localhost这块网卡，为了能够让其他电脑上的IDEA远程连接到这个应用，我们需要给启动命令增加一个参数，令其监听本机所有网卡，支持远程debug的完整启动命令如下，另外，debug参数可以指定端口：

 mvn quarkus:dev -DdebugHost=0.0.0.0 -Ddebug=5006
1
启动后控制台输出信息如下图，红框中显示监听的端口是5006：


当前电脑的IP是192.168.50.221，所以将断点的地址从localhost:5005改为192.168.50.221:5006，如下图：


再尝试连接断点，如下所示，新的IP+端口连接成功：


因为连接是基于IP+端口的，您完全可以在A电脑上运行应用，在B电脑上用IDEA远程连接A电脑进行断点操作
热部署的局限性
前面的操作：在A电脑用mvn quarkus:dev -DdebugHost=0.0.0.0 -Ddebug=5006命令启动应用，在B电脑上用IDEA连接到A电脑上进行热部署操作，虽然也算是远程，但聪明的您应该看出了弊端：A电脑上必须有源码
很多时候，我们热部署是为了处理特定问题，而出现问题的电脑可能是测试环境，甚至生产环境，这些地方是不会有源码和maven的，此时mvn quarkus:dev命令就行不通了，那又该如何处理呢？放弃热部署的便利，只能改一次代码部署一次吗？
好在quarkus已经考虑到这种情况，为我们准备了远程热部署方案，下一篇文章会详细介绍和操作
你不孤单，欣宸原创一路相伴
Java系列
Spring系列
Docker系列
kubernetes系列
数据库+中间件系列
DevOps系列

程序员欣宸
已关注

1


0


1

专栏目录
blog-quarkus-ui-development
05-17
博客文章示例代码 我的博客文章的示例代码位于 。 它由一系列6个步骤组成，这些步骤跟踪博客中采取的步骤。 它们都被标记为 （实际工作的基准） 要查看在第4步中所做的更改，请访问 最后，master分支包含来自社区贡献的错误修复。 它们将在“步骤6”之后执行，因为要重做所有标签以将此类修复程序放入序列中的正确位置实在是太费力了：) Quarkus和Angular UI开发 下面逐步介绍了如何获得所需的结果。 我们将研究如何利用Quarkus和Angular CLI各自的开发模式，并了解如何在Quarkus上开发由RESTful API支持的零周转Web应用程序。 当我使用Angular时，其他Web应用程序框架（例如React和Vue）也有类似的东西。 对于我当前的项目，我发现有三个主要问题需要处理，或者需要设置一些东西才能使它们很好地协同工作： 角度路由器在子路径（称为“路由”
head first android development（深入浅出Android开发）
02-06
head first android development（深入浅出Android开发） 英文 高清 pdf 深入浅出系列的Android开发 用作入门比较好，图文并茂，很有意思 传承了Head First系列的特点
评论1条写评论
_Schilings
热评
催更
解决vue在开发模式下警告 You are running Vue in development mode.
兔子的博客
 9889
阻止你显示显示生产模式的消息 You are running Vue in development mode. Make sure to turn on production mode when deploying for production. See more tips at https://vuejs.org/guide/deployment.html 加入 Vue.config.productionTip = false;//屏蔽提示信息 Vue.config.productionTip = fal
Angular is running in the development mode. Angular项目转为生产模式
PigBiBiX的博客
 6383
   准备把 Angular项目部署到服务器，打包完之后，打开网页，发现console出现  Angular is running in the development mode. Call enableProdMode() to enable the production mode.提示，而且提示建议我转成生产模式。在stack overflow找到了方法。1、首先确保项目文件夹下的main.t...
quarkus实战之四：远程热部署
程序员欣宸的博客
 451
将本地的改动极速同步到远程服务端，并自动生效，掌握此技能，开发调试会更高效
Webpack mode三种模式配置说明（production，development，none）
Czuaphe的博客
 9245
我们都知道webpack的配置文件 webpack.config.js 文件中 mode 表示webpack当前的环境以及对不同的环境的配置。虽然官方文档写明了三种不同的模块的配置，但是没有具体说明是什么意思，我就注释一下对应的模块到底进行了什么操作。 development（开发模式） 下面是从官方上得到的开发模式的全部配置， // webpack.development.config.js m...
Webpack5学习笔记（基础篇五）—— mode之Development环境相关参数配置
MRlaochen的博客
 1220
在Webpack5中，mode（模式）有三种： development（开发环境模式） production（生产环境模式） none或'' ''（空） 在不同模式中，我们可能对于webpack.config.js配置文件进行不同参数的设置 比如，在development开发环境中，我们可能使用devTool，devServer等对webpack打包后的代码进行浏览器调试；在production生产环境中，我们可能在optimization配置下面的minimizer中使用CssMinimizerPlugi
游戏开发unity杂项知识系列：build时Development Build的作用
Cloud Flower的博客-专注unity
 6920
Development Build的作用： 参考帖子： https://forum.unity.com/threads/what-is-development-build.56377/ 官方引用： Debug.isDebugBuild为true https://docs.unity3d.com/ScriptReference/Debug-isDebugBuild.html 会包含Debug相关的符号，可以使...
解决控制台：You are running Vue in development mode. Make sure to turn on production mode when deploying
Codernmx
 5442
引用Vue的CDN文件的时候控制台会提示： 隐藏：You are running Vue in development mode. Make sure to turn on production mode when deploying for production. See more tips at https://vuejs.org/guide/deployment.html 只需要添加一行代码就可以解决，自己表示看着不舒服，哈哈哈，用cli创建项目那些就不存在了 Vue.config.producti
matlab histc的用法,matlab的hist函数应用技巧及使用方法
weixin_29158413的博客
 918
如果在一个矩阵中杂乱的分布这一组数据，且数据中有重复，想统计出相同数据出现的次数，可使用以下方法：设该矩阵为a(1,20),则可以a=[2.57,2.9,2.87,2.82,2.49,2.69,3.09,2.91,3.0,3.058,2.92,2.84,3.23,3.1,3.02,3.11,2.87,2.95,2.92,2.73];x=unique(a);y=a;[m n]=hist(y,x);得...
VSCode 远程开发 remote development SSH 模式 | Windows 版
浅尚湖间
 6118
VSCode 正式版 1.35 已经支持远程开发功能，第一步安装插件 Remote Development，该插件是个插件包，包含三个插件：Remote - SSH、Remote - Containers和Remote - WSL，这篇文章主要写 SSH 模式的远程开发，因为 WSL 模式非常简单，基本和用本地文件差不多，而 Container 模式在 Windows 下众所周知比较尴尬。安装完插...
quarkus数据库篇之二：无需数据库也能运行增删改查(dev模式)
最新发布
程序员欣宸的博客
 243
来了解quarkus官方提供的一个小工具，就算没有数据库，也能让应用顺利的运行增删改查（dev模式）
Redmine: 切换production,development模式
陈小峰（iefreer）的专栏
 4976
1. 在config/enviroment.rbENV[''RAILS_ENV''] ||= ''development''
You are running Vue in development mode. Make sure to turn on production mode when deploying for pr
嫣子的博客
 3万+
解决非webpack下 Vue控制台提示You are running Vue in development mode. 解决Vue控制台提示 You are running Vue in development mode. Make sure to turn on production mode when deploying for production. See more tips at ht...
vue-2.5.17.js:8553 You are running Vue in development mode. Make sure to turn on production mode whe
偷得浮生半日闲
 1万+
vue-2.5.17.js:8553 You are running Vue in development mode. Make sure to turn on production mode whe报错问题排查解决
React—Native开发之 Could not connect to development server（Android）解决方法
冷血之心的博客
 4万+
Could not connect to development server 是我深恶痛绝的一个超级大BUG。
WARNING: This is a development server. Do not use it in a production deployment. falsk WSGI
热门推荐
God丶Davide的博客
 12万+
Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. 记录一下这个问题， Environment: production WARN...
软件开发流程（Software development process）
LisenYang的专栏
 2万+
软件开发流程（Software development process）
解决Vue提示 You are running Vue in development mode 问题
dakmayau的博客
 4968
在非 webpack 下浏览器控制台会提示： You are running Vue in development mode. Make sure to turn on production mode when deploying for production. See more tips at https://vuejs.org/guide/deployment.html 你正在开发模式下运...
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
90%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 'quarkus实战之三：开发模式(Development mode)

程序员欣宸

于 2022-03-05 11:50:48 发布

533
 收藏
分类专栏： java服务端 文章标签： quarkus cloud native
版权

java服务端
专栏收录该内容
175 篇文章46 订阅
订阅专栏
欢迎访问我的GitHub
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos

本篇概览
前文咱们曾提到过几种启动方式，有一种用maven命令启动的，可以进入开发模式，命令如下：
mvn quarkus:dev
1
当时只提到此模式能看到详细系统信息，并未展开说明更多信息，实际上，此模式下还有很多实用的功能
作为《quarkus实战》系列的第三篇，今天咱们一起来学习开发模式(Development mode)，这是quarkus为开发者准备的实用工具
关于开发模式(Development mode)
开发模式是quarkus框架提供的内置工具(built-in)，可直接使用
开发模式提供以下功能：
系统信息：即前文提到过的，查看对象和配置、修改配置、操作单元测试等功能
热部署：修改java代码、资源文件、配置文件等类型的文件后，会立即生效
断点：这是常用功能就不多说了，稍后直接操作
接下来实际体验上述功能，用的是《quarkus实战之二：体验HelloWorld》一文中创建的demo工程
系统信息
访问http://localhost:8080/q/dev/，可以看到丰富的系统信息，该地址只在dev模式有效：

热部署
热部署是日常开发的常用功能，回顾demo中的HobbyResource.java，如下所示，非常简单：
package com.bolingcavalry;

import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import java.time.LocalDateTime;

@Path("/actions")
public class HobbyResource {

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return "Hello RESTEasy " + LocalDateTime.now();
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
为了演示修改配置可以立即生效的效果，把代码改成下面这样，注意注解ConfigProperty的作用是将指定配置的值注入修饰的成员变量中：
package com.bolingcavalry;

import org.eclipse.microprofile.config.inject.ConfigProperty;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import java.time.LocalDateTime;

@Path("/actions")
public class HobbyResource {

    @ConfigProperty(name = "greeting.message")
    String message;

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String hello() {
        return "Hello RESTEasy " + LocalDateTime.now() + " " + message;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
打开文件application.properties，增加一个配置：
# 这是一个自定义属性
greeting.message=message from configuration
1
2
用命令mvn quarkus:dev将应用以开发模式启动，用浏览器访问http://localhost:8080/actions，响应如下图，符合预期，配置的属性可以被正常使用：


现在去修改代码，如下图红框：


再把文件application.properties中的配置也改了，我这里改成了abcdef
再去刷新页面，如下图所示，代码和配置的修改都生效了：


以上就是热部署了，接下来去看另一个实用的功能：断点
断点
打断点、单步调试等都是Java程序员的日常操作，就不做介绍了，直接聊聊quarkus上如何操作吧

在开发模式下，断点功能是默认开启的，不过为了安全起见，quarkus断点只监听了localhost网卡，端口是5005

在代码中打个断点，如下图，我这里用的是IDEA：



在IDEA上新增一个断点，操作如下图：


如下图所示，确认端口号正确：


配置完成后，点击下图红框中的按钮即可发起断点请求：


如果应用正常监听，应该能立即连接成功，如下图：


刷新浏览器，请求会立即停留在断点位置，一切都是熟悉的样子，可以像以前一样查看变量和堆栈，也可以做单步执行和条件断点等操作：


以上是通过localhost:5005进行本地调试的操作步骤，如果另外一台电脑想连接到到这个quarkus应用进行远程调式，是连接不成功的，因为quarkus应用启动后监听的是localhost这块网卡，为了能够让其他电脑上的IDEA远程连接到这个应用，我们需要给启动命令增加一个参数，令其监听本机所有网卡，支持远程debug的完整启动命令如下，另外，debug参数可以指定端口：

 mvn quarkus:dev -DdebugHost=0.0.0.0 -Ddebug=5006
1
启动后控制台输出信息如下图，红框中显示监听的端口是5006：


当前电脑的IP是192.168.50.221，所以将断点的地址从localhost:5005改为192.168.50.221:5006，如下图：


再尝试连接断点，如下所示，新的IP+端口连接成功：


因为连接是基于IP+端口的，您完全可以在A电脑上运行应用，在B电脑上用IDEA远程连接A电脑进行断点操作
热部署的局限性
前面的操作：在A电脑用mvn quarkus:dev -DdebugHost=0.0.0.0 -Ddebug=5006命令启动应用，在B电脑上用IDEA连接到A电脑上进行热部署操作，虽然也算是远程，但聪明的您应该看出了弊端：A电脑上必须有源码
很多时候，我们热部署是为了处理特定问题，而出现问题的电脑可能是测试环境，甚至生产环境，这些地方是不会有源码和maven的，此时mvn quarkus:dev命令就行不通了，那又该如何处理呢？放弃热部署的便利，只能改一次代码部署一次吗？
好在quarkus已经考虑到这种情况，为我们准备了远程热部署方案，下一篇文章会详细介绍和操作
你不孤单，欣宸原创一路相伴
Java系列
Spring系列
Docker系列
kubernetes系列
数据库+中间件系列
DevOps系列

程序员欣宸
已关注

1


0


1

专栏目录
blog-quarkus-ui-development
05-17
博客文章示例代码 我的博客文章的示例代码位于 。 它由一系列6个步骤组成，这些步骤跟踪博客中采取的步骤。 它们都被标记为 （实际工作的基准） 要查看在第4步中所做的更改，请访问 最后，master分支包含来自社区贡献的错误修复。 它们将在“步骤6”之后执行，因为要重做所有标签以将此类修复程序放入序列中的正确位置实在是太费力了：) Quarkus和Angular UI开发 下面逐步介绍了如何获得所需的结果。 我们将研究如何利用Quarkus和Angular CLI各自的开发模式，并了解如何在Quarkus上开发由RESTful API支持的零周转Web应用程序。 当我使用Angular时，其他Web应用程序框架（例如React和Vue）也有类似的东西。 对于我当前的项目，我发现有三个主要问题需要处理，或者需要设置一些东西才能使它们很好地协同工作： 角度路由器在子路径（称为“路由”
head first android development（深入浅出Android开发）
02-06
head first android development（深入浅出Android开发） 英文 高清 pdf 深入浅出系列的Android开发 用作入门比较好，图文并茂，很有意思 传承了Head First系列的特点
评论1条写评论
_Schilings
热评
催更
解决vue在开发模式下警告 You are running Vue in development mode.
兔子的博客
 9889
阻止你显示显示生产模式的消息 You are running Vue in development mode. Make sure to turn on production mode when deploying for production. See more tips at https://vuejs.org/guide/deployment.html 加入 Vue.config.productionTip = false;//屏蔽提示信息 Vue.config.productionTip = fal
Angular is running in the development mode. Angular项目转为生产模式
PigBiBiX的博客
 6383
   准备把 Angular项目部署到服务器，打包完之后，打开网页，发现console出现  Angular is running in the development mode. Call enableProdMode() to enable the production mode.提示，而且提示建议我转成生产模式。在stack overflow找到了方法。1、首先确保项目文件夹下的main.t...
quarkus实战之四：远程热部署
程序员欣宸的博客
 451
将本地的改动极速同步到远程服务端，并自动生效，掌握此技能，开发调试会更高效
Webpack mode三种模式配置说明（production，development，none）
Czuaphe的博客
 9245
我们都知道webpack的配置文件 webpack.config.js 文件中 mode 表示webpack当前的环境以及对不同的环境的配置。虽然官方文档写明了三种不同的模块的配置，但是没有具体说明是什么意思，我就注释一下对应的模块到底进行了什么操作。 development（开发模式） 下面是从官方上得到的开发模式的全部配置， // webpack.development.config.js m...
Webpack5学习笔记（基础篇五）—— mode之Development环境相关参数配置
MRlaochen的博客
 1220
在Webpack5中，mode（模式）有三种： development（开发环境模式） production（生产环境模式） none或'' ''（空） 在不同模式中，我们可能对于webpack.config.js配置文件进行不同参数的设置 比如，在development开发环境中，我们可能使用devTool，devServer等对webpack打包后的代码进行浏览器调试；在production生产环境中，我们可能在optimization配置下面的minimizer中使用CssMinimizerPlugi
游戏开发unity杂项知识系列：build时Development Build的作用
Cloud Flower的博客-专注unity
 6920
Development Build的作用： 参考帖子： https://forum.unity.com/threads/what-is-development-build.56377/ 官方引用： Debug.isDebugBuild为true https://docs.unity3d.com/ScriptReference/Debug-isDebugBuild.html 会包含Debug相关的符号，可以使...
解决控制台：You are running Vue in development mode. Make sure to turn on production mode when deploying
Codernmx
 5442
引用Vue的CDN文件的时候控制台会提示： 隐藏：You are running Vue in development mode. Make sure to turn on production mode when deploying for production. See more tips at https://vuejs.org/guide/deployment.html 只需要添加一行代码就可以解决，自己表示看着不舒服，哈哈哈，用cli创建项目那些就不存在了 Vue.config.producti
matlab histc的用法,matlab的hist函数应用技巧及使用方法
weixin_29158413的博客
 918
如果在一个矩阵中杂乱的分布这一组数据，且数据中有重复，想统计出相同数据出现的次数，可使用以下方法：设该矩阵为a(1,20),则可以a=[2.57,2.9,2.87,2.82,2.49,2.69,3.09,2.91,3.0,3.058,2.92,2.84,3.23,3.1,3.02,3.11,2.87,2.95,2.92,2.73];x=unique(a);y=a;[m n]=hist(y,x);得...
VSCode 远程开发 remote development SSH 模式 | Windows 版
浅尚湖间
 6118
VSCode 正式版 1.35 已经支持远程开发功能，第一步安装插件 Remote Development，该插件是个插件包，包含三个插件：Remote - SSH、Remote - Containers和Remote - WSL，这篇文章主要写 SSH 模式的远程开发，因为 WSL 模式非常简单，基本和用本地文件差不多，而 Container 模式在 Windows 下众所周知比较尴尬。安装完插...
quarkus数据库篇之二：无需数据库也能运行增删改查(dev模式)
最新发布
程序员欣宸的博客
 243
来了解quarkus官方提供的一个小工具，就算没有数据库，也能让应用顺利的运行增删改查（dev模式）
Redmine: 切换production,development模式
陈小峰（iefreer）的专栏
 4976
1. 在config/enviroment.rbENV[''RAILS_ENV''] ||= ''development''
You are running Vue in development mode. Make sure to turn on production mode when deploying for pr
嫣子的博客
 3万+
解决非webpack下 Vue控制台提示You are running Vue in development mode. 解决Vue控制台提示 You are running Vue in development mode. Make sure to turn on production mode when deploying for production. See more tips at ht...
vue-2.5.17.js:8553 You are running Vue in development mode. Make sure to turn on production mode whe
偷得浮生半日闲
 1万+
vue-2.5.17.js:8553 You are running Vue in development mode. Make sure to turn on production mode whe报错问题排查解决
React—Native开发之 Could not connect to development server（Android）解决方法
冷血之心的博客
 4万+
Could not connect to development server 是我深恶痛绝的一个超级大BUG。
WARNING: This is a development server. Do not use it in a production deployment. falsk WSGI
热门推荐
God丶Davide的博客
 12万+
Environment: production WARNING: This is a development server. Do not use it in a production deployment. Use a production WSGI server instead. 记录一下这个问题， Environment: production WARN...
软件开发流程（Software development process）
LisenYang的专栏
 2万+
软件开发流程（Software development process）
解决Vue提示 You are running Vue in development mode 问题
dakmayau的博客
 4968
在非 webpack 下浏览器控制台会提示： You are running Vue in development mode. Make sure to turn on production mode when deploying for production. See more tips at https://vuejs.org/guide/deployment.html 你正在开发模式下运...
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
90%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 114);
INSERT INTO public.article_content VALUES (1582308065313554433, '2022-10-18 17:50:15.29', false, '2022-10-20 00:35:11.552', '<p><img src="http://qiniu.dwsy.link/ddl/45e6449f341a4f9fa49a882b9aa473a8.webp?imageslim" alt="v2-027e12f21f01d129c636c425caa77ed7_720w.webp" align=right width="40%"></img></p>
<blockquote>
<p>Rem<br />
誕生日	2月2日<br />
年齢	17歳<br />
身長	154cm<br />
体重	53kg<br />
名前の由来	Left<br />
特技	料理・洗濯・掃除・裁縫<br />
趣味	演劇鑑賞・詩文<br />
CV	水瀬いのり<br />
エミリアの暮らすロズワール邸でメイド頭を任される水色髪ショートが特徴の鬼族の少女。<br />
一人称は「レム」。<br />
姉のラムとは対照的に右目に前髪が掛かっている。<br />
ラムと二人、広大な屋敷を維持する有能メイド。雑務全般を一手に担っており、屋敷の仕事の9割は彼女が行っているお陰で屋敷の機能は維持されている。本人曰く「ラムはただいるだけで満足」。<br />
性格は温和で献身的だが、それは心を許した相手にだけ見せる表情で、敵対者には容赦をしない。<br />
意外と感情の抑制が利かず、暴走しやすい一面もある。目下、レムの愛情はラムとスバルの二人に捧げられている。なお、姉より胸が大きいことがコンプレックスだったが、最近それを克服した。<br />
ラムが姉らしく「傲岸不遜な毒舌担当」と形容されるなら、妹のレムは「慇懃無礼な毒舌担当」と紹介されている。<br />
とある事情からラムに対して負い目を持っており、自己評価が極端に低い。<br />
姉への贖罪の為に生きていたが、主人公のスバルに救われ諭されたことで、トラウマを克服する。<br />
スバルを「レムの英雄」として絶対視し身を尽くすが、彼の逃避を許さない厳しさの象徴でもある。</p>
</blockquote>
', '<img src="http://qiniu.dwsy.link/ddl/45e6449f341a4f9fa49a882b9aa473a8.webp?imageslim" alt="v2-027e12f21f01d129c636c425caa77ed7_720w.webp" align=right width="40%"></img>
> Rem
> 誕生日	2月2日
年齢	17歳
身長	154cm
体重	53kg
名前の由来	Left
特技	料理・洗濯・掃除・裁縫
趣味	演劇鑑賞・詩文
CV	水瀬いのり
エミリアの暮らすロズワール邸でメイド頭を任される水色髪ショートが特徴の鬼族の少女。
一人称は「レム」。
姉のラムとは対照的に右目に前髪が掛かっている。
ラムと二人、広大な屋敷を維持する有能メイド。雑務全般を一手に担っており、屋敷の仕事の9割は彼女が行っているお陰で屋敷の機能は維持されている。本人曰く「ラムはただいるだけで満足」。
性格は温和で献身的だが、それは心を許した相手にだけ見せる表情で、敵対者には容赦をしない。
意外と感情の抑制が利かず、暴走しやすい一面もある。目下、レムの愛情はラムとスバルの二人に捧げられている。なお、姉より胸が大きいことがコンプレックスだったが、最近それを克服した。
ラムが姉らしく「傲岸不遜な毒舌担当」と形容されるなら、妹のレムは「慇懃無礼な毒舌担当」と紹介されている。
とある事情からラムに対して負い目を持っており、自己評価が極端に低い。
姉への贖罪の為に生きていたが、主人公のスバルに救われ諭されたことで、トラウマを克服する。
スバルを「レムの英雄」として絶対視し身を尽くすが、彼の逃避を許さない厳しさの象徴でもある。

', '

Rem
誕生日	2月2日
年齢	17歳
身長	154cm
体重	53kg
名前の由来	Left
特技	料理・洗濯・掃除・裁縫
趣味	演劇鑑賞・詩文
CV	水瀬いのり
エミリアの暮らすロズワール邸でメイド頭を任される水色髪ショートが特徴の鬼族の少女。
一人称は「レム」。
姉のラムとは対照的に右目に前髪が掛かっている。
ラムと二人、広大な屋敷を維持する有能メイド。雑務全般を一手に担っており、屋敷の仕事の9割は彼女が行っているお陰で屋敷の機能は維持されている。本人曰く「ラムはただいるだけで満足」。
性格は温和で献身的だが、それは心を許した相手にだけ見せる表情で、敵対者には容赦をしない。
意外と感情の抑制が利かず、暴走しやすい一面もある。目下、レムの愛情はラムとスバルの二人に捧げられている。なお、姉より胸が大きいことがコンプレックスだったが、最近それを克服した。
ラムが姉らしく「傲岸不遜な毒舌担当」と形容されるなら、妹のレムは「慇懃無礼な毒舌担当」と紹介されている。
とある事情からラムに対して負い目を持っており、自己評価が極端に低い。
姉への贖罪の為に生きていたが、主人公のスバルに救われ諭されたことで、トラウマを克服する。
スバルを「レムの英雄」として絶対視し身を尽くすが、彼の逃避を許さない厳しさの象徴でもある。

', 1582308065313554432);
INSERT INTO public.article_content VALUES (14, '2022-09-08 21:25:10.81', false, '2022-09-15 10:41:12.561', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', '实战maven私有仓库三部曲之一：搭建和使用

程序员欣宸

于 2018-01-14 20:42:01 发布

22754
 收藏 24
分类专栏： 持续构建 文章标签： maven nexus maven私有仓库
版权

持续构建
专栏收录该内容
20 篇文章5 订阅
订阅专栏
在局域网内搭建maven私有仓库，可避免每次都从中央仓库下载公共jar包，另外将A模块作为二方库发布到私有仓库后，B模块可以很方便的引用，今天我们就来实战maven私有仓库的搭建和使用；

原文地址：http://blog.csdn.net/boling_cavalry/article/details/79059021

环境信息
安装私有仓库的机器是ubuntu16，IP是192.168.119.155；
maven私有仓库的软件是nexus-2.14.5，请在官网下载；
在window10环境上做验证的使用，用到的maven版本是3.3.3，jdk版本1.8.0_111；
安装和启动nexus
打开/etc/profile，新增一行export RUN_AS_USER=root；
执行命令source /etc/profile，使刚才的配置生效；
从官网下载的是nexus-2.14.5-02-bundle.tar.gz，执行tar -zxvf nexus-2.14.5-02-bundle.tar.gz解压后，里面有两个目录：nexus-2.14.5-02和sonatype-work；
进入nexus-2.14.5-02/bin，执行./nexus start启动nexus；
进入nexus-2.14.5-02/logs，执行tail -f wrapper.log观察日志滚动信息，看到如下信息时nexus启动成功：
jvm 1    | 2018-01-13 21:38:44,671-0800 INFO  [jetty-main-1]  org.sonatype.nexus.webresources.internal.WebResourceServlet - Max-age: 30 days (2592000 seconds)
jvm 1    | 2018-01-13 21:38:44,698-0800 INFO  [jetty-main-1]  org.sonatype.nexus.bootstrap.jetty.InstrumentedSelectChannelConnector - Metrics enabled
jvm 1    | 2018-01-13 21:38:44,713-0800 INFO  [jetty-main-1]  org.eclipse.jetty.server.AbstractConnector - Started InstrumentedSelectChannelConnector@0.0.0.0:8081
jvm 1    | 2018-01-13 21:38:44,713-0800 INFO  [jetty-main-1]  org.sonatype.nexus.bootstrap.jetty.JettyServer - Running
jvm 1    | 2018-01-13 21:38:44,713-0800 INFO  [WrapperListener_start_runner]  org.sonatype.nexus.bootstrap.jetty.JettyServer - Started
jvm 1    | 2018-01-13 21:39:26,926-0800 INFO  [qtp984089572-47]  org.apache.shiro.nexus5727.FixedDefaultWebSessionManager - Global session timeout: 1800000 ms
jvm 1    | 2018-01-13 21:39:26,931-0800 INFO  [qtp984089572-47]  org.apache.shiro.session.mgt.AbstractValidatingSessionManager - Enabling session validation scheduler...
jvm 1    | 2018-01-13 21:39:26,944-0800 INFO  [qtp984089572-47]  org.apache.shiro.cache.ehcache.EhCacheManager - Using existing EHCache named [shiro-activeSessionCache]
jvm 1    | 2018-01-13 21:39:26,945-0800 INFO  [qtp984089572-45]  org.apache.shiro.nexus5727.FixedDefaultWebSessionManager - Global session timeout: 1800000 ms
1
2
3
4
5
6
7
8
9
登录
在浏览器输入地址：http://192.168.119.155:8081/nexus/
进入nexus首页后，点击右上角的"Log In"按钮，输入用户名"admin"，默认密码"admin123"；
点击左侧的"Repositories"按钮，看到已有的仓库，如下图：

目前nexus已经开始正常工作了，接下来我们开始使用私有仓库；

使用私有仓库，配置
我的windows10开发环境要使用私有仓库，需要配置maven的信息，打开maven安装目录下的conf/settings.xml文件；
在mirrors节点下新增一个mirror节点，内容如下：
<mirror>
	<id>nexus</id>
	<mirrorOf>*</mirrorOf>
	<url>http://192.168.119.155:8081/nexus/content/groups/public/</url>
</mirror>
1
2
3
4
5
192.168.119.155是nexus机器的IP；
3. 在profiles节点下新增一个profile节点，内容如下：

<profile>
	<id>nexus</id>
    <repositories>
	    <repository>
		    <id>central</id>
	        <url>http://central</url>
	        <releases><enabled>true</enabled></releases>
	        <snapshots><enabled>true</enabled></snapshots>
	    </repository>
    </repositories>
    <pluginRepositories>
	    <pluginRepository>
	        <id>central</id>
	        <url>http://central</url>
	        <releases><enabled>true</enabled></releases>
	        <snapshots><enabled>true</enabled></snapshots>
	    </pluginRepository>
    </pluginRepositories>
</profile>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
以上新增了中央仓库的相关信息；
4. 新增一个activeProfiles节点，该节点和profiles节点一个层次，内容如下：

<activeProfiles>
    <activeProfile>nexus</activeProfile>
</activeProfiles>
1
2
3
新建一个springboot工程
新建一个基于maven构建的springboot的web工程，里面只有一个最简单的controller，在pom.xml所在目录下执行以下命令：
mvn clean package -Dmaven.test.skip=true
1
可以看到如下信息，当前的maven已经在通过私有仓库下载：
[INFO] Building jar: D:\temp\201801\06\helloworld\target\helloworld-0.0.1-SNAPSHOT.jar
[INFO]
[INFO] --- spring-boot-maven-plugin:1.5.9.RELEASE:repackage (default) @ helloworld ---
Downloading: http://192.168.119.155:8081/nexus/content/groups/public/org/springframework/boot/spring-boot-loader-tools/1.5.9.RELEASE/spring-boot-loader-tools-1.5.9.RELEASE.pom
Downloaded: http://192.168.119.155:8081/nexus/content/groups/public/org/springframework/boot/spring-boot-loader-tools/1.5.9.RELEASE/spring-boot-loader-tools-1.5.9.RELEASE.pom (0 B at 0.0 KB/sec)
Downloading: http://192.168.119.155:8081/nexus/content/groups/public/org/springframework/boot/spring-boot-loader-tools/1.5.9.RELEASE/spring-boot-loader-tools-1.5.9.RELEASE.jar
Downloaded: http://192.168.119.155:8081/nexus/content/groups/public/org/springframework/boot/spring-boot-loader-tools/1.5.9.RELEASE/spring-boot-loader-tools-1.5.9.RELEASE.jar (0 B at 0.0 KB/sec)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:21 min
[INFO] Finished at: 2018-01-14T17:57:45+08:00
[INFO] Final Memory: 29M/164M
[INFO] ------------------------------------------------------------------------
1
2
3
4
5
6
7
8
9
10
11
12
13
14
已缓存信息
此时再从浏览器查看“Central”仓库的信息，发现里面已经缓存了前面的springboot工程所依赖的jar包，今后其他机器再需要这些jar包时，就可以直接从私有仓库上下载了，而私有仓库没有的jar包，也会由私有仓库下载并保存，然后提供给使用私有仓库的机器；

至此，nexus的安装和缓存jar包功能的使用实战已经完成，接下来的章节，我们会将本机的工程打包并发布到私有仓库；

欢迎关注我的公众号：程序员欣宸


文章知识点与官方知识档案匹配，可进一步学习相关知识
Java技能树Java概览Maven基础57995 人正在系统学习中

程序员欣宸
已关注

6


24


1

专栏目录
实战maven私有仓库三部曲之二：上传到私有仓库
程序员欣宸的博客
 6919
在上一章《实战maven私有仓库三部曲之一：搭建和使用》我们搭建了maven私有仓库，并体验了私有仓库缓存jar包的能力，避免了局域网内开发人员去远程中央仓库下载的痛苦等待，本章我们再来体验私有仓库的另一个功能：保存二方库； 原文地址：http://blog.csdn.net/boling_cavalry/article/details/79070744 使用场景 mvndemoserve
搭建maven私有仓库
酸奶盖儿的博客
 3482
1. 准备一台Linux机器 2. 安装nexus 2.1 本机安装 略 2.2 docker安装nexus 2.2.1 搜索docker镜像 Docker search nexus 2.2.2 拉取镜像 docker pull docker.io/sonatype/nexus3 2.2.3 创建挂载目录 mkdir -p /usr/local/nexus3/nexus-data chown -R 200 /usr/local/nexus3/nexus-data 2.2.4 启动容器 docker
评论1条写评论
千g
热评
感谢博主的分享
Maven私有仓库搭建以及使用
吴小伟的博客
 2万+
一、使用Docker安装Nexus       Docker search nexus 　　 docker pull docker.io/sonatype/nexus3 　　 mkdir -p /usr/local/nexus3/nexus-data chown -R 200 /usr/local/nexus3/nexus-data docker run -tid -p 8...
Maven配置私有库
最新发布
长不大的大灰狼
 1723
Maven配置私有库
Maven私有仓库搭建配置
小康子的博客
 1316
研发团队考虑使用 Jenkins 进行一键构建、部署服务，其中构建使用 Maven 进行，构建时需要从 Maven 仓库中下载所需依赖，因此项目的各个模块 jar 包需要上传到本地私有仓库中供 Maven 构建时下载。 下载 Maven 程序包并解压缩到仓库服务器，启动服务，地址为： http://172.22.151.183:8081/ 配置 Jenkins 服务所在机器的 Mave...
实战maven私有仓库三部曲之三：Docker下搭建maven私有仓库
程序员欣宸的博客
 3901
本章是《实战maven私有仓库》系列的第三篇，前两章的地址如下： 1. 《实战maven私有仓库三部曲之一：搭建和使用》; 2. 《实战maven私有仓库三部曲之二：上传到私有仓库》； 在前两章中，我们先在linux搭建maven私有仓库，然后在开发环境使用此仓库，本章我们在docker下快速搭建maven私有仓库，然后像前面章节的实战一样使用它； 本文地址：http://blog.csd
maven构建docker镜像三部曲之三：推送到远程仓库(内网和阿里云)
程序员欣宸的博客
 1万+
把docker-maven-plugin插件的推送功能也用上，编译构建后自动推送到内网私有仓库或者阿里云镜像仓库
在内网中使用maven_maven构建docker镜像三部曲之三：推送到远程仓库(内网和阿里云)-Go语言中文社区...
weixin_35039377的博客
 120
在上一章《maven构建docker镜像三部曲之二：编码和构建镜像》的实战中，我们将spring boot的web工程构建成docker镜像并在本地启动容器成功，今天我们把docker-maven-plugin插件的推送功能也用上，这样编译、构建、推送都能一次性完成了；源码和环境本次实战的java web工程源码和环境都沿用上一章的，源码我已经上传到github上，地址是：git@github.c...
搭建私有MAVEN仓库
panjinxiang4217的专栏
 136
下载安装nexus 首先，下载安装包：https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.20.1-01-unix.tar.gz wget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.20.1-01-unix.tar.gz 解压nexus包到/usr/local tar zxf nexus-3.20.1-01-unix.tar.gz -C
【Maven私有仓库nexus配置】
rock_99的博客
 4997
转自：添加链接描述 一、先安装jdk和maven maven下载地址：http://maven.apache.org/download.cgi jdk下载地址：https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html 将下载好的jdk上传到/usr/local/,解压并重命名： tar -zxvf jdk-8u131
maven搭建私有仓库过程记录
weixin_30421525的博客
 694
maven搭建私有仓库过程记录 一、下载maven https://maven.apache.org/download.cgi 二、下载nexus 百度网盘地址：https://pan.baidu.com/s/1hr4yG0c 三、安装maven 1.1 将文件解压到D:\apache-maven-3.5.4目录下: 1.2...
kubernetes下的Nginx加Tomcat三部曲之三：实战扩容和升级
程序员欣宸的博客
 2527
本章是《kubernetes下的Nginx加Tomcat三部曲系列》的终篇，今天咱们一起在kubernetes环境对下图中tomcat的数量进行调整，再修改tomcat中web工程的源码，并将现有的tomcat的pod全部替换成新代码构建的结果： 往期章节 《kubernetes下的Nginx加Tomcat三部曲之一：极速体验》； 《kubernetes下的Nginx加Tomcat三部曲
kubernetes下的Nginx加Tomcat三部曲之二：细说开发
程序员欣宸的博客
 4136
本文是《kubernetes下的Nginx加Tomcat三部曲》的第二章，在《kubernetes下的Nginx加Tomcat三部曲之一：极速体验》一文我们快速部署了Nginx和Tomcat，达到以下效果： 本文我会详细说明在kubernetes部署上述网络服务时，需要做哪些具体的工作； 列举步骤 需要以下操做才能在kubernetes上部署Nginx加Tomcat的服务： 1. 开发
Docker下的OpenResty三部曲之三：OpenResty加Tomcat的服务
程序员欣宸的博客
 1651
本章是《Docker下的OpenResty三部曲》的终篇，前面两章我们实战了OpenResty的lua脚本开发，并且将web服务发布在Docker环境下，本章我们在kubernetes环境下搭建OpenResty加Tomcat的web服务； 本文地址：http://blog.csdn.net/boling_cavalry/article/details/79311164 前文信息 第一章...
maven远程仓库和镜像
莫等闲的博客
 8952
转 maven远程仓库和镜像 http://blog.csdn.net/zyxnetxz/article/details/5709196 http://www.blogjava.net/baoyaer/articles/355040.html http://www.cnblogs.com/jerome-rong/arch...
程序员欣宸的文章分类汇总
程序员欣宸的博客
 1917
程序员欣宸的所有文章的分类汇总都在此，希望能对您有用
Spring Boot应用在kubernetes的sidecar设计与实战，ubuntu搭建nginx服务器教程
m0_64867152的博客
 514
| git仓库地址(ssh) | git@github.com:zq2599/blog_demos.git | 该项目源码的仓库地址，ssh协议 | 这个git项目中有多个文件夹，本章源码在springbootsidecardemo这个文件夹下，如下图红框所示： 您也可以随本文一起来开发这个应用： 应用名为springbootsidecardemo，是用maven构建的，JDK使用1.8，Spring Boot版本2.1.0.RELEASE； 应用的pom.xml如下，为了构建Docker镜像使用
实战：向GitHub提交代码时触发Jenkins自动构建
热门推荐
程序员欣宸的博客
 5万+
当我们提交代码到GitHub后，可以在Jenkins上执行构建，但是每次都要动手去执行略显麻烦，今天我们就来实战Jenkins的自动构建功能，每次提交代码到GitHub后，Jenkins会进行自动构建； 原文地址：http://blog.csdn.net/boling_cavalry/article/details/78943061 前期准备工作 进行本章的实战前，推荐您参照《docker下
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', '实战maven私有仓库三部曲之一：搭建和使用

程序员欣宸

于 2018-01-14 20:42:01 发布

22754
 收藏 24
分类专栏： 持续构建 文章标签： maven nexus maven私有仓库
版权

持续构建
专栏收录该内容
20 篇文章5 订阅
订阅专栏
在局域网内搭建maven私有仓库，可避免每次都从中央仓库下载公共jar包，另外将A模块作为二方库发布到私有仓库后，B模块可以很方便的引用，今天我们就来实战maven私有仓库的搭建和使用；

原文地址：http://blog.csdn.net/boling_cavalry/article/details/79059021

环境信息
安装私有仓库的机器是ubuntu16，IP是192.168.119.155；
maven私有仓库的软件是nexus-2.14.5，请在官网下载；
在window10环境上做验证的使用，用到的maven版本是3.3.3，jdk版本1.8.0_111；
安装和启动nexus
打开/etc/profile，新增一行export RUN_AS_USER=root；
执行命令source /etc/profile，使刚才的配置生效；
从官网下载的是nexus-2.14.5-02-bundle.tar.gz，执行tar -zxvf nexus-2.14.5-02-bundle.tar.gz解压后，里面有两个目录：nexus-2.14.5-02和sonatype-work；
进入nexus-2.14.5-02/bin，执行./nexus start启动nexus；
进入nexus-2.14.5-02/logs，执行tail -f wrapper.log观察日志滚动信息，看到如下信息时nexus启动成功：
jvm 1    | 2018-01-13 21:38:44,671-0800 INFO  [jetty-main-1]  org.sonatype.nexus.webresources.internal.WebResourceServlet - Max-age: 30 days (2592000 seconds)
jvm 1    | 2018-01-13 21:38:44,698-0800 INFO  [jetty-main-1]  org.sonatype.nexus.bootstrap.jetty.InstrumentedSelectChannelConnector - Metrics enabled
jvm 1    | 2018-01-13 21:38:44,713-0800 INFO  [jetty-main-1]  org.eclipse.jetty.server.AbstractConnector - Started InstrumentedSelectChannelConnector@0.0.0.0:8081
jvm 1    | 2018-01-13 21:38:44,713-0800 INFO  [jetty-main-1]  org.sonatype.nexus.bootstrap.jetty.JettyServer - Running
jvm 1    | 2018-01-13 21:38:44,713-0800 INFO  [WrapperListener_start_runner]  org.sonatype.nexus.bootstrap.jetty.JettyServer - Started
jvm 1    | 2018-01-13 21:39:26,926-0800 INFO  [qtp984089572-47]  org.apache.shiro.nexus5727.FixedDefaultWebSessionManager - Global session timeout: 1800000 ms
jvm 1    | 2018-01-13 21:39:26,931-0800 INFO  [qtp984089572-47]  org.apache.shiro.session.mgt.AbstractValidatingSessionManager - Enabling session validation scheduler...
jvm 1    | 2018-01-13 21:39:26,944-0800 INFO  [qtp984089572-47]  org.apache.shiro.cache.ehcache.EhCacheManager - Using existing EHCache named [shiro-activeSessionCache]
jvm 1    | 2018-01-13 21:39:26,945-0800 INFO  [qtp984089572-45]  org.apache.shiro.nexus5727.FixedDefaultWebSessionManager - Global session timeout: 1800000 ms
1
2
3
4
5
6
7
8
9
登录
在浏览器输入地址：http://192.168.119.155:8081/nexus/
进入nexus首页后，点击右上角的"Log In"按钮，输入用户名"admin"，默认密码"admin123"；
点击左侧的"Repositories"按钮，看到已有的仓库，如下图：

目前nexus已经开始正常工作了，接下来我们开始使用私有仓库；

使用私有仓库，配置
我的windows10开发环境要使用私有仓库，需要配置maven的信息，打开maven安装目录下的conf/settings.xml文件；
在mirrors节点下新增一个mirror节点，内容如下：
<mirror>
	<id>nexus</id>
	<mirrorOf>*</mirrorOf>
	<url>http://192.168.119.155:8081/nexus/content/groups/public/</url>
</mirror>
1
2
3
4
5
192.168.119.155是nexus机器的IP；
3. 在profiles节点下新增一个profile节点，内容如下：

<profile>
	<id>nexus</id>
    <repositories>
	    <repository>
		    <id>central</id>
	        <url>http://central</url>
	        <releases><enabled>true</enabled></releases>
	        <snapshots><enabled>true</enabled></snapshots>
	    </repository>
    </repositories>
    <pluginRepositories>
	    <pluginRepository>
	        <id>central</id>
	        <url>http://central</url>
	        <releases><enabled>true</enabled></releases>
	        <snapshots><enabled>true</enabled></snapshots>
	    </pluginRepository>
    </pluginRepositories>
</profile>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
以上新增了中央仓库的相关信息；
4. 新增一个activeProfiles节点，该节点和profiles节点一个层次，内容如下：

<activeProfiles>
    <activeProfile>nexus</activeProfile>
</activeProfiles>
1
2
3
新建一个springboot工程
新建一个基于maven构建的springboot的web工程，里面只有一个最简单的controller，在pom.xml所在目录下执行以下命令：
mvn clean package -Dmaven.test.skip=true
1
可以看到如下信息，当前的maven已经在通过私有仓库下载：
[INFO] Building jar: D:\temp\201801\06\helloworld\target\helloworld-0.0.1-SNAPSHOT.jar
[INFO]
[INFO] --- spring-boot-maven-plugin:1.5.9.RELEASE:repackage (default) @ helloworld ---
Downloading: http://192.168.119.155:8081/nexus/content/groups/public/org/springframework/boot/spring-boot-loader-tools/1.5.9.RELEASE/spring-boot-loader-tools-1.5.9.RELEASE.pom
Downloaded: http://192.168.119.155:8081/nexus/content/groups/public/org/springframework/boot/spring-boot-loader-tools/1.5.9.RELEASE/spring-boot-loader-tools-1.5.9.RELEASE.pom (0 B at 0.0 KB/sec)
Downloading: http://192.168.119.155:8081/nexus/content/groups/public/org/springframework/boot/spring-boot-loader-tools/1.5.9.RELEASE/spring-boot-loader-tools-1.5.9.RELEASE.jar
Downloaded: http://192.168.119.155:8081/nexus/content/groups/public/org/springframework/boot/spring-boot-loader-tools/1.5.9.RELEASE/spring-boot-loader-tools-1.5.9.RELEASE.jar (0 B at 0.0 KB/sec)
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 01:21 min
[INFO] Finished at: 2018-01-14T17:57:45+08:00
[INFO] Final Memory: 29M/164M
[INFO] ------------------------------------------------------------------------
1
2
3
4
5
6
7
8
9
10
11
12
13
14
已缓存信息
此时再从浏览器查看“Central”仓库的信息，发现里面已经缓存了前面的springboot工程所依赖的jar包，今后其他机器再需要这些jar包时，就可以直接从私有仓库上下载了，而私有仓库没有的jar包，也会由私有仓库下载并保存，然后提供给使用私有仓库的机器；

至此，nexus的安装和缓存jar包功能的使用实战已经完成，接下来的章节，我们会将本机的工程打包并发布到私有仓库；

欢迎关注我的公众号：程序员欣宸


文章知识点与官方知识档案匹配，可进一步学习相关知识
Java技能树Java概览Maven基础57995 人正在系统学习中

程序员欣宸
已关注

6


24


1

专栏目录
实战maven私有仓库三部曲之二：上传到私有仓库
程序员欣宸的博客
 6919
在上一章《实战maven私有仓库三部曲之一：搭建和使用》我们搭建了maven私有仓库，并体验了私有仓库缓存jar包的能力，避免了局域网内开发人员去远程中央仓库下载的痛苦等待，本章我们再来体验私有仓库的另一个功能：保存二方库； 原文地址：http://blog.csdn.net/boling_cavalry/article/details/79070744 使用场景 mvndemoserve
搭建maven私有仓库
酸奶盖儿的博客
 3482
1. 准备一台Linux机器 2. 安装nexus 2.1 本机安装 略 2.2 docker安装nexus 2.2.1 搜索docker镜像 Docker search nexus 2.2.2 拉取镜像 docker pull docker.io/sonatype/nexus3 2.2.3 创建挂载目录 mkdir -p /usr/local/nexus3/nexus-data chown -R 200 /usr/local/nexus3/nexus-data 2.2.4 启动容器 docker
评论1条写评论
千g
热评
感谢博主的分享
Maven私有仓库搭建以及使用
吴小伟的博客
 2万+
一、使用Docker安装Nexus       Docker search nexus 　　 docker pull docker.io/sonatype/nexus3 　　 mkdir -p /usr/local/nexus3/nexus-data chown -R 200 /usr/local/nexus3/nexus-data docker run -tid -p 8...
Maven配置私有库
最新发布
长不大的大灰狼
 1723
Maven配置私有库
Maven私有仓库搭建配置
小康子的博客
 1316
研发团队考虑使用 Jenkins 进行一键构建、部署服务，其中构建使用 Maven 进行，构建时需要从 Maven 仓库中下载所需依赖，因此项目的各个模块 jar 包需要上传到本地私有仓库中供 Maven 构建时下载。 下载 Maven 程序包并解压缩到仓库服务器，启动服务，地址为： http://172.22.151.183:8081/ 配置 Jenkins 服务所在机器的 Mave...
实战maven私有仓库三部曲之三：Docker下搭建maven私有仓库
程序员欣宸的博客
 3901
本章是《实战maven私有仓库》系列的第三篇，前两章的地址如下： 1. 《实战maven私有仓库三部曲之一：搭建和使用》; 2. 《实战maven私有仓库三部曲之二：上传到私有仓库》； 在前两章中，我们先在linux搭建maven私有仓库，然后在开发环境使用此仓库，本章我们在docker下快速搭建maven私有仓库，然后像前面章节的实战一样使用它； 本文地址：http://blog.csd
maven构建docker镜像三部曲之三：推送到远程仓库(内网和阿里云)
程序员欣宸的博客
 1万+
把docker-maven-plugin插件的推送功能也用上，编译构建后自动推送到内网私有仓库或者阿里云镜像仓库
在内网中使用maven_maven构建docker镜像三部曲之三：推送到远程仓库(内网和阿里云)-Go语言中文社区...
weixin_35039377的博客
 120
在上一章《maven构建docker镜像三部曲之二：编码和构建镜像》的实战中，我们将spring boot的web工程构建成docker镜像并在本地启动容器成功，今天我们把docker-maven-plugin插件的推送功能也用上，这样编译、构建、推送都能一次性完成了；源码和环境本次实战的java web工程源码和环境都沿用上一章的，源码我已经上传到github上，地址是：git@github.c...
搭建私有MAVEN仓库
panjinxiang4217的专栏
 136
下载安装nexus 首先，下载安装包：https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.20.1-01-unix.tar.gz wget https://sonatype-download.global.ssl.fastly.net/nexus/3/nexus-3.20.1-01-unix.tar.gz 解压nexus包到/usr/local tar zxf nexus-3.20.1-01-unix.tar.gz -C
【Maven私有仓库nexus配置】
rock_99的博客
 4997
转自：添加链接描述 一、先安装jdk和maven maven下载地址：http://maven.apache.org/download.cgi jdk下载地址：https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html 将下载好的jdk上传到/usr/local/,解压并重命名： tar -zxvf jdk-8u131
maven搭建私有仓库过程记录
weixin_30421525的博客
 694
maven搭建私有仓库过程记录 一、下载maven https://maven.apache.org/download.cgi 二、下载nexus 百度网盘地址：https://pan.baidu.com/s/1hr4yG0c 三、安装maven 1.1 将文件解压到D:\apache-maven-3.5.4目录下: 1.2...
kubernetes下的Nginx加Tomcat三部曲之三：实战扩容和升级
程序员欣宸的博客
 2527
本章是《kubernetes下的Nginx加Tomcat三部曲系列》的终篇，今天咱们一起在kubernetes环境对下图中tomcat的数量进行调整，再修改tomcat中web工程的源码，并将现有的tomcat的pod全部替换成新代码构建的结果： 往期章节 《kubernetes下的Nginx加Tomcat三部曲之一：极速体验》； 《kubernetes下的Nginx加Tomcat三部曲
kubernetes下的Nginx加Tomcat三部曲之二：细说开发
程序员欣宸的博客
 4136
本文是《kubernetes下的Nginx加Tomcat三部曲》的第二章，在《kubernetes下的Nginx加Tomcat三部曲之一：极速体验》一文我们快速部署了Nginx和Tomcat，达到以下效果： 本文我会详细说明在kubernetes部署上述网络服务时，需要做哪些具体的工作； 列举步骤 需要以下操做才能在kubernetes上部署Nginx加Tomcat的服务： 1. 开发
Docker下的OpenResty三部曲之三：OpenResty加Tomcat的服务
程序员欣宸的博客
 1651
本章是《Docker下的OpenResty三部曲》的终篇，前面两章我们实战了OpenResty的lua脚本开发，并且将web服务发布在Docker环境下，本章我们在kubernetes环境下搭建OpenResty加Tomcat的web服务； 本文地址：http://blog.csdn.net/boling_cavalry/article/details/79311164 前文信息 第一章...
maven远程仓库和镜像
莫等闲的博客
 8952
转 maven远程仓库和镜像 http://blog.csdn.net/zyxnetxz/article/details/5709196 http://www.blogjava.net/baoyaer/articles/355040.html http://www.cnblogs.com/jerome-rong/arch...
程序员欣宸的文章分类汇总
程序员欣宸的博客
 1917
程序员欣宸的所有文章的分类汇总都在此，希望能对您有用
Spring Boot应用在kubernetes的sidecar设计与实战，ubuntu搭建nginx服务器教程
m0_64867152的博客
 514
| git仓库地址(ssh) | git@github.com:zq2599/blog_demos.git | 该项目源码的仓库地址，ssh协议 | 这个git项目中有多个文件夹，本章源码在springbootsidecardemo这个文件夹下，如下图红框所示： 您也可以随本文一起来开发这个应用： 应用名为springbootsidecardemo，是用maven构建的，JDK使用1.8，Spring Boot版本2.1.0.RELEASE； 应用的pom.xml如下，为了构建Docker镜像使用
实战：向GitHub提交代码时触发Jenkins自动构建
热门推荐
程序员欣宸的博客
 5万+
当我们提交代码到GitHub后，可以在Jenkins上执行构建，但是每次都要动手去执行略显麻烦，今天我们就来实战Jenkins的自动构建功能，每次提交代码到GitHub后，Jenkins会进行自动构建； 原文地址：http://blog.csdn.net/boling_cavalry/article/details/78943061 前期准备工作 进行本章的实战前，推荐您参照《docker下
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 21);
INSERT INTO public.article_content VALUES (96, '2022-08-27 06:11:53.648', false, '2022-09-15 10:41:12.565', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', '实战maven私有仓库三部曲之三：Docker下搭建maven私有仓库

程序员欣宸

于 2018-01-20 13:04:08 发布

3901
 收藏 6
分类专栏： 持续构建 文章标签： docker maven maven私有仓库
版权

持续构建
专栏收录该内容
20 篇文章5 订阅
订阅专栏
本章是《实战maven私有仓库》系列的第三篇，前两章的地址如下：

《实战maven私有仓库三部曲之一：搭建和使用》;
《实战maven私有仓库三部曲之二：上传到私有仓库》；
在前两章中，我们先在linux搭建maven私有仓库，然后在开发环境使用此仓库，本章我们在docker下快速搭建maven私有仓库，然后像前面章节的实战一样使用它；

本文地址：http://blog.csdn.net/boling_cavalry/article/details/79111740

实战环境
本次实战的环境是Ubuntu16，安装的Docker版本是17.03.2-ce；
本次用到的二方库工程mvnDemoLib，和《实战maven私有仓库三部曲之二：上传到私有仓库》中用到的mvnDemoLib是同一个，源码的git地址是：git@github.com:zq2599/blog_demos.git，用浏览器访问的地址是：https://github.com/zq2599/blog_demos，这里面有多个工程，本次用到的工程如下图红框所示：

注意事项
本次实战要用到的端口是8081，如果该端口已被占用请及时释放，如果要用其他端口也可以，但是请修改开发环境中与maven私有仓库相关的配置（配置信息包括maven的settings.xml以及maven工程的pom.xml，详情请参照前两篇文章）；

启动maven私有仓库的容器
在docker所在电脑创建目录/usr/local/work/dockermaven；
执行命令chmod 777 /usr/local/work/dockermaven，给此目录赋权限；
执行以下命令，会自动从hub.docker.com下载最新的nexus镜像，然后启动一个名为nexus的容器，当前电脑的8081端口被映射到容器的8081端口：
执行命令docker logs -f nexus查看容器日志滚动信息，显示如下信息时nexus启动成功：
2018-01-20 03:37:42,187+0000 INFO  [jetty-main-1]  org.sonatype.nexus.webresources.internal.WebResourceServiceImpl - Discovered 1971 resources
2018-01-20 03:37:42,189+0000 INFO  [jetty-main-1]  org.sonatype.nexus.webresources.internal.WebResourceServlet - Max-age: 30 days (2592000 seconds)
2018-01-20 03:37:42,304+0000 INFO  [jetty-main-1]  org.sonatype.nexus.bootstrap.jetty.InstrumentedSelectChannelConnector - Metrics enabled
2018-01-20 03:37:42,348+0000 INFO  [jetty-main-1]  org.eclipse.jetty.server.AbstractConnector - Started InstrumentedSelectChannelConnector@0.0.0.0:8081
2018-01-20 03:37:42,352+0000 INFO  [jetty-main-1]  org.sonatype.nexus.bootstrap.jetty.JettyServer - Running
2018-01-20 03:37:42,352+0000 INFO  [main] *SYSTEM org.sonatype.nexus.bootstrap.jetty.JettyServer - Started
1
2
3
4
5
6
查看当前电脑的/usr/local/work/dockermaven目录，可以看到nexus容器中应用的相关文件已经在此处创建，如下图：

我的电脑IP是192.168.119.155，因此在浏览器输入地址访问nexus：http://192.168.119.155:8081/nexus
对maven私有仓库的使用者来说，完全感受不到实际安装和在docker安装私有仓库的区别，您可以像前两章的实战那样，体验此仓库的jar缓存和保存二方库的服务；
我这里像上一章那样发布了一个二方库到nexus，deploy成功后，可以在nexus上看到新的二方库，如下图所示，(deploy之前记得在nexus上设置允许上传，并且设置deployment账号的密码，详见上一章)：

至此，实战maven私有仓库三部曲系列就全部结束了，希望其中的实战和demo能够助您一臂之力；

欢迎关注我的公众号：程序员欣宸


文章知识点与官方知识档案匹配，可进一步学习相关知识
Java技能树Java概览Maven基础57995 人正在系统学习中

程序员欣宸
已关注

3


6


2

专栏目录
评论2条写评论
浦江之猿
热评
帅气
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', '实战maven私有仓库三部曲之三：Docker下搭建maven私有仓库

程序员欣宸

于 2018-01-20 13:04:08 发布

3901
 收藏 6
分类专栏： 持续构建 文章标签： docker maven maven私有仓库
版权

持续构建
专栏收录该内容
20 篇文章5 订阅
订阅专栏
本章是《实战maven私有仓库》系列的第三篇，前两章的地址如下：

《实战maven私有仓库三部曲之一：搭建和使用》;
《实战maven私有仓库三部曲之二：上传到私有仓库》；
在前两章中，我们先在linux搭建maven私有仓库，然后在开发环境使用此仓库，本章我们在docker下快速搭建maven私有仓库，然后像前面章节的实战一样使用它；

本文地址：http://blog.csdn.net/boling_cavalry/article/details/79111740

实战环境
本次实战的环境是Ubuntu16，安装的Docker版本是17.03.2-ce；
本次用到的二方库工程mvnDemoLib，和《实战maven私有仓库三部曲之二：上传到私有仓库》中用到的mvnDemoLib是同一个，源码的git地址是：git@github.com:zq2599/blog_demos.git，用浏览器访问的地址是：https://github.com/zq2599/blog_demos，这里面有多个工程，本次用到的工程如下图红框所示：

注意事项
本次实战要用到的端口是8081，如果该端口已被占用请及时释放，如果要用其他端口也可以，但是请修改开发环境中与maven私有仓库相关的配置（配置信息包括maven的settings.xml以及maven工程的pom.xml，详情请参照前两篇文章）；

启动maven私有仓库的容器
在docker所在电脑创建目录/usr/local/work/dockermaven；
执行命令chmod 777 /usr/local/work/dockermaven，给此目录赋权限；
执行以下命令，会自动从hub.docker.com下载最新的nexus镜像，然后启动一个名为nexus的容器，当前电脑的8081端口被映射到容器的8081端口：
执行命令docker logs -f nexus查看容器日志滚动信息，显示如下信息时nexus启动成功：
2018-01-20 03:37:42,187+0000 INFO  [jetty-main-1]  org.sonatype.nexus.webresources.internal.WebResourceServiceImpl - Discovered 1971 resources
2018-01-20 03:37:42,189+0000 INFO  [jetty-main-1]  org.sonatype.nexus.webresources.internal.WebResourceServlet - Max-age: 30 days (2592000 seconds)
2018-01-20 03:37:42,304+0000 INFO  [jetty-main-1]  org.sonatype.nexus.bootstrap.jetty.InstrumentedSelectChannelConnector - Metrics enabled
2018-01-20 03:37:42,348+0000 INFO  [jetty-main-1]  org.eclipse.jetty.server.AbstractConnector - Started InstrumentedSelectChannelConnector@0.0.0.0:8081
2018-01-20 03:37:42,352+0000 INFO  [jetty-main-1]  org.sonatype.nexus.bootstrap.jetty.JettyServer - Running
2018-01-20 03:37:42,352+0000 INFO  [main] *SYSTEM org.sonatype.nexus.bootstrap.jetty.JettyServer - Started
1
2
3
4
5
6
查看当前电脑的/usr/local/work/dockermaven目录，可以看到nexus容器中应用的相关文件已经在此处创建，如下图：

我的电脑IP是192.168.119.155，因此在浏览器输入地址访问nexus：http://192.168.119.155:8081/nexus
对maven私有仓库的使用者来说，完全感受不到实际安装和在docker安装私有仓库的区别，您可以像前两章的实战那样，体验此仓库的jar缓存和保存二方库的服务；
我这里像上一章那样发布了一个二方库到nexus，deploy成功后，可以在nexus上看到新的二方库，如下图所示，(deploy之前记得在nexus上设置允许上传，并且设置deployment账号的密码，详见上一章)：

至此，实战maven私有仓库三部曲系列就全部结束了，希望其中的实战和demo能够助您一臂之力；

欢迎关注我的公众号：程序员欣宸


文章知识点与官方知识档案匹配，可进一步学习相关知识
Java技能树Java概览Maven基础57995 人正在系统学习中

程序员欣宸
已关注

3


6


2

专栏目录
评论2条写评论
浦江之猿
热评
帅气
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 95);
INSERT INTO public.article_content VALUES (100, '2022-08-27 06:18:10.652', false, '2022-10-20 15:44:37.846', '<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" readonly="readonly" />&nbsp;123</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="checked" disabled="disabled" readonly="readonly" />&nbsp;333</li>
</ul>
', '- [ ] 123
- [x] 333', '
&nbsp;123
&nbsp;333

', 99);
INSERT INTO public.article_content VALUES (13, '2022-08-27 12:19:11.94', false, '2022-09-15 10:41:12.56', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', '极简，利用Docker仅两行命令就能下载和编译OpenJDK11

程序员欣宸

于 2018-10-26 14:00:58 发布

3543
 收藏 4
分类专栏： java服务端 文章标签： OpenJDK JDK源码
版权

java服务端
专栏收录该内容
175 篇文章46 订阅
订阅专栏
通常情况下，编译OpenJDK11源码构建新的JDK需要以下步骤：

下载OpenJDK11源码；
按自己需求修改OpenJDK11源码；
准备编译环境；
编译构建新的JDK；
现在利用Docker，可以将步骤简化如下：

执行一行命令，完成OpenJDK11源码下载；
按自己需求修改OpenJDK11源码，这一步省不掉；
执行一行命令，将修改后的OpenJDK11源码构建为新的JDK；
可见除了自己修改OpenJDK源码这一步因人而异无法省略，其余步骤已经被大大简化，接下来就一起体验一下吧；

实战环境
操作系统：Ubuntu 16.04.5 LTS；
Docker：18.06.1-ce；
强烈建议您为Docker配置好镜像加速（例如阿里云和DaoCloud），因为用到的Docker镜像文件较大，使用镜像加速对下载速度提升明显；
实战步骤
今天实战的内容如下：

用一行命令，通过Docker把OpenJDK11源码下载到本地；
按照自己的需求修改OpenJDK11源码；
用一行命令，通过DockerDocker编译构建OpenJDK11源码，生成新的JDK；
验证新的JDK；
接下来开始实战吧；

准备工作
在当前电脑准备一个空目录，例如我这里是/usr/local/work/openjdksrc，请确保该目录已经存在，且里面什么都没有；

下载OpenJDK11源码
执行以下命令即可完成OpenJDK11源码下载：

docker run \
--rm \
-it \
-v /usr/local/work/openjdksrc:/output \
bolingcavalry/openjdksrc11:0.0.2
1
2
3
4
5
注意：

命令中的/usr/local/work/openjdksrc就是之前新建的空文件夹；
由于源码包自身体积较大，因此下载镜像是比较耗时的，请您耐心等待；
命令执行成功后，/usr/local/work/openjdksrc下面会出现一个名为jdk11文件夹，这里面就是OpenJDK11的源码；
修改OpenJDK11源码
接下来是您根据自己的需要去修改OpenJDK源码，举个例子，我修改的文件位于以下位置：

jdk11/src/java.base/share/classes/java/lang/VersionProps.java.template
1
打开此文件，找到方法print(boolean err, boolean newln)，该方法位于文件的尾部，在此方法的最后面添加一行代码，如下图红框所示，新增代码的作用是让"java -version"命令多打印一行内容：


编译OpenJDK11源码
执行以下命令即可完成OpenJDK11源码编译和构建：

docker run --rm \
-it \
-v /usr/local/work/openjdksrc:/src \
bolingcavalry/buildopenjdk11:0.0.2
1
2
3
4
编译构建的速度和电脑硬件有关，构建完成后，打开文件jdk11/build/linux-x86_64-normal-server-release/build.log，在文件尾部可以看到如下信息：

Creating support/modules_libs/jdk.security.auth/libjaas.so from 1 file(s)
Compiling 16 files for jdk.security.jgss
Compiling 8 files for jdk.unsupported.desktop
Compiling 94 files for jdk.xml.dom
Compiling 14 files for jdk.zipfs
Warning: No mercurial configuration present and no .src-rev
Compiling 4 files for BUILD_JIGSAW_TOOLS
----- Build times -------
Start 2018-10-26 03:19:45
End   2018-10-26 04:02:08

00:42:23 TOTAL
-------------------------
Finished building target ''default (exploded-image)'' in configuration ''linux-x86_64-normal-server-release''
1
2
3
4
5
6
7
8
9
10
11
12
13
14
验证新的JDK
进入目录jdk11/build/linux-x86_64-normal-server-release/jdk/bin；
执行命令./java -version，可以看到下图信息，红框中就是我们修改的效果：

至此，OpenJDK11源码的下载、修改、编译就这么完成了，是不是很简单呢？如果您有兴趣了解如何做到这么简单的操作，请关注以下两篇文章，它们分别揭示了如何制作下载源码的镜像和编译源码的镜像：
3. 《制作Docker镜像，用来下载OpenJDK11源码》；
4. 《制作Docker镜像，用来编译OpenJDK11源码》；

欢迎关注我的公众号：程序员欣宸



程序员欣宸
已关注

3


4


1

专栏目录
Docker安装openjdk-11，并查看对应的版本
wifiiii的博客
 7342
Step 1：拉取镜像 命令：拉取镜像 docker pull openjdk:11 这里我们需要用到Java11，静待下载镜像完成即可 命令：查看镜像 docker images 可以看到已经有一个：openjdk，对应的版本是：11 Step 2：执行镜像 命令：执行镜像 docker run -d -it --name java-11 openjdk:11 命令：查看container运行情况 docker ps Step 3：查看Java版本 命令：进入openjdk:11的容器中 d
Docker - 安装openjdk11并启动运行
最新发布
Chia_Hung_Yeh的博客
 2637
参考转载：Docker—常用命令及实例 1.下载openjdk11 dockere pull openjdk:11 下载中： 下载完成： 2.查看镜像 docker images # 说明： # REPOSTORY：镜像的仓库源 # TAG：镜像的标签（可以有多个，latest表示最新的，可以自己指定） # IMAGE ID ：镜像 id # CREATE：创建的时间 # SIZE：镜像的大小 3.创建容器 # 创建容器 docker run -d -t --name java-11 open.
评论1条写评论
Helprog
热评
感谢分享！
Docker 编译 OpenJDK8
pan176 的博客
 675
Docker 编译 OpenJDK8 前言 如果未安装 Docker，可以参考 安装 Docker Docker 操作 拉取镜像 docker pull bolingcavalry/bolingcavalryopenjdk 启动容器 docker run --name=compilejdk -idt bolingcavalry/bolingcavalryopenjdk -i：让 Docker...
利用Docker极速下载OpenJDK11源码
程序员欣宸的博客
 2363
常规下载方式的不足 常用的下载OpenJDK11源码方式来自官方推荐，如下命令： hg clone http://hg.openjdk.java.net/jdk/jdk11 这种下载方式要装pip，再用pip装mercurial，并且下载源码过程中也容易超时失败； 利用Docker，一行命令完成下载 如果您安装了Docker，通过以下一行命令即可下载OpenJDK11源码： docker run...
docker镜像安装java-openjdk以及openjdk-debuginfo
bee-factory
 4800
FROM centos:7 RUN yum install -y java-1.8.0-openjdk-devel && \     yum install -y java-1.8.0-openjdk-debuginfo --enablerepo=*debug* RUN useradd jdk-user USER jdk-user WORKDIR /home/jdk-us
Docker 安装JDK1.8
qq_33240556的博客
 571
1、安装JDK1.8：docker pull java:8 或者 docker pull openjdk:8 2.docker run -d -it --name java-8 java:8 3、查看已安装的镜像： docker images 4、docker exec -it java-8 /bin/bash 5、查看java版本，进入java-8容器后输入 ： java -version Docker 安装JDK1.8镜像，完成！ ...
【SpringBoot + Docker】编写Dockerfile安装jdk11.0.3，并部署SpringBoot项目
寒泉
 6万+
Docker 采用 Dockerfile 安装 jdk11.0.3 并部署SpringBoot项目实例 1、去Oracle官网提前下载好所需的 jdk，linux版本 各个版本jdk下载 - Oracle官网 本地建立 mydockerfile 文件夹，并将jdk copy到文件夹下 2、在 mydockerfile 文件夹中建立 Dockerfile，其内容如下： # Docker image ...
docker 通过Dockerfile安装jdk
huanglu0314的博客
 2193
将自己下载好的jdk压缩包，我下载的是jdk-8u261-linux-x64.tar.gz ，上传到服务器上，我是使用的ubuntu 将jdk-8u261-linux-x64.tar.gz 复制到你的docker目录下，之后创建一个Dockerfile 要保证两个在同一个目录下： #指定基础镜像，并且必须是第一条指令 FROM ubuntu:latest #指明该镜像的作者和其电子邮件（这里随便就好） MAINTAINER tina "tina@qq.com" #一个复制命令，把jdk安装文件复制到.
Docker手动构建OracleJDK11镜像
pcdd的博客
 5450
docker官方的jdk镜像多为8（如下图），目前jdk的长期支持版有8、11、14，目前使用最多的还是8，我自己做项目一般喜欢用11，如果开发中使用的是jdk11，Dockerfile中就不能写FROM java:8了，就需要我们自己制作镜像了，方法也很简单 1 从Oracle官网下载JDK11的tar包，不要下成.zip的了 2 上传到linux服务器并创建一个Dockerfile文件，任意位置均可，最好和Dockerfile一个路径下，这样不用build时用-f指定Dockerfile的位置 3
docker 安装jdk8以及其他版本
xxwd12的博客
 298
因为OpenJDK没有1.8版本，需要下载Oracle官方的1.8版本镜像，命令如下: docker pull kdvolder/jdk8 2、其他版本安装 docker pull openjdk:12.0.2-jdk-oraclelinux7 创建新的镜像引用 docker tag openjdk:12.0.2-jdk-oraclelinux7 jdk12 删除原有镜像引用 docker rmi openjdk:12.0.2-jdk-oraclelinux7 ...
Docker 构建 jdk8 镜像
daoerZ的博客
 648
版本： Linux：Centos7 Docker:18.06.3-ce jdk:jdk-8u281-linux-i586 准备工作： docker 的安装：略 下载jdk-8u281-linux-i586.tar.gz Dockerfile 文件: Dockerfile 文件和jdk-8u281-linux-i586.tar.gz 放在同一目录下 /usr/java Dockerfile 文件内容 # 使用 centos7 作为基础镜像 FROM centos:7 # 添加...
Docker(3)-安装jdk
will的博客
 75
前言 本人文章均引用或者复制： 公众号： QQ群：806951874 在Docker中安装JDK 所有的环境安装，都是在centos系统中操作的，并非本地windows系统。 Docker 中国官方镜像加速 http://www.docker-cn.com/registry-mirror 获取JAVA镜像： 在终端客户端命令行输入以下命令，获取JAVA镜像。 docker pull java 默认是从Docker Hub官方的仓库中下载镜像的。如果没有指定对应的版本，默认会获取版本为l
Docker安装JDK
好好学习天天向上
 1169
一、下载 docker pull kdvolder/jdk8 二、运行容器 docker run -di --name=jdk8 kdvolder/jdk8 三、进入容器 # 方法1 退出后docker ps 进程还在 docker exec -it jdk8 /bin/bash # 方法2 退出后 进程也会自动退出 docker attach jdk8 ...
docker 安装jdk
清风过去，送来缕缕飘香的专栏
 326
第一步：访问Docker Hub官网搜索相应jdk版本 第二步：首先需要拉取jdk镜像 docker pull majiajue/jdk1.8 第三部：运行jdk镜像 docker run -di --name=jdk1.8 majiajue/jdk1.8 第四部：进入jdk镜像 docker exec -it jdk1.8 bash 至此 安装完毕 是不是很简单 ...
Docker -- 04 -- Docker上安装JDK
Gene Xu
 1202
在 Docker 上安装 JDK，有直接的 OpenJDK 可供下载安装，但有时候使用 OpenJDK，会碰到一些不可预估的问题，所以我们还是优先选择安装 Oracle JDK，不过由于没有直接的 Oracle JDK 可供下载安装，因此我们可以自定义安装 Oracle JDK 镜像 一、安装 centos7 镜像 docker pull centos:7 从镜像仓库中拉取指定镜像 ...
(Docker) Centos镜像中安装OpenJDK11
Fighting_Boss的博客
 2792
O shit ，最近在整这个OpenJdk 遇坑无数，特此记录，方便后人。 WORKDIR /tmp ENV JAVA_VERSION=&amp;amp;amp;quot;11.0.1&amp;amp;amp;quot; RUN wget https://download.java.net/java/GA/jdk11/13/GPL/openjdk-11.0.1_linux-x64_bin.tar.gz -O /tmp/openjdk-11.0.1_...
docker安装JDK
aa_xff的博客
 2172
docker安装jdk有很多种方式，这里使用自己构建镜像的方式。 1.下载jdk安装包 安装包下载可以自己去官网下载，如果闲速度慢可以找一些网络资源； 安装包下载好后，上传到/usr/local/docker/jdk下，这个文件目录需要自己创建 2.创建Dockerfile 在/usr/local/docker/jdk文件夹下创建Dockerfile，Dockerfile内容如下： FROM centos:centos7 MAINTAINER tao # 新建目录 RUN mkdir /usr
Open JDK11安装
Fisher3652的博客
 437
1. 下载安装包 官网地址http://jdk.java.net/java-se-ri/11 直接解压即可，这里没有jdk的jre目录，但不会影响使用 2. 配置环境变量 添加JAVA_HOME PATH下添加%JAVA_HOME%\bin 3. 查看是否配置成功 java -version 如果之前安装过Oracle-jdk1.8的，先把jdk1.8卸载掉，然后在上一步添加path时，将C:\ProgramData\Oracle\Java\javapath删除掉。 ..
通过 Dockerfile 构建 Jdk 镜像
西蒙老爷的博客
 1691
需要用到的软件 Linux镜像：centos 7 Jdk版本：jdk1.8.0_191 下载 centos7 镜像 docker pull centos:7 新建 Dockerfile 文件 FROM centos:7 MAINTAINER 857898602@qq.com ADD jdk-8u191-linux-x64.tar.gz /usr/local/ ENV JAVA_HOME /u...
docker安装openjdk并运行jar包
热门推荐
诗水人间
 14万+
下载镜像 docker pull openjdk 创建数据卷 创建一个java_app的数据卷 docker volume create java_app 将jar包上传到/var/lib/docker/volumes/java_app/_data/下，然后启动镜像 启动镜像 docker run --name=javaApp --restart=always \ -v java_app:/usr/src/myapp openjdk java -jar /usr/src/myapp/jar包 例如
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', '极简，利用Docker仅两行命令就能下载和编译OpenJDK11

程序员欣宸

于 2018-10-26 14:00:58 发布

3543
 收藏 4
分类专栏： java服务端 文章标签： OpenJDK JDK源码
版权

java服务端
专栏收录该内容
175 篇文章46 订阅
订阅专栏
通常情况下，编译OpenJDK11源码构建新的JDK需要以下步骤：

下载OpenJDK11源码；
按自己需求修改OpenJDK11源码；
准备编译环境；
编译构建新的JDK；
现在利用Docker，可以将步骤简化如下：

执行一行命令，完成OpenJDK11源码下载；
按自己需求修改OpenJDK11源码，这一步省不掉；
执行一行命令，将修改后的OpenJDK11源码构建为新的JDK；
可见除了自己修改OpenJDK源码这一步因人而异无法省略，其余步骤已经被大大简化，接下来就一起体验一下吧；

实战环境
操作系统：Ubuntu 16.04.5 LTS；
Docker：18.06.1-ce；
强烈建议您为Docker配置好镜像加速（例如阿里云和DaoCloud），因为用到的Docker镜像文件较大，使用镜像加速对下载速度提升明显；
实战步骤
今天实战的内容如下：

用一行命令，通过Docker把OpenJDK11源码下载到本地；
按照自己的需求修改OpenJDK11源码；
用一行命令，通过DockerDocker编译构建OpenJDK11源码，生成新的JDK；
验证新的JDK；
接下来开始实战吧；

准备工作
在当前电脑准备一个空目录，例如我这里是/usr/local/work/openjdksrc，请确保该目录已经存在，且里面什么都没有；

下载OpenJDK11源码
执行以下命令即可完成OpenJDK11源码下载：

docker run \
--rm \
-it \
-v /usr/local/work/openjdksrc:/output \
bolingcavalry/openjdksrc11:0.0.2
1
2
3
4
5
注意：

命令中的/usr/local/work/openjdksrc就是之前新建的空文件夹；
由于源码包自身体积较大，因此下载镜像是比较耗时的，请您耐心等待；
命令执行成功后，/usr/local/work/openjdksrc下面会出现一个名为jdk11文件夹，这里面就是OpenJDK11的源码；
修改OpenJDK11源码
接下来是您根据自己的需要去修改OpenJDK源码，举个例子，我修改的文件位于以下位置：

jdk11/src/java.base/share/classes/java/lang/VersionProps.java.template
1
打开此文件，找到方法print(boolean err, boolean newln)，该方法位于文件的尾部，在此方法的最后面添加一行代码，如下图红框所示，新增代码的作用是让"java -version"命令多打印一行内容：


编译OpenJDK11源码
执行以下命令即可完成OpenJDK11源码编译和构建：

docker run --rm \
-it \
-v /usr/local/work/openjdksrc:/src \
bolingcavalry/buildopenjdk11:0.0.2
1
2
3
4
编译构建的速度和电脑硬件有关，构建完成后，打开文件jdk11/build/linux-x86_64-normal-server-release/build.log，在文件尾部可以看到如下信息：

Creating support/modules_libs/jdk.security.auth/libjaas.so from 1 file(s)
Compiling 16 files for jdk.security.jgss
Compiling 8 files for jdk.unsupported.desktop
Compiling 94 files for jdk.xml.dom
Compiling 14 files for jdk.zipfs
Warning: No mercurial configuration present and no .src-rev
Compiling 4 files for BUILD_JIGSAW_TOOLS
----- Build times -------
Start 2018-10-26 03:19:45
End   2018-10-26 04:02:08

00:42:23 TOTAL
-------------------------
Finished building target ''default (exploded-image)'' in configuration ''linux-x86_64-normal-server-release''
1
2
3
4
5
6
7
8
9
10
11
12
13
14
验证新的JDK
进入目录jdk11/build/linux-x86_64-normal-server-release/jdk/bin；
执行命令./java -version，可以看到下图信息，红框中就是我们修改的效果：

至此，OpenJDK11源码的下载、修改、编译就这么完成了，是不是很简单呢？如果您有兴趣了解如何做到这么简单的操作，请关注以下两篇文章，它们分别揭示了如何制作下载源码的镜像和编译源码的镜像：
3. 《制作Docker镜像，用来下载OpenJDK11源码》；
4. 《制作Docker镜像，用来编译OpenJDK11源码》；

欢迎关注我的公众号：程序员欣宸



程序员欣宸
已关注

3


4


1

专栏目录
Docker安装openjdk-11，并查看对应的版本
wifiiii的博客
 7342
Step 1：拉取镜像 命令：拉取镜像 docker pull openjdk:11 这里我们需要用到Java11，静待下载镜像完成即可 命令：查看镜像 docker images 可以看到已经有一个：openjdk，对应的版本是：11 Step 2：执行镜像 命令：执行镜像 docker run -d -it --name java-11 openjdk:11 命令：查看container运行情况 docker ps Step 3：查看Java版本 命令：进入openjdk:11的容器中 d
Docker - 安装openjdk11并启动运行
最新发布
Chia_Hung_Yeh的博客
 2637
参考转载：Docker—常用命令及实例 1.下载openjdk11 dockere pull openjdk:11 下载中： 下载完成： 2.查看镜像 docker images # 说明： # REPOSTORY：镜像的仓库源 # TAG：镜像的标签（可以有多个，latest表示最新的，可以自己指定） # IMAGE ID ：镜像 id # CREATE：创建的时间 # SIZE：镜像的大小 3.创建容器 # 创建容器 docker run -d -t --name java-11 open.
评论1条写评论
Helprog
热评
感谢分享！
Docker 编译 OpenJDK8
pan176 的博客
 675
Docker 编译 OpenJDK8 前言 如果未安装 Docker，可以参考 安装 Docker Docker 操作 拉取镜像 docker pull bolingcavalry/bolingcavalryopenjdk 启动容器 docker run --name=compilejdk -idt bolingcavalry/bolingcavalryopenjdk -i：让 Docker...
利用Docker极速下载OpenJDK11源码
程序员欣宸的博客
 2363
常规下载方式的不足 常用的下载OpenJDK11源码方式来自官方推荐，如下命令： hg clone http://hg.openjdk.java.net/jdk/jdk11 这种下载方式要装pip，再用pip装mercurial，并且下载源码过程中也容易超时失败； 利用Docker，一行命令完成下载 如果您安装了Docker，通过以下一行命令即可下载OpenJDK11源码： docker run...
docker镜像安装java-openjdk以及openjdk-debuginfo
bee-factory
 4800
FROM centos:7 RUN yum install -y java-1.8.0-openjdk-devel && \     yum install -y java-1.8.0-openjdk-debuginfo --enablerepo=*debug* RUN useradd jdk-user USER jdk-user WORKDIR /home/jdk-us
Docker 安装JDK1.8
qq_33240556的博客
 571
1、安装JDK1.8：docker pull java:8 或者 docker pull openjdk:8 2.docker run -d -it --name java-8 java:8 3、查看已安装的镜像： docker images 4、docker exec -it java-8 /bin/bash 5、查看java版本，进入java-8容器后输入 ： java -version Docker 安装JDK1.8镜像，完成！ ...
【SpringBoot + Docker】编写Dockerfile安装jdk11.0.3，并部署SpringBoot项目
寒泉
 6万+
Docker 采用 Dockerfile 安装 jdk11.0.3 并部署SpringBoot项目实例 1、去Oracle官网提前下载好所需的 jdk，linux版本 各个版本jdk下载 - Oracle官网 本地建立 mydockerfile 文件夹，并将jdk copy到文件夹下 2、在 mydockerfile 文件夹中建立 Dockerfile，其内容如下： # Docker image ...
docker 通过Dockerfile安装jdk
huanglu0314的博客
 2193
将自己下载好的jdk压缩包，我下载的是jdk-8u261-linux-x64.tar.gz ，上传到服务器上，我是使用的ubuntu 将jdk-8u261-linux-x64.tar.gz 复制到你的docker目录下，之后创建一个Dockerfile 要保证两个在同一个目录下： #指定基础镜像，并且必须是第一条指令 FROM ubuntu:latest #指明该镜像的作者和其电子邮件（这里随便就好） MAINTAINER tina "tina@qq.com" #一个复制命令，把jdk安装文件复制到.
Docker手动构建OracleJDK11镜像
pcdd的博客
 5450
docker官方的jdk镜像多为8（如下图），目前jdk的长期支持版有8、11、14，目前使用最多的还是8，我自己做项目一般喜欢用11，如果开发中使用的是jdk11，Dockerfile中就不能写FROM java:8了，就需要我们自己制作镜像了，方法也很简单 1 从Oracle官网下载JDK11的tar包，不要下成.zip的了 2 上传到linux服务器并创建一个Dockerfile文件，任意位置均可，最好和Dockerfile一个路径下，这样不用build时用-f指定Dockerfile的位置 3
docker 安装jdk8以及其他版本
xxwd12的博客
 298
因为OpenJDK没有1.8版本，需要下载Oracle官方的1.8版本镜像，命令如下: docker pull kdvolder/jdk8 2、其他版本安装 docker pull openjdk:12.0.2-jdk-oraclelinux7 创建新的镜像引用 docker tag openjdk:12.0.2-jdk-oraclelinux7 jdk12 删除原有镜像引用 docker rmi openjdk:12.0.2-jdk-oraclelinux7 ...
Docker 构建 jdk8 镜像
daoerZ的博客
 648
版本： Linux：Centos7 Docker:18.06.3-ce jdk:jdk-8u281-linux-i586 准备工作： docker 的安装：略 下载jdk-8u281-linux-i586.tar.gz Dockerfile 文件: Dockerfile 文件和jdk-8u281-linux-i586.tar.gz 放在同一目录下 /usr/java Dockerfile 文件内容 # 使用 centos7 作为基础镜像 FROM centos:7 # 添加...
Docker(3)-安装jdk
will的博客
 75
前言 本人文章均引用或者复制： 公众号： QQ群：806951874 在Docker中安装JDK 所有的环境安装，都是在centos系统中操作的，并非本地windows系统。 Docker 中国官方镜像加速 http://www.docker-cn.com/registry-mirror 获取JAVA镜像： 在终端客户端命令行输入以下命令，获取JAVA镜像。 docker pull java 默认是从Docker Hub官方的仓库中下载镜像的。如果没有指定对应的版本，默认会获取版本为l
Docker安装JDK
好好学习天天向上
 1169
一、下载 docker pull kdvolder/jdk8 二、运行容器 docker run -di --name=jdk8 kdvolder/jdk8 三、进入容器 # 方法1 退出后docker ps 进程还在 docker exec -it jdk8 /bin/bash # 方法2 退出后 进程也会自动退出 docker attach jdk8 ...
docker 安装jdk
清风过去，送来缕缕飘香的专栏
 326
第一步：访问Docker Hub官网搜索相应jdk版本 第二步：首先需要拉取jdk镜像 docker pull majiajue/jdk1.8 第三部：运行jdk镜像 docker run -di --name=jdk1.8 majiajue/jdk1.8 第四部：进入jdk镜像 docker exec -it jdk1.8 bash 至此 安装完毕 是不是很简单 ...
Docker -- 04 -- Docker上安装JDK
Gene Xu
 1202
在 Docker 上安装 JDK，有直接的 OpenJDK 可供下载安装，但有时候使用 OpenJDK，会碰到一些不可预估的问题，所以我们还是优先选择安装 Oracle JDK，不过由于没有直接的 Oracle JDK 可供下载安装，因此我们可以自定义安装 Oracle JDK 镜像 一、安装 centos7 镜像 docker pull centos:7 从镜像仓库中拉取指定镜像 ...
(Docker) Centos镜像中安装OpenJDK11
Fighting_Boss的博客
 2792
O shit ，最近在整这个OpenJdk 遇坑无数，特此记录，方便后人。 WORKDIR /tmp ENV JAVA_VERSION=&amp;amp;amp;quot;11.0.1&amp;amp;amp;quot; RUN wget https://download.java.net/java/GA/jdk11/13/GPL/openjdk-11.0.1_linux-x64_bin.tar.gz -O /tmp/openjdk-11.0.1_...
docker安装JDK
aa_xff的博客
 2172
docker安装jdk有很多种方式，这里使用自己构建镜像的方式。 1.下载jdk安装包 安装包下载可以自己去官网下载，如果闲速度慢可以找一些网络资源； 安装包下载好后，上传到/usr/local/docker/jdk下，这个文件目录需要自己创建 2.创建Dockerfile 在/usr/local/docker/jdk文件夹下创建Dockerfile，Dockerfile内容如下： FROM centos:centos7 MAINTAINER tao # 新建目录 RUN mkdir /usr
Open JDK11安装
Fisher3652的博客
 437
1. 下载安装包 官网地址http://jdk.java.net/java-se-ri/11 直接解压即可，这里没有jdk的jre目录，但不会影响使用 2. 配置环境变量 添加JAVA_HOME PATH下添加%JAVA_HOME%\bin 3. 查看是否配置成功 java -version 如果之前安装过Oracle-jdk1.8的，先把jdk1.8卸载掉，然后在上一步添加path时，将C:\ProgramData\Oracle\Java\javapath删除掉。 ..
通过 Dockerfile 构建 Jdk 镜像
西蒙老爷的博客
 1691
需要用到的软件 Linux镜像：centos 7 Jdk版本：jdk1.8.0_191 下载 centos7 镜像 docker pull centos:7 新建 Dockerfile 文件 FROM centos:7 MAINTAINER 857898602@qq.com ADD jdk-8u191-linux-x64.tar.gz /usr/local/ ENV JAVA_HOME /u...
docker安装openjdk并运行jar包
热门推荐
诗水人间
 14万+
下载镜像 docker pull openjdk 创建数据卷 创建一个java_app的数据卷 docker volume create java_app 将jar包上传到/var/lib/docker/volumes/java_app/_data/下，然后启动镜像 启动镜像 docker run --name=javaApp --restart=always \ -v java_app:/usr/src/myapp openjdk java -jar /usr/src/myapp/jar包 例如
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 20);
INSERT INTO public.article_content VALUES (109, '2022-08-27 12:03:24.537', false, '2022-09-15 10:41:12.561', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', 'MyBatis初级实战之一：Spring Boot集成

程序员欣宸

于 2020-08-14 07:46:15 发布

1270
 收藏 5
分类专栏： mybatis系列 文章标签： mybatis java
版权

mybatis系列
专栏收录该内容
6 篇文章2 订阅
订阅专栏
MyBatis初级实战
《MyBatis初级实战》系列旨在通过一系列编码实战，和读者一起掌握MyBatis的基本用法，帮助初学者快速运用MyBatis参与实际开发；

聚焦MyBatis
《MyBatis初级实战》面向的是对MyBatis有兴趣的读者，向读者们提供可用的方案和代码，这里不是比较Hibernate、sqltoy-orm的地方，作者也十分认可这些ORM框架，但《MyBatis初级实战》不参与比较；

关于MyBatis
引自官方：MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。

实战环境
《MyBatis初级实战》系列的环境信息如下：

JDK：1.8.0_181
mybatis-spring-boot-starter：2.1.3（对应的MyBatis：3.5.5）
Spring Boot：2.3.2.RELEASE
MySQL：5.7.29
实战环境：win10
开发工具：IntelliJ IDEA 2019.2.1 (Ultimate Edition)
Spring Boot集成MyBatis常规步骤概览
Spring Boot集成MyBatis的常规步骤如下：

maven中添加mybatis-spring-boot-starter的依赖；
Spring Boot的配置中指定MyBatis配置文件的位置；
Spring Boot的配置中指定MyBatis映射文件的位置；
添加MyBatis配置文件，后续MyBatis的常规配置集中在此；
映射文件xxxMapper.xml及其对应的接口文件；
业务代码中，Autowired注解修饰接口文件并使用；
接下来开始实战，咱们先把数据准备好；
准备数据
请您自行准备好MySQL服务，我这边MySQL是部署在docker上的，可以参考《群晖DS218+部署mysql》；
创建名为mybatis的数据库；
在mybatis数据库下执行以下SQL，即可创建本次实战所需数据：
USE mybatis;

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `id` int(32) NOT NULL AUTO_INCREMENT,
  `name` varchar(32) NOT NULL,
  `age` int(32) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;


DROP TABLE IF EXISTS `log`;

CREATE TABLE `log` (
  `id` int(32) NOT NULL AUTO_INCREMENT,
  `user_id` int(32),
  `action` varchar(255) NOT NULL,
  `create_time` datetime not null,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

INSERT INTO mybatis.user (id, name, age) VALUES (3, ''tom'', 11);
INSERT INTO mybatis.log (id, user_id, action, create_time) VALUES (3, 3, ''read book'', ''2020-08-07 08:18:16'');
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
源码下载
如果您不想编码，可以在GitHub下载所有源码，地址和链接信息如下表所示(https://github.com/zq2599/blog_demos)：
名称	链接	备注
项目主页	https://github.com/zq2599/blog_demos	该项目在GitHub上的主页
git仓库地址(https)	https://github.com/zq2599/blog_demos.git	该项目源码的仓库地址，https协议
git仓库地址(ssh)	git@github.com:zq2599/blog_demos.git	该项目源码的仓库地址，ssh协议
这个git项目中有多个文件夹，本章的应用在mybatis文件夹下，如下图红框所示：

关于父子工程
为了整个系列的代码好管理，我这边用maven创建的是父子工程，如果您只要子工程，不需要父子结构，要对子工程的pom.xml做以下调整：

parent节点原本如下：
<parent>
        <groupId>com.bolingcavalry</groupId>
        <artifactId>mybatis</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
1
2
3
4
5
6
请替换成以下内容(也就是直接用>spring-boot-starter-parent作为父工程)：

<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.2.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
1
2
3
4
5
6
子工程种的dependency节点中没有version子节点，这些都放在父工程的dependencyManagement中统一管理了，请您将version添加到子工程的各个dependency节点：

接下来开始编码
创建父工程
创建名为mybatis的maven工程，pom.xml内容如下：

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.2.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.bolingcavalry</groupId>
    <artifactId>mybatis</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
    </properties>

    <modules>
        <module>simple</module>
    </modules>

    <dependencyManagement>

        <dependencies>
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>2.1.3</version>
            </dependency>
        </dependencies>

    </dependencyManagement>

</project>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
至此，准备工作算是全部完成了，接下来咱们开始创建一个典型的Spring Boot集成MyBatis的项目吧；
Spring Boot集成MyBatis
在父工程mybatis之下新建名为simple的Spring Boot子工程，其pom.xml内容如下：
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.bolingcavalry</groupId>
        <artifactId>mybatis</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <groupId>com.bolingcavalry</groupId>
    <artifactId>simple</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>simple</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.1.3</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
Spring Boot配置文件是simple/src/main/resources/application.yml，内容如下：
server:
  port: 8080

spring:
  # 数据源
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://192.168.50.43:3306/mybatis?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
    driver-class-name: com.mysql.cj.jdbc.Driver

# mybatis配置
mybatis:
  # 配置文件所在位置
  config-location: classpath:mybatis-config.xml
  # 映射文件所在位置
  mapper-locations: classpath:mappers/*Mapper.xml

# 日志配置
logging:
  level:
    root: INFO
    com:
      bolingcavalry:
        simple:
          mapper: debug
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
新建user表对应的实体类User.java：
package com.bolingcavalry.simple.entity;

/**
 * @Description: 实体类
 * @author: willzhao E-mail: zq2599@gmail.com
 * @date: 2020/8/4 8:24
 */
public class User {
    private Integer id;
    private String name;
    private Integer age;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", name=''" + name + ''\'''' +
                ", age=" + age +
                ''}'';
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
新建log表对应的实体类Log.java：
package com.bolingcavalry.simple.entity;

import java.sql.Date;

/**
 * @Description: 实体类
 * @author: willzhao E-mail: zq2599@gmail.com
 * @date: 2020/8/4 8:24
 */
public class Log {
    private Integer id;
    private Integer userId;
    private String action;
    private Date createTime;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getUserId() {
        return userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    public String getAction() {
        return action;
    }

    public void setAction(String action) {
        this.action = action;
    }

    public Date getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }

    @Override
    public String toString() {
        return "Log{" +
                "id=" + id +
                ", userId=" + userId +
                ", action=''" + action + ''\'''' +
                ", createTime=" + createTime +
                ''}'';
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
接下来会新建三个配置文件，先来看下它们的位置，以免后面放错地方引起不必要的麻烦：

application.yml所在目录下，新增名为mybatis-config.xml的文件，这是mybatis的配置文件，本例很简单只有一个配置，内容如下：
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <typeAliases>
        <!-- 映射文件中的类不用写全路径了-->
        <package name="com.bolingcavalry.simple.entity"/>
    </typeAliases>
</configuration>
1
2
3
4
5
6
7
8
9
resources/mappers目录下，新增名为UserMapper.xml的文件，和user表相关的查询都在此，本文只有一个查询user表的操作，注意下文中的resultType等于User，这里没有写User类的完整路径，是因为前面mybatis-config.xml文件中配置了typeAliases的package节点的缘故：
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bolingcavalry.simple.mapper.UserMapper">
    <select id="sel" parameterType="int" resultType="User">
        select * from user where id = #{id}
    </select>
</mapper>
1
2
3
4
5
6
7
再新增LogMapper.xml，如下所示，log表中的user_id字段在Log.java中没有同名的字段，因此要新增resultMap来建立数据库和实体类的字段映射关系，再在select节点用上这个关系，注意要用resultMap属性(UserMapper.xml中用的是resultType)：
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bolingcavalry.simple.mapper.LogMapper">

    <resultMap id="logResultMap" type="Log">
        <id property="id" column="id" />
        <result column="user_id" jdbcType="INTEGER" property="userId" />
        <result column="action" jdbcType="VARCHAR" property="action" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    </resultMap>

    <select id="sel" parameterType="int" resultMap="logResultMap">
        select * from log where id = #{id}
    </select>
</mapper>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
接下来是业务要用到的接口文件，第一个是UserMapper.java：
package com.bolingcavalry.simple.mapper;

import com.bolingcavalry.simple.entity.User;
import org.springframework.stereotype.Repository;

@Repository
public interface UserMapper {
    User sel(int id);
}
1
2
3
4
5
6
7
8
9
第二个是LogMapper.java：
package com.bolingcavalry.simple.mapper;

import com.bolingcavalry.simple.entity.Log;
import org.springframework.stereotype.Repository;

@Repository
public interface LogMapper {
    Log sel(int id);
}
1
2
3
4
5
6
7
8
9
上述两个类都使用了Repository注解，作用是避免在编码过程中,IDEA给出红线提示，如下图：

映射配置完毕，接下来就可以在应用中使用了，先为user做一个service类UserService.java，里面通过Autowired注解注入UserMapper的实现：
package com.bolingcavalry.simple.service;

import com.bolingcavalry.simple.entity.User;
import com.bolingcavalry.simple.mapper.UserMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserService {
    @Autowired
    UserMapper userMapper;

    public User sel(int id){
        return userMapper.sel(id);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
再为log做service类LogService.java：
package com.bolingcavalry.simple.service;

import com.bolingcavalry.simple.entity.Log;
import com.bolingcavalry.simple.mapper.LogMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class LogService {
    @Autowired
    LogMapper logMapper;

    public Log sel(int id){
        return logMapper.sel(id);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
最后是响应web请求的controller类，第一个是UserController.java：
package com.bolingcavalry.simple.controller;

import com.bolingcavalry.simple.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class UserController {
    @Autowired
    private UserService userService;

    @RequestMapping("user/{id}")
    public String GetUser(@PathVariable int id){
        return userService.sel(id).toString();
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
然后是LogController.java：
package com.bolingcavalry.simple.controller;

import com.bolingcavalry.simple.service.LogService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class LogController {
    @Autowired
    private LogService logService;

    @RequestMapping("log/{id}")
    public String log(@PathVariable int id){
        return logService.sel(id).toString();
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
最后是引导类SimpleApplication.java，注意MapperScan注解会自动扫描包路径下的所有接口，这样UserMapper和LogMapper就不用加Mapper注解了：
package com.bolingcavalry.simple;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan("com.bolingcavalry.simple.mapper")
public class SimpleApplication {

    public static void main(String[] args) {
        SpringApplication.run(SimpleApplication.class, args);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
至此，编码完成，可以启动验证了；
验证
启动SpringBoot应用的方式有两种，最简单的办法是再IDEA中直接启动，如下图：


第二种是simple的目录下执行mvn clean package -U，就会在target目录得到文件simple-0.0.1-SNAPSHOT.jar，再执行java -jar simple-0.0.1-SNAPSHOT.jar即可启动；

在浏览器访问http://localhost:8080/user/3，可以得到user表的查询结果：


访问http://localhost:8080/log/3，可以得到log表的查询结果：


在控制台可以看到日志如下所示，这是我们开发期间调试问题的重要线索：

至此，入门级SpringBoot集成MyBatis的实战就完成了，接下来的系列内容会有更多实战，咱们一起来学习和掌握MyBatis的基本用法；


程序员欣宸
已关注

1


5


0

专栏目录
二、springBoot 整合 mybatis 项目实战
程序员爱酸奶
 1万+
前言 上一篇文章开始了我们的springboot序篇，我们配置了mysql数据库，但是我们sql语句直接写在controller中并且使用的是jdbcTemplate。项目中肯定不会这样使用，上篇文章也说了，会结合mybatis 或者JPA 使用。我们这篇文章就来结合 mybatis 来使用吧，至于为什么选mybatis 而不是JPA ，这个看个人洗好吧。然后这篇文章会附带一讲一下今天为项目新增的...
Spring Boot + Mybatis 完整实例
04-24
SpringBoot + Mybatis的完整实例，涵盖多个测试样例。
Spring boot Mybatis 整合（完整版）
----------
 318
转自：https://blog.csdn.net/winter_chen001/article/details/77249029个人开源项目springboot+mybatis+thymeleaf+docker构建的个人站点开源项目（集成了个人主页、个人作品、个人博客）更多干货SpringBoot系列目录正题本项目使用的环境：开发工具：Intellij IDEA 2017.1.3springboo...
MyBatis初级实战之三：springboot集成druid
程序员欣宸的博客
 561
实战springboot、mybatis、druid的集成并验证；
MyBatis初级实战之二：增删改查
程序员欣宸的博客
 1536
实战最常用的增删改查操作
MyBatis初级实战之四：druid多数据源
程序员欣宸的博客
 3994
完整的springboot+mybatis+druid多数据源开发和验证
mybatis批量新增_MyBatis初级实战之二：增删改查
weixin_39597262的博客
 17
本文是《MyBatis初级实战》系列的第二篇，前文《MyBatis初级实战之一：Spring Boot集成 》我们知道了如何在SpringBoot中集成MyBatis，本篇就一起来练习基本功：增删改查；本篇概览本篇要练习的内容如下：单表的增删改查批量新增联表查询全文由以下部分组成：新建工程增加启动类增加swagger的配置类，工程包含了swagger，以便稍后在浏览器上验证增加配置文件增加实体类增...
MyBatis初级实战之三：springboot集成druid，java开发高级工程师面试
m0_63174618的博客
 243
<?xml version="1.0" encoding="UTF-8"?> <project xmlns=“http://maven.apache.org/POM/4.0.0” xmlns:xsi=“http://www.w3.org/2001/XMLSchema-instance” xsi:schemaLocation=“http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd”>
maven + springboot 集成Mybatis的完整实例
xiaomin1328的博客
 144
1、 2、pom.xml驱动包依赖添加 <!-- 集成springboot的父级项目的依赖--> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</ar...
《 Kotlin + Spring Boot ： 下一代 Java 服务端开发 》
禅与计算机程序设计艺术
 631
《 Kotlin + Spring Boot ： 下一代 Java 服务端开发 》 《Spring Boot 开发实战》(基于 Kotlin + Gradle + Spring Boot 2.0 的企业级服务端开发实战) 京东下单链接 https://item.jd.com/31178320122.html 天猫下单链接 https://detail.tm...
开篇词：Spring 框架——Java 开发行业的标准
ningnan9801的博客
 1221
我是谁 大家好，我叫宁楠，一名撸了多年代码的资深码农，拥有多年软件研发、系统架构经验，历任高级开发工程师 、技术总监。从上大学到现在接触 Java 已有十个年头了，无论是上学期间还是工作之后，身边朋友对我的评价基本是「学习能力强、上手新技术速度快」，这并不是因为我有多聪明，而是需要掌握正确的学习方法。 什么是正确的学习方法？在我看来这个问题要因人而异，我认为好的方法可能并不适用于所有人，每个人都应...
从 Spring 到 Spring 全家桶，Java 开发行业的标准
技术杂谈
 3749
从 Spring 到 Spring boot 、Spring Cloud 再到 Spring 全家桶，Spring 框架已成为 Java 开发行业的标准。笔者 多年 Java 面试经验，Spring 和 Spring boot 面试题偏向面试重点，现在面试时，会尽量把 Spring 全家桶所有知识囊括进来。
Spring Boot 2.0 极简教程
禅与计算机程序设计艺术
 257
Spring Boot 2.0 极简教程 第 I 部分 Spring Boot 框架基础 第1章 Spring Boot 简介 1.1 Spring Boot 产生背景 1.2 XML 配置文件 VS. JavaConfig 注解配置 1.3 Spring Boot 基本特性 1.4 Spring Boot 命令行 CLI 1.5 本章小结 第2章 快速开...
Spring Cloud iToken实战项目（一）：项目简介和白皮书
u011467407的博客
 1300
...
Spring全家桶之SpringCloud——初级阶段
时间静止
 6721
SpringCloud 初级阶段知识体系搭建分享 ,包括微服务架构介绍, 微服务设计原则, SpringCloud介绍以及基本环境搭建, SpringBoot项目的构建, 日志配置文件和yml的介绍, 多环境配置文件的命名与使用, 核心注解与异常处理, 健康状况监控, RabbitMQ搭建以及项目整合, Eureka注册中心的详细介绍等等 .内容较多, 请有选择观看 ,如有错误欢迎指出~~~
spring boot(二)：web综合开发
zxl2016的博客
 192
spring boot(二)：web综合开发上篇文章介绍了Spring boot初级教程：spring boot(一)：入门篇，方便大家快速入门、了解实践Spring boot特性；本篇文章接着上篇内容继续为大家介绍spring boot的其它特性（有些未必是spring boot体系桟的功能，但是是spring特别推荐的一些开源技术本文也会介绍），对了这里只是一个大概的介绍，特别详细的使用我们会...
MyBatis初级实战之五：一对一关联查询
程序员欣宸的博客
 583
实战MyBaits的多表关联查询(一对一)
MyBatis初级实战之六：一对多关联查询
程序员欣宸的博客
 539
实战MyBatis的多表关联查询，本篇主要是一对多
工业智能网关BL110应用之三十： 如何连接配置MQTT Client One服务器
最新发布
钡铼技术工业物联网
 393
MQTT Client One 支持多个发布主题，在发布主题项点击“添加”填写发布主题，在发布主题项的下拉框可以查看发布主题名。选择发布主题名，点击“删除”，就可以删除要删除的发布主题。MQTT Client One 同时也支持每个发布主题选择不同的数据点发布，鼠标光标放在右边方框内，点击鼠标右键，弹出提示框，点击“添加”，弹出数据点框，点击要发布的数据点，点击“确定”。如下图：发布主题“topic”只发布“COM1”的“FX3U”的设备的数据点“Y0”，其他的数据点不发布。工业智能网关BL110。
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司
脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
90%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 'MyBatis初级实战之一：Spring Boot集成

程序员欣宸

于 2020-08-14 07:46:15 发布

1270
 收藏 5
分类专栏： mybatis系列 文章标签： mybatis java
版权

mybatis系列
专栏收录该内容
6 篇文章2 订阅
订阅专栏
MyBatis初级实战
《MyBatis初级实战》系列旨在通过一系列编码实战，和读者一起掌握MyBatis的基本用法，帮助初学者快速运用MyBatis参与实际开发；

聚焦MyBatis
《MyBatis初级实战》面向的是对MyBatis有兴趣的读者，向读者们提供可用的方案和代码，这里不是比较Hibernate、sqltoy-orm的地方，作者也十分认可这些ORM框架，但《MyBatis初级实战》不参与比较；

关于MyBatis
引自官方：MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。

实战环境
《MyBatis初级实战》系列的环境信息如下：

JDK：1.8.0_181
mybatis-spring-boot-starter：2.1.3（对应的MyBatis：3.5.5）
Spring Boot：2.3.2.RELEASE
MySQL：5.7.29
实战环境：win10
开发工具：IntelliJ IDEA 2019.2.1 (Ultimate Edition)
Spring Boot集成MyBatis常规步骤概览
Spring Boot集成MyBatis的常规步骤如下：

maven中添加mybatis-spring-boot-starter的依赖；
Spring Boot的配置中指定MyBatis配置文件的位置；
Spring Boot的配置中指定MyBatis映射文件的位置；
添加MyBatis配置文件，后续MyBatis的常规配置集中在此；
映射文件xxxMapper.xml及其对应的接口文件；
业务代码中，Autowired注解修饰接口文件并使用；
接下来开始实战，咱们先把数据准备好；
准备数据
请您自行准备好MySQL服务，我这边MySQL是部署在docker上的，可以参考《群晖DS218+部署mysql》；
创建名为mybatis的数据库；
在mybatis数据库下执行以下SQL，即可创建本次实战所需数据：
USE mybatis;

DROP TABLE IF EXISTS `user`;

CREATE TABLE `user` (
  `id` int(32) NOT NULL AUTO_INCREMENT,
  `name` varchar(32) NOT NULL,
  `age` int(32) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;


DROP TABLE IF EXISTS `log`;

CREATE TABLE `log` (
  `id` int(32) NOT NULL AUTO_INCREMENT,
  `user_id` int(32),
  `action` varchar(255) NOT NULL,
  `create_time` datetime not null,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;

INSERT INTO mybatis.user (id, name, age) VALUES (3, ''tom'', 11);
INSERT INTO mybatis.log (id, user_id, action, create_time) VALUES (3, 3, ''read book'', ''2020-08-07 08:18:16'');
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
源码下载
如果您不想编码，可以在GitHub下载所有源码，地址和链接信息如下表所示(https://github.com/zq2599/blog_demos)：
名称	链接	备注
项目主页	https://github.com/zq2599/blog_demos	该项目在GitHub上的主页
git仓库地址(https)	https://github.com/zq2599/blog_demos.git	该项目源码的仓库地址，https协议
git仓库地址(ssh)	git@github.com:zq2599/blog_demos.git	该项目源码的仓库地址，ssh协议
这个git项目中有多个文件夹，本章的应用在mybatis文件夹下，如下图红框所示：

关于父子工程
为了整个系列的代码好管理，我这边用maven创建的是父子工程，如果您只要子工程，不需要父子结构，要对子工程的pom.xml做以下调整：

parent节点原本如下：
<parent>
        <groupId>com.bolingcavalry</groupId>
        <artifactId>mybatis</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>
1
2
3
4
5
6
请替换成以下内容(也就是直接用>spring-boot-starter-parent作为父工程)：

<parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.2.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>
1
2
3
4
5
6
子工程种的dependency节点中没有version子节点，这些都放在父工程的dependencyManagement中统一管理了，请您将version添加到子工程的各个dependency节点：

接下来开始编码
创建父工程
创建名为mybatis的maven工程，pom.xml内容如下：

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.3.2.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.bolingcavalry</groupId>
    <artifactId>mybatis</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>pom</packaging>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>
    </properties>

    <modules>
        <module>simple</module>
    </modules>

    <dependencyManagement>

        <dependencies>
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>2.1.3</version>
            </dependency>
        </dependencies>

    </dependencyManagement>

</project>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
至此，准备工作算是全部完成了，接下来咱们开始创建一个典型的Spring Boot集成MyBatis的项目吧；
Spring Boot集成MyBatis
在父工程mybatis之下新建名为simple的Spring Boot子工程，其pom.xml内容如下：
<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.bolingcavalry</groupId>
        <artifactId>mybatis</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom.xml</relativePath>
    </parent>

    <groupId>com.bolingcavalry</groupId>
    <artifactId>simple</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>simple</name>
    <description>Demo project for Spring Boot</description>

    <properties>
        <java.version>1.8</java.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>2.1.3</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <scope>runtime</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>

</project>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
Spring Boot配置文件是simple/src/main/resources/application.yml，内容如下：
server:
  port: 8080

spring:
  # 数据源
  datasource:
    username: root
    password: 123456
    url: jdbc:mysql://192.168.50.43:3306/mybatis?useUnicode=true&characterEncoding=utf-8&useSSL=true&serverTimezone=UTC
    driver-class-name: com.mysql.cj.jdbc.Driver

# mybatis配置
mybatis:
  # 配置文件所在位置
  config-location: classpath:mybatis-config.xml
  # 映射文件所在位置
  mapper-locations: classpath:mappers/*Mapper.xml

# 日志配置
logging:
  level:
    root: INFO
    com:
      bolingcavalry:
        simple:
          mapper: debug
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
新建user表对应的实体类User.java：
package com.bolingcavalry.simple.entity;

/**
 * @Description: 实体类
 * @author: willzhao E-mail: zq2599@gmail.com
 * @date: 2020/8/4 8:24
 */
public class User {
    private Integer id;
    private String name;
    private Integer age;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getAge() {
        return age;
    }

    public void setAge(Integer age) {
        this.age = age;
    }

    @Override
    public String toString() {
        return "User{" +
                "id=" + id +
                ", name=''" + name + ''\'''' +
                ", age=" + age +
                ''}'';
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
新建log表对应的实体类Log.java：
package com.bolingcavalry.simple.entity;

import java.sql.Date;

/**
 * @Description: 实体类
 * @author: willzhao E-mail: zq2599@gmail.com
 * @date: 2020/8/4 8:24
 */
public class Log {
    private Integer id;
    private Integer userId;
    private String action;
    private Date createTime;

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Integer getUserId() {
        return userId;
    }

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    public String getAction() {
        return action;
    }

    public void setAction(String action) {
        this.action = action;
    }

    public Date getCreateTime() {
        return createTime;
    }

    public void setCreateTime(Date createTime) {
        this.createTime = createTime;
    }

    @Override
    public String toString() {
        return "Log{" +
                "id=" + id +
                ", userId=" + userId +
                ", action=''" + action + ''\'''' +
                ", createTime=" + createTime +
                ''}'';
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
接下来会新建三个配置文件，先来看下它们的位置，以免后面放错地方引起不必要的麻烦：

application.yml所在目录下，新增名为mybatis-config.xml的文件，这是mybatis的配置文件，本例很简单只有一个配置，内容如下：
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <typeAliases>
        <!-- 映射文件中的类不用写全路径了-->
        <package name="com.bolingcavalry.simple.entity"/>
    </typeAliases>
</configuration>
1
2
3
4
5
6
7
8
9
resources/mappers目录下，新增名为UserMapper.xml的文件，和user表相关的查询都在此，本文只有一个查询user表的操作，注意下文中的resultType等于User，这里没有写User类的完整路径，是因为前面mybatis-config.xml文件中配置了typeAliases的package节点的缘故：
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bolingcavalry.simple.mapper.UserMapper">
    <select id="sel" parameterType="int" resultType="User">
        select * from user where id = #{id}
    </select>
</mapper>
1
2
3
4
5
6
7
再新增LogMapper.xml，如下所示，log表中的user_id字段在Log.java中没有同名的字段，因此要新增resultMap来建立数据库和实体类的字段映射关系，再在select节点用上这个关系，注意要用resultMap属性(UserMapper.xml中用的是resultType)：
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.bolingcavalry.simple.mapper.LogMapper">

    <resultMap id="logResultMap" type="Log">
        <id property="id" column="id" />
        <result column="user_id" jdbcType="INTEGER" property="userId" />
        <result column="action" jdbcType="VARCHAR" property="action" />
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    </resultMap>

    <select id="sel" parameterType="int" resultMap="logResultMap">
        select * from log where id = #{id}
    </select>
</mapper>
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
接下来是业务要用到的接口文件，第一个是UserMapper.java：
package com.bolingcavalry.simple.mapper;

import com.bolingcavalry.simple.entity.User;
import org.springframework.stereotype.Repository;

@Repository
public interface UserMapper {
    User sel(int id);
}
1
2
3
4
5
6
7
8
9
第二个是LogMapper.java：
package com.bolingcavalry.simple.mapper;

import com.bolingcavalry.simple.entity.Log;
import org.springframework.stereotype.Repository;

@Repository
public interface LogMapper {
    Log sel(int id);
}
1
2
3
4
5
6
7
8
9
上述两个类都使用了Repository注解，作用是避免在编码过程中,IDEA给出红线提示，如下图：

映射配置完毕，接下来就可以在应用中使用了，先为user做一个service类UserService.java，里面通过Autowired注解注入UserMapper的实现：
package com.bolingcavalry.simple.service;

import com.bolingcavalry.simple.entity.User;
import com.bolingcavalry.simple.mapper.UserMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class UserService {
    @Autowired
    UserMapper userMapper;

    public User sel(int id){
        return userMapper.sel(id);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
再为log做service类LogService.java：
package com.bolingcavalry.simple.service;

import com.bolingcavalry.simple.entity.Log;
import com.bolingcavalry.simple.mapper.LogMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class LogService {
    @Autowired
    LogMapper logMapper;

    public Log sel(int id){
        return logMapper.sel(id);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
最后是响应web请求的controller类，第一个是UserController.java：
package com.bolingcavalry.simple.controller;

import com.bolingcavalry.simple.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class UserController {
    @Autowired
    private UserService userService;

    @RequestMapping("user/{id}")
    public String GetUser(@PathVariable int id){
        return userService.sel(id).toString();
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
然后是LogController.java：
package com.bolingcavalry.simple.controller;

import com.bolingcavalry.simple.service.LogService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class LogController {
    @Autowired
    private LogService logService;

    @RequestMapping("log/{id}")
    public String log(@PathVariable int id){
        return logService.sel(id).toString();
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
最后是引导类SimpleApplication.java，注意MapperScan注解会自动扫描包路径下的所有接口，这样UserMapper和LogMapper就不用加Mapper注解了：
package com.bolingcavalry.simple;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
@MapperScan("com.bolingcavalry.simple.mapper")
public class SimpleApplication {

    public static void main(String[] args) {
        SpringApplication.run(SimpleApplication.class, args);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
至此，编码完成，可以启动验证了；
验证
启动SpringBoot应用的方式有两种，最简单的办法是再IDEA中直接启动，如下图：


第二种是simple的目录下执行mvn clean package -U，就会在target目录得到文件simple-0.0.1-SNAPSHOT.jar，再执行java -jar simple-0.0.1-SNAPSHOT.jar即可启动；

在浏览器访问http://localhost:8080/user/3，可以得到user表的查询结果：


访问http://localhost:8080/log/3，可以得到log表的查询结果：


在控制台可以看到日志如下所示，这是我们开发期间调试问题的重要线索：

至此，入门级SpringBoot集成MyBatis的实战就完成了，接下来的系列内容会有更多实战，咱们一起来学习和掌握MyBatis的基本用法；


程序员欣宸
已关注

1


5


0

专栏目录
二、springBoot 整合 mybatis 项目实战
程序员爱酸奶
 1万+
前言 上一篇文章开始了我们的springboot序篇，我们配置了mysql数据库，但是我们sql语句直接写在controller中并且使用的是jdbcTemplate。项目中肯定不会这样使用，上篇文章也说了，会结合mybatis 或者JPA 使用。我们这篇文章就来结合 mybatis 来使用吧，至于为什么选mybatis 而不是JPA ，这个看个人洗好吧。然后这篇文章会附带一讲一下今天为项目新增的...
Spring Boot + Mybatis 完整实例
04-24
SpringBoot + Mybatis的完整实例，涵盖多个测试样例。
Spring boot Mybatis 整合（完整版）
----------
 318
转自：https://blog.csdn.net/winter_chen001/article/details/77249029个人开源项目springboot+mybatis+thymeleaf+docker构建的个人站点开源项目（集成了个人主页、个人作品、个人博客）更多干货SpringBoot系列目录正题本项目使用的环境：开发工具：Intellij IDEA 2017.1.3springboo...
MyBatis初级实战之三：springboot集成druid
程序员欣宸的博客
 561
实战springboot、mybatis、druid的集成并验证；
MyBatis初级实战之二：增删改查
程序员欣宸的博客
 1536
实战最常用的增删改查操作
MyBatis初级实战之四：druid多数据源
程序员欣宸的博客
 3994
完整的springboot+mybatis+druid多数据源开发和验证
mybatis批量新增_MyBatis初级实战之二：增删改查
weixin_39597262的博客
 17
本文是《MyBatis初级实战》系列的第二篇，前文《MyBatis初级实战之一：Spring Boot集成 》我们知道了如何在SpringBoot中集成MyBatis，本篇就一起来练习基本功：增删改查；本篇概览本篇要练习的内容如下：单表的增删改查批量新增联表查询全文由以下部分组成：新建工程增加启动类增加swagger的配置类，工程包含了swagger，以便稍后在浏览器上验证增加配置文件增加实体类增...
MyBatis初级实战之三：springboot集成druid，java开发高级工程师面试
m0_63174618的博客
 243
<?xml version="1.0" encoding="UTF-8"?> <project xmlns=“http://maven.apache.org/POM/4.0.0” xmlns:xsi=“http://www.w3.org/2001/XMLSchema-instance” xsi:schemaLocation=“http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd”>
maven + springboot 集成Mybatis的完整实例
xiaomin1328的博客
 144
1、 2、pom.xml驱动包依赖添加 <!-- 集成springboot的父级项目的依赖--> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</ar...
《 Kotlin + Spring Boot ： 下一代 Java 服务端开发 》
禅与计算机程序设计艺术
 631
《 Kotlin + Spring Boot ： 下一代 Java 服务端开发 》 《Spring Boot 开发实战》(基于 Kotlin + Gradle + Spring Boot 2.0 的企业级服务端开发实战) 京东下单链接 https://item.jd.com/31178320122.html 天猫下单链接 https://detail.tm...
开篇词：Spring 框架——Java 开发行业的标准
ningnan9801的博客
 1221
我是谁 大家好，我叫宁楠，一名撸了多年代码的资深码农，拥有多年软件研发、系统架构经验，历任高级开发工程师 、技术总监。从上大学到现在接触 Java 已有十个年头了，无论是上学期间还是工作之后，身边朋友对我的评价基本是「学习能力强、上手新技术速度快」，这并不是因为我有多聪明，而是需要掌握正确的学习方法。 什么是正确的学习方法？在我看来这个问题要因人而异，我认为好的方法可能并不适用于所有人，每个人都应...
从 Spring 到 Spring 全家桶，Java 开发行业的标准
技术杂谈
 3749
从 Spring 到 Spring boot 、Spring Cloud 再到 Spring 全家桶，Spring 框架已成为 Java 开发行业的标准。笔者 多年 Java 面试经验，Spring 和 Spring boot 面试题偏向面试重点，现在面试时，会尽量把 Spring 全家桶所有知识囊括进来。
Spring Boot 2.0 极简教程
禅与计算机程序设计艺术
 257
Spring Boot 2.0 极简教程 第 I 部分 Spring Boot 框架基础 第1章 Spring Boot 简介 1.1 Spring Boot 产生背景 1.2 XML 配置文件 VS. JavaConfig 注解配置 1.3 Spring Boot 基本特性 1.4 Spring Boot 命令行 CLI 1.5 本章小结 第2章 快速开...
Spring Cloud iToken实战项目（一）：项目简介和白皮书
u011467407的博客
 1300
...
Spring全家桶之SpringCloud——初级阶段
时间静止
 6721
SpringCloud 初级阶段知识体系搭建分享 ,包括微服务架构介绍, 微服务设计原则, SpringCloud介绍以及基本环境搭建, SpringBoot项目的构建, 日志配置文件和yml的介绍, 多环境配置文件的命名与使用, 核心注解与异常处理, 健康状况监控, RabbitMQ搭建以及项目整合, Eureka注册中心的详细介绍等等 .内容较多, 请有选择观看 ,如有错误欢迎指出~~~
spring boot(二)：web综合开发
zxl2016的博客
 192
spring boot(二)：web综合开发上篇文章介绍了Spring boot初级教程：spring boot(一)：入门篇，方便大家快速入门、了解实践Spring boot特性；本篇文章接着上篇内容继续为大家介绍spring boot的其它特性（有些未必是spring boot体系桟的功能，但是是spring特别推荐的一些开源技术本文也会介绍），对了这里只是一个大概的介绍，特别详细的使用我们会...
MyBatis初级实战之五：一对一关联查询
程序员欣宸的博客
 583
实战MyBaits的多表关联查询(一对一)
MyBatis初级实战之六：一对多关联查询
程序员欣宸的博客
 539
实战MyBatis的多表关联查询，本篇主要是一对多
工业智能网关BL110应用之三十： 如何连接配置MQTT Client One服务器
最新发布
钡铼技术工业物联网
 393
MQTT Client One 支持多个发布主题，在发布主题项点击“添加”填写发布主题，在发布主题项的下拉框可以查看发布主题名。选择发布主题名，点击“删除”，就可以删除要删除的发布主题。MQTT Client One 同时也支持每个发布主题选择不同的数据点发布，鼠标光标放在右边方框内，点击鼠标右键，弹出提示框，点击“添加”，弹出数据点框，点击要发布的数据点，点击“确定”。如下图：发布主题“topic”只发布“COM1”的“FX3U”的设备的数据点“Y0”，其他的数据点不发布。工业智能网关BL110。
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司
脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
90%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 108);
INSERT INTO public.article_content VALUES (8, '2022-08-27 05:34:16.205', false, '2022-10-20 01:01:02.182', '<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>
', '<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>', '使用 Ctrl+Alt+Del 重启电脑
', 15);
INSERT INTO public.article_content VALUES (12, '2022-08-27 12:19:11.915', false, '2022-09-15 10:41:12.559', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', 'quarkus依赖注入之四：选择注入bean的高级手段

程序员欣宸

于 2022-04-03 16:14:06 发布

815
 收藏 1
分类专栏： java云原生 java服务端 文章标签： quarkus cloud native
版权

java云原生
同时被 2 个专栏收录
23 篇文章14 订阅
订阅专栏

java服务端
175 篇文章46 订阅
订阅专栏
欢迎访问我的GitHub
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos

本篇概览
本文是《quarkus依赖注入》系列的第四篇，在应用中，一个接口有多个实现是很常见的，那么依赖注入时，如果类型是接口，如何准确选择实现呢？前文介绍了五种注解，用于通过配置项、profile等手段选择注入接口的实现类，面对复杂多变的业务场景，有时候仅靠这两种手段是不够的，最好是有更自由灵活的方式来选择bean，这就是本篇的内容，通过注解、编码等更多方式选择bean
本篇涉及的选择bean的手段有以下四种：
修饰符匹配
Named注解的属性匹配
根据优先级选择
写代码选择
关于修饰符匹配
为了说明修饰符匹配，先来看一个注解Default，其源码如下
@Target({ TYPE, METHOD, PARAMETER, FIELD })
@Retention(RUNTIME)
@Documented
@Qualifier
public @interface Default {
    public static final class Literal extends AnnotationLiteral<Default> implements Default {
    	public static final Literal INSTANCE = new Literal();
			private static final long serialVersionUID = 1L;
    }
}
1
2
3
4
5
6
7
8
9
10
Default的源码在这里不重要，关键是它被注解Qualifier修饰了，这种被Qualifier修饰的注解，咱们姑且称之为Qualifier修饰符
如果咱们新建一个注解，也用Qualifier来修饰，如下所示，这个MyQualifier也是个Qualifier修饰符
@Qualifier
@Retention(RUNTIME)
@Target({TYPE, METHOD, FIELD, PARAMETER})
public @interface MyQualifier {
    @Nonbinding String value();
}
1
2
3
4
5
6
在quarkus容器中的每一个bean都应该有一个Qualifier修饰符在修饰，如下图红框，如果没有，就会被quarkus添加Default注解

依赖注入时，直接用Qualifier修饰符修饰注入对象，这样quarkus就会去寻找被这个Qualifier修饰符修饰的bean，找到就注入（找不到报错，找到多个也报错，错误逻辑和之前的一样）
所以用修饰符匹配来选择bean的实现类，一共分三步：
假设有名为HelloQualifier的接口，有三个实现类：HelloQualifierA、HelloQualifierB、HelloQualifierC，业务需求是使用HelloQualifierA
第一步：自定义一个注解，假设名为MyQualifier，此注解要被Qualifier修饰
第二步：用MyQualifier修饰HelloQualifierA
第三步：在业务代码的注入点，用MyQualifier修饰HelloQualifier类型的成员变量，这样成员变量就会被注入HelloQualifierA实例
仅凭文字描述，很难把信息准确传递给读者（毕竟欣宸文化水平极其有限），还是写代码实现上述场景吧，聪明的您一看就懂
编码演示修饰符匹配：准备工作
先按照前面的假设将接口和实现类准备好，造成一个接口有多个实现bean的事实，然后，再用修饰符匹配来准确选定bean

首先是接口HelloQualifier，如下所示

package com.bolingcavalry.service;

public interface HelloQualifier {
    String hello();
}
1
2
3
4
5
实现类HelloQualifierA，返回自己的类名
package com.bolingcavalry.service.impl;

import com.bolingcavalry.service.HelloQualifier;
import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloQualifierA implements HelloQualifier {
    @Override
    public String hello() {
        return this.getClass().getSimpleName();
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
实现类HelloQualifierB、HelloQualifierC的代码和上面的HelloQualifierA相同，都是返回自己类名，就不贴出来了
关于使用HelloQualifier类型bean的代码，咱们就在单元测试类中注入吧，如下所示：
package com.bolingcavalry;

import com.bolingcavalry.service.HelloQualifier;
import com.bolingcavalry.service.impl.HelloQualifierA;
import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import javax.inject.Inject;

@QuarkusTest
public class QualifierTest {

    @Inject
    HelloQualifier helloQualifier;

    @Test
    public void testQualifier() {
        Assertions.assertEquals(HelloQualifierA.class.getSimpleName(),
                helloQualifier.hello());
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
上面的代码中，成员变量helloQualifier的类型是HelloQualifier，quarkus的bean容器中，HelloQualifierA、HelloQualifierB、HelloQualifierC等三个bean都符合注入要求，此时如果执行单元测试，应该会报错：同一个接口多个实现bean的问题
执行单元测试，如下图，黄框中给出了两个线索：第一，错误原因是注入时发现同一个接口有多个实现bean，第二，这些bean都是用Default修饰的，然后是绿框，里面将所有实现bean列出来，方便开发者定位问题


现在准备工作完成了，来看如何用修饰符匹配解决问题：在注入点准确注入HelloQualifierA类型实例
编码演示修饰符匹配：实现匹配
使用修饰符匹配，继续按照前面总结的三步走
第一步：自定义一个注解，名为MyQualifier，此注解要被Qualifier修饰
package com.bolingcavalry.annonation;

import javax.enterprise.util.Nonbinding;
import javax.inject.Qualifier;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import static java.lang.annotation.ElementType.*;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

@Qualifier
@Retention(RUNTIME)
@Target({TYPE, METHOD, FIELD, PARAMETER})
public @interface MyQualifier {
    @Nonbinding String value();
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
第二步：用MyQualifier修饰HelloQualifierA，下图红框是新增的代码


第三步：在业务代码的注入点，用MyQualifier修饰HelloQualifier类型的成员变量，下图红框是新增的代码


改动完成了，再次执行单元测试，顺利通过



修饰符匹配要注意的地方
修饰符匹配的逻辑非常简单：bean定义和bean注入的地方用同一个修饰符即可，使用中有三个地方要注意
在注入bean的地方，如果有了Qualifier修饰符，可以把@Inject省略不写了
在定义bean的地方，如果没有Qualifier修饰符去修饰bean，quarkus会默认添加Default
在注入bean的地方，如果没有Qualifier修饰符去修饰bean，quarkus会默认添加Default
关于默认的@Default
回头看刚才的代码，如果保留HelloQualifierA的MyQualifier修饰，但是删除QualifierTest的成员变量helloQualifier的MyQualifier修饰，会发生什么呢？咱们来分析一下：

首先，QualifierTest的成员变量helloQualifier会被quarkus默认添加Default修饰

其次，HelloQualifierB和HelloQualifierC都会被quarkus默认添加Default修饰

所以，注入helloQualifier的时候，quarkus去找Default修饰的bean，结果找到了两个：HelloQualifierB和HelloQualifierC，因此启动会失败

您可以自行验证结果是否和预期一致

看到这里，您应该掌握了修饰符匹配的用法，也应该发现其不便之处：要新增注解，这样下去随着业务发展，注解会越来越多，有没有什么方法来解决这个问题呢？

方法是有的，就是接下来要看的Named注解

Named注解的属性匹配
Named注解的功能与前面的Qualifier修饰符是一样的，其特殊之处在于通过注解属性来匹配修饰bean和注入bean

以刚才的业务代码为例来演示Named注解，修改HelloQualifierA，如下图红框，将@MyQualifier(“”)换成@Named(“A”)，重点关注Named注解的属性值，这里等于A


接下来修改注入处的代码，如下图红框，在注入位置也用@Named(“A”)来修饰，和bean定义处的一模一样


如此，bean定义和bean注入的两个地方，通过Named注解的属性完成了匹配，至于单元测试您可以自行验证，这里就不赘述了

至此，详细您已经知道了Named注解的作用：功能与前面的Qualifier修饰符一样，不过bean的定义和注入处的匹配逻辑是Named注解的属性值

以上就是修饰符匹配的全部内容

根据优先级选择
使用优先级来选择注入是一种简洁的方式，其核心是用Alternative和Priority两个注解修饰所有备选bean，然后用Priority的属性值（int型）作为优先级，该值越大代表优先级越高

在注入位置，quarkus会选择优先级最高的bean注入

接下来编码演示

新增演示用的接口HelloPriority.java

public interface HelloPriority {
    String hello();
}
1
2
3
HelloPriority的第一个实现类HelloPriorityA.java，注意它的两个注解Alternative和Priority，前者表明这是个可供选择的bean，后者表明了它的优先级，数字1001用于和其他bean的优先级比较，数字越大优先级越高
@ApplicationScoped
@Alternative
@Priority(1001)
public class HelloPriorityA implements HelloPriority {
    @Override
    public String hello() {
        return this.getClass().getSimpleName();
    }
}
1
2
3
4
5
6
7
8
9
HelloPriority的第二个实现类HelloPriorityB，可见Priority属性值是1002，代表选择的时候优先级比HelloPriorityA更高
@ApplicationScoped
@Alternative
@Priority(1002)
public class HelloPriorityB implements HelloPriority {
    @Override
    public String hello() {
        return this.getClass().getSimpleName();
    }
}
1
2
3
4
5
6
7
8
9
HelloPriority的第二个实现类HelloPriorityC，可见Priority属性值是1003，代表选择的时候优先级比HelloPriorityA和HelloPriorityB更高
@ApplicationScoped
@Alternative
@Priority(1003)
public class HelloPriorityC implements HelloPriority {
    @Override
    public String hello() {
        return this.getClass().getSimpleName();
    }
}
1
2
3
4
5
6
7
8
9
接下来是单元测试，验证注入的bean是否符合预期，理论上注入的应该是优先级最高的HelloPriorityC
@QuarkusTest
public class PriorityTest {

    @Inject
    HelloPriority helloPriority;

    @Test
    public void testSelectHelloInstanceA() {
        Assertions.assertEquals(HelloPriorityC.class.getSimpleName(),
                                helloPriority.hello());
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
单元测试结果如下，符合预期


以上就是优先级选择bean的操作，如果这还不够用，那就祭出最后一招：写代码选择bean
写代码选择bean
如果不用修饰符匹配，再回到最初的问题：有三个bean都实现了同一个接口，应该如何注入？
在注入bean的位置，如果用Instance<T>来接收注入，就可以拿到T类型的所有bean，然后在代码中随心所欲的使用这些bean
新增演示用的接口HelloInstance.java
package com.bolingcavalry.service;

public interface HelloInstance {
    String hello();
}
1
2
3
4
5
HelloInstance的第一个实现类HelloInstanceA.java
package com.bolingcavalry.service.impl;

import com.bolingcavalry.service.HelloInstance;
import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloInstanceA implements HelloInstance {
    @Override
    public String hello() {
        return this.getClass().getSimpleName();
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
HelloInstance的另外两个实现类HelloInstanceB、HelloInstanceC，代码与HelloInstanceA一样，就不贴出来了
接下来的单元测试类演示了如何使用Instance接受注入，以及业务代码如何使用指定的实现类bean，可见select(Class).get()是关键，select方法指定了实现类，然后get取出该实例
package com.bolingcavalry;

import com.bolingcavalry.service.HelloInstance;
import com.bolingcavalry.service.impl.HelloInstanceA;
import com.bolingcavalry.service.impl.HelloInstanceB;
import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import javax.enterprise.inject.Instance;
import javax.inject.Inject;

@QuarkusTest
public class InstanceTest {

    @Inject
    Instance<HelloInstance> instance;

    @Test
    public void testSelectHelloInstanceA() {
        Class<HelloInstanceA> clazz = HelloInstanceA.class;

        Assertions.assertEquals(clazz.getSimpleName(),
                instance.select(clazz).get().hello());
    }

    @Test
    public void testSelectHelloInstanceB() {
        Class<HelloInstanceB> clazz = HelloInstanceB.class;

        Assertions.assertEquals(clazz.getSimpleName(),
                instance.select(clazz).get().hello());
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
执行单元测试，顺利通过，符合预期


至此，连续两篇关于注入bean的方式全部验证完毕，如此丰富的手段，相信可以满足您日常开发的需要

你不孤单，欣宸原创一路相伴
Java系列
Spring系列
Docker系列
kubernetes系列
数据库+中间件系列
DevOps系列

程序员欣宸
已关注

2


1


1

专栏目录
quarkus依赖注入之十：学习和改变bean懒加载规则
程序员欣宸的博客
 166
为了降低启动时间，quarkus下的常规作用域bean遵循懒加载规则，但有时我们希望bean可以更早实例化，本篇，咱们一起来了解懒加载规则和改变规则的方法
rdi:具有React能力的依赖注入库，由Reactor提供支持
03-11
RDI 具有React功能的Dependency Injection库，由Reactor提供支持。 什么是RDI？ RDI代表响应式依赖注入。 它是一个库，允许通过定义它们的依赖关系来管理应用程序中存在的bean，服务和任何类型的Java对象的实例化。 RDI的特殊性在于它完全支持所定义的React式编程范例，从而可以通过反压处理实现高效且无阻塞的应用程序。 您可以在查看完整的RDI文档。 依赖注入简而言之 依赖项注入的原理并不新鲜。 它的工作方式类似于，以及具有Quarkus或JSF这样的机制的其他一些框架。 但是，与这些示例不同，RDI并不是完整的框架，而是100％专注于依赖项注入的轻量级库。 为了说明依赖注入的工作方式，请考虑以下基本类： public class A { private final B b; public A ( B b ) {
评论1条写评论
_Schilings
热评
上面的“修饰符匹配要注意的地方”，第二点和第三点重复了
multi-module-gradle-quarkus-singleton-objectmapper-poc:关于gradle多模块quarkus设置和cdi bean配置的快速而又肮脏的POC
05-25
Bean配置 它提供2个不同的单例ObjectMapper实例。 参见master-module/BeansConfiguration 为了验证它们是否为单例，请在module-1运行测试并检查打印的输出。 多模块设置 一个空的父模块，其中包含3个相互依赖的模块。 强调： 父母中的常见依赖关系建立了gradle 动态模块包含/排除（请参阅activeClientModule的用法） 检查将bean从一个模块提供给另一个模块所需的空beans.xml用法 基于构造函数的注入 检查2个服务类，以及它们如何通过构造函数注入获得依赖。
quarkus依赖注入之三：用注解选择注入bean
程序员欣宸的博客
 426
注入点的类型，如果有多个bean都是该类型的实现，应该如何选择呢？本篇尝试通过多种注解来选择
quarkus依赖注入之八：装饰器（Decorator）
程序员欣宸的博客
 558
quarkus框架提供了对装饰器模式的支持，本篇就来体验它的能力和适用场景
quarkus依赖注入之一：创建bean
程序员欣宸的博客
 522
《quarkus依赖注入》系列聚焦quarkus框架下bean的创建、使用、配置等场景的知识点，本文是系列的开篇，介绍CDI，实战创建bean
quarkus依赖注入之二：bean的作用域
程序员欣宸的博客
 890
quarkus中的bean，它们的作用域是如何设置的？作用范围又分别是什么？本文给出答案
quarkus依赖注入之九：bean读写锁
程序员欣宸的博客
 184
quarkus以bean实例为对象提供读写锁，请随本文来体验此锁如何解决多线程同步问题
quarkus依赖注入之六：发布和消费事件
程序员欣宸的博客
 1485
quarkus框架下，进程内同步、异步发布和消费事件的操作
Spring获取注入Bean
weixin_48314739的博客
 200
package com.clicks.config; import org.springframework.beans.BeansException; import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware; import org.springframework.stereotype.Component; /** * @author
Quarkus框架入门之二：依赖控制
z69183787的专栏
 867
前言 Spring框架最开始被我熟知就是AOP和IOC，其中IOC在开发过程中更是被广泛使用，如果切换到一个新的框架没有了依赖注入和控制反转，那么可以说一夜回到解放前了。那么，Quarkus框架中有没有对应的功能呢？ 当然也有，Quarkus基于CDI规范提供了依赖注入的相关功能，本文将进行简单介绍。 CDI-Contexts and Dependency Injection 简单介绍 CDI(Contexts and Dependency Injection)，即上下文依赖注入，是J2EE6发布的
Spring 4.2新特性-对java8默认方法(default method)定义Bean的支持
汪云飞记录本
 417
2.1 默认方法(default method) java8引入了一个default medthod; 用来扩展已有的接口,在对已有接口的使用不产生任何影响的情况下,添加扩展 使用default关键字 Spring 4.2支持加载在默认方法里声明的bean 2.2 将要被声明成bean的类 public class DemoService { public...
微服务框架：如果不用Spring Boot，还可以选择谁
琦彦
 3266
前言 在 Java 和 Kotlin 中, 除了使用Spring Boot创建微服务外，还有很多其他的替代方案。 名称 版本 发布时间 开发商 GitHub Helidon SE 1.4.1 2019年 甲骨文 链接 Ktor 1.3.0 2018年 JetBrains 链接 Micronaut 1.2.9 2018年 Object Computing 链接 Quarkus 1.2.0
quarkus依赖注入之五：拦截器(Interceptor)
程序员欣宸的博客
 608
掌握quarkus框架下如何开发和使用拦截器
quarkus依赖注入之七：生命周期回调
程序员欣宸的博客
 263
介绍quarkus的bean生命周期回调方式，在bean的不同阶段（如创建、销毁）执行自定义方法
quarkus依赖注入之十一：拦截器高级特性上篇(属性设置和重复使用)
程序员欣宸的博客
 527
体验拦截器的高级功能，设置拦截器属性并在实现中使用此属性，这样同一个拦截器在不同位置可以发布不同效果，更可以将同一个拦截器设置不同属性，叠加使用在同一个地方
quarkus依赖注入之十三：其他重要知识点大串讲(终篇)
程序员欣宸的博客
 336
《quarkus依赖注入》系列的终篇，将剩下的重要知识点内容串起来一网打尽，完美结束依赖注入的深度历险
Quarkus框架入门之二：依赖注入
weixin_30435261的博客
 651
　　前言　　　　Spring框架最开始被我熟知就是AOP和IOC，其中IOC在开发过程中更是被广泛使用，如果切换到一个新的框架没有了依赖注入和控制反转，那么可以说一夜回到解放前了。那么，Quarkus框架中有没有对应的功能呢？ 当然也有，Quarkus基于CDI规范提供了依赖注入的相关功能，本文将进行简单介绍。　　　　CDI-Contexts and Dependency Injecti...
quarkus 整合mybatis puls注入兼容解决方案
最新发布
qq_56049919的博客
 244
Quarkus 整合mybatis puls 遇到的一些小问题
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
90%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 'quarkus依赖注入之四：选择注入bean的高级手段

程序员欣宸

于 2022-04-03 16:14:06 发布

815
 收藏 1
分类专栏： java云原生 java服务端 文章标签： quarkus cloud native
版权

java云原生
同时被 2 个专栏收录
23 篇文章14 订阅
订阅专栏

java服务端
175 篇文章46 订阅
订阅专栏
欢迎访问我的GitHub
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos

本篇概览
本文是《quarkus依赖注入》系列的第四篇，在应用中，一个接口有多个实现是很常见的，那么依赖注入时，如果类型是接口，如何准确选择实现呢？前文介绍了五种注解，用于通过配置项、profile等手段选择注入接口的实现类，面对复杂多变的业务场景，有时候仅靠这两种手段是不够的，最好是有更自由灵活的方式来选择bean，这就是本篇的内容，通过注解、编码等更多方式选择bean
本篇涉及的选择bean的手段有以下四种：
修饰符匹配
Named注解的属性匹配
根据优先级选择
写代码选择
关于修饰符匹配
为了说明修饰符匹配，先来看一个注解Default，其源码如下
@Target({ TYPE, METHOD, PARAMETER, FIELD })
@Retention(RUNTIME)
@Documented
@Qualifier
public @interface Default {
    public static final class Literal extends AnnotationLiteral<Default> implements Default {
    	public static final Literal INSTANCE = new Literal();
			private static final long serialVersionUID = 1L;
    }
}
1
2
3
4
5
6
7
8
9
10
Default的源码在这里不重要，关键是它被注解Qualifier修饰了，这种被Qualifier修饰的注解，咱们姑且称之为Qualifier修饰符
如果咱们新建一个注解，也用Qualifier来修饰，如下所示，这个MyQualifier也是个Qualifier修饰符
@Qualifier
@Retention(RUNTIME)
@Target({TYPE, METHOD, FIELD, PARAMETER})
public @interface MyQualifier {
    @Nonbinding String value();
}
1
2
3
4
5
6
在quarkus容器中的每一个bean都应该有一个Qualifier修饰符在修饰，如下图红框，如果没有，就会被quarkus添加Default注解

依赖注入时，直接用Qualifier修饰符修饰注入对象，这样quarkus就会去寻找被这个Qualifier修饰符修饰的bean，找到就注入（找不到报错，找到多个也报错，错误逻辑和之前的一样）
所以用修饰符匹配来选择bean的实现类，一共分三步：
假设有名为HelloQualifier的接口，有三个实现类：HelloQualifierA、HelloQualifierB、HelloQualifierC，业务需求是使用HelloQualifierA
第一步：自定义一个注解，假设名为MyQualifier，此注解要被Qualifier修饰
第二步：用MyQualifier修饰HelloQualifierA
第三步：在业务代码的注入点，用MyQualifier修饰HelloQualifier类型的成员变量，这样成员变量就会被注入HelloQualifierA实例
仅凭文字描述，很难把信息准确传递给读者（毕竟欣宸文化水平极其有限），还是写代码实现上述场景吧，聪明的您一看就懂
编码演示修饰符匹配：准备工作
先按照前面的假设将接口和实现类准备好，造成一个接口有多个实现bean的事实，然后，再用修饰符匹配来准确选定bean

首先是接口HelloQualifier，如下所示

package com.bolingcavalry.service;

public interface HelloQualifier {
    String hello();
}
1
2
3
4
5
实现类HelloQualifierA，返回自己的类名
package com.bolingcavalry.service.impl;

import com.bolingcavalry.service.HelloQualifier;
import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloQualifierA implements HelloQualifier {
    @Override
    public String hello() {
        return this.getClass().getSimpleName();
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
实现类HelloQualifierB、HelloQualifierC的代码和上面的HelloQualifierA相同，都是返回自己类名，就不贴出来了
关于使用HelloQualifier类型bean的代码，咱们就在单元测试类中注入吧，如下所示：
package com.bolingcavalry;

import com.bolingcavalry.service.HelloQualifier;
import com.bolingcavalry.service.impl.HelloQualifierA;
import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import javax.inject.Inject;

@QuarkusTest
public class QualifierTest {

    @Inject
    HelloQualifier helloQualifier;

    @Test
    public void testQualifier() {
        Assertions.assertEquals(HelloQualifierA.class.getSimpleName(),
                helloQualifier.hello());
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
上面的代码中，成员变量helloQualifier的类型是HelloQualifier，quarkus的bean容器中，HelloQualifierA、HelloQualifierB、HelloQualifierC等三个bean都符合注入要求，此时如果执行单元测试，应该会报错：同一个接口多个实现bean的问题
执行单元测试，如下图，黄框中给出了两个线索：第一，错误原因是注入时发现同一个接口有多个实现bean，第二，这些bean都是用Default修饰的，然后是绿框，里面将所有实现bean列出来，方便开发者定位问题


现在准备工作完成了，来看如何用修饰符匹配解决问题：在注入点准确注入HelloQualifierA类型实例
编码演示修饰符匹配：实现匹配
使用修饰符匹配，继续按照前面总结的三步走
第一步：自定义一个注解，名为MyQualifier，此注解要被Qualifier修饰
package com.bolingcavalry.annonation;

import javax.enterprise.util.Nonbinding;
import javax.inject.Qualifier;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import static java.lang.annotation.ElementType.*;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

@Qualifier
@Retention(RUNTIME)
@Target({TYPE, METHOD, FIELD, PARAMETER})
public @interface MyQualifier {
    @Nonbinding String value();
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
第二步：用MyQualifier修饰HelloQualifierA，下图红框是新增的代码


第三步：在业务代码的注入点，用MyQualifier修饰HelloQualifier类型的成员变量，下图红框是新增的代码


改动完成了，再次执行单元测试，顺利通过



修饰符匹配要注意的地方
修饰符匹配的逻辑非常简单：bean定义和bean注入的地方用同一个修饰符即可，使用中有三个地方要注意
在注入bean的地方，如果有了Qualifier修饰符，可以把@Inject省略不写了
在定义bean的地方，如果没有Qualifier修饰符去修饰bean，quarkus会默认添加Default
在注入bean的地方，如果没有Qualifier修饰符去修饰bean，quarkus会默认添加Default
关于默认的@Default
回头看刚才的代码，如果保留HelloQualifierA的MyQualifier修饰，但是删除QualifierTest的成员变量helloQualifier的MyQualifier修饰，会发生什么呢？咱们来分析一下：

首先，QualifierTest的成员变量helloQualifier会被quarkus默认添加Default修饰

其次，HelloQualifierB和HelloQualifierC都会被quarkus默认添加Default修饰

所以，注入helloQualifier的时候，quarkus去找Default修饰的bean，结果找到了两个：HelloQualifierB和HelloQualifierC，因此启动会失败

您可以自行验证结果是否和预期一致

看到这里，您应该掌握了修饰符匹配的用法，也应该发现其不便之处：要新增注解，这样下去随着业务发展，注解会越来越多，有没有什么方法来解决这个问题呢？

方法是有的，就是接下来要看的Named注解

Named注解的属性匹配
Named注解的功能与前面的Qualifier修饰符是一样的，其特殊之处在于通过注解属性来匹配修饰bean和注入bean

以刚才的业务代码为例来演示Named注解，修改HelloQualifierA，如下图红框，将@MyQualifier(“”)换成@Named(“A”)，重点关注Named注解的属性值，这里等于A


接下来修改注入处的代码，如下图红框，在注入位置也用@Named(“A”)来修饰，和bean定义处的一模一样


如此，bean定义和bean注入的两个地方，通过Named注解的属性完成了匹配，至于单元测试您可以自行验证，这里就不赘述了

至此，详细您已经知道了Named注解的作用：功能与前面的Qualifier修饰符一样，不过bean的定义和注入处的匹配逻辑是Named注解的属性值

以上就是修饰符匹配的全部内容

根据优先级选择
使用优先级来选择注入是一种简洁的方式，其核心是用Alternative和Priority两个注解修饰所有备选bean，然后用Priority的属性值（int型）作为优先级，该值越大代表优先级越高

在注入位置，quarkus会选择优先级最高的bean注入

接下来编码演示

新增演示用的接口HelloPriority.java

public interface HelloPriority {
    String hello();
}
1
2
3
HelloPriority的第一个实现类HelloPriorityA.java，注意它的两个注解Alternative和Priority，前者表明这是个可供选择的bean，后者表明了它的优先级，数字1001用于和其他bean的优先级比较，数字越大优先级越高
@ApplicationScoped
@Alternative
@Priority(1001)
public class HelloPriorityA implements HelloPriority {
    @Override
    public String hello() {
        return this.getClass().getSimpleName();
    }
}
1
2
3
4
5
6
7
8
9
HelloPriority的第二个实现类HelloPriorityB，可见Priority属性值是1002，代表选择的时候优先级比HelloPriorityA更高
@ApplicationScoped
@Alternative
@Priority(1002)
public class HelloPriorityB implements HelloPriority {
    @Override
    public String hello() {
        return this.getClass().getSimpleName();
    }
}
1
2
3
4
5
6
7
8
9
HelloPriority的第二个实现类HelloPriorityC，可见Priority属性值是1003，代表选择的时候优先级比HelloPriorityA和HelloPriorityB更高
@ApplicationScoped
@Alternative
@Priority(1003)
public class HelloPriorityC implements HelloPriority {
    @Override
    public String hello() {
        return this.getClass().getSimpleName();
    }
}
1
2
3
4
5
6
7
8
9
接下来是单元测试，验证注入的bean是否符合预期，理论上注入的应该是优先级最高的HelloPriorityC
@QuarkusTest
public class PriorityTest {

    @Inject
    HelloPriority helloPriority;

    @Test
    public void testSelectHelloInstanceA() {
        Assertions.assertEquals(HelloPriorityC.class.getSimpleName(),
                                helloPriority.hello());
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
单元测试结果如下，符合预期


以上就是优先级选择bean的操作，如果这还不够用，那就祭出最后一招：写代码选择bean
写代码选择bean
如果不用修饰符匹配，再回到最初的问题：有三个bean都实现了同一个接口，应该如何注入？
在注入bean的位置，如果用Instance<T>来接收注入，就可以拿到T类型的所有bean，然后在代码中随心所欲的使用这些bean
新增演示用的接口HelloInstance.java
package com.bolingcavalry.service;

public interface HelloInstance {
    String hello();
}
1
2
3
4
5
HelloInstance的第一个实现类HelloInstanceA.java
package com.bolingcavalry.service.impl;

import com.bolingcavalry.service.HelloInstance;
import javax.enterprise.context.ApplicationScoped;

@ApplicationScoped
public class HelloInstanceA implements HelloInstance {
    @Override
    public String hello() {
        return this.getClass().getSimpleName();
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
HelloInstance的另外两个实现类HelloInstanceB、HelloInstanceC，代码与HelloInstanceA一样，就不贴出来了
接下来的单元测试类演示了如何使用Instance接受注入，以及业务代码如何使用指定的实现类bean，可见select(Class).get()是关键，select方法指定了实现类，然后get取出该实例
package com.bolingcavalry;

import com.bolingcavalry.service.HelloInstance;
import com.bolingcavalry.service.impl.HelloInstanceA;
import com.bolingcavalry.service.impl.HelloInstanceB;
import io.quarkus.test.junit.QuarkusTest;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import javax.enterprise.inject.Instance;
import javax.inject.Inject;

@QuarkusTest
public class InstanceTest {

    @Inject
    Instance<HelloInstance> instance;

    @Test
    public void testSelectHelloInstanceA() {
        Class<HelloInstanceA> clazz = HelloInstanceA.class;

        Assertions.assertEquals(clazz.getSimpleName(),
                instance.select(clazz).get().hello());
    }

    @Test
    public void testSelectHelloInstanceB() {
        Class<HelloInstanceB> clazz = HelloInstanceB.class;

        Assertions.assertEquals(clazz.getSimpleName(),
                instance.select(clazz).get().hello());
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
执行单元测试，顺利通过，符合预期


至此，连续两篇关于注入bean的方式全部验证完毕，如此丰富的手段，相信可以满足您日常开发的需要

你不孤单，欣宸原创一路相伴
Java系列
Spring系列
Docker系列
kubernetes系列
数据库+中间件系列
DevOps系列

程序员欣宸
已关注

2


1


1

专栏目录
quarkus依赖注入之十：学习和改变bean懒加载规则
程序员欣宸的博客
 166
为了降低启动时间，quarkus下的常规作用域bean遵循懒加载规则，但有时我们希望bean可以更早实例化，本篇，咱们一起来了解懒加载规则和改变规则的方法
rdi:具有React能力的依赖注入库，由Reactor提供支持
03-11
RDI 具有React功能的Dependency Injection库，由Reactor提供支持。 什么是RDI？ RDI代表响应式依赖注入。 它是一个库，允许通过定义它们的依赖关系来管理应用程序中存在的bean，服务和任何类型的Java对象的实例化。 RDI的特殊性在于它完全支持所定义的React式编程范例，从而可以通过反压处理实现高效且无阻塞的应用程序。 您可以在查看完整的RDI文档。 依赖注入简而言之 依赖项注入的原理并不新鲜。 它的工作方式类似于，以及具有Quarkus或JSF这样的机制的其他一些框架。 但是，与这些示例不同，RDI并不是完整的框架，而是100％专注于依赖项注入的轻量级库。 为了说明依赖注入的工作方式，请考虑以下基本类： public class A { private final B b; public A ( B b ) {
评论1条写评论
_Schilings
热评
上面的“修饰符匹配要注意的地方”，第二点和第三点重复了
multi-module-gradle-quarkus-singleton-objectmapper-poc:关于gradle多模块quarkus设置和cdi bean配置的快速而又肮脏的POC
05-25
Bean配置 它提供2个不同的单例ObjectMapper实例。 参见master-module/BeansConfiguration 为了验证它们是否为单例，请在module-1运行测试并检查打印的输出。 多模块设置 一个空的父模块，其中包含3个相互依赖的模块。 强调： 父母中的常见依赖关系建立了gradle 动态模块包含/排除（请参阅activeClientModule的用法） 检查将bean从一个模块提供给另一个模块所需的空beans.xml用法 基于构造函数的注入 检查2个服务类，以及它们如何通过构造函数注入获得依赖。
quarkus依赖注入之三：用注解选择注入bean
程序员欣宸的博客
 426
注入点的类型，如果有多个bean都是该类型的实现，应该如何选择呢？本篇尝试通过多种注解来选择
quarkus依赖注入之八：装饰器（Decorator）
程序员欣宸的博客
 558
quarkus框架提供了对装饰器模式的支持，本篇就来体验它的能力和适用场景
quarkus依赖注入之一：创建bean
程序员欣宸的博客
 522
《quarkus依赖注入》系列聚焦quarkus框架下bean的创建、使用、配置等场景的知识点，本文是系列的开篇，介绍CDI，实战创建bean
quarkus依赖注入之二：bean的作用域
程序员欣宸的博客
 890
quarkus中的bean，它们的作用域是如何设置的？作用范围又分别是什么？本文给出答案
quarkus依赖注入之九：bean读写锁
程序员欣宸的博客
 184
quarkus以bean实例为对象提供读写锁，请随本文来体验此锁如何解决多线程同步问题
quarkus依赖注入之六：发布和消费事件
程序员欣宸的博客
 1485
quarkus框架下，进程内同步、异步发布和消费事件的操作
Spring获取注入Bean
weixin_48314739的博客
 200
package com.clicks.config; import org.springframework.beans.BeansException; import org.springframework.context.ApplicationContext; import org.springframework.context.ApplicationContextAware; import org.springframework.stereotype.Component; /** * @author
Quarkus框架入门之二：依赖控制
z69183787的专栏
 867
前言 Spring框架最开始被我熟知就是AOP和IOC，其中IOC在开发过程中更是被广泛使用，如果切换到一个新的框架没有了依赖注入和控制反转，那么可以说一夜回到解放前了。那么，Quarkus框架中有没有对应的功能呢？ 当然也有，Quarkus基于CDI规范提供了依赖注入的相关功能，本文将进行简单介绍。 CDI-Contexts and Dependency Injection 简单介绍 CDI(Contexts and Dependency Injection)，即上下文依赖注入，是J2EE6发布的
Spring 4.2新特性-对java8默认方法(default method)定义Bean的支持
汪云飞记录本
 417
2.1 默认方法(default method) java8引入了一个default medthod; 用来扩展已有的接口,在对已有接口的使用不产生任何影响的情况下,添加扩展 使用default关键字 Spring 4.2支持加载在默认方法里声明的bean 2.2 将要被声明成bean的类 public class DemoService { public...
微服务框架：如果不用Spring Boot，还可以选择谁
琦彦
 3266
前言 在 Java 和 Kotlin 中, 除了使用Spring Boot创建微服务外，还有很多其他的替代方案。 名称 版本 发布时间 开发商 GitHub Helidon SE 1.4.1 2019年 甲骨文 链接 Ktor 1.3.0 2018年 JetBrains 链接 Micronaut 1.2.9 2018年 Object Computing 链接 Quarkus 1.2.0
quarkus依赖注入之五：拦截器(Interceptor)
程序员欣宸的博客
 608
掌握quarkus框架下如何开发和使用拦截器
quarkus依赖注入之七：生命周期回调
程序员欣宸的博客
 263
介绍quarkus的bean生命周期回调方式，在bean的不同阶段（如创建、销毁）执行自定义方法
quarkus依赖注入之十一：拦截器高级特性上篇(属性设置和重复使用)
程序员欣宸的博客
 527
体验拦截器的高级功能，设置拦截器属性并在实现中使用此属性，这样同一个拦截器在不同位置可以发布不同效果，更可以将同一个拦截器设置不同属性，叠加使用在同一个地方
quarkus依赖注入之十三：其他重要知识点大串讲(终篇)
程序员欣宸的博客
 336
《quarkus依赖注入》系列的终篇，将剩下的重要知识点内容串起来一网打尽，完美结束依赖注入的深度历险
Quarkus框架入门之二：依赖注入
weixin_30435261的博客
 651
　　前言　　　　Spring框架最开始被我熟知就是AOP和IOC，其中IOC在开发过程中更是被广泛使用，如果切换到一个新的框架没有了依赖注入和控制反转，那么可以说一夜回到解放前了。那么，Quarkus框架中有没有对应的功能呢？ 当然也有，Quarkus基于CDI规范提供了依赖注入的相关功能，本文将进行简单介绍。　　　　CDI-Contexts and Dependency Injecti...
quarkus 整合mybatis puls注入兼容解决方案
最新发布
qq_56049919的博客
 244
Quarkus 整合mybatis puls 遇到的一些小问题
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
90%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 19);
INSERT INTO public.article_content VALUES (3, '2022-08-26 23:39:05.835', false, '2022-09-15 10:41:12.562', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', 'JUnit5学习之七：参数化测试(Parameterized Tests)进阶

程序员欣宸

于 2020-10-08 10:08:48 发布

3271
 收藏 8
分类专栏： java服务端 文章标签： java 单元测试 junit
版权

java服务端
专栏收录该内容
175 篇文章46 订阅
订阅专栏
欢迎访问我的GitHub
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos

关于《JUnit5学习》系列
《JUnit5学习》系列旨在通过实战提升SpringBoot环境下的单元测试技能，一共八篇文章，链接如下：

基本操作
Assumptions类
Assertions类
按条件执行
标签(Tag)和自定义注解
参数化测试(Parameterized Tests)基础
参数化测试(Parameterized Tests)进阶
综合进阶（终篇）
本篇概览
本文是《JUnit5学习》系列的第七篇，前文咱们对JUnit5的参数化测试(Parameterized Tests)有了基本了解，可以使用各种数据源控制测试方法多次执行，今天要在此基础上更加深入，掌握参数化测试的一些高级功能，解决实际问题；
本文由以下章节组成：
自定义数据源
参数转换
多字段聚合
多字段转对象
测试执行名称自定义
源码下载
如果您不想编码，可以在GitHub下载所有源码，地址和链接信息如下表所示：
名称	链接	备注
项目主页	https://github.com/zq2599/blog_demos	该项目在GitHub上的主页
git仓库地址(https)	https://github.com/zq2599/blog_demos.git	该项目源码的仓库地址，https协议
git仓库地址(ssh)	git@github.com:zq2599/blog_demos.git	该项目源码的仓库地址，ssh协议
这个git项目中有多个文件夹，本章的应用在junitpractice文件夹下，如下图红框所示：


junitpractice是父子结构的工程，本篇的代码在parameterized子工程中，如下图：


自定义数据源
前文使用了很多种数据源，如果您对它们的各种限制不满意，想要做更彻底的个性化定制，可以开发ArgumentsProvider接口的实现类，并使用@ArgumentsSource指定；
举个例子，先开发ArgumentsProvider的实现类MyArgumentsProvider.java：
package com.bolingcavalry.parameterized.service.impl;

import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.ArgumentsProvider;
import java.util.stream.Stream;

public class MyArgumentsProvider implements ArgumentsProvider {

    @Override
    public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {
        return Stream.of("apple4", "banana4").map(Arguments::of);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
再给测试方法添加@ArgumentsSource，并指定MyArgumentsProvider：
    @Order(15)
    @DisplayName("ArgumentsProvider接口的实现类提供的数据作为入参")
    @ParameterizedTest
    @ArgumentsSource(MyArgumentsProvider.class)
    void argumentsSourceTest(String candidate) {
        log.info("argumentsSourceTest [{}]", candidate);
    }
1
2
3
4
5
6
7
执行结果如下：

参数转换
参数化测试的数据源和测试方法入参的数据类型必须要保持一致吗？其实JUnit5并没有严格要求，而事实上JUnit5是可以做一些自动或手动的类型转换的；
如下代码，数据源是int型数组，但测试方法的入参却是double：
    @Order(16)
    @DisplayName("int型自动转为double型入参")
    @ParameterizedTest
    @ValueSource(ints = { 1,2,3 })
    void argumentConversionTest(double candidate) {
        log.info("argumentConversionTest [{}]", candidate);
    }
1
2
3
4
5
6
7
执行结果如下，可见int型被转为double型传给测试方法（Widening Conversion）：


还可以指定转换器，以转换器的逻辑进行转换，下面这个例子就是将字符串转为LocalDate类型，关键是@JavaTimeConversionPattern：

    @Order(17)
    @DisplayName("string型，指定转换器，转为LocalDate型入参")
    @ParameterizedTest
    @ValueSource(strings = { "01.01.2017", "31.12.2017" })
    void argumentConversionWithConverterTest(
            @JavaTimeConversionPattern("dd.MM.yyyy") LocalDate candidate) {
        log.info("argumentConversionWithConverterTest [{}]", candidate);
    }
1
2
3
4
5
6
7
8
执行结果如下：

字段聚合(Argument Aggregation)
来思考一个问题：如果数据源的每条记录有多个字段，测试方法如何才能使用这些字段呢？

回顾刚才的@CsvSource示例，如下图，可见测试方法用两个入参对应CSV每条记录的两个字段，如下所示：


上述方式应对少量字段还可以，但如果CSV每条记录有很多字段，那测试方法岂不是要定义大量入参？这显然不合适，此时可以考虑JUnit5提供的字段聚合功能(Argument Aggregation)，也就是将CSV每条记录的所有字段都放入一个ArgumentsAccessor类型的对象中，测试方法只要声明ArgumentsAccessor类型作为入参，就能在方法内部取得CSV记录的所有字段，效果如下图，可见CSV字段实际上是保存在ArgumentsAccessor实例内部的一个Object数组中：


如下图，为了方便从ArgumentsAccessor实例获取数据，ArgumentsAccessor提供了获取各种类型的方法，您可以按实际情况选用：


下面的示例代码中，CSV数据源的每条记录有三个字段，而测试方法只有一个入参，类型是ArgumentsAccessor，在测试方法内部，可以用ArgumentsAccessor的getString、get等方法获取CSV记录的不同字段，例如arguments.getString(0)就是获取第一个字段，得到的结果是字符串类型，而arguments.get(2, Types.class)的意思是获取第二个字段，并且转成了Type.class类型：

    @Order(18)
    @DisplayName("CsvSource的多个字段聚合到ArgumentsAccessor实例")
    @ParameterizedTest
    @CsvSource({
            "Jane1, Doe1, BIG",
            "John1, Doe1, SMALL"
    })
    void argumentsAccessorTest(ArgumentsAccessor arguments) {
        Person person = new Person();
        person.setFirstName(arguments.getString(0));
        person.setLastName(arguments.getString(1));
        person.setType(arguments.get(2, Types.class));

        log.info("argumentsAccessorTest [{}]", person);
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
上述代码执行结果如下图，可见通过ArgumentsAccessor能够取得CSV数据的所有字段：

更优雅的聚合
前面的聚合解决了获取CSV数据多个字段的问题，但依然有瑕疵：从ArgumentsAccessor获取数据生成Person实例的代码写在了测试方法中，如下图红框所示，测试方法中应该只有单元测试的逻辑，而创建Person实例的代码放在这里显然并不合适：

针对上面的问题，JUnit5也给出了方案：通过注解的方式，指定一个从ArgumentsAccessor到Person的转换器，示例如下，可见测试方法的入参有个注解@AggregateWith，其值PersonAggregator.class就是从ArgumentsAccessor到Person的转换器，而入参已经从前面的ArgumentsAccessor变成了Person：
    @Order(19)
    @DisplayName("CsvSource的多个字段，通过指定聚合类转为Person实例")
    @ParameterizedTest
    @CsvSource({
            "Jane2, Doe2, SMALL",
            "John2, Doe2, UNKNOWN"
    })
    void customAggregatorTest(@AggregateWith(PersonAggregator.class) Person person) {
        log.info("customAggregatorTest [{}]", person);
    }
1
2
3
4
5
6
7
8
9
10
PersonAggregator是转换器类，需要实现ArgumentsAggregator接口，具体的实现代码很简单，也就是从ArgumentsAccessor示例获取字段创建Person对象的操作：
package com.bolingcavalry.parameterized.service.impl;

import org.junit.jupiter.api.extension.ParameterContext;
import org.junit.jupiter.params.aggregator.ArgumentsAccessor;
import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;
import org.junit.jupiter.params.aggregator.ArgumentsAggregator;

public class PersonAggregator implements ArgumentsAggregator {

    @Override
    public Object aggregateArguments(ArgumentsAccessor arguments, ParameterContext context) throws ArgumentsAggregationException {

        Person person = new Person();
        person.setFirstName(arguments.getString(0));
        person.setLastName(arguments.getString(1));
        person.setType(arguments.get(2, Types.class));

        return person;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
上述测试方法的执行结果如下：

进一步简化
回顾一下刚才用注解指定转换器的代码，如下图红框所示，您是否回忆起JUnit5支持自定义注解这一茬，咱们来把红框部分的代码再简化一下：

新建注解类CsvToPerson.java，代码如下，非常简单，就是把上图红框中的@AggregateWith(PersonAggregator.class)搬过来了：
package com.bolingcavalry.parameterized.service.impl;

import org.junit.jupiter.params.aggregator.AggregateWith;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.PARAMETER)
@AggregateWith(PersonAggregator.class)
public @interface CsvToPerson {
}
1
2
3
4
5
6
7
8
9
10
11
12
13
再来看看上图红框中的代码可以简化成什么样子，直接用@CsvToPerson就可以将ArgumentsAccessor转为Person对象了：
    @Order(20)
    @DisplayName("CsvSource的多个字段，通过指定聚合类转为Person实例(自定义注解)")
    @ParameterizedTest
    @CsvSource({
            "Jane3, Doe3, BIG",
            "John3, Doe3, UNKNOWN"
    })
    void customAggregatorAnnotationTest(@CsvToPerson Person person) {
        log.info("customAggregatorAnnotationTest [{}]", person);
    }
1
2
3
4
5
6
7
8
9
10
执行结果如下，可见和@AggregateWith(PersonAggregator.class)效果一致：

测试执行名称自定义
文章最后，咱们来看个轻松的知识点吧，如下图红框所示，每次执行测试方法，IDEA都会展示这次执行的序号和参数值：


其实上述红框中的内容格式也可以定制，格式模板就是@ParameterizedTest的name属性，修改后的测试方法完整代码如下，可见这里改成了中文描述信息：

    @Order(21)
    @DisplayName("CSV格式多条记录入参(自定义展示名称)")
    @ParameterizedTest(name = "序号 [{index}]，fruit参数 [{0}]，rank参数 [{1}]")
    @CsvSource({
            "apple3, 31",
            "banana3, 32",
            "''lemon3, lime3'', 0x3A"
    })
    void csvSourceWithCustomDisplayNameTest(String fruit, int rank) {
        log.info("csvSourceWithCustomDisplayNameTest, fruit [{}], rank [{}]", fruit, rank);
    }
1
2
3
4
5
6
7
8
9
10
11
执行结果如下：

至此，JUnit5的参数化测试(Parameterized)相关的知识点已经学习和实战完成了，掌握了这么强大的参数输入技术，咱们的单元测试的代码覆盖率和场景范围又可以进一步提升了；
欢迎关注公众号：程序员欣宸
微信搜索「程序员欣宸」，我是欣宸，期待与您一同畅游Java世界…

文章知识点与官方知识档案匹配，可进一步学习相关知识
Java技能树进阶任务Java问答57978 人正在系统学习中

程序员欣宸
已关注

3


8


1

专栏目录
junit5 入门系列教程-14-junit5 参数化测试(@ParameterizedTest)
 5万+
目录 目录 参数化测试 实例 需要 使用参数 源的参数(Sources of Arguments) @ValueSource 实例 @EnumSource @MethodSource 自动搜索 原始类型的流 多个参数 外部的静态工厂方法 @CsvSource @CsvFileSource @ArgumentsSource 参数转换 扩大转换(Widening Conversi...
Junit5中的参数化测试（Parameterized Tests）指南
爱穿格子裤的专栏
 3537
作为新一代的测试框架，Junit5中有很多大家喜欢的测试方案，个人认为最突出的就是能够进行参数化的测试（Parameterized Tests）。 简介 通常，会遇到这样的情况，同一个测试案例，改变的只是测试时候输入的参数不同。按照之前的做法，可能会是通过每个输入参数都写一个测试，或者将测试参数封装到集合中循环遍历执行测试。在新版的Junit5中，已经提供了一种更加优雅的方式来进行。 该特性允许我...
评论1条写评论
weixin_38038923
热评
感谢，这个csv到对象的转换好麻烦
JUnit 5 –参数化测试_dnc8371的博客
7-29
不管参数化测试如何,JUnit Jupiter都已经可以将参数注入测试方法中。 只要将每次调用中变化的参数排在首位,这可以与参数化测试结合使用: @ParameterizedTest @ValueSource(strings = {"Hello","JUnit"}) voidwithOtherParams(Stringword, ...
Junit5实现参数化测试_喵_不乖的博客_junit5 参数
6-26
Csv Source @CsvSource可实现多参数传参,允许您将参数列表表示为逗号分隔的值 @ParameterizedTest@CsvSource({"zhangsan,18","lisi,20","''rose,jack'',16"})voidtestCVSSource(String name,Integer age){System.out.println("name:"...
JavaEE_Junit_Junit对Spring注入的Service层的测试
热门推荐
迎难而上
 1万+
今天博主遇到一个问题，在Serivce层利用POI导出Excel表格，博主想对这个方法进行测试， 但由于mapper 是注入的， 直接用 main 方法并不成功，报错和出现的问题如下图：   主要原因：Mapper是调用时候注入的，所以此时Mapper为null 这时候我们可以使用junit 对service进行测试即可解决问题： 博主假设大家已经
Spring Boot 单元测试（二）参数化测试
q1472750149的博客
 937
Spring Boot 使用 JUnit5 提供的@ParameterizedTest注解实现参数化测试，同时要配合其它注解完成参数源配置。 一、自定义测试执行名称 @ParameterizedTest默认的测试执行名称格式为[序号]参数1=XXX, 参数2=YYY...，可以通过修改name属性自定义测试执行名称。 @ParameterizedTest(name = "第 {index} 次测试，参数：{0}") @ValueSource(ints = { 1, 10, 100 }) public
参数化测试 junit_JUnit 5 –参数化测试_dnc8371的博客
9-9
不管参数化测试如何,JUnit Jupiter都已经可以将参数注入测试方法中。 只要将每次调用中变化的参数排在首位,这可以与参数化测试结合使用: @ParameterizedTest @ValueSource(strings = {"Hello","JUnit"}) voidwithOtherParams(String word,...
JUnit 5参数化测试_cyan20115的博客
7-29
1.1用于单参数测试。 ValueSourceTest.java packagecom.mkyong.params; importorg.junit.jupiter.params.ParameterizedTest; importorg.junit.jupiter.params.provider.ValueSource; importstaticorg.junit.jupiter.api.Assertions.assertTrue; ...
Junit5参数化测试 - 自定义Json文件源
最新发布
罗小爬的技术宝书
 1061
自定义Junit5参数化测试来源@JsonFileSource及使用示例
JUnit5学习之七：参数化测试(Parameterized Tests)进阶，java面试项目描述
m0_64867003的博客
 105
自定义数据源 前文使用了很多种数据源，如果您对它们的各种限制不满意，想要做更彻底的个性化定制，可以开发ArgumentsProvider接口的实现类，并使用@ArgumentsSource指定； 举个例子，先开发ArgumentsProvider的实现类MyArgumentsProvider.java： package com.bolingcavalry.parameterized.service.impl; import org.junit.jupiter.api.extension.Exte
单元测试之JUnit 5 参数化测试使用手册_dearfulan的博...
5-28
Junit 5的测试执行器会执行上述测试用例,然后isOdd方法会被执行6次,每次从@ValueSource的整型数组里拿出一个参数作为isOdd方法的入参。 从这个示例我们可以看出,执行参数化测试需要2个条件:
JUnit5学习之六：参数化测试(Parameterized Tests)基础
m0_64867688的博客
 760
| :-- | :-- | :-- | | 项目主页 | https://github.com/zq2599/blog_demos | 该项目在GitHub上的主页 | | git仓库地址(https) | https://github.com/zq2599/blog_demos.git | 该项目源码的仓库地址，https协议 | | git仓库地址(ssh) | git@github.com:zq2599/blog_demos.git | 该项目源码的仓库地址，ssh协议 | 这个git项目中有多个文
junit 内部类测试_JUnit5学习之七：参数化测试进阶
weixin_39934302的博客
 31
欢迎访问我的GitHubhttps://github.com/zq2599/blog_demos内容：所有原创文章分类和汇总，及配套源码，涉及Java、Docker、Kubernetes、DevOPS等；本篇概览本文是《JUnit5学习》系列的第七篇，前文《Junit5学习之六：参数化测试基础 》咱们对JUnit5的参数化测试(Parameterized Tests)有了基本了解，可以使用各种数据...
JUnit5学习之六：参数化测试(Parameterized Tests)基础，java架构师的简历模板
m0_63174811的博客
 279
Assertions类 按条件执行 标签(Tag)和自定义注解 参数化测试(Parameterized Tests)基础 参数化测试(Parameterized Tests)进阶 综合进阶（终篇） 本篇概览 本文是《JUnit5学习》系列的第六篇，一起来实战强大参数化测试(Parameterized Tests)，即多次执行同一个测试方法，每次使用不同的参数； 由于参数化测试功能强大，内容也比前几篇的知识点多，为了方便大家阅读和实践，这里分为《基础》和《进阶》两篇来介绍，..
JUnit5参数化测试的几种方式
自动化代码美学
 264
参数化测试一直是津津乐道的话题，我们都知道JMeter有四种参数化方式：用户自定义变量、用户参数、CSV文件、函数助手，那么JUnit5有哪些参数化测试的方式呢？ 依赖 JUnit5需要添加junit-jupiter-params依赖才能使用参数化： <dependency> <groupId>org.junit.jupiter</groupId> ...
python get argument_Python-Web框架-get_argument方法
weixin_39729272的博客
 414
Python-Web框架-get_argument方法目录概览1.使用get_argument获取url query参数2.为何get_argument不区分POST与GET？3.get_argument返回unicode数据类型的问题1.使用get_argument获取url query参数Tornado的每个请求处理程序，我们叫做handler，handler里可以自定义自己的处理程序，其实也...
Junit5中实现参数化测试
HD243608836的博客
 2259
从Junit5开始，对参数化测试支持进行了大幅度的改进和提升。下面我们就一起来详细看看Junit5参数化测试的方法。 部署和依赖 和Junit4相比，Junit5框架更多在向测试平台演进。其核心组成也从以前的一个Junit的jar包更换成由多个模块组成。本文所需要依赖模块如下： junit-jupiter-engine: Junit的核心测试引擎 junit-jupiter-params:...
JUnit5编写基本测试
自动化代码美学
 248
JUnit5的测试不是通过名称，而是通过注解来标识的。 测试类与方法 Test Class：测试类，必须包含至少一个test方法，包括： 最外层的class static member class @Nested class Test Method：测试方法，包括： @Test @RepeatedTest @ParameterizedTest @TestFactory @TestTempl...
JUnit5学习之八：综合进阶（终篇）
程序员欣宸的博客
 1313
将JUnit5的一些常用高级功能以实战的形式展现
JUnit4 参数化测试（ Parameterized tests）
明明如月的技术博客
 1万+
@RunWith　　当类被@RunWith注解修饰，或者类继承了一个被该注解修饰的类，JUnit将会使用这个注解所指明的运行器（runner）来运行测试，而不使用JUnit默认的运行器。　　要进行参数化测试，需要在类上面指定如下的运行器：@RunWith (Parameterized.class)然后，在提供数据的方法上加上一个@Parameters注解，这个方法必须是静态static的，并且返回...
JUnit5学习之一：基本操作
程序员欣宸的博客
 6911
《JUnit5学习》是欣宸的又一个实战主题的Java技术栈原创系列，欢迎大家一起来学习和掌握最新的单元测试技术
JUnit5学习之三：Assertions类
程序员欣宸的博客
 3296
断言是单元测试中最常用的测试手段，本文就来学习和操作常用的断言功能
JUnit5学习之二：Assumptions类
程序员欣宸的博客
 1831
学习Assumptions类的用法
JUnit5学习之四：按条件执行
程序员欣宸的博客
 1741
学习和实战如何设置单元测试的执行条件
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 'JUnit5学习之七：参数化测试(Parameterized Tests)进阶

程序员欣宸

于 2020-10-08 10:08:48 发布

3271
 收藏 8
分类专栏： java服务端 文章标签： java 单元测试 junit
版权

java服务端
专栏收录该内容
175 篇文章46 订阅
订阅专栏
欢迎访问我的GitHub
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos

关于《JUnit5学习》系列
《JUnit5学习》系列旨在通过实战提升SpringBoot环境下的单元测试技能，一共八篇文章，链接如下：

基本操作
Assumptions类
Assertions类
按条件执行
标签(Tag)和自定义注解
参数化测试(Parameterized Tests)基础
参数化测试(Parameterized Tests)进阶
综合进阶（终篇）
本篇概览
本文是《JUnit5学习》系列的第七篇，前文咱们对JUnit5的参数化测试(Parameterized Tests)有了基本了解，可以使用各种数据源控制测试方法多次执行，今天要在此基础上更加深入，掌握参数化测试的一些高级功能，解决实际问题；
本文由以下章节组成：
自定义数据源
参数转换
多字段聚合
多字段转对象
测试执行名称自定义
源码下载
如果您不想编码，可以在GitHub下载所有源码，地址和链接信息如下表所示：
名称	链接	备注
项目主页	https://github.com/zq2599/blog_demos	该项目在GitHub上的主页
git仓库地址(https)	https://github.com/zq2599/blog_demos.git	该项目源码的仓库地址，https协议
git仓库地址(ssh)	git@github.com:zq2599/blog_demos.git	该项目源码的仓库地址，ssh协议
这个git项目中有多个文件夹，本章的应用在junitpractice文件夹下，如下图红框所示：


junitpractice是父子结构的工程，本篇的代码在parameterized子工程中，如下图：


自定义数据源
前文使用了很多种数据源，如果您对它们的各种限制不满意，想要做更彻底的个性化定制，可以开发ArgumentsProvider接口的实现类，并使用@ArgumentsSource指定；
举个例子，先开发ArgumentsProvider的实现类MyArgumentsProvider.java：
package com.bolingcavalry.parameterized.service.impl;

import org.junit.jupiter.api.extension.ExtensionContext;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.ArgumentsProvider;
import java.util.stream.Stream;

public class MyArgumentsProvider implements ArgumentsProvider {

    @Override
    public Stream<? extends Arguments> provideArguments(ExtensionContext context) throws Exception {
        return Stream.of("apple4", "banana4").map(Arguments::of);
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
再给测试方法添加@ArgumentsSource，并指定MyArgumentsProvider：
    @Order(15)
    @DisplayName("ArgumentsProvider接口的实现类提供的数据作为入参")
    @ParameterizedTest
    @ArgumentsSource(MyArgumentsProvider.class)
    void argumentsSourceTest(String candidate) {
        log.info("argumentsSourceTest [{}]", candidate);
    }
1
2
3
4
5
6
7
执行结果如下：

参数转换
参数化测试的数据源和测试方法入参的数据类型必须要保持一致吗？其实JUnit5并没有严格要求，而事实上JUnit5是可以做一些自动或手动的类型转换的；
如下代码，数据源是int型数组，但测试方法的入参却是double：
    @Order(16)
    @DisplayName("int型自动转为double型入参")
    @ParameterizedTest
    @ValueSource(ints = { 1,2,3 })
    void argumentConversionTest(double candidate) {
        log.info("argumentConversionTest [{}]", candidate);
    }
1
2
3
4
5
6
7
执行结果如下，可见int型被转为double型传给测试方法（Widening Conversion）：


还可以指定转换器，以转换器的逻辑进行转换，下面这个例子就是将字符串转为LocalDate类型，关键是@JavaTimeConversionPattern：

    @Order(17)
    @DisplayName("string型，指定转换器，转为LocalDate型入参")
    @ParameterizedTest
    @ValueSource(strings = { "01.01.2017", "31.12.2017" })
    void argumentConversionWithConverterTest(
            @JavaTimeConversionPattern("dd.MM.yyyy") LocalDate candidate) {
        log.info("argumentConversionWithConverterTest [{}]", candidate);
    }
1
2
3
4
5
6
7
8
执行结果如下：

字段聚合(Argument Aggregation)
来思考一个问题：如果数据源的每条记录有多个字段，测试方法如何才能使用这些字段呢？

回顾刚才的@CsvSource示例，如下图，可见测试方法用两个入参对应CSV每条记录的两个字段，如下所示：


上述方式应对少量字段还可以，但如果CSV每条记录有很多字段，那测试方法岂不是要定义大量入参？这显然不合适，此时可以考虑JUnit5提供的字段聚合功能(Argument Aggregation)，也就是将CSV每条记录的所有字段都放入一个ArgumentsAccessor类型的对象中，测试方法只要声明ArgumentsAccessor类型作为入参，就能在方法内部取得CSV记录的所有字段，效果如下图，可见CSV字段实际上是保存在ArgumentsAccessor实例内部的一个Object数组中：


如下图，为了方便从ArgumentsAccessor实例获取数据，ArgumentsAccessor提供了获取各种类型的方法，您可以按实际情况选用：


下面的示例代码中，CSV数据源的每条记录有三个字段，而测试方法只有一个入参，类型是ArgumentsAccessor，在测试方法内部，可以用ArgumentsAccessor的getString、get等方法获取CSV记录的不同字段，例如arguments.getString(0)就是获取第一个字段，得到的结果是字符串类型，而arguments.get(2, Types.class)的意思是获取第二个字段，并且转成了Type.class类型：

    @Order(18)
    @DisplayName("CsvSource的多个字段聚合到ArgumentsAccessor实例")
    @ParameterizedTest
    @CsvSource({
            "Jane1, Doe1, BIG",
            "John1, Doe1, SMALL"
    })
    void argumentsAccessorTest(ArgumentsAccessor arguments) {
        Person person = new Person();
        person.setFirstName(arguments.getString(0));
        person.setLastName(arguments.getString(1));
        person.setType(arguments.get(2, Types.class));

        log.info("argumentsAccessorTest [{}]", person);
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
上述代码执行结果如下图，可见通过ArgumentsAccessor能够取得CSV数据的所有字段：

更优雅的聚合
前面的聚合解决了获取CSV数据多个字段的问题，但依然有瑕疵：从ArgumentsAccessor获取数据生成Person实例的代码写在了测试方法中，如下图红框所示，测试方法中应该只有单元测试的逻辑，而创建Person实例的代码放在这里显然并不合适：

针对上面的问题，JUnit5也给出了方案：通过注解的方式，指定一个从ArgumentsAccessor到Person的转换器，示例如下，可见测试方法的入参有个注解@AggregateWith，其值PersonAggregator.class就是从ArgumentsAccessor到Person的转换器，而入参已经从前面的ArgumentsAccessor变成了Person：
    @Order(19)
    @DisplayName("CsvSource的多个字段，通过指定聚合类转为Person实例")
    @ParameterizedTest
    @CsvSource({
            "Jane2, Doe2, SMALL",
            "John2, Doe2, UNKNOWN"
    })
    void customAggregatorTest(@AggregateWith(PersonAggregator.class) Person person) {
        log.info("customAggregatorTest [{}]", person);
    }
1
2
3
4
5
6
7
8
9
10
PersonAggregator是转换器类，需要实现ArgumentsAggregator接口，具体的实现代码很简单，也就是从ArgumentsAccessor示例获取字段创建Person对象的操作：
package com.bolingcavalry.parameterized.service.impl;

import org.junit.jupiter.api.extension.ParameterContext;
import org.junit.jupiter.params.aggregator.ArgumentsAccessor;
import org.junit.jupiter.params.aggregator.ArgumentsAggregationException;
import org.junit.jupiter.params.aggregator.ArgumentsAggregator;

public class PersonAggregator implements ArgumentsAggregator {

    @Override
    public Object aggregateArguments(ArgumentsAccessor arguments, ParameterContext context) throws ArgumentsAggregationException {

        Person person = new Person();
        person.setFirstName(arguments.getString(0));
        person.setLastName(arguments.getString(1));
        person.setType(arguments.get(2, Types.class));

        return person;
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
上述测试方法的执行结果如下：

进一步简化
回顾一下刚才用注解指定转换器的代码，如下图红框所示，您是否回忆起JUnit5支持自定义注解这一茬，咱们来把红框部分的代码再简化一下：

新建注解类CsvToPerson.java，代码如下，非常简单，就是把上图红框中的@AggregateWith(PersonAggregator.class)搬过来了：
package com.bolingcavalry.parameterized.service.impl;

import org.junit.jupiter.params.aggregator.AggregateWith;
import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.PARAMETER)
@AggregateWith(PersonAggregator.class)
public @interface CsvToPerson {
}
1
2
3
4
5
6
7
8
9
10
11
12
13
再来看看上图红框中的代码可以简化成什么样子，直接用@CsvToPerson就可以将ArgumentsAccessor转为Person对象了：
    @Order(20)
    @DisplayName("CsvSource的多个字段，通过指定聚合类转为Person实例(自定义注解)")
    @ParameterizedTest
    @CsvSource({
            "Jane3, Doe3, BIG",
            "John3, Doe3, UNKNOWN"
    })
    void customAggregatorAnnotationTest(@CsvToPerson Person person) {
        log.info("customAggregatorAnnotationTest [{}]", person);
    }
1
2
3
4
5
6
7
8
9
10
执行结果如下，可见和@AggregateWith(PersonAggregator.class)效果一致：

测试执行名称自定义
文章最后，咱们来看个轻松的知识点吧，如下图红框所示，每次执行测试方法，IDEA都会展示这次执行的序号和参数值：


其实上述红框中的内容格式也可以定制，格式模板就是@ParameterizedTest的name属性，修改后的测试方法完整代码如下，可见这里改成了中文描述信息：

    @Order(21)
    @DisplayName("CSV格式多条记录入参(自定义展示名称)")
    @ParameterizedTest(name = "序号 [{index}]，fruit参数 [{0}]，rank参数 [{1}]")
    @CsvSource({
            "apple3, 31",
            "banana3, 32",
            "''lemon3, lime3'', 0x3A"
    })
    void csvSourceWithCustomDisplayNameTest(String fruit, int rank) {
        log.info("csvSourceWithCustomDisplayNameTest, fruit [{}], rank [{}]", fruit, rank);
    }
1
2
3
4
5
6
7
8
9
10
11
执行结果如下：

至此，JUnit5的参数化测试(Parameterized)相关的知识点已经学习和实战完成了，掌握了这么强大的参数输入技术，咱们的单元测试的代码覆盖率和场景范围又可以进一步提升了；
欢迎关注公众号：程序员欣宸
微信搜索「程序员欣宸」，我是欣宸，期待与您一同畅游Java世界…

文章知识点与官方知识档案匹配，可进一步学习相关知识
Java技能树进阶任务Java问答57978 人正在系统学习中

程序员欣宸
已关注

3


8


1

专栏目录
junit5 入门系列教程-14-junit5 参数化测试(@ParameterizedTest)
 5万+
目录 目录 参数化测试 实例 需要 使用参数 源的参数(Sources of Arguments) @ValueSource 实例 @EnumSource @MethodSource 自动搜索 原始类型的流 多个参数 外部的静态工厂方法 @CsvSource @CsvFileSource @ArgumentsSource 参数转换 扩大转换(Widening Conversi...
Junit5中的参数化测试（Parameterized Tests）指南
爱穿格子裤的专栏
 3537
作为新一代的测试框架，Junit5中有很多大家喜欢的测试方案，个人认为最突出的就是能够进行参数化的测试（Parameterized Tests）。 简介 通常，会遇到这样的情况，同一个测试案例，改变的只是测试时候输入的参数不同。按照之前的做法，可能会是通过每个输入参数都写一个测试，或者将测试参数封装到集合中循环遍历执行测试。在新版的Junit5中，已经提供了一种更加优雅的方式来进行。 该特性允许我...
评论1条写评论
weixin_38038923
热评
感谢，这个csv到对象的转换好麻烦
JUnit 5 –参数化测试_dnc8371的博客
7-29
不管参数化测试如何,JUnit Jupiter都已经可以将参数注入测试方法中。 只要将每次调用中变化的参数排在首位,这可以与参数化测试结合使用: @ParameterizedTest @ValueSource(strings = {"Hello","JUnit"}) voidwithOtherParams(Stringword, ...
Junit5实现参数化测试_喵_不乖的博客_junit5 参数
6-26
Csv Source @CsvSource可实现多参数传参,允许您将参数列表表示为逗号分隔的值 @ParameterizedTest@CsvSource({"zhangsan,18","lisi,20","''rose,jack'',16"})voidtestCVSSource(String name,Integer age){System.out.println("name:"...
JavaEE_Junit_Junit对Spring注入的Service层的测试
热门推荐
迎难而上
 1万+
今天博主遇到一个问题，在Serivce层利用POI导出Excel表格，博主想对这个方法进行测试， 但由于mapper 是注入的， 直接用 main 方法并不成功，报错和出现的问题如下图：   主要原因：Mapper是调用时候注入的，所以此时Mapper为null 这时候我们可以使用junit 对service进行测试即可解决问题： 博主假设大家已经
Spring Boot 单元测试（二）参数化测试
q1472750149的博客
 937
Spring Boot 使用 JUnit5 提供的@ParameterizedTest注解实现参数化测试，同时要配合其它注解完成参数源配置。 一、自定义测试执行名称 @ParameterizedTest默认的测试执行名称格式为[序号]参数1=XXX, 参数2=YYY...，可以通过修改name属性自定义测试执行名称。 @ParameterizedTest(name = "第 {index} 次测试，参数：{0}") @ValueSource(ints = { 1, 10, 100 }) public
参数化测试 junit_JUnit 5 –参数化测试_dnc8371的博客
9-9
不管参数化测试如何,JUnit Jupiter都已经可以将参数注入测试方法中。 只要将每次调用中变化的参数排在首位,这可以与参数化测试结合使用: @ParameterizedTest @ValueSource(strings = {"Hello","JUnit"}) voidwithOtherParams(String word,...
JUnit 5参数化测试_cyan20115的博客
7-29
1.1用于单参数测试。 ValueSourceTest.java packagecom.mkyong.params; importorg.junit.jupiter.params.ParameterizedTest; importorg.junit.jupiter.params.provider.ValueSource; importstaticorg.junit.jupiter.api.Assertions.assertTrue; ...
Junit5参数化测试 - 自定义Json文件源
最新发布
罗小爬的技术宝书
 1061
自定义Junit5参数化测试来源@JsonFileSource及使用示例
JUnit5学习之七：参数化测试(Parameterized Tests)进阶，java面试项目描述
m0_64867003的博客
 105
自定义数据源 前文使用了很多种数据源，如果您对它们的各种限制不满意，想要做更彻底的个性化定制，可以开发ArgumentsProvider接口的实现类，并使用@ArgumentsSource指定； 举个例子，先开发ArgumentsProvider的实现类MyArgumentsProvider.java： package com.bolingcavalry.parameterized.service.impl; import org.junit.jupiter.api.extension.Exte
单元测试之JUnit 5 参数化测试使用手册_dearfulan的博...
5-28
Junit 5的测试执行器会执行上述测试用例,然后isOdd方法会被执行6次,每次从@ValueSource的整型数组里拿出一个参数作为isOdd方法的入参。 从这个示例我们可以看出,执行参数化测试需要2个条件:
JUnit5学习之六：参数化测试(Parameterized Tests)基础
m0_64867688的博客
 760
| :-- | :-- | :-- | | 项目主页 | https://github.com/zq2599/blog_demos | 该项目在GitHub上的主页 | | git仓库地址(https) | https://github.com/zq2599/blog_demos.git | 该项目源码的仓库地址，https协议 | | git仓库地址(ssh) | git@github.com:zq2599/blog_demos.git | 该项目源码的仓库地址，ssh协议 | 这个git项目中有多个文
junit 内部类测试_JUnit5学习之七：参数化测试进阶
weixin_39934302的博客
 31
欢迎访问我的GitHubhttps://github.com/zq2599/blog_demos内容：所有原创文章分类和汇总，及配套源码，涉及Java、Docker、Kubernetes、DevOPS等；本篇概览本文是《JUnit5学习》系列的第七篇，前文《Junit5学习之六：参数化测试基础 》咱们对JUnit5的参数化测试(Parameterized Tests)有了基本了解，可以使用各种数据...
JUnit5学习之六：参数化测试(Parameterized Tests)基础，java架构师的简历模板
m0_63174811的博客
 279
Assertions类 按条件执行 标签(Tag)和自定义注解 参数化测试(Parameterized Tests)基础 参数化测试(Parameterized Tests)进阶 综合进阶（终篇） 本篇概览 本文是《JUnit5学习》系列的第六篇，一起来实战强大参数化测试(Parameterized Tests)，即多次执行同一个测试方法，每次使用不同的参数； 由于参数化测试功能强大，内容也比前几篇的知识点多，为了方便大家阅读和实践，这里分为《基础》和《进阶》两篇来介绍，..
JUnit5参数化测试的几种方式
自动化代码美学
 264
参数化测试一直是津津乐道的话题，我们都知道JMeter有四种参数化方式：用户自定义变量、用户参数、CSV文件、函数助手，那么JUnit5有哪些参数化测试的方式呢？ 依赖 JUnit5需要添加junit-jupiter-params依赖才能使用参数化： <dependency> <groupId>org.junit.jupiter</groupId> ...
python get argument_Python-Web框架-get_argument方法
weixin_39729272的博客
 414
Python-Web框架-get_argument方法目录概览1.使用get_argument获取url query参数2.为何get_argument不区分POST与GET？3.get_argument返回unicode数据类型的问题1.使用get_argument获取url query参数Tornado的每个请求处理程序，我们叫做handler，handler里可以自定义自己的处理程序，其实也...
Junit5中实现参数化测试
HD243608836的博客
 2259
从Junit5开始，对参数化测试支持进行了大幅度的改进和提升。下面我们就一起来详细看看Junit5参数化测试的方法。 部署和依赖 和Junit4相比，Junit5框架更多在向测试平台演进。其核心组成也从以前的一个Junit的jar包更换成由多个模块组成。本文所需要依赖模块如下： junit-jupiter-engine: Junit的核心测试引擎 junit-jupiter-params:...
JUnit5编写基本测试
自动化代码美学
 248
JUnit5的测试不是通过名称，而是通过注解来标识的。 测试类与方法 Test Class：测试类，必须包含至少一个test方法，包括： 最外层的class static member class @Nested class Test Method：测试方法，包括： @Test @RepeatedTest @ParameterizedTest @TestFactory @TestTempl...
JUnit5学习之八：综合进阶（终篇）
程序员欣宸的博客
 1313
将JUnit5的一些常用高级功能以实战的形式展现
JUnit4 参数化测试（ Parameterized tests）
明明如月的技术博客
 1万+
@RunWith　　当类被@RunWith注解修饰，或者类继承了一个被该注解修饰的类，JUnit将会使用这个注解所指明的运行器（runner）来运行测试，而不使用JUnit默认的运行器。　　要进行参数化测试，需要在类上面指定如下的运行器：@RunWith (Parameterized.class)然后，在提供数据的方法上加上一个@Parameters注解，这个方法必须是静态static的，并且返回...
JUnit5学习之一：基本操作
程序员欣宸的博客
 6911
《JUnit5学习》是欣宸的又一个实战主题的Java技术栈原创系列，欢迎大家一起来学习和掌握最新的单元测试技术
JUnit5学习之三：Assertions类
程序员欣宸的博客
 3296
断言是单元测试中最常用的测试手段，本文就来学习和操作常用的断言功能
JUnit5学习之二：Assumptions类
程序员欣宸的博客
 1831
学习Assumptions类的用法
JUnit5学习之四：按条件执行
程序员欣宸的博客
 1741
学习和实战如何设置单元测试的执行条件
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 10);
INSERT INTO public.article_content VALUES (2, '2022-08-26 21:35:06.148', false, '2022-10-25 20:04:41.123', '<h2 id="介绍"><a href="#介绍" id="介绍">介绍</a></h2>
<p>这是一个 Go 语言的参考手册，你也可以访问<a href="https://golang.org/" rel="nofollow" target="_blank">golang.org</a>获取更多信息和其他文档。</p>
<p>Go 是在设计时考虑了系统编程的通用型编程语言。它是强类型，有垃圾回收机制并原生支持并发编程。Go 程序由一个或多个 package 组成，这样可以高效的管理依赖。</p>
<p>Go 的语法简洁且有规则，这让自动化工具可以很容易的分析代码，例如：集成开发环境。</p>
<h2 id="标记"><a href="#标记" id="标记">标记</a></h2>
<p>语法采用扩展巴科斯范式。</p>
<pre><code class="language-go">Production  = production_name &quot;=&quot; [ Expression ] &quot;.&quot; .
Expression  = Alternative { &quot;|&quot; Alternative } .
Alternative = Term { Term } .
Term        = production_name | token [ &quot;…&quot; token ] | Group | Option | Repetition .
Group       = &quot;(&quot; Expression &quot;)&quot; .
Option      = &quot;[&quot; Expression &quot;]&quot; .
Repetition  = &quot;{&quot; Expression &quot;}&quot; .
</code></pre>
<p>产生式是由词法单元和以下操作符构成的表达式（优先级依次递增）：</p>
<pre><code class="language-go">|   或
()  分组
[]  可选 (出现 0 或 1 次)
{}  可重复 (出现 0 到 n 次)
</code></pre>
<p>小写的产生式名称用来与词法单元区分。非终结符采用驼峰式。词法单元由双引号或反引号组成。</p>
<p><code>a...b</code> 表示从 <code>a</code> 到 <code>b</code> 之间的任意字符。省略号 <code>...</code> 也可以在规范中表示对更详细的枚举和代码片段的省略。字符 <code>...</code> 不是 Go 语言的词法单元。</p>
<h2 id="源码表示法"><a href="#源码表示法" id="源码表示法">源码表示法</a></h2>
<p>Go 的源代码使用 UTF-8 编码的 Unicode 文本。不过它并不是完全规范化的，单重音的代码点与由相同字符和音标组成的代码点是不同的；前者我们认为它是两个代码点。简单来讲，文档会在源代码文本中使用非规范的术语字符来表示一个 Unicode 代码点。</p>
<p>每个代码点都是不同的；相同字符的大写和小写形式表示不同的字符。</p>
<p>实现限制：为了兼容其他工具，编译器不允许出现 Utf-8 编码的源文本中的 NUL 字符（U+0000）。</p>
<p>实现限制：为了兼容其他工具，如果源文本中是以Utf-8 编码的字节序标记（U+FEFF）为起始代码点。编译器会忽略它。字节序标记不应出现在源文本的任何位置。</p>
<h4 id="字符"><a href="#字符" id="字符">字符</a></h4>
<p>这些单词表示 Unicode 字符的类别：</p>
<pre><code class="language-go">newline        = /* Unicode 代码点 U+000A */ .
unicode_char   = /* 排除换行以外的任意 Unicode 代码点 */ .
unicode_letter = /* 一个字母（&quot;Letter&quot;）类型的 Unicode 代码点  */ .
unicode_digit  = /* 一个数字（&quot;Number, decimal digit&quot;）类型的 Unicode 代码点  */ .
</code></pre>
<p>在 Unicode8.0 标准中，第 4.5 章节 “一般类别” 中定义了字符的类别。Go 能够处理任何字符集，包括 Lu，Li，Lt，Lm 或 Lo 作为 Unicode 字母，还可以把数字字符集 Nd 当作 Unicode 数字处理。</p>
<h4 id="字母和数字"><a href="#字母和数字" id="字母和数字">字母和数字</a></h4>
<p>我们认为下划线 <code>_</code> （U+005F）是一个字母：</p>
<pre><code class="language-go">letter        = unicode_letter | &quot;_&quot; .
decimal_digit = &quot;0&quot; … &quot;9&quot; .
octal_digit   = &quot;0&quot; … &quot;7&quot; .
hex_digit     = &quot;0&quot; … &quot;9&quot; | &quot;A&quot; … &quot;F&quot; | &quot;a&quot; … &quot;f&quot; .
</code></pre>
<h2 id="词汇元素"><a href="#词汇元素" id="词汇元素">词汇元素</a></h2>
<h4 id="注释"><a href="#注释" id="注释">注释</a></h4>
<p>注释是程序的说明文档。在 Go 中有两种形式：</p>
<ul>
<li>单行注释从 <code>//</code> 开始直到行末结束。</li>
<li>通用注释从 <code>/*</code> 开始直到 <code>*/</code> 结束。</li>
</ul>
<p>注释不能嵌套在其他注释、字符串和 rune 的字面值中。不包含换行符的通用注释之间通过空格符连接，其他情况下每段注释都会另起一行。</p>
<h4 id="词汇元素"><a href="#词汇元素" id="词汇元素">词汇元素</a></h4>
<p>词汇元素构成了 Go 语言的词汇表。它有四种类型：标识符、关键字、操作符/标点符号、字面值。空白符可以是空格（U+0020）、水平制表符（U+0009）、换行符（U+000D）或换行符（U+000A）。它本身会被忽略，一般用来区分不同的词汇元素。换行符或文件终止符（EOF）还可能触发编译程序在源代码的行末或文件末尾追加分号。在分解源代码的词汇元素的过程中，会把当前可以形成有效词汇元素的最长字符序列作为下一个词汇元素。</p>
<h4 id="分号"><a href="#分号" id="分号">分号</a></h4>
<p>正规语法在很多产生式中使用分号 &ldquo;;&rdquo; 作为终结符。Go 程序中遵循下面两条规则省略了大部分的分号：</p>
<ol>
<li>当某行的最后一个词汇元素是以下元素时自动补全分号：</li>
</ol>
<ul>
<li>一个标识符。</li>
<li>一个整数，浮点数，虚数，rune 或字符串字面值。</li>
<li>
<p>关键字 <code>break</code>、<code>continue</code>、<code>fallthrough</code> 和 <code>return</code> 其中之一。</p>
</li>
<li>操作符/标点符号 <code>++</code>，<code>--</code>，<code>)</code>，<code>]</code> 和 <code>}</code> 其中之一。</li>
</ul>
<ol>
<li>为了支持独占一行的复杂语句，会省略与 &ldquo;)&rdquo; 或 &ldquo;}&rdquo; 相邻的分号。</li>
</ol>
<p>为了反应惯用用途，本篇文档的所有例子都基于以上规则省略分号。</p>
<h4 id="标识符"><a href="#标识符" id="标识符">标识符</a></h4>
<p>标识符表示程序实体单元，例如：变量、类型。一个标识符由一个或多个字母和数字组成。标识符的首字符必须为字母。</p>
<pre><code class="language-go">identifier = letter { letter | unicode_digit } .
</code></pre>
<pre><code class="language-go">a
_x9
ThisVariableIsExported
αβ
</code></pre>
<p>Go 已经预定义了一些标识符。</p>
<h4 id="关键字"><a href="#关键字" id="关键字">关键字</a></h4>
<p>以下关键字是预留的，它们不能作为标识符：</p>
<pre><code class="language-go">break        default      func         interface    select
case         defer        go           map          struct
chan         else         goto         package      switch
const        fallthrough  if           range        type
continue     for          import       return       var
</code></pre>
<h4 id="操作符和标点符号"><a href="#操作符和标点符号" id="操作符和标点符号">操作符和标点符号</a></h4>
<p>以下字符序列用于表示操作符（包括赋值运算符）和标点符号：</p>
<pre><code class="language-go">+    &amp;     +=    &amp;=     &amp;&amp;    ==    !=    (    )
-    |     -=    |=     ||    &lt;     &lt;=    [    ]
*    ^     *=    ^=     &lt;-    &gt;     &gt;=    {    }
/    &lt;&lt;    /=    &lt;&lt;=    ++    =     :=    ,    ;
%    &gt;&gt;    %=    &gt;&gt;=    --    !     ...   .    :
     &amp;^          &amp;^=
</code></pre>
<h4 id="整型字面值"><a href="#整型字面值" id="整型字面值">整型字面值</a></h4>
<p>整型字面值是一个数字序列，相当于整型常量。可以使用前缀指定非小数进制：0 表示八进制，0x/0X 表示十六进制。在十六进制字面值中，字母 a-f 和 A-F 都表示数字 10-15。</p>
<pre><code class="language-go">int_lit     = decimal_lit | octal_lit | hex_lit .
decimal_lit = ( &quot;1&quot; … &quot;9&quot; ) { decimal_digit } .
octal_lit   = &quot;0&quot; { octal_digit } .
hex_lit     = &quot;0&quot; ( &quot;x&quot; | &quot;X&quot; ) hex_digit { hex_digit } .
</code></pre>
<pre><code class="language-go">42
0600
0xBadFace
170141183460469231731687303715884105727
</code></pre>
<h4 id="浮点字面值"><a href="#浮点字面值" id="浮点字面值">浮点字面值</a></h4>
<p>浮点字面值是一个小数，相当于浮点数常量。它由整数部分，小数点，小数部分和指数部分构成。整数部分和小数部分用小数点链接；指数部分由  <code>e</code> / <code>E</code> 字符后接一个有符号指数构成。整数部分和小数部分可以省略其一；小数点和指数部分可以省略其一。</p>
<pre><code class="language-go">float_lit = decimals &quot;.&quot; [ decimals ] [ exponent ] |
            decimals exponent |
            &quot;.&quot; decimals [ exponent ] .
decimals  = decimal_digit { decimal_digit } .
exponent  = ( &quot;e&quot; | &quot;E&quot; ) [ &quot;+&quot; | &quot;-&quot; ] decimals .
</code></pre>
<pre><code class="language-go">0.
72.40
072.40  // == 72.40
2.71828
1.e+0
6.67428e-11
1E6
.25
.12345E+5
</code></pre>
<h4 id="虚数字面值"><a href="#虚数字面值" id="虚数字面值">虚数字面值</a></h4>
<p>虚数字面值是一个小数，相当于复数常量中的虚数部分。它由浮点数或者整数后接小写字母 i 构成。</p>
<pre><code class="language-go">imaginary_lit = (decimals | float_lit) &quot;i&quot; .
</code></pre>
<pre><code class="language-go">0i
011i  // == 11i
0.i
2.71828i
1.e+0i
6.67428e-11i
1E6i
.25i
.12345E+5i
</code></pre>
<h4 id="Rune 字面值"><a href="#rune-字面值" id="rune-字面值">Rune 字面值</a></h4>
<p>rune 类型字面值相当于一个 rune 常量。它是一个表示 Unicode 代码点的整数。rune 类型字面值表示为用单引号包裹的一个或多个字符，像 &lsquo;x&rsquo; 或 &lsquo;\n&rsquo;。在单引号中除了换行符和未转义的单引号其他的字符都可以直接显示。单引号包裹的字符的值和字符在 Unicode 编码中的值相等，而以反斜线开头的多字符序列会把值翻译成多种格式。</p>
<p>使用引号表示单字符是最简单的方式；因为 Go 的源文本是 UTF-8 编码，一个整数可能代表多个 UTF-8 字节。例如， &lsquo;a&rsquo; 可以使用单字节表示字符 a，Unicode 编码 U+0061，值 0x61，而 &lsquo;ä&rsquo; 是两字节表示分音符的 a，Unicode 编码 U+00E4，值 0xe4。</p>
<p>反斜线能将任意值编码成 ASCII 文本。有四种方式将整数值表示为数字常量：<code>\x</code> 后接两个十六进制数；<code>\u</code> 后接四个十六进制数；<code>\U</code> 后接八个十六进制数。 <code>\</code> 后接三个八进制数。每种情况下都使用相应进制来表示字面量的整数值。</p>
<p>虽然这四种方式都以整数表示，但它们的有效区间并不相同。八进制只能表示 0 - 255 以内的整数。十六进制满可以满足需求。<code>\u</code> 和 <code>\U</code>  都可以表示 Unicode 代码点，不过其中的一些值是无效的，特别是 0x10FFFF 以上的值。</p>
<p>反斜线结合以下字符具有特殊含义：</p>
<pre><code class="language-go">\a   U+0007 alert or bell
\b   U+0008 退格符
\f   U+000C form feed
\n   U+000A line feed or newline
\r   U+000D carriage return
\t   U+0009 水平制表符
\v   U+000b 垂直制表符
\\   U+005c 反斜线
\''   U+0027 单引号  (只在 rune 字面值中有效)
\&quot;   U+0022 双引号  (只在字符串字面值中有效)
</code></pre>
<p>其他所有以反斜线开头的序列在 rune 的规则中都是非法的。</p>
<pre><code class="language-go">rune_lit         = &quot;''&quot; ( unicode_value | byte_value ) &quot;''&quot; .
unicode_value    = unicode_char | little_u_value | big_u_value | escaped_char .
byte_value       = octal_byte_value | hex_byte_value .
octal_byte_value = `\` octal_digit octal_digit octal_digit .
hex_byte_value   = `\` &quot;x&quot; hex_digit hex_digit .
little_u_value   = `\` &quot;u&quot; hex_digit hex_digit hex_digit hex_digit .
big_u_value      = `\` &quot;U&quot; hex_digit hex_digit hex_digit hex_digit
                           hex_digit hex_digit hex_digit hex_digit .
escaped_char     = `\` ( &quot;a&quot; | &quot;b&quot; | &quot;f&quot; | &quot;n&quot; | &quot;r&quot; | &quot;t&quot; | &quot;v&quot; | `\` | &quot;''&quot; | `&quot;` ) .
</code></pre>
<pre><code class="language-go">''a''
''ä''
''本''
''\t''
''\000''
''\007''
''\377''
''\x07''
''\xff''
''\u12e4''
''\U00101234''
''\''''         // 包含单引号的 rune 字面值
''aa''         // 无效: 太多字符
''\xa''        // 无效: 缺少十六进制数
''\0''         // 无效: 缺少八进制数
''\uDFFF''     // 无效: surrogate half
''\U00110000'' // 无效: 非法的 Unicode 代码点
</code></pre>
<h4 id="字符串字面量"><a href="#字符串字面量" id="字符串字面量">字符串字面量</a></h4>
<p>字符串字面量表示从字符序列中获取的字符串常量。它有两种格式：原始字符串字面量和解释型字符串字面量。</p>
<p>原始字符串是由反引号包裹（<code>foo</code>）。字符串中除反引号以外的其他字符都会显示出来。原生字符串由反引号之间的（默认 UTF-8 编码）的字符组成。它的值为引号内未经解释（默认 UTF-8 编码）所有字符；尤其是，反斜线再字符串中没有特殊意义并且字符串中保留换行符。在原始字符串的值中会丢弃回车键返回 &lsquo;\r&rsquo; 字符。</p>
<p>解释型字符串由双引号之间的字符组成（&ldquo;bar&rdquo;）。除了换行符和双引号其他字符都会显示出来。双引号之间的文本组成字面量的值。反斜线的转义规则与 rune 字面量基本相同（不同的是 \’ 非法，而 &quot; 合法）。三位八进制数（\nnn）和两位十六进制数（\xnn）换码符的值表示相应字符串的字节。其他的换码符都表示字符各自的 UTF-8 编码（可能是多字节）。因此字符串 \377 和 \xFF 都表示值为 0xFF=255 的单个字节，而  <code>ÿ</code>, <code>\u00FF</code>, <code>\U000000FF</code> 和 <code>\xc3\xbf</code> 表示 UTF-8 编码字符 U+00FF 的两个字节 0xc3 0xbf。</p>
<pre><code class="language-go">string_lit             = raw_string_lit | interpreted_string_lit .
raw_string_lit         = &quot;`&quot; { unicode_char | newline } &quot;`&quot; .
interpreted_string_lit = `&quot;` { unicode_value | byte_value } `&quot;` .
</code></pre>
<pre><code class="language-go">`abc`                // 等价于 &quot;abc&quot;
`\n
\n`                  // 等价于 &quot;\\n\n\\n&quot;
&quot;\n&quot;
&quot;\&quot;&quot;                 // 等价于 `&quot;`
&quot;Hello, world!\n&quot;
&quot;日本語&quot;
&quot;\u65e5本\U00008a9e&quot;
&quot;\xff\u00FF&quot;
&quot;\uD800&quot;             // 无效: surrogate half
&quot;\U00110000&quot;         // 无效: 无效的 Unicode 代码点
</code></pre>
<p>这些例子都表示相同的字符串：</p>
<pre><code class="language-go">&quot;日本語&quot;                                 // UTF-8 文本
`日本語`                                 // UTF-8 文本作为原生字面值
&quot;\u65e5\u672c\u8a9e&quot;                    // 确定的 Unicode 代码点 
&quot;\U000065e5\U0000672c\U00008a9e&quot;        // 确定的 Unicode 代码点
&quot;\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e&quot;  // 确定的 UTF-8 字节
</code></pre>
<p>如果源代码中使用两个代码点表示一个字符，例如带音标的字母，把它放在 rune 中会报错（它不是单代码点）。并且在字符串中会显示两个代码点。</p>
<h2 id="常量"><a href="#常量" id="常量">常量</a></h2>
<p>常量分为：布尔型，rune型，整型，浮点型，复数型，字符串型。其中 rune，整型，浮点型，复数型统称为数字常量。</p>
<p>常量的值可以表示为一个 rune字面量，整数字面量，浮点数字面量，虚数字面量，字符串字面量，表示常量的标识符，常量表达式，一个转换结果为常量的类型转换，和一些返回值为常量的内置函数(接受任何值的<code>unsafe.Sizeof</code>，接受部分表达式的<code>cap</code> 或 <code>len</code>，接受虚数常量的<code>real</code> 和 <code>imag</code>，接受数字常量的 <code>complex</code>)。布尔类型的值为预定义常量 <code>true</code> 或 <code>false</code>，预定义的标识符 <code>iota</code> 表示一个整型常量。</p>
<p>一般情况下复数常量是常量表达式的一种形式。会在常量表达式章节详细讨论。</p>
<p>数字常量可以表示任意精度的确定值而且不会溢出。因此，没有常量可以表示非 0，无穷大和非数字值。</p>
<p>常量可以指定类型也可以不指定类型。字面值常量，<code>true</code>，<code>false</code>，<code>iota</code>，和只包含无类型常量操作的常量表达式是无类型的。</p>
<p>常量可以通过常量声明和转换时显式的指定具体类型，也可以隐式的在变量声明、赋值或作为表达式操作元时隐式的指定具体类型。如果常量的值和他的类型不匹配，会报错。</p>
<p>无类型常量由一个默认的类型，这个类型会根据使用常量时的上下文进行隐式转换。例如：短变量声明 <code>i := 0</code> 没有指定 i 的类型。无类型常量的默认类型可以是：<code>bool</code>，<code>rune</code>，<code>int</code>，<code>float64</code>，<code>complex128</code> 或者 <code>string</code>，具体选择哪种类型由常量的值决定。</p>
<p>实现限制：虽然数字常量在 Go 中是任意精度，不过编译器在实现时会在内部限制精度。这意味着每个编译器实现都要：</p>
<ul>
<li>至少保证整形常量有 256 位</li>
<li>浮点数常量（包括复数常量）都要保证至少 256 位的主体部分和至少 16 位的有符号指数部分</li>
<li>
<p>如果不能表示给定整数的精度抛出错误</p>
</li>
<li>如果浮点数或复数溢出抛出错误</li>
<li>
<p>如果由于精度限制不能表示浮点数或者复数进行舍入</p>
</li>
</ul>
<p>这些要求同时作用于字面量常量额和常量表达式的结果。</p>
<h2 id="变量"><a href="#变量" id="变量">变量</a></h2>
<p>变量是一个用来储存值的位置。根据不同的变量类型，可以保存不同的值。</p>
<p>变量声明，函数参数和返回值，声明的函数签名，函数字面值都会为命名变量预留储存空间。调用内置的  <code>new</code>  函数或获取复合字面值的地址都会在运行时为变量分配存储空间。这种匿名变量是通过（可能是隐式的）指针间接引用的。</p>
<p>像数组，切片和结构体类型的变量，它们内部都包含很多元素或字段，而且这些元素和字段都可以直接被访问。数组和切片中的每个元素的行为和单独的变量基本相同。</p>
<p>变量的静态类型可以通过变量声明、提供给 <code>new</code> 的类型、复合字面值、结构体变量声明的元素类型以上几种方式确定。通过new或者类型初始化。接口类型的变量也有一个明确的动态类型，这个动态类型是在运行时赋值给变量的具体值类型（特例：预声明的 nil 是无类型的）。动态类型在程序的执行过程中可能并不相同，但是接口变量的值是可以分配给相同静态类型的变量。</p>
<pre><code class="language-go">var x interface{}  // x 的静态类型为 interface{} 值为 nil
var v *T           // v 的静态类型为 *T 值为 nil
x = 42             // x 的动态类型为 int 值为 42
x = v              // x 动态类型为 *T 值为 (*T)(nil)
</code></pre>
<p>在表达式中使用变量可以取出变量的值；这个值就是变量最近一次被赋予的值。如果没有对变量赋过值，那么他的值是该类型的零值。</p>
<h2 id="类型"><a href="#类型" id="类型">类型</a></h2>
<p>类型是一个集合，集合包括值和针对值的操作&amp;方法。一个类型可以使用类型名来表示。类型有多种表现形式：如果存在类型名，可以使用类型名表示，或者也可以使用根据已有类型组合成的类型字面值。</p>
<pre><code class="language-go">Type      = TypeName | TypeLit | &quot;(&quot; Type &quot;)&quot; .
TypeName  = identifier | QualifiedIdent .
TypeLit   = ArrayType | StructType | PointerType | FunctionType | InterfaceType |
	    SliceType | MapType | ChannelType .
</code></pre>
<p>Go 已经预先声明了某些类型的名称。并引入了类型声明。复合类型（数组、结构体、指针、函数、接口、切片、map、channel）可以使用他们的类型字面值。</p>
<p>每个类型T都有一个底层类型。如果T是预定义类型或者类型字面值。那么底层类型就是他自身。否则，T的底层类型就是它再类型声明时引用到的类型。</p>
<pre><code class="language-go">type (
	A1 = string
	A2 = A1
)

type (
	B1 string
	B2 B1
	B3 []B1
	B4 B3
)
</code></pre>
<p><code>string</code>，<code>A1</code>，<code>A2</code>，<code>B1</code>，<code>B2</code> 的底层类型是 <code>string</code>。<code>[]B1</code>，<code>B3</code>，<code>B4</code> 的下游类型是[]B1。</p>
<h4 id="方法集"><a href="#方法集" id="方法集">方法集</a></h4>
<p>类型可能会有一个与之关联的方法集。接口类型的方法集就可以使用自身表示。对于其他类型，类型 T 的方法集由所有接收者类型为 T 的方法组成。而对应指针类型 *T 的方法集由所有接收者类型为 T 或 *T 的方法组成。如果是结构体类型且含有嵌入字段，那么方法集中可能还会包含更多的方法，具体请看结构体类型章节。其他类型的方法集都为空。方法集中的每个方法都有唯一且不为空的方法名。</p>
<p>类型的方法集用来确定类型实现的接口和以类型作为接收者能够调用的方法。</p>
<h4 id="布尔类型"><a href="#布尔类型" id="布尔类型">布尔类型</a></h4>
<p>布尔类型表示预定义常量 <code>true</code> 和 <code>false</code> 表示布尔真实值的集合。预定义的布尔类型为 <code>bool</code>；它是通过类型声明创建的。</p>
<h4 id="数字类型"><a href="#数字类型" id="数字类型">数字类型</a></h4>
<p>一个数字类型相当于整型和浮点型的所有值的集合。预定义的数字类型包括：</p>
<pre><code class="language-go">uint8       8 位无符号整数集合 (0 to 255)
uint16      16 位无符号整数集合 (0 to 65535)
uint32      32 位无符号整数集合 (0 to 4294967295)
uint64      64 位无符号整数集合 (0 to 18446744073709551615)

int8        8 位有符号整数集合 (-128 to 127)
int16       16 位有符号整数集合 (-32768 to 32767)
int32       32 位有符号整数集合 (-2147483648 to 2147483647)
int64       64 位有符号整数集合 (-9223372036854775808 to 9223372036854775807)

float32     IEEE-754 32 位浮点数集合
float64     IEEE-754 64 位浮点数集合

complex64   实部虚部都为 float32 的复数集合
complex128  实部虚部都为 float64 的复数集合

byte        uint8 的别名
rune        int32 的别名
</code></pre>
<p>n 位整数的值具有 n 比特的宽度并用补码表示。</p>
<p>以下几种预定义类型由具体平台实现指定长度：</p>
<pre><code class="language-go">uint     32 或 64 位
int      和 uint 位数相同
uintptr  能够容纳指针值的无符号整数
</code></pre>
<p>为了避免移植性问题，除了被 uint8 的别名 byte 和 int32 的别名 rune，其他所有的数字类型都是通过类型声明定义。当在表达式中使用不同的数字类型需要进行类型转换。例如：int32 和 int 不是相同的类型，即使他们在指定的平台上是相等的。</p>
<h4 id="字符串类型"><a href="#字符串类型" id="字符串类型">字符串类型</a></h4>
<p>字符串类型表示字符串的值类型。字符串的值是一个字节序列（有可能为空）。字符串一旦创建就无法修改它的值。预定义的字符串类型是 <code>string</code>，它是通过类型声明定义的。</p>
<p>可以使用内置函数 <code>len</code> 获取字符串长度。如果字符串是常量那么它的长度在编译时也为常量。可以通过数字下标 0～len(s)-1 访问字符串字节。获取字符串的地址是非法操作；如果 <code>s[i]</code> 是字符串的第 i 个字节，那么 <code>&amp;s[i]</code> 是无效的。</p>
<h4 id="数组类型"><a href="#数组类型" id="数组类型">数组类型</a></h4>
<p>数组是一定数量的单一类型元素序列，而这个单一类型叫做元素类型。元素的个数表示元素的长度，它永远不是负数。</p>
<pre><code class="language-go">ArrayType   = &quot;[&quot; ArrayLength &quot;]&quot; ElementType .
ArrayLength = Expression .
ElementType = Type .
</code></pre>
<p>长度是数组类型的一部分；它是一个类型为 int 的非负常量。可以用内置函数 <code>len</code> 获取数组的长度。元素可以通过下标 <code>0～len(a)-1</code> 访问。数组一般都是一维的，不过也可以是多维的。</p>
<pre><code class="language-go">[32]byte
[2*N] struct { x, y int32 }
[1000]*float64
[3][5]int
[2][2][2]float64  // same as [2]([2]([2]float64))
</code></pre>
<h4 id="切片类型"><a href="#切片类型" id="切片类型">切片类型</a></h4>
<p>切片描述了底层数组的一个连续片段并提供对连续片段内元素的访问。切片类型表示元素类型的数组的所有切片的集合。没有被初始化的切片用 nil 表示。</p>
<pre><code class="language-go">SliceType = &quot;[&quot; &quot;]&quot; ElementType .
</code></pre>
<p>与数组一样，切片的可以使用索引访问并且有长度，切片的长度可以通过内置的 <code>len</code> 函数获取；与数组不同的是它的长度在运行时是可以变化的。我们可以通过下标 <code>0～len(s)-1</code> 来访问切片内的元素。切片的索引可能会小于相同元素再底层数组的索引。</p>
<p>切片一旦初始化，那么就有一个与之对应的底层数组保存切片中的元素。切片和底层的数组还有其他指向该数组的切片共享相同的储存空间；而不同的数组总是有着不同的存储空间。</p>
<p>切片的底层数组可能会延伸到切片末尾以外，切片的容积等于切片现在的长度加上数组中切片还没使用的长度；可以从原始切片中切出一个长度与容量相等的切片。切片的容量可以通过内置的 <code>cap(a)</code> 函数来获取。可以通过函数<code>make</code>来创建一个T类型的新切片。</p>
<p>使用内置函数 <code>make</code> 可以出实话给定元素类型 T 的切片。<code>make</code> 函数接收三个参数：切片类型、切片长度、切片容积，其中切片容积是可选参数。<code>make</code> 创建的切片会在底层分配一个切片所引用的新数组。</p>
<pre><code class="language-go">make([]T, length, capacity)
</code></pre>
<p><code>make</code> 的作用就是创建新数组并切分它，所以下面两种写法是等价的：</p>
<pre><code class="language-go">make([]int, 50, 100)
new([100]int)[0:50]
</code></pre>
<p>与数组相同，切片一般是一维的，不过也可以复合成多维。数组中的数组都必须是相同的长度，但是切片中的切片长度是动态变化的，不过切片中的切片需要单独初始化。</p>
<h4 id="结构体类型"><a href="#结构体类型" id="结构体类型">结构体类型</a></h4>
<p>结构体是一个命名元素序列，命名元素也叫做字段，每个字段都对应一个名称和类型，字段的名字可以是显式指定的（标识符列表）也可以是隐式的（嵌入字段）。在结构体中非空字段具有唯一性。</p>
<pre><code class="language-go">StructType    = &quot;struct&quot; &quot;{&quot; { FieldDecl &quot;;&quot; } &quot;}&quot; .
FieldDecl     = (IdentifierList Type | EmbeddedField) [ Tag ] .
EmbeddedField = [ &quot;*&quot; ] TypeName .
Tag           = string_lit .
</code></pre>
<pre><code class="language-go">// 空结构体.
struct {}

// 6个字段的结构体.
struct {
	x, y int
	u float32
	_ float32  // padding
	A *[]int
	F func()
}
</code></pre>
<p>一个指定了类型而没有指定名称的字段叫做嵌入字段，嵌入字段必须指定类型名 T 或指向非接口类型的指针类型 *T，其中 T 不能为指针类型。或者一个非接口类型的指针。并且T本身不能为指针类型。这种情况下会把类型名作为字段的名字。</p>
<pre><code class="language-go">// 一个包含 4 个嵌入字段 T1, *T2, P.T3 和 *P.T4 的结构体
struct {
	T1        // 字段名为 T1
	*T2       // 字段名为 T2
	P.T3      // 字段名为 T3
	*P.T4     // 字段名为 T4
	x, y int  // 字段名为 x 和 y
}
</code></pre>
<p>以下声明是错误的因为字段名称必须唯一。</p>
<pre><code class="language-go">struct {
	T     // 嵌入字段 *T 与 *P.T 冲突
	*T    // 嵌入字段 T 与 *P.T 冲突
	*P.T  // 嵌入字段 T 与 *T 冲突
}
</code></pre>
<p>如果 <code>x.f</code> 是表示该字段或方法 <code>f</code> 的合法选择器，则会调用结构 <code>x</code> 中嵌入字段的字段或方法 <code>f</code>。</p>
<p>从嵌入字段组合来的字段与结构体原来的字段行为基本相同，只是不能在结构体的复合字面值中直接使用。</p>
<p>给定一个结构体 S 和一个类型 T，依据以下规则生成组合后的方法集：</p>
<ul>
<li>如果 S 包含嵌入字段 T，则 S 和 *S 的方法集包括接收者为 T 的方法集，而 *S 包括 接收者为 *T 的方法集。</li>
<li>如果 S 包含字段 <em>T。那么S和</em>S均包含接收者为 T 和 *T 的所有方法集。</li>
</ul>
<p>声明字段时可以给该字段添加一个字符串的 tag。这个 tag 将会成为它所对应字段的一个属性。空 tag 和缺省 tag 是相同的。tag 的值可以通过反射的接口获取，可以作为类型结构体的类型定义的一部分，也可以忽略。</p>
<pre><code class="language-go">struct {
	x, y float64 &quot;&quot;  // 空 tag 和缺省 tag 相同
	name string  &quot;any string is permitted as a tag&quot;
	_    [4]byte &quot;ceci n''est pas un champ de structure&quot;
}

// 结构体对应一个 TimeStamp 的 protocol buffer.
// tag 字符串中定义了 protocol buffer 字段对应的数字;
// 一般使用 reflect 包读取他们.
struct {
	microsec  uint64 `protobuf:&quot;1&quot;`
	serverIP6 uint64 `protobuf:&quot;2&quot;`
}
</code></pre>
<h4 id="指针类型"><a href="#指针类型" id="指针类型">指针类型</a></h4>
<p>指针类型表示所有指向给定类型变量的指针集合。这个指定的类型叫做指针的基础类型。没有初始化的指针值为nil。</p>
<pre><code class="language-go">PointerType = &quot;*&quot; BaseType .
BaseType    = Type .
</code></pre>
<pre><code class="language-go">*Point
*[4]int
</code></pre>
<h4 id="函数类型"><a href="#函数类型" id="函数类型">函数类型</a></h4>
<p>函数类型可以表示所有具有相同参数类型和返回值类型的函数。未初始化的函数类型值为 nil。</p>
<pre><code class="language-go">FunctionType   = &quot;func&quot; Signature .
Signature      = Parameters [ Result ] .
Result         = Parameters | Type .
Parameters     = &quot;(&quot; [ ParameterList [ &quot;,&quot; ] ] &quot;)&quot; .
ParameterList  = ParameterDecl { &quot;,&quot; ParameterDecl } .
ParameterDecl  = [ IdentifierList ] [ &quot;...&quot; ] Type .
</code></pre>
<p>在参数和返回值列表中，标识符列表必须同时存在或缺省。如果存在，那么每个名字都表示指定类型的一个参数/返回值，这些标识符必须非空并且不能重复。如果缺省，指定类型的参数/返回值使用对应的类型表示。参数列表和返回值列表一般都是需要加括号，不过在只有一个缺省返回值时，它可以不使用括号。</p>
<p>函数的最后一个参数可以添加前缀 <code>...</code>。包含这种参数的函数叫做变参函数，它可以接收零个或多个参数。</p>
<pre><code class="language-go">func()
func(x int) int
func(a, _ int, z float32) bool
func(a, b int, z float32) (bool)
func(prefix string, values ...int)
func(a, b int, z float64, opt ...interface{}) (success bool)
func(int, int, float64) (float64, *[]int)
func(n int) func(p *T)
</code></pre>
<h4 id="接口类型"><a href="#接口类型" id="接口类型">接口类型</a></h4>
<p>接口类型指定了一个方法集。一个接口类型变量可以保存任何方法集是该接口超集的类型。我们可以认为类型实现了接口。没有初始化的接口类型值为 nil。</p>
<pre><code class="language-go">InterfaceType      = &quot;interface&quot; &quot;{&quot; { MethodSpec &quot;;&quot; } &quot;}&quot; .
MethodSpec         = MethodName Signature | InterfaceTypeName .
MethodName         = identifier .
InterfaceTypeName  = TypeName .
</code></pre>
<p>在接口类型的方法集中，每个方法的名称必须是非空且唯一。</p>
<pre><code class="language-go">// A simple File interface
interface {
	Read(b Buffer) bool
	Write(b Buffer) bool
	Close()
}
</code></pre>
<p>接口可以由多个类型实现，例如：类型 <code>S1</code> 和类型 <code>S2</code> 都有以下方法集：</p>
<pre><code class="language-go">func (p T) Read(b Buffer) bool { return … }
func (p T) Write(b Buffer) bool { return … }
func (p T) Close() { … }
</code></pre>
<p>（这里的类型 T 可以表示 <code>S1</code> 也可以表示 <code>S2</code> ） <code>S1</code> 和 <code>S2</code> 都实现了接口 <code>File</code>，而不用管类型是否还有其他方法。</p>
<p>一个类型实现了任何方法集的为其子集的接口。因此它可能实现了多个不同接口。例如：所有的类型都实现了空接口：</p>
<pre><code class="language-go">interface{}
</code></pre>
<p>与之相似，思考下面这个定义为 <code>Locker</code> 的接口：</p>
<pre><code class="language-go">type Locker interface {
	Lock()
	Unlock()
}
</code></pre>
<p>如果 <code>S1</code> 和 <code>S2</code> 也实现了它：</p>
<pre><code class="language-go">func (p T) Lock() { … }
func (p T) Unlock() { … }
</code></pre>
<p>那它们就实现了两个接口 <code>Locker</code> 和 <code>File</code>。</p>
<p>一个接口 T 可以使用另一个接口 E 来指定方法。这种方式叫做将接口 E 嵌入进接口 T。它把 E 中所有的方法（包括导出和未导出的方法）全部添加进接口 T。</p>
<pre><code class="language-go">type ReadWriter interface {
	Read(b Buffer) bool
	Write(b Buffer) bool
}

type File interface {
	ReadWriter  // 与添加 ReadWriter 接口中的方法是等价的
	Locker      // 与添加 Locker 接口中的方法是等价的 
	Close()
}

type LockedFile interface {
	Locker
	File        // 无效: Lock, Unlock 不是唯一的
	Lock()      // 无效: Lock 不是唯一的
}
</code></pre>
<p>接口 T 不能递归的嵌入进自己或已经嵌入过它的接口。</p>
<pre><code class="language-go">// 无效: Bad 不能嵌入它自己
type Bad interface {
	Bad
}

// 无效: Bad1 不能嵌入已经引用它的 Bad2
type Bad1 interface {
	Bad2
}
type Bad2 interface {
	Bad1
}
</code></pre>
<h4 id="Map类型"><a href="#map类型" id="map类型">Map类型</a></h4>
<p>map 类型是一种以唯一值作为键的无序集合。</p>
<pre><code class="language-go">MapType     = &quot;map&quot; &quot;[&quot; KeyType &quot;]&quot; ElementType .
KeyType     = Type .
</code></pre>
<p>map的键类型必须能使用比较运算符 <code>==</code> 和 <code>!=</code> 进行比较。因此它的键类型不能是函数，map，或者切片。如果键是接口类型，那么比较运算符必须能比较他的动态值。如果不能会抛出一个运行时错误。</p>
<pre><code class="language-go">map[string]int
map[*T]struct{ x, y float64 }
map[string]interface{}
</code></pre>
<p>map中元素的个数叫做它的长度。对于一个map <code>m</code>。它的长度可以通过内置函数 <code>len</code> 获得，而且它的长度可能再运行时发生变化。map 可以再运行时添加和取回元素，页可以使用内置函数 <code>delete</code>移除元素。</p>
<p>可以使用内置函数 <code>make</code> 初始化一个新的且为空的 map。它能指定 map 的类型和预留的空间：</p>
<pre><code class="language-go">make(map[string]int)
make(map[string]int, 100)
</code></pre>
<p>map 的预留空间不会固定住 map 的长度；它可以通过添加一定数量的元素来增加自己的长度（nil map 不能添加元素）。nil map 和空 map 是相等的，只是 nil map 不能添加元素。</p>
<h4 id="Channel类型"><a href="#channel类型" id="channel类型">Channel类型</a></h4>
<p>channel提供一种手段在并发执行的函数间发送和接收指定类型的值。没有初始化的 channel 是nil。</p>
<pre><code class="language-go">ChannelType = ( &quot;chan&quot; | &quot;chan&quot; &quot;&lt;-&quot; | &quot;&lt;-&quot; &quot;chan&quot; ) ElementType .
</code></pre>
<p>操作符 <code>&lt;-</code> 可以指定 channel 的数据流动方向。如果没有指定方向，channel 默认是双向的。channel 可以通过转换和赋值来限制只读和只写。</p>
<pre><code class="language-go">chan T          // 可以接收和发送 T 类型的数据
chan&lt;- float64  // 只能发送 float64 类型的值
&lt;-chan int      // 只能接收
</code></pre>
<p><code>&lt;-</code> 与最左侧的 <code>chan</code> 关联：</p>
<pre><code class="language-go">chan&lt;- chan int    // 等价于 chan&lt;- (chan int)
chan&lt;- &lt;-chan int  // 等价于 chan&lt;- (&lt;-chan int)
&lt;-chan &lt;-chan int  // 等价于 &lt;-chan (&lt;-chan int)
chan (&lt;-chan int)
</code></pre>
<p>可以通过内置的 <code>make</code> 函数初始化 channel。<code>make</code> 函数可以指定channel的类型和容量。</p>
<pre><code class="language-go">make(chan int, 100)
</code></pre>
<p>容量是设置了最大能缓存元素的数量。如果没有设置容量或值为 0，channel 就是没有缓存的，这时只有当发送者和接收者都准备好后才会传输数据。而带缓存的 channel 在缓存没有满的时候依然可以成功发送数据，当缓存不为空的时候可以成功接收到数据，值为 nil 的 channel 不能传输数据。</p>
<p>可以通过内置函数 <code>close</code> 关闭 channel。在接收端的第二个返回值可以用来提示接收者在关闭的 channel 是否还包含数据。</p>
<p>channel 可以在发送语句，接收操作中使用。可以不考虑同步性直接在多个 goroutine 中对 channel 调用内置函数 <code>len</code> 和 <code>cap</code> 。channel 的行为和 FIFO 队列相同。举个例子，一个 goruntine 发送数据，另一个 goruntine 接收他们，接收数据的顺序和发送数据的顺序是相同的。</p>
<h2 id="类型的属性和值"><a href="#类型的属性和值" id="类型的属性和值">类型的属性和值</a></h2>
<h4 id="类型标识"><a href="#类型标识" id="类型标识">类型标识</a></h4>
<p>两个类型可能相同也可能不同。</p>
<p>定义的类型都是不同类型。如果两个类型的底层类型在结构上是相同的，那它们也是相等的。总的来说：</p>
<ul>
<li>2 个数组的长度和元素类型相同，那么它们就是相同类型。</li>
<li>如果两个切片的元素类型相同那么它们就是相同类型。</li>
<li>
<p>如果两个结构体字段顺序相同，并且字段名称、字段类型和 tag 都相同那么它们就是相等的。非导出字段的字段名在不同的包中总是不同的。</p>
</li>
<li>如果两个指针的基础类型相同那么他们具有相同类型。</li>
<li>
<p>如果两个函数具有相同的参数和返回值列表，并且他们的类型相同那么他们就是相同的，参数的名称不一定要相同。</p>
</li>
<li>如果两个接口的方法集完全相同（方法的顺序）。</li>
<li>
<p>如果两个 map 类型的键类型和值类型相同那它们就是相等的。</p>
</li>
<li>如果两个 channel 类型包含的对象类型和 channel 的方向都是相同的那它们就是相同的。</li>
</ul>
<p>给出下列声明：</p>
<pre><code class="language-go">type (
	A0 = []string
	A1 = A0
	A2 = struct{ a, b int }
	A3 = int
	A4 = func(A3, float64) *A0
	A5 = func(x int, _ float64) *[]string
)

type (
	B0 A0
	B1 []string
	B2 struct{ a, b int }
	B3 struct{ a, c int }
	B4 func(int, float64) *B0
	B5 func(x int, y float64) *A1
)

type	C0 = B0
</code></pre>
<p>这些类型是相等的：</p>
<pre><code class="language-go">A0, A1, and []string
A2 and struct{ a, b int }
A3 and int
A4, func(int, float64) *[]string, and A5

B0, B0, and C0
[]int and []int
struct{ a, b *T5 } and struct{ a, b *T5 }
func(x int, y float64) *[]string, func(int, float64) (result *[]string), and A5
</code></pre>
<p>B0 和 B1 不是一种类型因为它们是通过类型定义方式分别定义的；<code>func(int, float64) *B0</code> 和 <code>func(x int, y float64) *[]string</code> 是不同的，因为 B0 和 []string 不是相同类型。</p>
<h4 id="可分配性"><a href="#可分配性" id="可分配性">可分配性</a></h4>
<p>在以下情况下，可以将 x 分配给类型为 T 的变量（把 x 分配给 T）：</p>
<ul>
<li>x 的类型为 T</li>
<li>x 的类型 V 和 T 有相同的底层类型并且类型 T 或 V 至少一个定义的类型</li>
<li>
<p>T 是一个接口类型并且 x 实现了 T</p>
</li>
<li>x 是一个 channel，并且 T 是channel类型，类型V和类型T有相同的元素类型，并且 2 种类型至少有一种不是定义的类型</li>
<li>
<p>x 等于 nil 并且 T 是一个指针，函数，切片，map，channel 或接口类型</p>
</li>
<li>x 是一个可以表示 T 类型值的无类型常量</li>
</ul>
<h4 id="代表性"><a href="#代表性" id="代表性">代表性</a></h4>
<p>满足以下条件时可以用 T 类型的值表示常量 x：</p>
<ul>
<li>T 值的集合包括 x</li>
<li>T 是浮点型，而 x 在没有溢出的情况下能够近似成 T 类型。近似规则使用 <code>IEEE 754 round-to-even</code>，负零和无符号的零相同。需要注意的是，常量的值不会为负零，NaN，或无限值。</li>
<li>
<p>T 为复数类型，并且 x 的 <code>real(x)</code> 和 <code>imag(x)</code> 部分由复数类型对应的浮点类型（<code>float32</code> 或 <code>float64</code> ）组成。</p>
</li>
</ul>
<pre><code class="language-go">x                   T           x 可以表示 T 的值，因为：

''a''                 byte        97 在 byte 类型值的集合中
97                  rune        rune 是 int32 的别名，97 在 32 位整型值的集合中
&quot;foo&quot;               string      &quot;foo&quot; 在字符串值的集合中
1024                int16       1024 在 16 位整型值的集合中
42.0                byte        42 在 8 位无符号整型值的集合中
1e10                uint64      10000000000 在 64 位无符号整型值的集合中
2.718281828459045   float32     2.718281828459045 的近似值 2.7182817 在 float32 类型值的集合中
-1e-1000            float64     -1e-1000 的近视值 IEEE -0.0，等于 0 
0i                  int         0 是整型值
(42 + 0i)           float32     42.0 (0 虚部) 在 float32 类型值的集合中
</code></pre>
<pre><code class="language-go">x                   T           x 不能表示 T 的值，因为：

0                   bool        0 不在布尔值的集合中
''a''                 string      ''a'' 是 rune 类型, 它不在字符串类型的值集合中
1024                byte        1024 不在 8 位无符号整型值的集合中
-1                  uint16      -1 不在 16 位无符号整型值的集合中
1.1                 int         1.1 不是整型值
42i                 float32     (0 + 42i) 不在 float32 类型值的集合中
1e1000              float64     1e1000 取近似值时会溢出成 IEEE
</code></pre>
<h2 id="代码块"><a href="#代码块" id="代码块">代码块</a></h2>
<p>代码块是用大括号括起来的声明和语句。</p>
<pre><code class="language-go">Block = &quot;{&quot; StatementList &quot;}&quot; .
StatementList = { Statement &quot;;&quot; } .
</code></pre>
<p>除了源码中显式的代码块，也有一些隐式的代码块。</p>
<ul>
<li>包含所有的Go代码的全局代码块。</li>
<li>包含所有包的代码的包代码块。</li>
<li>
<p>包含文件内的所有代码的文件代码块。</p>
</li>
<li>每个 if，switch和 for 的范围都会形成隐式的块。</li>
<li>
<p>每个 switch 和 select 条件都有自己的代码块。</p>
</li>
</ul>
<p>代码块可以嵌套并且影响作用域。</p>
<h2 id="声明和作用域"><a href="#声明和作用域" id="声明和作用域">声明和作用域</a></h2>
<p>一段声明可以给常量，类型，变量，函数，标签，和包绑定标识符。程序中每个标识符都需要声明。相同标识符不能在同一个代码块中声明2次。并且相同标识符不能同时在文件和 package 代码块中声明。</p>
<p>空标识符可以和其他标识符一样在声明中使用。不过它不绑定标识符，等于没有声明。在 package 代码块中 <code>init</code> 标识符只能用做 <code>init</code> 函数的标识符，就像空标识符一样，它不会引入新的绑定。</p>
<pre><code class="language-go">Declaration   = ConstDecl | TypeDecl | VarDecl .
TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .
</code></pre>
<p>声明过的标识符的作用域就是声明标识符所在的作用域。</p>
<p>go使用块来规定词汇的方位：</p>
<ul>
<li>预定义的标识符具有全局作用域。</li>
<li>所有定义的顶级标识符具有包作用域。</li>
<li>
<p>import进来的包的名字标识符具有文件作用域。</p>
</li>
<li>方法的接收者，函数参数，返回值变量具有函数作用域。</li>
<li>
<p>函数内定义的参量和变量标识符的作用域是标识符被声明到容纳他的块结束。</p>
</li>
</ul>
<p>一个代码块中声明的标识符可以在它内部的代码块中重新声明。在内部代码块的作用域中标识符表示在内部代码块中声明的实体。</p>
<p>pakcage 语句不属于声明。包名不会出现在任何的作用域中。它的作用只是用来标识属于相同包的多个文件并在导入时指定默认包名。</p>
<h4 id="标签的作用域"><a href="#标签的作用域" id="标签的作用域">标签的作用域</a></h4>
<p>可以使用标签语句来声明标签，并且可以在 <code>break</code>，<code>continue</code>，<code>goto</code> 语法中使用。如果只声明但没有使用标签时非法的。标签的作用域只有定义时的函数体，早递归函数体中没有作用。</p>
<h4 id="空标识符"><a href="#空标识符" id="空标识符">空标识符</a></h4>
<p>空标识符使用下划线 <code>_</code> 代表。与一般的非空标识符不同，它作为匿名标识符在声明，运算元和赋值语句中都有特殊含义。</p>
<h4 id="预定义的标识符"><a href="#预定义的标识符" id="预定义的标识符">预定义的标识符</a></h4>
<p>以下标识符已经在全局作用域中预先声明：</p>
<pre><code class="language-go">Types:
	bool byte complex64 complex128 error float32 float64
	int int8 int16 int32 int64 rune string
	uint uint8 uint16 uint32 uint64 uintptr

Constants:
	true false iota

Zero value:
	nil

Functions:
	append cap close complex copy delete imag len
	make new panic print println real recover
</code></pre>
<h4 id="导出标识符"><a href="#导出标识符" id="导出标识符">导出标识符</a></h4>
<p>标识符可以导出供其他包使用。在以下两种情况同时满足时标识符是导出的：</p>
<ul>
<li>标识符的首字母是大写（Unicode 的 <code>Lu</code> 类）</li>
<li>标识符声明在包作用域或者它是字段名/方法名。</li>
</ul>
<p>其他任何标识符都不是导出的。</p>
<h4 id="标识符的唯一性"><a href="#标识符的唯一性" id="标识符的唯一性">标识符的唯一性</a></h4>
<p>给定一个标识符集合，一个标识符与集合中的每个标识符都不相同，那就认为这个标识符是唯一的。假设有两个标识符，如果它们的拼写不同，或者它们在不同的包中并没有导出，那它们就是不同标识符。相反，其他情况下都认为标识符是相同的。</p>
<h4 id="常量声明"><a href="#常量声明" id="常量声明">常量声明</a></h4>
<p>常量声明使用常量表达式绑定一系列标识符。标识符的数量必须等于表达式的数量。左侧第 n 个标识符绑定右侧第 n 个表达式的值。</p>
<pre><code class="language-go">ConstDecl      = &quot;const&quot; ( ConstSpec | &quot;(&quot; { ConstSpec &quot;;&quot; } &quot;)&quot; ) .
ConstSpec      = IdentifierList [ [ Type ] &quot;=&quot; ExpressionList ] .

IdentifierList = identifier { &quot;,&quot; identifier } .
ExpressionList = Expression { &quot;,&quot; Expression } .
</code></pre>
<p>如果给定类型，常量会指定类型，并且表达式的值必须能对这个类型进行赋值。</p>
<p>如果没有给定类型。常量会转换成相应的表达式类型。如果表达式的值是无类型常量，那么声明的常量也是无类型的，并且常量的标识符代表常量的值。例如：即使小数部分是 0，只要表达式是浮点数字面值，常量标识符也表示为浮点数常量。</p>
<pre><code class="language-go">const Pi float64 = 3.14159265358979323846
const zero = 0.0         // 无类型浮点数常量
const (
	size int64 = 1024
	eof        = -1  // 无类型整型常量
)
const a, b, c = 3, 4, &quot;foo&quot;  // a = 3, b = 4, c = &quot;foo&quot;, 无类型整型和字符串常量
const u, v float32 = 0, 3    // u = 0.0, v = 3.0
</code></pre>
<p>括号内的常量声明列表的表达式除了第一个必须声明其他表达式可以不写。空的表达式列表的值和类型都和前面的非空表达式相同。缺省的表达式列表等价于重复之前的表达式。标识符的数量必须等于表达式的数量。<code>iota</code>常量生成器是一个可以快速生成序列值的机制。</p>
<pre><code class="language-go">const (
	Sunday = iota
	Monday
	Tuesday
	Wednesday
	Thursday
	Friday
	Partyday
	numberOfDays  // 非导出常量
)
</code></pre>
<h4 id="Iota"><a href="#iota" id="iota">Iota</a></h4>
<p>在常量声明中，预定义的标识符 <code>iota</code> 表示连续的无类型整型常量。它的值为常量声明中每个常量定义的位置（从零开始）。它能够用来生成一个关联常量集合：</p>
<pre><code class="language-go">const ( // iota is reset to 0
	c0 = iota  // c0 == 0
	c1 = iota  // c1 == 1
	c2 = iota  // c2 == 2
)

const ( // iota is reset to 0
	a = 1 &lt;&lt; iota  // a == 1
	b = 1 &lt;&lt; iota  // b == 2
	c = 3          // c == 3  (没有使用 iota 不过它的值依然递增)
	d = 1 &lt;&lt; iota  // d == 8
)

const ( // iota is reset to 0
	u         = iota * 42  // u == 0     (无类型整型常量)
	v float64 = iota * 42  // v == 42.0  (float64 类型常量)
	w         = iota * 42  // w == 84    (无类型整型常量)
)

const x = iota  // x == 0  (iota 被重置)
const y = iota  // y == 0  (iota 被重置)
</code></pre>
<p>根据定义，在同一个常量定义中多次使用 <code>iota</code> 会得到相同的值：</p>
<pre><code class="language-go">const (
	bit0, mask0 = 1 &lt;&lt; iota, 1&lt;&lt;iota - 1  // bit0 == 1, mask0 == 0  (iota == 0)
	bit1, mask1                           // bit1 == 2, mask1 == 1  (iota == 1)
	_, _                                  //                        (iota == 2, unused)
	bit3, mask3                           // bit3 == 8, mask3 == 7  (iota == 3)
)
</code></pre>
<p>最后一个例子利用了最后一个非空表达式列表的隐式重复。</p>
<h4 id="类型声明"><a href="#类型声明" id="类型声明">类型声明</a></h4>
<p>类型声明为类型绑定一个标识符。类型声明有2种方式：类型声明和别名声明。</p>
<pre><code class="language-go">TypeDecl = &quot;type&quot; ( TypeSpec | &quot;(&quot; { TypeSpec &quot;;&quot; } &quot;)&quot; ) .
TypeSpec = AliasDecl | TypeDef .
</code></pre>
<h5 id="Alias声明"><a href="#alias声明" id="alias声明">Alias声明</a></h5>
<p>别名声明给指定类型绑定一个标识符名称。</p>
<pre><code class="language-go">AliasDecl = identifier &quot;=&quot; Type .
</code></pre>
<p>在标识符作用域内，它作为类型的别名。</p>
<pre><code class="language-go">type (
	nodeList = []*Node  // nodeList 和 []*Node 是相同类型
	Polar    = polar    // Polar 和 polar 表示相同类型
)
</code></pre>
<h5 id="Type 定义"><a href="#type-定义" id="type-定义">Type 定义</a></h5>
<p>类型定义会创建一个新类型并绑定一个标识符，新类型与给定类型具有相同的底层类型和操作。</p>
<pre><code class="language-go">TypeDef = identifier Type .
</code></pre>
<p>这个类型叫做定义类型，它和其他所有类型都不相同，包括创建它的类型。</p>
<pre><code class="language-go">type (
	Point struct{ x, y float64 }  // Point 和 struct{ x, y float64 } 是不同类型
	polar Point                   // polar 和 Point 表示不同类型
)

type TreeNode struct {
	left, right *TreeNode
	value *Comparable
}

type Block interface {
	BlockSize() int
	Encrypt(src, dst []byte)
	Decrypt(src, dst []byte)
}
</code></pre>
<p>定义类型可以关联该类型的方法。它不会继承原来类型的任何方法。但是接口类型的方法集和类型的结构没有改变。</p>
<pre><code class="language-go">// Mutex 是一个拥有 Lock 和 Unlock 两个方法的数据类型。
type Mutex struct         { /* Mutex fields */ }
func (m *Mutex) Lock()    { /* Lock implementation */ }
func (m *Mutex) Unlock()  { /* Unlock implementation */ }

// NewMutex 与 Mutex 结构相同不过方法集为空。
type NewMutex Mutex

// PtrMutex 的底层类型 *Mutex 的方法集没有改变，
// 但是 PtrMutex 的方法集为空。
type PtrMutex *Mutex

// *PrintableMutex 包含嵌入字段 Mutex 的 Lock 和 Unlock 方法。
type PrintableMutex struct {
	Mutex
}

// MyBlock 是与 Block 有相同方法集的接口类型
type MyBlock Block
</code></pre>
<p>类型定义可以定义方法集不同的布尔值、数字和字符串类型：</p>
<pre><code class="language-go">type TimeZone int

const (
	EST TimeZone = -(5 + iota)
	CST
	MST
	PST
)

func (tz TimeZone) String() string {
	return fmt.Sprintf(&quot;GMT%+dh&quot;, tz)
}
</code></pre>
<h4 id="变量声明"><a href="#变量声明" id="变量声明">变量声明</a></h4>
<p>变量声明可以创建一个或多个变量，并绑定对应的标识符、指定类型和初始值。</p>
<pre><code class="language-go">VarDecl     = &quot;var&quot; ( VarSpec | &quot;(&quot; { VarSpec &quot;;&quot; } &quot;)&quot; ) .
VarSpec     = IdentifierList ( Type [ &quot;=&quot; ExpressionList ] | &quot;=&quot; ExpressionList ) .
</code></pre>
<pre><code class="language-go">var i int
var U, V, W float64
var k = 0
var x, y float32 = -1, -2
var (
	i       int
	u, v, s = 2.0, 3.0, &quot;bar&quot;
)
var re, im = complexSqrt(-1)
var _, found = entries[name]  // map lookup; only interested in &quot;found&quot;
</code></pre>
<p>如果给定一个表达式列表。变量会根据赋值规则使用表达式进行初始化。否则，每个变量都会初始化成变量类型的零值。</p>
<p>如果指定类型，变量会为指定类型。如果没有指定类型，变量会使用分配的初始值类型。如果初始值为无类型常量，它会转换成初始值的默认类型。如果是一个无类型布尔值，那么变量的类型就是 <code>bool</code>。值 <code>nil</code> 不能给没有指定类型的变量赋值。</p>
<pre><code class="language-go">var d = math.Sin(0.5)  // d is float64
var i = 42             // i is int
var t, ok = x.(T)      // t is T, ok is bool
var n = nil            // illegal
</code></pre>
<p>实现的限制：在函数体内声明的变量如果没有使用过编译器需要报错。</p>
<h4 id="短变量声明"><a href="#短变量声明" id="短变量声明">短变量声明</a></h4>
<p>短变量声明的语法:</p>
<pre><code class="language-go">ShortVarDecl = IdentifierList &quot;:=&quot; ExpressionList .
</code></pre>
<p>它比正常使用初始化表达式进行变量声明的方式要短，而且不指定类型：</p>
<pre><code class="language-go">&quot;var&quot; IdentifierList = ExpressionList .
</code></pre>
<pre><code class="language-go">i, j := 0, 10
f := func() int { return 7 }
ch := make(chan int)
r, w := os.Pipe(fd)  // os.Pipe() 返回两个值
_, y, _ := coord(p)  // coord() 返回三个值，我们只关注 y
</code></pre>
<p>和常规变量声明不同，即使之前在相同代码块中声明过的变量，也可以在短变量重新声明相同类型的变量，并且保证至少会有一个新的非空变量。总之，只应该在多变量短声明的时候重新声明变量，重新声明并不会使用新的变量，而是给变量分配新值。</p>
<pre><code class="language-go">field1, offset := nextField(str, 0)
field2, offset := nextField(str, offset)  // 重新声明 offset
a, a := 1, 2                              // 非法：声明了 a 两次并且没有新的变量
</code></pre>
<p>短变量声明只能在函数中使用，例如在 <code>if</code>、<code>for</code>、<code>switch</code>语句的上下文中声明临时变量。</p>
<h4 id="函数声明"><a href="#函数声明" id="函数声明">函数声明</a></h4>
<p>函数声明为函数绑定标识符。</p>
<pre><code class="language-go">FunctionDecl = &quot;func&quot; FunctionName Signature [ FunctionBody ] .
FunctionName = identifier .
FunctionBody = Block .
</code></pre>
<p>如果函数指定了返回参数。函数体的语句必须以终止语句结束。</p>
<pre><code class="language-go">func IndexRune(s string, r rune) int {
   for i, c := range s {
   	if c == r {
   		return i
   	}
   }
   // 无效：缺少 return 语句
}
</code></pre>
<p>函数声明可以没有函数体。这样的声明提供一个函数声明，并由其他外部实现，例如汇编脚本。</p>
<pre><code class="language-go">func min(x int, y int) int {
	if x &lt; y {
		return x
	}
	return y
}

func flushICache(begin, end uintptr)  // 由外部实现
</code></pre>
<h4 id="方法声明"><a href="#方法声明" id="方法声明">方法声明</a></h4>
<p>方法是一个带接收者的函数，方法声明为方法绑定标识符作为方法名并指定方法对应的接收者类型。</p>
<pre><code class="language-go">MethodDecl = &quot;func&quot; Receiver MethodName Signature [ FunctionBody ] .
Receiver   = Parameters .
</code></pre>
<p>接收者通过在方法增加一个额外的参数来指定。这个参数必须是一个非可变参数。它的类型必须是 T 或者 T 的指针（可能包含括号）。T 被称作接收者的基础类型；它不能是指针或接口类型，并且只能在同一个包中定义方法。声明后，我们认为方法绑定了基础类型，并且可以通过 T 或 *T 选择器访问方法名。</p>
<p>非空的接收者标识符在方法签名中必须是唯一的。如果接收者的值没有在该方法中使用，那么接收者标识符可以省略。函数和方法的参数也是一样。</p>
<p>对于一个基础类型。绑定的非空的方法名必须是唯一的。如果基础类型是一个结构体，非空的方法名也不能与结构体字段重复。</p>
<p>给定一个<code>Point</code>类型。声明：</p>
<pre><code class="language-go">func (p *Point) Length() float64 {
	return math.Sqrt(p.x * p.x + p.y * p.y)
}

func (p *Point) Scale(factor float64) {
	p.x *= factor
	p.y *= factor
}
</code></pre>
<p>为类型 <code>*Point</code>绑定了2个方法 <code>Length</code> 和 <code>Scale</code>。</p>
<p>方法的类型就是以接收者作为第一个参数的函数类型，例如 <code>Scale</code> 方法：</p>
<pre><code class="language-go">func(p *Point, factor float64)
</code></pre>
<p>但是以这种方式声明的函数并不是方法。</p>
<h2 id="表达式"><a href="#表达式" id="表达式">表达式</a></h2>
<p>表达式通过针对运算元使用运算符和函数来获取计算值。</p>
<h4 id="运算元"><a href="#运算元" id="运算元">运算元</a></h4>
<p>运算元代表表达式中的一个简单的。运算元可以是字面值，非空标识符。或括号表达式。</p>
<p>空标识符只能出现在赋值声明的左侧。</p>
<pre><code class="language-go">Operand     = Literal | OperandName | MethodExpr | &quot;(&quot; Expression &quot;)&quot; .
Literal     = BasicLit | CompositeLit | FunctionLit .
BasicLit    = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
OperandName = identifier | QualifiedIdent.
</code></pre>
<h4 id="修饰标识符"><a href="#修饰标识符" id="修饰标识符">修饰标识符</a></h4>
<p>修饰标识符是以包名作为前缀修饰的标识符。包名和标识符都不能为空。</p>
<pre><code class="language-go">QualifiedIdent = PackageName &quot;.&quot; identifier .
</code></pre>
<p>修饰标识符可以用来访问不同包（需要先导入）中的标识符。标识符必须是导出的并在包级代码块声明才能够被访问。</p>
<pre><code class="language-go">math.Sin	// 表示 math 包中的 Sin 函数
</code></pre>
<h4 id="复合字面值"><a href="#复合字面值" id="复合字面值">复合字面值</a></h4>
<p>复合字面值能为结构体、数组、切片和 map 初始化值。它每次只能创建一个值。字面值由一个字面值类型和使用括号括起来的元素列表组成。元素前也可以声明元素对应的键。</p>
<pre><code class="language-go">CompositeLit  = LiteralType LiteralValue .
LiteralType   = StructType | ArrayType | &quot;[&quot; &quot;...&quot; &quot;]&quot; ElementType |
                SliceType | MapType | TypeName .
LiteralValue  = &quot;{&quot; [ ElementList [ &quot;,&quot; ] ] &quot;}&quot; .
ElementList   = KeyedElement { &quot;,&quot; KeyedElement } .
KeyedElement  = [ Key &quot;:&quot; ] Element .
Key           = FieldName | Expression | LiteralValue .
FieldName     = identifier .
Element       = Expression | LiteralValue .
</code></pre>
<p>字面值类型的底层类型必须是一个结构体，数组，切片或 map 类型（如果没有指定类型名就会强制执行这个约束）。元素的类型和键都必须能够分配给相应的字段的元素和键类型；没有额外的类型转换。键可以表示结构体的字段名，切片和数组的索引，map 类型的键。对于 map 字面值，所有的元素都必须有键。如果相同字段名或常量值的键对应多个元素就会报错。如果 map 类型的键为非常量类型，请看求值顺序章节。</p>
<p>结构体字面值遵循以下规则：</p>
<ul>
<li>在结构体中，键必须是它的字段名。</li>
<li>不包含任何键的元素列表的顺序需要与结构体字段的声明顺序相同。</li>
<li>
<p>如果一个元素指定了键，那么所有的元素都必须指定键。</p>
</li>
<li>包含键的元素列表不需要指定结构体的每个字字段，缺省字段会使用字段类型的零值。</li>
<li>
<p>字面值可以不指定元素；这样的字面值等于该类型的零值。</p>
</li>
<li>指定非本包的非导出字段会报错。</li>
</ul>
<p>给定声明：</p>
<pre><code class="language-go">type Point3D struct { x, y, z float64 }
type Line struct { p, q Point3D }
</code></pre>
<p>我们可以使用这种写法：</p>
<pre><code class="language-go">origin := Point3D{}                            // Point3D 的零值
line := Line{origin, Point3D{y: -4, z: 12.3}}  // line.q.x 的零值
</code></pre>
<p>数组和切片遵循以下规则：</p>
<ul>
<li>每个元素都关联一个数字索引标记元素再数组中的位置。</li>
<li>给元素指定的键会作为它的索引。键必须是能够表示非负的 <code>int</code> 类型值的常量；如果是指定类型的常量，那么常量必须是整型。</li>
<li>
<p>元素没有指定键时会使用之前的索引加一。如果第一个元素没有指定键，它的索引为零。</p>
</li>
</ul>
<p>对复合字面值取址会生成指向由字面量初始化的变量的指针。</p>
<pre><code class="language-go">var pointer *Point3D = &amp;Point3D{y: 1000}
</code></pre>
<p>数组字面值需要在类型中指定数组的长度。如果提供的元素少于数组的长度，那么缺少元素的位置将会使用元素类型的零值替代。如果索引超过数组的长度会报错。<code>…</code> 表示数组的长度等于最大元素索引加一。</p>
<pre><code class="language-go">buffer := [10]string{}             // len(buffer) == 10
intSet := [6]int{1, 2, 3, 5}       // len(intSet) == 6
days := [...]string{&quot;Sat&quot;, &quot;Sun&quot;}  // len(days) == 2
</code></pre>
<p>切片字面值底层其实就是数组字面值。因此它的长度和容量都是元素的最大索引加一。切片字面值的格式为：</p>
<pre><code class="language-go">[]T{x1, x2, … xn}
</code></pre>
<p>可以在数组上进行切片操作从而获得切片：</p>
<pre><code class="language-go">tmp := [n]T{x1, x2, … xn}
tmp[0 : n]
</code></pre>
<p>在一个数组、切片或 map 类型 T 中。元素或者 map 的键可能有自己的字面值类型，如果字面值类型和元素或者键类型相同，那么对应的类型标识符可以省略。与之类似，如果元素或键的类型为 <code>*T</code>，那么它们的 <code>&amp;T</code> 也可以省略。</p>
<pre><code class="language-go">[...]Point{{1.5, -3.5}, {0, 0}}     // same as [...]Point{Point{1.5, -3.5}, Point{0, 0}}
[][]int{{1, 2, 3}, {4, 5}}          // same as [][]int{[]int{1, 2, 3}, []int{4, 5}}
[][]Point{{{0, 1}, {1, 2}}}         // same as [][]Point{[]Point{Point{0, 1}, Point{1, 2}}}
map[string]Point{&quot;orig&quot;: {0, 0}}    // same as map[string]Point{&quot;orig&quot;: Point{0, 0}}
map[Point]string{{0, 0}: &quot;orig&quot;}    // same as map[Point]string{Point{0, 0}: &quot;orig&quot;}

type PPoint *Point
[2]*Point{{1.5, -3.5}, {}}          // same as [2]*Point{&amp;Point{1.5, -3.5}, &amp;Point{}}
[2]PPoint{{1.5, -3.5}, {}}          // same as [2]PPoint{PPoint(&amp;Point{1.5, -3.5}), PPoint(&amp;Point{})}
</code></pre>
<p>当复合字面值使用字面值类型的类型名格式出现在 <code>if</code>、<code>for</code> 或 <code>switch</code> 语句的关键字和括号之间并且没有使用圆括号包裹的时候，会引发语法歧义。在这种特殊的情况下字面值的括号会被认为是语句的代码块。为了避免歧义，复合字面值必须用括号括起来。</p>
<pre><code class="language-go">if x == (T{a,b,c}[i]) { … }
if (x == T{a,b,c}[i]) { … }
</code></pre>
<p>下面是合法的数组、切片和 map 的例子：</p>
<pre><code class="language-go">// list of prime numbers
primes := []int{2, 3, 5, 7, 9, 2147483647}

// vowels[ch] is true if ch is a vowel
vowels := [128]bool{''a'': true, ''e'': true, ''i'': true, ''o'': true, ''u'': true, ''y'': true}

// the array [10]float32{-1, 0, 0, 0, -0.1, -0.1, 0, 0, 0, -1}
filter := [10]float32{-1, 4: -0.1, -0.1, 9: -1}

// frequencies in Hz for equal-tempered scale (A4 = 440Hz)
noteFrequency := map[string]float32{
	&quot;C0&quot;: 16.35, &quot;D0&quot;: 18.35, &quot;E0&quot;: 20.60, &quot;F0&quot;: 21.83,
	&quot;G0&quot;: 24.50, &quot;A0&quot;: 27.50, &quot;B0&quot;: 30.87,
}
</code></pre>
<h4 id="函数字面值"><a href="#函数字面值" id="函数字面值">函数字面值</a></h4>
<p>函数字面值表示一个匿名函数。</p>
<pre><code class="language-go">FunctionLit = &quot;func&quot; Function .
</code></pre>
<pre><code class="language-go">func(a, b int, z float64) bool { return a*b &lt; int(z) }
</code></pre>
<p>函数字面值能分配给变量或直接调用。</p>
<p>函数字面值是一个闭包。它可以引用包裹函数中的变量，这些变量在包裹函数和函数字面值之间是共享的。并且它会一直存在直到生命周期结束。</p>
<h4 id="主要表达式"><a href="#主要表达式" id="主要表达式">主要表达式</a></h4>
<p>主要表达式是一元和二元表达式的运算元。</p>
<pre><code class="language-go">PrimaryExpr =
	Operand |
	Conversion |
	PrimaryExpr Selector |
	PrimaryExpr Index |
	PrimaryExpr Slice |
	PrimaryExpr TypeAssertion |
	PrimaryExpr Arguments .

Selector       = &quot;.&quot; identifier .
Index          = &quot;[&quot; Expression &quot;]&quot; .
Slice          = &quot;[&quot; [ Expression ] &quot;:&quot; [ Expression ] &quot;]&quot; |
                 &quot;[&quot; [ Expression ] &quot;:&quot; Expression &quot;:&quot; Expression &quot;]&quot; .
TypeAssertion  = &quot;.&quot; &quot;(&quot; Type &quot;)&quot; .
Arguments      = &quot;(&quot; [ ( ExpressionList | Type [ &quot;,&quot; ExpressionList ] ) [ &quot;...&quot; ] [ &quot;,&quot; ] ] &quot;)&quot; .
</code></pre>
<pre><code class="language-go">x
2
(s + &quot;.txt&quot;)
f(3.1415, true)
Point{1, 2}
m[&quot;foo&quot;]
s[i : j + 1]
obj.color
f.p[i].x()
</code></pre>
<h4 id="选择器"><a href="#选择器" id="选择器">选择器</a></h4>
<p>对于一个 x 不是包名的主要表达式，选择器表达式：</p>
<pre><code class="language-go">x.f
</code></pre>
<p>表示 x 的字段或方法 f（有时为 *x）。标识符 f 叫做（字段/方法）选择器。它不能是空标识符。选择器表达式的类型就是 f 的类型。如果 x 是包名。请参考修饰标识符。</p>
<p>选择器 f 可以表示类型 T 的方法或字段 f。也可以表示类型 T 的嵌入方法或字段 f。访问 f 所需穿过的嵌套层数叫做它在类型 T 中的深度。声明在 T 中的字段或方法的深度为 0。声明在 T 的嵌入字段 A 中的方法或字段的深度等于 f 在 A 中的深度加一。</p>
<p>选择器遵循以下原则：</p>
<ul>
<li>对于非指针/接口类型 T/*T 的值 x，x.f 表示第一层的方法/字段。如果在第一层没有对应的 f，选择器表达式就是非法的。</li>
<li>对于接口类型 I 的值 x，<code>x.f</code>表示动态值 x 的方法名 f。如果接口 I 的方法集中没有 f 方法，选择器就是非法的。</li>
<li>
<p>作为例外，如果 x 是一个指针类型并且 (*x).f 是合法的选择器表达式（只能表示字段，不能表示方法）。那么(*x).f 可以简写成 x.f。</p>
</li>
<li>在其他情况下，x.f 都是非法的。</li>
<li>
<p>如果x是指针类型，并且值为 nil，其中 f 为结构体字段。赋值或取值 x.f 会引起运行时恐慌。</p>
</li>
<li>如果x是接口类型，并且值为 nil。调用 x.f  会引起运行时恐慌。</li>
</ul>
<p>例如给定声明：</p>
<pre><code class="language-go">type T0 struct {
	x int
}

func (*T0) M0()

type T1 struct {
	y int
}

func (T1) M1()

type T2 struct {
	z int
	T1
	*T0
}

func (*T2) M2()

type Q *T2

var t T2     // with t.T0 != nil
var p *T2    // with p != nil and (*p).T0 != nil
var q Q = p
</code></pre>
<p>结果：</p>
<pre><code class="language-go">t.z          // t.z
t.y          // t.T1.y
t.x          // (*t.T0).x

p.z          // (*p).z
p.y          // (*p).T1.y
p.x          // (*(*p).T0).x

q.x          // (*(*q).T0).x        (*q).x is a valid field selector

p.M0()       // ((*p).T0).M0()      M0 expects *T0 receiver
p.M1()       // ((*p).T1).M1()      M1 expects T1 receiver
p.M2()       // p.M2()              M2 expects *T2 receiver
t.M2()       // (&amp;t).M2()           M2 expects *T2 receiver, see section on Calls
</code></pre>
<p>但是下面这种方式是不合法的：</p>
<pre><code class="language-go">q.M0()       // (*q).M0 is valid but not a field selector
</code></pre>
<h4 id="方法表达式"><a href="#方法表达式" id="方法表达式">方法表达式</a></h4>
<p>如果 M 在类型 T 的方法集中。那么 T.M 就是能够正常调用的函数。使用与 M 相同的参数只是在参数列表的最前面增加了接收者参数。</p>
<pre><code class="language-go">MethodExpr    = ReceiverType &quot;.&quot; MethodName .
ReceiverType  = TypeName | &quot;(&quot; &quot;*&quot; TypeName &quot;)&quot; | &quot;(&quot; ReceiverType &quot;)&quot; .
</code></pre>
<p>假设结构体 T 有两个方法。接收者类型为 T 的 Mv 方法和接收者类型为 *T 的 Mp 方法：</p>
<pre><code class="language-go">type T struct {
	a int
}
func (tv  T) Mv(a int) int         { return 0 }  // value receiver
func (tp *T) Mp(f float32) float32 { return 1 }  // pointer receiver

var t T
</code></pre>
<p>表达式</p>
<pre><code class="language-go">T.Mv
</code></pre>
<p>将会生成一个等价于 Mv 方法只是第一个参数显式声明接受者的函数。它的签名为：</p>
<pre><code class="language-go">func(tv T, a int) int
</code></pre>
<p>这个函数能够通过接收者正常调用，以下5种方式是等价的：</p>
<pre><code class="language-go">t.Mv(7)
T.Mv(t, 7)
(T).Mv(t, 7)
f1 := T.Mv; f1(t, 7)
f2 := (T).Mv; f2(t, 7)
</code></pre>
<p>与之类似：</p>
<pre><code class="language-go">(*T).Mp
</code></pre>
<p>生成表示 Mp 的函数签名：</p>
<pre><code class="language-go">func(tp *T, f float32) float32
</code></pre>
<p>对于一个把值作为接收者的方法，我们可以显式的从指针接收者获得函数：</p>
<pre><code class="language-go">(*T).Mv
</code></pre>
<p>生成表示 Mv 的函数签名：</p>
<pre><code class="language-go">func(tv *T, a int) int
</code></pre>
<p>这样的函数会通过接收者间接的创建一个值作为接收者传入底层方法中。方法内不能修改接收者的值，因为它的地址是在函数的调用栈里面。</p>
<p>最后一个例子。把值作为接收者函数当做指针作为接收者的方法是非法的，因为指针接收者的方法集中不包含值类型的方法集。</p>
<p>通过函数调用语法从方法中获取函数的值。接收者作为调用函数的第一个参数。给定  <code>f :=T.Mv</code>，f 作为<code>f(t,7)</code> 进行调用而不是 <code>t.f(7)</code>。想创建一个绑定接收者的函数可以使用函数字面值或者方法值。</p>
<p>在接口类型中定义函数获取函数值是合法的。最终的函数调用会使用接口类型作为接收者。</p>
<h4 id="方法值"><a href="#方法值" id="方法值">方法值</a></h4>
<p>如果表达式 x 拥有静态类型 T 并且 M 在类型 T 的方法集中。x.M 叫做方法值。方法值 <code>x.M</code> 是一个函数值，这个函数和 x.M 拥有相同的参数列表。表达式 x 在计算方法值时会被保存和计算，这个拷贝的副本会作为任何接下来调用的接收者。</p>
<p>类型 T 可能是接口类型也可能不是接口类型。</p>
<p>与方法表达式中讲过的一样，假设类型 T 有两个方法：接收者类型为 T 的 Mv 和接受者类型为 *T 的 Mp ：</p>
<pre><code class="language-go">type T struct {
	a int
}
func (tv  T) Mv(a int) int         { return 0 }  // value receiver
func (tp *T) Mp(f float32) float32 { return 1 }  // pointer receiver

var t T
var pt *T
func makeT() T
</code></pre>
<p>表达式：</p>
<pre><code class="language-go">t.Mv
</code></pre>
<p>生成一个类型的函数值：</p>
<pre><code class="language-go">func(int) int
</code></pre>
<p>以下两种调用是等价的：</p>
<pre><code class="language-go">t.Mv(7)
f := t.Mv; f(7)
</code></pre>
<p>相似的，表达式：</p>
<pre><code class="language-go">pt.Mp
</code></pre>
<p>生成一个类型的函数值：</p>
<pre><code class="language-go">func(float32) float32
</code></pre>
<p>与选择器相同，使用指针调用以值作为接收者的非接口方法会自动将指针解引用：<code>pt.Mv</code> 等价于 <code>(*pt).Mv</code>。</p>
<p>与方法调用相同，使用值调用以指针作为接收者的非接口方法会自动对值取址：<code>pt.Mv</code> 等价于 <code>(&amp;pt).Mv</code>。</p>
<pre><code class="language-go">f := t.Mv; f(7)   // like t.Mv(7)
f := pt.Mp; f(7)  // like pt.Mp(7)
f := pt.Mv; f(7)  // like (*pt).Mv(7)
f := t.Mp; f(7)   // like (&amp;t).Mp(7)
f := makeT().Mp   // invalid: result of makeT() is not addressable
</code></pre>
<p>尽管上面使用的都是非接口类型的例子，不过对于接口类型同样适用。</p>
<pre><code class="language-go">var i interface { M(int) } = myVal
f := i.M; f(7)  // like i.M(7)
</code></pre>
<h4 id="index表达式"><a href="#index表达式" id="index表达式">index表达式</a></h4>
<p>主要表达式格式：</p>
<pre><code class="language-go">a[x]
</code></pre>
<p>可以表示数组元素、数组的指针、切片、字符串或 map 类型 a 索引 x 对应的值。x 称作索引或者 map 的键。遵循以下规则：</p>
<p>如果a不是 map 类型：</p>
<ul>
<li>索引 x 必须是整型或无类型常量。</li>
<li>常量索引必须是非负数且可以使用 int 类型表示。</li>
<li>
<p>无类型的常量索引会作为 int 型的值。</p>
</li>
<li>索引 x 的范围在 <code>0&lt;=x&lt;len(a)</code> 内，否则就是越界。</li>
</ul>
<p>对于数组类型 A：</p>
<ul>
<li>常量索引必须在合法范围内。</li>
<li>如果 x 在运行时越界会引起运行时恐慌。</li>
<li>
<p><code>a[x]</code> 表示数组在索引 x 处的元素。<code>a[x]</code> 的类型就是 A 的元素类型。</p>
</li>
</ul>
<p>对于数组的指针类型：</p>
<ul>
<li>可以使用 <code>a[x]</code> 表示 <code>(*a)[x]</code>。</li>
</ul>
<p>对于切片类型 S：</p>
<ul>
<li>如果 x 在运行时越界会引起运行时恐慌。</li>
<li><code>a[x]</code> 表示切片在索引 x 处的元素。<code>a[x]</code> 的类型就是 S 的元素类型。</li>
</ul>
<p>对于字符串类型：</p>
<ul>
<li>如果字符串 a 为常量，那么常量索引必须在合法范围内。</li>
<li>如果 x 在运行时越界会引起运行时恐慌。</li>
<li>
<p>a[x] 表示索引 x 处的非常量字节，它是byte类型。</p>
</li>
<li>不能对 a[x] 分配值。</li>
</ul>
<p>对于 map 类型 M：</p>
<ul>
<li>必须保证 x 的类型能够给 M 的键分配值。</li>
<li>如果map包含键为 x 的值，a[x] 就是 map 中键 x 对应的值，它的类型就是 M 的元素类型。</li>
<li>
<p>如果 map 值为 nil 或不包含这个实体，那么 a[x] 为 M 元素类型的零值。</p>
</li>
</ul>
<p>否则 a[x] 就是非法的。</p>
<p>基于 <code>map[K]V</code> 类型  a 的索引表达式可以使用特殊格式的赋值和初始化语法。</p>
<pre><code class="language-go">v, ok = a[x]
v, ok := a[x]
var v, ok = a[x]
</code></pre>
<p>它会额外生成一个无类型的布尔值。如果 ok 是 true，那么代表在map中有该键，如果没有 ok 为 false。</p>
<p>给一个值为 nil 的 map 类型变量赋值会导致运行时恐慌。</p>
<h4 id="切片表达式"><a href="#切片表达式" id="切片表达式">切片表达式</a></h4>
<p>切片表达式可以基于字符串、数组、数组指针、切片创建字符串子串或切片。它有两种变体，一种是简单的格式是指定开始和结束位置，完全格式的语法还可以指定容量。</p>
<p>####### 简单切片表达式</p>
<p>对于数组、字符串、指针数组、切片 a，主要表达式：</p>
<pre><code class="language-go">a[low:high]
</code></pre>
<p>可以构造字符串子串或切片。索引 <code>low</code> 和 <code>high</code> 决定结果切片中的元素。结果切片的索引从 0 开始，长度为 <code>high - low</code>。从数组切分出的切片 s 拥有类型 <code>[]int</code>，长度为 3 ，容积为 4。</p>
<pre><code class="language-go">a := [5]int{1, 2, 3, 4, 5}
s := a[1:4]
</code></pre>
<pre><code class="language-go">s[0] == 2
s[1] == 3
s[2] == 4
</code></pre>
<p>为了方便起见，索引值都可以缺省。当 low 缺省时默认从 0 开始。当缺 high 缺省时默认的取切片的长度。</p>
<pre><code class="language-go">a[2:]  // same as a[2 : len(a)]
a[:3]  // same as a[0 : 3]
a[:]   // same as a[0 : len(a)]
</code></pre>
<p>如果 a 是一个数组指针，那么 <code>a[low:high]</code> 可以表示 <code>(*a)[low : high]</code>。</p>
<p>对于数组或者字符串，索引的范围是<code>0&lt;=low&lt;=high&lt;=len(a)</code>。对于切片，最大的索引值可以为切片的容量，而不是切片的长度。常量索引必须为非负数，且能够转换成 int 类型。对于数组或者常量字符串。常量索引值必须在合法范围内。如果2个索引都是常量。low 必须小于 high。如果索引在运行时访问了非法内存，程序会发生运行时恐慌。</p>
<p>除了无类型字符串，对于切片和字符串的操作结果是非常量类型的值，它的类型与运算元相同。如果运算元为无类型字符串，那么结果类型会为 string。如果把数组作为运算元，它必须是可寻址的，并且获得的切片和原数组具有同一元素类型。</p>
<p>如果切片运算元为 nil，那么结果也是 nil。否则结果切片会和运算元共享相同的底层无类型数组。</p>
<h6 id="完全切片表达式"><a href="#完全切片表达式" id="完全切片表达式">完全切片表达式</a></h6>
<p>对于数组，数组指针或非字符串切片，主要表达式为：</p>
<pre><code class="language-go">a[low : high : max]
</code></pre>
<p>它会构造一个同类型切片，并具有与简单切片表达式的 <code>a[low:high]</code> 相同的长度和元素。另外，它还可以把切片的容量设置为 <code>max - low</code>。这时只有第一个索引可以为缺省值，默认为零。从数组中获得切片以后：</p>
<pre><code class="language-go">a := [5]int{1, 2, 3, 4, 5}
t := a[1:3:5]
</code></pre>
<p>切片 t 为 []int 类型，长度为 2，容量为 4，并且元素为：</p>
<pre><code class="language-go">t[0] == 2
t[1] == 3
</code></pre>
<p>和简单切片表达式一样，如果 a 是数组指针 ，那么 <code>a[low:high:max]</code> 可以简写为 <code>(*a)[low:high:max]</code>。如果切分操作元是数组，那么这个数组必须是可以寻址的。</p>
<p>如果索引必须在 <code>0 &lt;= low &lt;= high &lt;= max &lt;= cap(a)</code> 范围内。常量索引不能是负数并且能够使用 <code>int</code> 类型表示；对于数组，索引必须在合法范围内。如果有多个索引都是常量的，那么所有索引都需要在合法范围内。如果索引是非法的，会引起运行时恐慌。</p>
<h4 id="类型断言"><a href="#类型断言" id="类型断言">类型断言</a></h4>
<p>对于接口类型 x 和类型 T，主要表达式：</p>
<pre><code class="language-go">x.(T)
</code></pre>
<p>可以断言 x 不是 nil  且 x 的值是 T 类型。标记 x.(T) 叫做类型断言。</p>
<p>更确切的说，如果 T 不是接口类型，那么 x.(T) 将会断言动态类型 x 的类型是不是 T。</p>
<p>这时，T 必须实现了 x 的（接口）类型。否则断言会是非法的因为 x 不能保存 T 类型的值。如果 T 是接口类型，那么可以断言动态类型 x 是否实现了 T 接口。</p>
<p>如果类型断言成功，表达式的值为 x 的值，但它的类型是T。如果断言失败，将会导致运行时恐慌。换句话说，即使 x 是运行时确定的，x.(T) 也必须是编程时就确认存在的。</p>
<pre><code class="language-go">var x interface{} = 7          // x 拥有动态类型 int 值为 7
i := x.(int)                   // i 为 int 类型值为 7

type I interface { m() }

func f(y I) {
   s := y.(string)        // 非法: 字符串没有实现接口 I （缺少 m 方法）
   r := y.(io.Reader)     // r 拥有接口 io.Reader 所以 y 的动态类型必须同时实现 I 和 io.Reader
   …
}
</code></pre>
<p>类型断言可以使用特定格式的赋值和初始化语句。</p>
<pre><code class="language-go">v, ok = x.(T)
v, ok := x.(T)
var v, ok = x.(T)
var v, ok T1 = x.(T)
</code></pre>
<p>这时将会额外生成一个无类型的布尔值。如果断言成功，ok返回 <code>true</code>，否则是 <code>false</code>。并且 v 会是 T 类型的零值。这时不会有恐慌发生。</p>
<h4 id="调用"><a href="#调用" id="调用">调用</a></h4>
<p>给定函数类型为 F 的表达式 f：</p>
<pre><code class="language-go">f(a1, a2, … an)
</code></pre>
<p>可以使用 a1,a2&hellip;an 来调用函数 f。除一种特殊情况之外，函数参数必须是对应 F 函数参数类型的单值表达式，且在函数调用前就已经完成求值。表达式的结果类型是 f 的结果类型。函数调用和方法调用相似，只是方法额外需要一个接收者类型。</p>
<pre><code class="language-go">math.Atan2(x, y)  // function call
var pt *Point
pt.Scale(3.5)     // method call with receiver pt
</code></pre>
<p>在函数调用中，函数的值和参数是按照顺序求值的。在计算之后作为参数会传进函数，函数开始执行。当函数执行完成后返回的参数将会返回给函数的调用者。</p>
<p>调用值为 nil 的函数会导致运行时恐慌。</p>
<p>作为特例，如果函数或者方法的返回值等于参数列表的个数，那么会嵌套调用。这将把返回值直接赋值给下一次调用函数的参数。</p>
<pre><code class="language-go">func Split(s string, pos int) (string, string) {
	return s[0:pos], s[pos:]
}

func Join(s, t string) string {
	return s + t
}

if Join(Split(value, len(value)/2)) != value {
	log.Panic(&quot;test fails&quot;)
}
</code></pre>
<p>如果 x 的方法集中包含 m 那么 <code>x.m()</code> 是合法的。并且参数列表和 m 的参数列表相同。如果x是可寻址的，那么那么x指针的方法集<code>(&amp;x).m()</code>可以简写成<code>x.m()</code>。</p>
<pre><code class="language-go">var p Point
p.Scale(3.5)
</code></pre>
<p>没有方法类型，也没有方法字面值。</p>
<h4 id="通过 `...` 来传递参数"><a href="#通过-来传递参数" id="通过-来传递参数">通过 <code>...</code> 来传递参数</a></h4>
<p>如果 f 的最后一个参数 p 的类型是 <code>...T</code>。那么在函数内部 p 参数的类型就是 <code>[]T</code>。如果 f 调用时没有传入 p 对应的参数，那么p为 nil。否则这些参数会以切片方式传入，在新的底层切片中。切片中的类型都是能赋值给类型 T 的值。这个切片的长度和容量在不同的调用中有所不同。</p>
<p>给定函数调用：</p>
<pre><code class="language-go">func Greeting(prefix string, who ...string)
Greeting(&quot;nobody&quot;)
Greeting(&quot;hello:&quot;, &quot;Joe&quot;, &quot;Anna&quot;, &quot;Eileen&quot;)
</code></pre>
<p>在 <code>Greeting</code> 中，第一次调用时，<code>who</code>是 nil 类型。而在第二次调用时是<code>[]string{&quot;Joe&quot;, &quot;Anna&quot;, &quot;Eileen&quot;}</code>。</p>
<p>如果在调用的时候的最后一个参数是[]T，那么我们可以使用<code>...</code>来将切片中的值依次赋值给参数列表。</p>
<p>给定切片s并且调用:</p>
<pre><code class="language-go">s := []string{&quot;James&quot;, &quot;Jasmine&quot;}
Greeting(&quot;goodbye:&quot;, s...)
</code></pre>
<p>z 在 <code>Greeting</code>。中 <code>who</code> 会和切片 s 共享相同的底层数组。</p>
<h4 id="操作符"><a href="#操作符" id="操作符">操作符</a></h4>
<p>操作符用来连接运算元。</p>
<pre><code class="language-go">Expression = UnaryExpr | Expression binary_op Expression .
UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .

binary_op  = &quot;||&quot; | &quot;&amp;&amp;&quot; | rel_op | add_op | mul_op .
rel_op     = &quot;==&quot; | &quot;!=&quot; | &quot;&lt;&quot; | &quot;&lt;=&quot; | &quot;&gt;&quot; | &quot;&gt;=&quot; .
add_op     = &quot;+&quot; | &quot;-&quot; | &quot;|&quot; | &quot;^&quot; .
mul_op     = &quot;*&quot; | &quot;/&quot; | &quot;%&quot; | &quot;&lt;&lt;&quot; | &quot;&gt;&gt;&quot; | &quot;&amp;&quot; | &quot;&amp;^&quot; .

unary_op   = &quot;+&quot; | &quot;-&quot; | &quot;!&quot; | &quot;^&quot; | &quot;*&quot; | &quot;&amp;&quot; | &quot;&lt;-&quot; .
</code></pre>
<p>比较运算符在此处讨论。对于其他二元操作符，两个操作元的类型必须是相同的，除了位移和无类型常量。针对常量的操作，请看常量表达式章节。</p>
<p>除了位移操作，如果其中一个操作符是无类型常量，而另个不是，那么无类型的常量会转换成另一个运算元的类型。</p>
<p>在右移表达式中的运算元必须是无符号的整数或者可以转换成 uint 的无类型的常量。如果左移一个无类型常量那么结果依然是无类型的。他首先会转换成指定类型。</p>
<pre><code class="language-go">var s uint = 33
var i = 1&lt;&lt;s           // 1 has type int
var j int32 = 1&lt;&lt;s     // 1 has type int32; j == 0
var k = uint64(1&lt;&lt;s)   // 1 has type uint64; k == 1&lt;&lt;33
var m int = 1.0&lt;&lt;s     // 1.0 has type int; m == 0 if ints are 32bits in size
var n = 1.0&lt;&lt;s == j    // 1.0 has type int32; n == true
var o = 1&lt;&lt;s == 2&lt;&lt;s   // 1 and 2 have type int; o == true if ints are 32bits in size
var p = 1&lt;&lt;s == 1&lt;&lt;33  // illegal if ints are 32bits in size: 1 has type int, but 1&lt;&lt;33 overflows int
var u = 1.0&lt;&lt;s         // illegal: 1.0 has type float64, cannot shift
var u1 = 1.0&lt;&lt;s != 0   // illegal: 1.0 has type float64, cannot shift
var u2 = 1&lt;&lt;s != 1.0   // illegal: 1 has type float64, cannot shift
var v float32 = 1&lt;&lt;s   // illegal: 1 has type float32, cannot shift
var w int64 = 1.0&lt;&lt;33  // 1.0&lt;&lt;33 is a constant shift expression
</code></pre>
<h6 id="运算符优先级"><a href="#运算符优先级" id="运算符优先级">运算符优先级</a></h6>
<p>一元运算符拥有最高优先级。++ 和 &ndash; 是语句而不是表达式，他们在运算符的优先级之外。所以 (*p)++ 和 *p++ 是一样的。</p>
<p>二元运算符有 5 个优先级。乘法运算符在最高级，紧接着是加法运算符。比较运算符，&amp;&amp; 运算符，最后是 ||。</p>
<pre><code class="language-go">Precedence    Operator
    5             *  /  %  &lt;&lt;  &gt;&gt;  &amp;  &amp;^
    4             +  -  |  ^
    3             ==  !=  &lt;  &lt;=  &gt;  &gt;=
    2             &amp;&amp;
    1             ||
</code></pre>
<p>相同优先级的二元运算符的执行顺序是由左到右。例如 <code>x/y*z</code>和<code>(x/y)*z</code> 是一样的。</p>
<pre><code class="language-go">+x
23 + 3*x[i]
x &lt;= f()
^a &gt;&gt; b
f() || g()
x == y+1 &amp;&amp; &lt;-chanPtr &gt; 0
</code></pre>
<h4 id="算数运算符"><a href="#算数运算符" id="算数运算符">算数运算符</a></h4>
<p>算数运算符应用在 2 个数字值之间，别切生成一个相同类型的值作为第一个运算元。四种算数运算符(+,-,*,/)应用在数字，浮点，复合类型之中。+ 也可以用于字符串。位运算和位移运算只适用于整数。</p>
<pre><code class="language-go">+    sum                    integers, floats, complex values, strings
-    difference             integers, floats, complex values
*    product                integers, floats, complex values
/    quotient               integers, floats, complex values
%    remainder              integers

&amp;    bitwise AND            integers
|    bitwise OR             integers
^    bitwise XOR            integers
&amp;^   bit clear (AND NOT)    integers

&lt;&lt;   left shift             integer &lt;&lt; unsigned integer
&gt;&gt;   right shift            integer &gt;&gt; unsigned integer
</code></pre>
<h6 id="数字运算符"><a href="#数字运算符" id="数字运算符">数字运算符</a></h6>
<p>对于两个整数 x 和 y。整数商 <code>q=x/y</code> 和余数 <code>r=x%y</code> 遵循以下规律。</p>
<pre><code class="language-go">x = q*y + r  and  |r| &lt; |y|
</code></pre>
<p><code>x/y</code> 截断为 0。</p>
<pre><code class="language-go">x     y     x / y     x % y
 5     3       1         2
-5     3      -1        -2
 5    -3      -1         2
-5    -3       1        -2
</code></pre>
<p>作为这个规则的例外情况，如果 x 非常大，那么 <code>q=x/-1</code> 等于 x。</p>
<pre><code class="language-go">x, q
int8                     -128
int16                  -32768
int32             -2147483648
int64    -9223372036854775808
</code></pre>
<p>如果除数是一个常量。那么它不能是 0，如果除数在运行时为 0，会导致运行时恐慌。如果除数是负数并且除数是：</p>
<pre><code class="language-go">x     x / 4     x % 4     x &gt;&gt; 2     x &amp; 3
 11      2         3         2          3
-11     -2        -3        -3          1
</code></pre>
<p>位移运算符移动左侧运算元右侧元算元指定的位数。如果左侧是有符号整型，那它就实现了位移运算，如果是无符号整数使用逻辑位移。位移运算没有上限，位移操作让左边运算元位移 n 个 1。<code>x&lt;&lt;1</code> 和 <code>x*2</code> 是相等的。并且 <code>x&gt;&gt;1</code> 和 <code>x/2</code> 是相同的。</p>
<p>对于整数运算元，一元运算符+-^定义如下：</p>
<pre><code class="language-go">+x                          is 0 + x
-x    negation              is 0 - x
^x    bitwise complement    is m ^ x  with m = &quot;all bits set to 1&quot; for unsigned x
                                      and  m = -1 for signed x
</code></pre>
<h6 id="整型溢出"><a href="#整型溢出" id="整型溢出">整型溢出</a></h6>
<p>对于无符号的值，运算符+-*和&lt;&lt;都是2禁止运算。这里的n是无符号类型的宽度，无符号整型将会丢弃溢出的位，并且程序将会返回<code>wrap around</code>。</p>
<p>对于有符号的整数，操作符+=*&lt;&lt;都会溢出并且值存在，并且代表相应的有符号的值。在运算时不会抛出异常。标一起不会报错。所以不是所有情况下x&lt;x+1都成立。</p>
<h6 id="浮点数运算符"><a href="#浮点数运算符" id="浮点数运算符">浮点数运算符</a></h6>
<p>对于浮点数和其他复杂数字，+x和x是一样的，-x是x的对立面。除了IEEE-754还没有指定浮点数除0或者复数的结果。是否抛出异常将会依赖其具体实现。</p>
<p>一种实现可以合并多个浮点操作进一个操作，有可能是夸语句的，并且他的结果可能和依次单独执行的结果不一样。1个浮点数类型将会转变成目标的精度，防止四舍五入的融合。</p>
<pre><code class="language-go">// FMA allowed for computing r, because x*y is not explicitly rounded:
r  = x*y + z
r  = z;   r += x*y
t  = x*y; r = t + z
*p = x*y; r = *p + z
r  = x*y + float64(z)

// FMA disallowed for computing r, because it would omit rounding of x*y:
r  = float64(x*y) + z
r  = z; r += float64(x*y)
t  = float64(x*y); r = t + z
</code></pre>
<h6 id="字符串"><a href="#字符串" id="字符串">字符串</a></h6>
<p>字符串可以使用+和+=操作符。</p>
<pre><code class="language-go">s := &quot;hi&quot; + string(c)
s += &quot; and good bye&quot;
</code></pre>
<p>字符串想家将会创建一个新的字符串。</p>
<h4 id="比较运算符"><a href="#比较运算符" id="比较运算符">比较运算符</a></h4>
<p>比较运算符比较连个运算元，并且生成一个无类型的布尔值。</p>
<pre><code class="language-go">==    equal
!=    not equal
&lt;     less
&lt;=    less or equal
&gt;     greater
&gt;=    greater or equal
</code></pre>
<p>在任何比较运算元中2种类型必须是可以分配的。</p>
<p>使用等于运算符<code>==</code>和<code>!=</code>的运算元必须是可比较的。使用顺序运算符<code>&lt;</code>,<code>&lt;=</code>,<code>&gt;</code>和<code>&gt;=</code>必须是可比较的。这些限制导致比较运算符被定义成以下的方式。</p>
<ul>
<li>布尔值是可比较的，两个布尔值当他们同为<code>true</code>或者false的使用是相等的</li>
<li>整数值是可比较和排序的</li>
<li>
<p>浮点数是可比较和排序的，具体定义在IEEE-754标准中。</p>
</li>
<li>复数是可比较的，2个复数当实部和虚部都相等时就是相等的。</li>
<li>
<p>字符串是可以比较和排序的。是按照字节顺序排序。</p>
</li>
<li>指针式可以排序的，连个指针当指向相同变量时是相同的，或者他们2个都是nil。指向一个为非配的变量的结果是未定义的。</li>
<li>
<p>channel是可比较的。当两个管道是用同一个make出来的，或者都是nil时时相等的。</p>
</li>
<li>接口值时可以比较的，2个接口值时相等的如果2个标识符的动态类型是一样的或者他们都是nil。</li>
<li>
<p>一个非接口类型的值x和一个接口类型的值T在非接口类型是可以比较的并且非接口类型实现了接口是是可以比较的。当他们的动态类型类型相同时时相等的。</p>
</li>
<li>当结构体内的所有字段都是可以比较的时候，他是可以比较的。连个结构体的值当非空字段都相等时他们是相等的。</li>
<li>
<p>数组类型的值时可比较的，如果数组的原属时可以比较的，那么当数组的所有值是相等的时候他们就是相等的。</p>
</li>
</ul>
<p>使用两个动态类型的标识符来比较接口的值。如果这个类型的值时不可比较的，那么将会引起一个panic。这个行为不仅仅时接口，数组结构体接口字段都有这个问题。</p>
<p>切片，map，和函数值都是不可比较的，然而，作为一个特殊的例子，切片，map和函数的值的nil时可以比较的，指针，channel和接口的值nil也是可以比较的。</p>
<pre><code class="language-go">const c = 3 &lt; 4            // c is the untyped boolean constant true

type MyBool bool
var x, y int
var (
	// The result of a comparison is an untyped boolean.
	// The usual assignment rules apply.
	b3        = x == y // b3 has type bool
	b4 bool   = x == y // b4 has type bool
	b5 MyBool = x == y // b5 has type MyBool
)
</code></pre>
<h4 id="逻辑操作符"><a href="#逻辑操作符" id="逻辑操作符">逻辑操作符</a></h4>
<p>逻辑运算符使用布尔值值，并且生成一个相同类型的结果值作为操作元。右面的操作元计算是有条件的。</p>
<pre><code class="language-go">&amp;&amp;    conditional AND    p &amp;&amp; q  is  &quot;if p then q else false&quot;
||    conditional OR     p || q  is  &quot;if p then true else q&quot;
!     NOT                !p      is  &quot;not p&quot;
</code></pre>
<h4 id="地址操作符"><a href="#地址操作符" id="地址操作符">地址操作符</a></h4>
<p>以类型 T 的 x 作为运算元，取址操作 <code>&amp;x</code> 会生成一个类型为 <code>*T</code> 并指向 x 的指针。运算元必须是能够取址的，它可以是一个变量，指针，切片的取值操作；或是一个可取址结构体的字段选择器；或是对于可取址数组的索引取值操作。作为寻址能力的例外，x 可能是一个复合字面值。如果对 x 进行取址操作将会 panic，<code>&amp;x</code> 也会 panic。</p>
<p>对于一个 <code>*T</code> 类型的运算元 x，指针解引用 <code>*x</code> 表示 x 指向的 T 类型。如果 x 为 nil，那么解引用 <code>*x</code> 会 panic。</p>
<pre><code class="language-go">&amp;x
&amp;a[f(2)]
&amp;Point{2, 3}
*p
*pf(x)

var x *int = nil
*x   // causes a run-time panic
&amp;*x  // causes a run-time panic
</code></pre>
<h4 id="接收操作符"><a href="#接收操作符" id="接收操作符">接收操作符</a></h4>
<p>对于管道类型的运算元 <code>ch</code>，接收操作 <code>&lt;-ch</code> 返回值是管道 <code>ch</code> 接收到的值。带方向的管道需要有接受权限，接收操作的类型也是通道的元素类型。表达式会一直阻塞直到接收到返回值。从 nil 通道接收值会一直阻塞。从一个已经关闭的通道接收数据会在其他数据都被接收以后生成该通道元素类型的零值。</p>
<pre><code class="language-go">v1 := &lt;-ch
v2 = &lt;-ch
f(&lt;-ch)
&lt;-strobe  // wait until clock pulse and discard received value
</code></pre>
<p>接收数据的表达式可以使用赋值表达式。</p>
<pre><code class="language-go">x, ok = &lt;-ch
x, ok := &lt;-ch
var x, ok = &lt;-ch
var x, ok T = &lt;-ch
</code></pre>
<p>它还可以生成一个额外的无类型布尔值来表示通道是否关闭。如果 ok 为 <code>true</code> 说明获取到的是发送到通道内的数据，而 <code>false</code> 它就返回一个零值因为通道内没有元素且已经关闭。</p>
<h4 id="类型转换"><a href="#类型转换" id="类型转换">类型转换</a></h4>
<p>类型转换表达式 <code>T(x)</code> 其中 T 代表类型，x 代表可以转换成 T 类型的表达式。</p>
<pre><code class="language-go">Conversion = Type &quot;(&quot; Expression [ &quot;,&quot; ] &quot;)&quot; .
</code></pre>
<p>如果类型是以 <code>*</code> 或 <code>&lt;-</code> 开头，或以关键字 <code>func</code> 开头并且没有返回值列表，那么它必须用括号括起来避免歧义：</p>
<pre><code class="language-go">*Point(p)        // same as *(Point(p))
(*Point)(p)      // p is converted to *Point
&lt;-chan int(c)    // same as &lt;-(chan int(c))
(&lt;-chan int)(c)  // c is converted to &lt;-chan int
func()(x)        // function signature func() x
(func())(x)      // x is converted to func()
(func() int)(x)  // x is converted to func() int
func() int(x)    // x is converted to func() int (unambiguous)
</code></pre>
<p>常量 x 可以在可以用类型 T 表示时自动转换。作为一个特例，整数常量 x 可以转换成字符串类型就和非常量 x 一样。</p>
<p>对常量的转换会生成一个指定类型的常量。</p>
<pre><code class="language-go">uint(iota)               // iota value of type uint
float32(2.718281828)     // 2.718281828 of type float32
complex128(1)            // 1.0 + 0.0i of type complex128
float32(0.49999999)      // 0.5 of type float32
float64(-1e-1000)        // 0.0 of type float64
string(''x'')              // &quot;x&quot; of type string
string(0x266c)           // &quot;♬&quot; of type string
MyString(&quot;foo&quot; + &quot;bar&quot;)  // &quot;foobar&quot; of type MyString
string([]byte{''a''})      // not a constant: []byte{''a''} is not a constant
(*int)(nil)              // not a constant: nil is not a constant, *int is not a boolean, numeric, or string type
int(1.2)                 // illegal: 1.2 cannot be represented as an int
string(65.0)             // illegal: 65.0 is not an integer constant
</code></pre>
<p>非常量 x 可以在以下情况下转换成类型 T：</p>
<ul>
<li>x 可以给类型 T 赋值</li>
<li>忽略的结构体标签，x 的类型和 T 具有相同的底层类型</li>
<li>
<p>忽略的结构体标签，x 的类型和 T 都是指针类型，并且指针所指的类型具有相同的底层类型</p>
</li>
<li>x 的类型和 T 都是整数或者浮点数类型</li>
<li>
<p>x 的类型和 T 都是复数类型</p>
</li>
<li>x 是一个字符串而 T 时字节切片或者 rune 切片</li>
</ul>
<p>在比较两个结构体类型的时候会忽略结构体标签：</p>
<pre><code class="language-go">type Person struct {
	Name    string
	Address *struct {
		Street string
		City   string
	}
}

var data *struct {
	Name    string `json:&quot;name&quot;`
	Address *struct {
		Street string `json:&quot;street&quot;`
		City   string `json:&quot;city&quot;`
	} `json:&quot;address&quot;`
}

var person = (*Person)(data)  // ignoring tags, the underlying types are identical
</code></pre>
<p>这个规则也适用于数字类型与字符串类型间的相互转换。这个转换可能会改变 x 的值并且会增加运行时消耗。包 unsafe 实现了这个功能底层的限制。</p>
<h6 id="数字之间的转换"><a href="#数字之间的转换" id="数字之间的转换">数字之间的转换</a></h6>
<p>对于非常量的数字转换，需要遵守以下规则：</p>
<ul>
<li>在转换整型数字时，如果是一个有符号整型，它是继承有符号的无限精度；否则就不用继承符号。转换时会截断数字以适应类型的大小。例如：如果 <code>v:=uint16(0x10F0)</code>，然后 ``uint32(int8(v)) == 0xFFFFFFF0 。类型转换总是生成有效值，并且永远不会溢出。</li>
<li>如果要将浮点数转换成整型，会丢弃小数部分（截断为零）。</li>
<li>
<p>如果要将整型或浮点型转换成浮点数类型，或或者一个复数转换成其他复数类型，结果会四舍五入成指定精度。例如： 可以使用超出IEEE-754 32位数的附加精度来存储float32类型的变量x的值，但float32（x）表示将x的值舍入为32位精度的结果。x + 0.1 会使用超过 32 位的精度，而 <code>float32(x+0.1)</code> 不会。</p>
</li>
</ul>
<p>在所有浮点数和复数的非常量转换中，如果结构类型不能成功表示数据，那么结果将会依赖于具体平台实现。</p>
<h6 id="字符串的类型转换"><a href="#字符串的类型转换" id="字符串的类型转换">字符串的类型转换</a></h6>
<ol>
<li>转换一个有符号或者无符号的整型值会转换成对应的 UTF-8 表示整型值。不在范围内的 Unicode 代码点会转换成 &ldquo;\uFFFD&rdquo;。</li>
</ol>
<pre><code class="language-go">string(''a'')       // &quot;a&quot;
string(-1)        // &quot;\ufffd&quot; == &quot;\xef\xbf\xbd&quot;
string(0xf8)      // &quot;\u00f8&quot; == &quot;ø&quot; == &quot;\xc3\xb8&quot;
type MyString string
MyString(0x65e5)  // &quot;\u65e5&quot; == &quot;日&quot; == &quot;\xe6\x97\xa5&quot;
</code></pre>
<ol>
<li>将字节切片转换成字符串类型会生成一个由切片元素组成的字符串</li>
</ol>
<pre><code class="language-go">string([]byte{''h'', ''e'', ''l'', ''l'', ''\xc3'', ''\xb8''})   // &quot;hellø&quot;
string([]byte{})                                     // &quot;&quot;
string([]byte(nil))                                  // &quot;&quot;

type MyBytes []byte
string(MyBytes{''h'', ''e'', ''l'', ''l'', ''\xc3'', ''\xb8''})  // &quot;hellø&quot;
</code></pre>
<ol>
<li>将 rune 切片转换成字符串类型会生成一个由切片元素组成的字符串</li>
</ol>
<pre><code class="language-go">string([]rune{0x767d, 0x9d6c, 0x7fd4})   // &quot;\u767d\u9d6c\u7fd4&quot; == &quot;白鵬翔&quot;
string([]rune{})                         // &quot;&quot;
string([]rune(nil))                      // &quot;&quot;

type MyRunes []rune
string(MyRunes{0x767d, 0x9d6c, 0x7fd4})  // &quot;\u767d\u9d6c\u7fd4&quot; == &quot;白鵬翔&quot;
</code></pre>
<ol>
<li>将字符串转换成字节切片会生成由字符串中每个字节组成的切片</li>
</ol>
<pre><code class="language-go">[]byte(&quot;hellø&quot;)   // []byte{''h'', ''e'', ''l'', ''l'', ''\xc3'', ''\xb8''}
[]byte(&quot;&quot;)        // []byte{}

MyBytes(&quot;hellø&quot;)  // []byte{''h'', ''e'', ''l'', ''l'', ''\xc3'', ''\xb8''}
</code></pre>
<ol>
<li>将字符串转换成 rune 切片会生成由字符串中每个 Unicode 代码点组成的切片</li>
</ol>
<pre><code class="language-go">[]rune(MyString(&quot;白鵬翔&quot;))  // []rune{0x767d, 0x9d6c, 0x7fd4}
[]rune(&quot;&quot;)                 // []rune{}

MyRunes(&quot;白鵬翔&quot;)           // []rune{0x767d, 0x9d6c, 0x7fd4}
</code></pre>
<h6 id="常量表达式"><a href="#常量表达式" id="常量表达式">常量表达式</a></h6>
<p>常量表达式只包含常量运算元并且在编译程序时就已经计算完成。</p>
<p>无类型布尔值，数值和字符串常量都可以当作运算元。除了位置操作符，如果二元运算符石不同类型的常量，操作元，和非布尔值，和即将在接下来出现的：整型，rune，浮点数和复数类型。例如：一个无类型整型常量减去无类型复数常量，结果为复数常量。</p>
<p>一个常量的比较运算会生成无类型的布尔常量。如果左移运算是一个无类型常量，结果会是一个整型常量。它会和原来常量为相同类型。其他与无类型常量的运算都会生成相同类型的结果（布尔值，整型，浮点数，复数，字符串常量）。</p>
<pre><code class="language-go">const a = 2 + 3.0          // a == 5.0   (untyped floating-point constant)
const b = 15 / 4           // b == 3     (untyped integer constant)
const c = 15 / 4.0         // c == 3.75  (untyped floating-point constant)
const Θ float64 = 3/2      // Θ == 1.0   (type float64, 3/2 is integer division)
const Π float64 = 3/2.     // Π == 1.5   (type float64, 3/2. is float division)
const d = 1 &lt;&lt; 3.0         // d == 8     (untyped integer constant)
const e = 1.0 &lt;&lt; 3         // e == 8     (untyped integer constant)
const f = int32(1) &lt;&lt; 33   // illegal    (constant 8589934592 overflows int32)
const g = float64(2) &gt;&gt; 1  // illegal    (float64(2) is a typed floating-point constant)
const h = &quot;foo&quot; &gt; &quot;bar&quot;    // h == true  (untyped boolean constant)
const j = true             // j == true  (untyped boolean constant)
const k = ''w'' + 1          // k == ''x''   (untyped rune constant)
const l = &quot;hi&quot;             // l == &quot;hi&quot;  (untyped string constant)
const m = string(k)        // m == &quot;x&quot;   (type string)
const Σ = 1 - 0.707i       //            (untyped complex constant)
const Δ = Σ + 2.0e-4       //            (untyped complex constant)
const Φ = iota*1i - 1/1i   //            (untyped complex constant)
</code></pre>
<p>对一个无类型整数，rune，或浮点数应用内置的 <code>complex</code> 函数会生成无类型的复数常量。</p>
<pre><code class="language-go">const ic = complex(0, c)   // ic == 3.75i  (untyped complex constant)
const iΘ = complex(0, Θ)   // iΘ == 1i     (type complex128)
</code></pre>
<p>常量表达式总是一个明确的值；中间值和常量自己可以比语言所支持的精度更高，下面的声明是合法的：</p>
<pre><code class="language-go">const Huge = 1 &lt;&lt; 100         // Huge == 1267650600228229401496703205376  (untyped integer constant)
const Four int8 = Huge &gt;&gt; 98  // Four == 4                                (type int8)
</code></pre>
<p>常量的除法的除数不能为 0:</p>
<pre><code class="language-go">3.14 / 0.0   // illegal: division by zero
</code></pre>
<p>定义了类型的常量的精度必须根据常量类型定义。所以下面的常量表达式是非法的：</p>
<pre><code class="language-go">uint(-1)     // -1 cannot be represented as a uint
int(3.14)    // 3.14 cannot be represented as an int
int64(Huge)  // 1267650600228229401496703205376 cannot be represented as an int64
Four * 300   // operand 300 cannot be represented as an int8 (type of Four)
Four * 100   // product 400 cannot be represented as an int8 (type of Four)
</code></pre>
<p>补码使用的一元操作符 ^ 对于非常量的匹配模式：补码对于无符号常量为 1，对于有符号和无类型常量为 -1。</p>
<pre><code class="language-go">^1         // untyped integer constant, equal to -2
uint8(^1)  // illegal: same as uint8(-2), -2 cannot be represented as a uint8
^uint8(1)  // typed uint8 constant, same as 0xFF ^ uint8(1) = uint8(0xFE)
int8(^1)   // same as int8(-2)
^int8(1)   // same as -1 ^ int8(1) = -2
</code></pre>
<p>实现限制：编译器在处理无类型浮点数和复数时会取近似值；具体请看常量章节。这个取近似值的操作在浮点数在整数上下文时会产生无效值，即使在计算过后是一个整型。</p>
<h4 id="运算优先级"><a href="#运算优先级" id="运算优先级">运算优先级</a></h4>
<p>在包级别，初始化的依赖性由变量声明的初始化表达式顺序决定。否则，当计算表达式内的操作数时，赋值，返回语句，所有函数调用，方法调用，和通信操作都会由左向右计算。</p>
<p>例如，在函数作用域中的赋值：</p>
<pre><code class="language-go">y[f()], ok = g(h(), i()+x[j()], &lt;-c), k()
</code></pre>
<p>函数调用和通信的发生顺序为：<code>f()</code>，<code>h()</code>，<code>i()</code>，<code>j()</code>，<code>&lt;-c</code>，<code>g()</code> 和 <code>k()</code>。但是对 y 和 x 的取值操作没有指定。</p>
<pre><code class="language-go">a := 1
f := func() int { a++; return a }
x := []int{a, f()}            // x may be [1, 2] or [2, 2]: evaluation order between a and f() is not specified
m := map[int]int{a: 1, a: 2}  // m may be {2: 1} or {2: 2}: evaluation order between the two map assignments is not specified
n := map[int]int{a: f()}      // n may be {2: 3} or {3: 3}: evaluation order between the key and the value is not specified
</code></pre>
<p>在包级别，依赖的初始化顺序会覆盖这个从左向右的规则：</p>
<pre><code class="language-go">var a, b, c = f() + v(), g(), sqr(u()) + v()

func f() int        { return c }
func g() int        { return a }
func sqr(x int) int { return x*x }

// functions u and v are independent of all other variables and functions
</code></pre>
<h2 id="语句"><a href="#语句" id="语句">语句</a></h2>
<p>语句控制程序的执行。</p>
<pre><code class="language-go">Statement =
	Declaration | LabeledStmt | SimpleStmt |
	GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt |
	FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt |
	DeferStmt .

SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
</code></pre>
<h4 id="终止语句"><a href="#终止语句" id="终止语句">终止语句</a></h4>
<p>终止语句会阻止相同代码块中下面所有语句的执行。以下语句属于终止语句：</p>
<ol>
<li><code>return</code> 和 <code>goto</code> 语句</li>
<li>对内置 <code>panic</code> 函数的调用</li>
<li>
<p>代码块结束</p>
</li>
<li><code>if</code> 语句中：</li>
<li>
<p>else 分支</p>
</li>
<li>所有分支末尾</li>
<li>
<p><code>for</code>语句中：</p>
</li>
<li>
<p><code>break</code> 语句和循环结束</p>
</li>
<li>
<p><code>switch</code> 语句：</p>
</li>
<li>
<p>在 <code>switch</code> 语句中没有 <code>break</code> 语句，</p>
</li>
<li>有一个默认的 case</li>
<li>
<p>语句列表中的每个 case 语句和有可能存在的 <code>fallthrough</code> 语句</p>
</li>
<li>
<p><code>select</code> 语句中：</p>
</li>
<li>
<p>没有 break 语句</p>
</li>
<li>每个 case 中的语句列表，如果包含默认 case</li>
</ol>
<p>所有其他语句都不是中断语句。</p>
<p>如果语句序列不为空并且最后一个非空语句是终止语句，那么语句序列就以终结语句结尾。</p>
<h4 id="空语句"><a href="#空语句" id="空语句">空语句</a></h4>
<p>空语句不做任何事情。</p>
<pre><code class="language-go">EmptyStmt = .
</code></pre>
<h4 id="标签语句"><a href="#标签语句" id="标签语句">标签语句</a></h4>
<p>标签语句可以作为 <code>goto</code>，<code>break</code> 和 <code>continue</code> 语句的目标。</p>
<pre><code class="language-go">LabeledStmt = Label &quot;:&quot; Statement .
Label       = identifier .
</code></pre>
<pre><code class="language-go">Error: log.Panic(&quot;error encountered&quot;)
</code></pre>
<h4 id="表达式语句"><a href="#表达式语句" id="表达式语句">表达式语句</a></h4>
<p>除了特定的内置函数，一般的函数、方法和接收操作都可以出现在表达式语句的上下文中。这些语句可以使用括号括起来。</p>
<pre><code class="language-go">ExpressionStmt = Expression .
</code></pre>
<p>下面的内置函数不允许出现在语句的上下文中：</p>
<pre><code class="language-go">append cap complex imag len make new real
unsafe.Alignof unsafe.Offsetof unsafe.Sizeof
</code></pre>
<pre><code class="language-go">h(x+y)
f.Close()
&lt;-ch
(&lt;-ch)
len(&quot;foo&quot;)  // illegal if len is the built-in function
</code></pre>
<h4 id="发送语句"><a href="#发送语句" id="发送语句">发送语句</a></h4>
<p>发送语句可以向通道发送一个值。通道表达式必须是通道类型，通道方向必须允许发送操作，并且值类型是可以分配给通道元素通道类型。</p>
<pre><code class="language-go">SendStmt = Channel &quot;&lt;-&quot; Expression .
Channel  = Expression .
</code></pre>
<p>通道类型和值表达式会在发送之前求值。发送操作会一致阻塞，直到可以进行发送操作。如果接收者已经准备好向没有缓存的通道发送值可以立即执行。如果通道内还有缓存空间，向通道内发送值也会立即执行。向关闭的通道发送数据会导致运行时恐慌。像值为 nil 的通道发送数据会一直阻塞。</p>
<pre><code class="language-go">ch &lt;- 3  // send value 3 to channel ch
</code></pre>
<h4 id="递增/递减语句"><a href="#递增递减语句" id="递增递减语句">递增/递减语句</a></h4>
<p>“++” 和 “&ndash;” 语句可以递增或者递减运算元一个无类型常量 1。作为一个赋值语句，运算元必须是可寻址的或者 map 的索引表达式。</p>
<pre><code class="language-go">IncDecStmt = Expression ( &quot;++&quot; | &quot;--&quot; ) .
</code></pre>
<p>下面的赋值语句在语义上是等价的：</p>
<pre><code class="language-go">IncDec statement    Assignment
x++                 x += 1
x--                 x -= 1
</code></pre>
<h4 id="赋值"><a href="#赋值" id="赋值">赋值</a></h4>
<pre><code class="language-go">Assignment = ExpressionList assign_op ExpressionList .

assign_op = [ add_op | mul_op ] &quot;=&quot; .
</code></pre>
<p>所有左侧运算元都必须是可寻址的、map 索引表达式或空标识符其中之一。运算元可以用括号括起来。</p>
<pre><code class="language-go">x = 1
*p = f()
a[i] = 23
(k) = &lt;-ch  // same as: k = &lt;-ch
</code></pre>
<p>对于赋值操作 <code>x op= y</code> 其中 <code>op</code> 为二元运算符，它和 <code>x=x op (y)</code> 是等价的，不过它只计算一次 x。<code>op=</code> 是单独的一个词汇单元，在赋值操作中左侧表达式和右侧表达式必须都是单值表达式，并且左侧表达式不能是空白标识符。</p>
<pre><code class="language-go">a[i] &lt;&lt;= 2
i &amp;^= 1&lt;&lt;n
</code></pre>
<p>元祖赋值语句会把运算返回的多个值分别分配给变量列表。它有两种格式，第一种：它是返回多值的表达式，例如函数调用、通道和 map 运算、类型断言。左侧运算元的数量必须等于返回值的数量。如果函数返回两个值：</p>
<pre><code class="language-go">x, y = f()
</code></pre>
<p>它会将第一个返回值分配给 x ，把第二个返回值分配给 y。第二种格式中，左侧运算元的数量必须等于右侧运算元的数量。每个表达式都只能返回单一值，右侧第 n 个值会赋值给左侧第 n 个变量。</p>
<pre><code class="language-go">one, two, three = ''一'', ''二'', ''三''
</code></pre>
<p>空标识符可以在分配时忽略一个右面位置的表达式：</p>
<pre><code class="language-go">_ = x       // evaluate x but ignore it
x, _ = f()  // evaluate f() but ignore second result value
</code></pre>
<p>赋值分为两个阶段。首先会计算左侧运算元的索引表达式和指针的解引用工作并以一定顺序计算右侧表达式的值。</p>
<p>然后依次对左侧运算元赋值。</p>
<pre><code class="language-go">a, b = b, a  // exchange a and b

x := []int{1, 2, 3}
i := 0
i, x[i] = 1, 2  // set i = 1, x[0] = 2

i = 0
x[i], i = 2, 1  // set x[0] = 2, i = 1

x[0], x[0] = 1, 2  // set x[0] = 1, then x[0] = 2 (so x[0] == 2 at end)

x[1], x[3] = 4, 5  // set x[1] = 4, then panic setting x[3] = 5.

type Point struct { x, y int }
var p *Point
x[2], p.x = 6, 7  // set x[2] = 6, then panic setting p.x = 7

i = 2
x = []int{3, 5, 7}
for i, x[i] = range x {  // set i, x[2] = 0, x[0]
	break
}
// after this loop, i == 0 and x == []int{3, 5, 3}
</code></pre>
<p>在赋值语句中每个值都必须能分配给左侧指定类型的值。除了以下特例：</p>
<ol>
<li>任何类型都能分配给空标识符。</li>
<li>如果把无类型常量分配给接口类型或者空标识符，它会转换成默认类型。</li>
<li>
<p>如果无类型的布尔值分配给了接口类型或者空标识符，它会先转换成 <code>bool</code> 类型。</p>
</li>
</ol>
<h4 id="if 语句"><a href="#if-语句" id="if-语句">if 语句</a></h4>
<p><code>if</code> 语句根据布尔值表达式的值来决定执行条件分支的代码。如果表达式为真，就执行 <code>if</code> 分支内的代码，否则执行 <code>else</code> 分支的代码。</p>
<pre><code class="language-go">IfStmt = &quot;if&quot; [ SimpleStmt &quot;;&quot; ] Expression Block [ &quot;else&quot; ( IfStmt | Block ) ] .
</code></pre>
<pre><code class="language-go">if x &gt; max {
	x = max
}
</code></pre>
<p>表达式可能先于普通语句，它会在表达式求值之前发生。</p>
<pre><code class="language-go">if x := f(); x &lt; y {
	return x
} else if x &gt; z {
	return z
} else {
	return y
}
</code></pre>
<h4 id="switch 语句"><a href="#switch-语句" id="switch-语句">switch 语句</a></h4>
<h4 id="for 语句"><a href="#for-语句" id="for-语句">for 语句</a></h4>
<p>for 语句可以用来重复执行一段代码。它有三种格式：迭代器可以是单一条件、for 分句或者 range 语句。</p>
<pre><code class="language-go">ForStmt = &quot;for&quot; [ Condition | ForClause | RangeClause ] Block .
Condition = Expression .
</code></pre>
<h6 id="单一条件的 for 语句"><a href="#单一条件的-for-语句" id="单一条件的-for-语句">单一条件的 for 语句</a></h6>
<p>这种情况下 for 会在条件为 true 时一直重复。条件会在每次迭代时都重新计算。如果没有指定条件，默认一直为 true。</p>
<pre><code class="language-go">for a &lt; b {
	a *= 2
}
</code></pre>
<h6 id="带分句的 for 语句"><a href="#带分句的-for-语句" id="带分句的-for-语句">带分句的 for 语句</a></h6>
<p>带分句的 for 语句也是由条件控制，只是它有一个初始化和寄送的过程。例如赋值、递增或者递减语句。初始化语句可以是短变量声明，但是寄送语句不能。在初始化语句中声明的变量可以在迭代过程中使用。</p>
<pre><code class="language-go">ForClause = [ InitStmt ] &quot;;&quot; [ Condition ] &quot;;&quot; [ PostStmt ] .
InitStmt = SimpleStmt .
PostStmt = SimpleStmt .
</code></pre>
<pre><code class="language-go">for i := 0; i &lt; 10; i++ {
	f(i)
}
</code></pre>
<p>如果初始化语句非空，它会在进入迭代前执行一次；post 语句在每次循环后都会执行一次。在只有条件的情况下可以省略分号。如果缺省条件语句，默认为 true。</p>
<pre><code class="language-go">for cond { S() }    is the same as    for ; cond ; { S() }
for      { S() }    is the same as    for true     { S() }
</code></pre>
<h6 id="带 range 分句的 for 语句"><a href="#带-range-分句的-for-语句" id="带-range-分句的-for-语句">带 range 分句的 for 语句</a></h6>
<p>带 range 分句的 for 语句可以访问数组、切片、字符串、map 的所有元素，还可以从通道中接收值。迭代获得元素分配给了相应的迭代变量并执行代码块。</p>
<pre><code class="language-go">RangeClause = [ ExpressionList &quot;=&quot; | IdentifierList &quot;:=&quot; ] &quot;range&quot; Expression .
</code></pre>
<p>右侧的 range 分句表达式叫做 range 表达式，它可能是数组、数组的指针、切片、字符串、map 或通道接收者类型。在分配时，左侧运算元必须是可寻址的或者 map 的索引表达式；它们作为迭代变量。如果 range 表达式是一个通道类型，至少需要有一个变量，它也可以有两个变量。如果迭代变量是空标识符，就代表在分句中不存在该标识符。</p>
<pre><code class="language-go">Range expression                          1st value          2nd value

array or slice  a  [n]E, *[n]E, or []E    index    i  int    a[i]       E
string          s  string type            index    i  int    see below  rune
map             m  map[K]V                key      k  K      m[k]       V
channel         c  chan E, &lt;-chan E       element  e  E
</code></pre>
<pre><code class="language-go">var testdata *struct {
	a *[7]int
}
for i, _ := range testdata.a {
	// testdata.a is never evaluated; len(testdata.a) is constant
	// i ranges from 0 to 6
	f(i)
}

var a [10]string
for i, s := range a {
	// type of i is int
	// type of s is string
	// s == a[i]
	g(i, s)
}

var key string
var val interface {}  // element type of m is assignable to val
m := map[string]int{&quot;mon&quot;:0, &quot;tue&quot;:1, &quot;wed&quot;:2, &quot;thu&quot;:3, &quot;fri&quot;:4, &quot;sat&quot;:5, &quot;sun&quot;:6}
for key, val = range m {
	h(key, val)
}
// key == last map key encountered in iteration
// val == map[key]

var ch chan Work = producer()
for w := range ch {
	doWork(w)
}

// empty a channel
for range ch {}
</code></pre>
<h4 id="Go 语句"><a href="#go-语句" id="go-语句">Go 语句</a></h4>
<p><code>go</code> 语句会开始在相同地址空间中的单独 goroutine 中调用函数。</p>
<pre><code class="language-go">GoStmt = &quot;go&quot; Expression .
</code></pre>
<p>表达式必须是函数或者方法调用；它不能使用括号括起来，调用内置函数有表达式语句的限制。</p>
<p>函数的值和参数会按顺序在调用的 goroutine 中求值。不像普通的函数调用，程序不会等待函数调用完成，而是直接开启一个新的 goroutine 执行函数。函数退出时，goroutine 也会退出。函数的任何返回值都会被丢弃。</p>
<pre><code class="language-go">go Server()
go func(ch chan&lt;- bool) { for { sleep(10); ch &lt;- true }} (c)
</code></pre>
<h4 id="select 语句"><a href="#select-语句" id="select-语句">select 语句</a></h4>
<p>select 语句会在接收/发送操作集中选择一个执行。它看起来和 switch 很像，只不过是专门针对通信操作的。</p>
<pre><code class="language-go">SelectStmt = &quot;select&quot; &quot;{&quot; { CommClause } &quot;}&quot; .
CommClause = CommCase &quot;:&quot; StatementList .
CommCase   = &quot;case&quot; ( SendStmt | RecvStmt ) | &quot;default&quot; .
RecvStmt   = [ ExpressionList &quot;=&quot; | IdentifierList &quot;:=&quot; ] RecvExpr .
RecvExpr   = Expression .
</code></pre>
<p>接收表达式可以将接收表达式的值分配给一个或两个变量。接收表达式必须是一个接收运算元（可以使用括号括起来）。它最多允许有一个 default 语句。</p>
<p>select 语句执行以下几个步骤：</p>
<ol>
<li>对于 select 语句的所有分句，接收操作的通道运算元、通道、发送语句的右侧表达式都会执行一次操作。</li>
<li>如果一个或多个通信同时发生，它会通过一致性随机选择一个执行。如果没有 default 语句，select 语句会一直阻塞。</li>
<li>
<p>除了 default 分句，其他分句只有在开始进行通信的时候才会执行。</p>
</li>
<li>如果 select 分句是一个接收语句，它可以给变量分配值。</li>
<li>
<p>执行 select 分句内的内容。</p>
</li>
</ol>
<p>如果向 nil 通道发送信息在没有 default 分句的情况下会一直阻塞。</p>
<pre><code class="language-go">var a []int
var c, c1, c2, c3, c4 chan int
var i1, i2 int
select {
case i1 = &lt;-c1:
	print(&quot;received &quot;, i1, &quot; from c1\n&quot;)
case c2 &lt;- i2:
	print(&quot;sent &quot;, i2, &quot; to c2\n&quot;)
case i3, ok := (&lt;-c3):  // same as: i3, ok := &lt;-c3
	if ok {
		print(&quot;received &quot;, i3, &quot; from c3\n&quot;)
	} else {
		print(&quot;c3 is closed\n&quot;)
	}
case a[f()] = &lt;-c4:
	// same as:
	// case t := &lt;-c4
	//	a[f()] = t
default:
	print(&quot;no communication\n&quot;)
}

for {  // send random sequence of bits to c
	select {
	case c &lt;- 0:  // note: no statement, no fallthrough, no folding of cases
	case c &lt;- 1:
	}
}

select {}  // block forever
</code></pre>
<h4 id="return 语句"><a href="#return-语句" id="return-语句">return 语句</a></h4>
<p><code>return</code> 语句会终止函数 F 的执行并可选的返回一个或多个返回值。所有的滞后函数都会在 F 返回到它的调用者之前执行。</p>
<pre><code class="language-go">ReturnStmt = &quot;return&quot; [ ExpressionList ] .
</code></pre>
<p>如果函数没有返回值类型，return 不能返回任何值。</p>
<pre><code class="language-go">func noResult() {
	return
}
</code></pre>
<p>有三种方式能够返回指定类型的值：</p>
<ol>
<li>返回值可以直接在 return 语句中列出。每个表达式都必须返回一个值并且能够分配给相应的返回值类型。</li>
</ol>
<pre><code class="language-go">func simpleF() int {
	return 2
}

func complexF1() (re float64, im float64) {
	return -7.0, -4.0
}
</code></pre>
<ol>
<li>return 语句的表达式列表可以是一个返回多值的函数调用。这时会使用临时变量来获取函数调用的返回值并直接将其作为 return 语句的表达式列表。</li>
</ol>
<pre><code class="language-go">func complexF2() (re float64, im float64) {
	return complexF1()
}
</code></pre>
<ol>
<li>如果制定了返回值的标识符那么 return 的表达式列表可以为空。返回值参数会作为普通的本地变量按需分配。return 语句会直接返回它们。</li>
</ol>
<pre><code class="language-go">func complexF3() (re float64, im float64) {
	re = 7.0
	im = 4.0
	return
}

func (devnull) Write(p []byte) (n int, _ error) {
	n = len(p)
	return
}
</code></pre>
<p>不管如何声明，所有的返回值都会在进入函数前提前初始化成类型的零值。return 语句会在所有 defer 函数之前指定返回值。</p>
<p>实现限制：编译器不允许在覆盖了命名返回值的作用域中直接返回。</p>
<pre><code class="language-go">func f(n int) (res int, err error) {
	if _, err := f(n-1); err != nil {
		return  // invalid return statement: err is shadowed
	}
	return
}
</code></pre>
<h4 id="break 语句"><a href="#break-语句" id="break-语句">break 语句</a></h4>
<p><code>break</code> 语句会在 <code>for</code>、<code>switch</code> 或 <code>select</code> 语句内部退出到相同函数的某个位置。</p>
<pre><code class="language-go">BreakStmt = &quot;break&quot; [ Label ] .
</code></pre>
<p>如果想指定标签，它必须出现在它所中止的 <code>for</code>、<code>switch</code> 或 <code>select</code> 语句旁。</p>
<pre><code class="language-go">OuterLoop:
	for i = 0; i &lt; n; i++ {
		for j = 0; j &lt; m; j++ {
			switch a[i][j] {
			case nil:
				state = Error
				break OuterLoop
			case item:
				state = Found
				break OuterLoop
			}
		}
	}
</code></pre>
<h4 id="continue 语句"><a href="#continue-语句" id="continue-语句">continue 语句</a></h4>
<p><code>continue</code> 语句会提前 <code>for</code> 语句的下一次迭代。<code>for</code> 语句必须和 <code>continue</code> 在相同函数中。</p>
<pre><code class="language-go">RowLoop:
	for y, row := range rows {
		for x, data := range row {
			if data == endOfRow {
				continue RowLoop
			}
			row[x] = data + bias(x, y)
		}
	}
</code></pre>
<h4 id="goto 语句"><a href="#goto-语句" id="goto-语句">goto 语句</a></h4>
<p><code>goto</code> 会将程序跳转到相同函数的指定标签处。</p>
<pre><code class="language-go">GotoStmt = &quot;goto&quot; Label .
</code></pre>
<pre><code class="language-go">goto Error
</code></pre>
<p>goto 语句不允许跳过作用域内程序变量的初始化工作。</p>
<pre><code class="language-go">goto L  // BAD
	v := 3
L:
</code></pre>
<p>上面的程序是错误的，因为它跳过了变量 v 的初始化过程。</p>
<pre><code class="language-go">if n%2 == 1 {
	goto L1
}
for n &gt; 0 {
	f()
	n--
L1:
	f()
	n--
}
</code></pre>
<p>标签作用域外的 goto 语句不能跳转到标签处，所以上面的代码是错误的。</p>
<h4 id="Fallthrough 语句"><a href="#fallthrough-语句" id="fallthrough-语句">Fallthrough 语句</a></h4>
<p><code>fallthrough</code> 语句会跳转到 <code>switch</code> 语句中的下一个 case 分句中。它应该只在最后一个非空分句中使用。</p>
<pre><code class="language-go">FallthroughStmt = &quot;fallthrough&quot; .
</code></pre>
<h4 id="Defer 语句"><a href="#defer-语句" id="defer-语句">Defer 语句</a></h4>
<p><code>defer</code> 语句会在包裹函数返回后触发函数调用。这里的返回泛指函数因为 return 语句终止、到达函数末尾或者当前 goroutine 触发运行时恐慌。</p>
<pre><code class="language-go">DeferStmt = &quot;defer&quot; Expression .
</code></pre>
<p>表达式必须是函数或者方法调用；它不能使用括号括起来，调用内置函数会有一些限制。</p>
<p>每次执行 defer 语句执行时都会计算函数的参数和值，但是并不会调用函数。相反，函数的调用是在包裹函数返回后进行，它们的执行顺序与声明顺序正好相反。如果 defer 对应的函数值为 nil，会在调用函数的时候导致运行时恐慌而不是声明 defer 语句的时候。</p>
<p>例如：当 defer 函数为函数字面值且包裹函数具有命名结果值，此时，我们在defer 函数中可以访问和修改命名的结果值。defer 函数的所有返回值都会被忽略。</p>
<pre><code class="language-go">lock(l)
defer unlock(l)  // unlocking happens before surrounding function returns

// prints 3 2 1 0 before surrounding function returns
for i := 0; i &lt;= 3; i++ {
	defer fmt.Print(i)
}

// f returns 1
func f() (result int) {
	defer func() {
		result++
	}()
	return 0
}
</code></pre>
<h4 id="内置函数"><a href="#内置函数" id="内置函数">内置函数</a></h4>
<p>内置函数是预定义的。调用他们和其他函数一样只是他们接受一个类型而不是一个表达式。</p>
<p>内置函数没有标准的 Go 类型，所以他们只能作为调用表达式；而不能作为函数的值。</p>
<h6 id="Close"><a href="#close" id="close">Close</a></h6>
<p>对于管道类型 c，内置函数 <code>close(c)</code> 意味着不在有数据插入到管道中。如果 <code>c</code> 是一个只接收数据的管道，会发生错误。向已经关闭的发送数据或者重复关闭已经关闭的管道会导致运行时恐慌。关闭 nil 管道会引起运行时恐慌。调用 close 后所有之前发送的数据都能接收到，并且在最后不会阻塞而返回零值。多值的接收操作能够返回接收到的数据和表示管道是否关闭的布尔值。</p>
<h6 id="长度和容积"><a href="#长度和容积" id="长度和容积">长度和容积</a></h6>
<p>内置函数 <code>len</code> 和 <code>cap</code> 可以接收多种类型的参数，并且返回一个 int 类型结果值。函数的实现能够确保结果值不会溢出。</p>
<pre><code class="language-go">Call      Argument type    Result

len(s)    string type      string length in bytes
          [n]T, *[n]T      array length (== n)
          []T              slice length
          map[K]T          map length (number of defined keys)
          chan T           number of elements queued in channel buffer

cap(s)    [n]T, *[n]T      array length (== n)
          []T              slice capacity
          chan T           channel buffer capacity
</code></pre>
<p>切片的容积底层数组包含的元素个数。在任何情况下都有以下关系：</p>
<pre><code class="language-go">0 &lt;= len(s) &lt;= cap(s)
</code></pre>
<p><code>nil</code> 切片，map，或者 channel 的长度都为 0。<code>nil</code> 切片，管道的容积都为 0。</p>
<p>表达式 <code>len(x)</code> 在 <code>s</code> 是字符串常量时也为常量。如果 <code>s</code> 为数组或者指向数组的指针并且表达式 s 不包含 <code>channel</code> 接收器或者函数调用那么 <code>len(s)</code> 和 <code>cap(s)</code> 也是常量；在这个情况下 s 时不能求值的。其他情况下 <code>len</code> 和 <code>cap</code> 不是常量并且 <code>s</code> 是可以求值的。</p>
<pre><code class="language-go">const (
	c1 = imag(2i)                    // imag(2i) = 2.0 is a constant
	c2 = len([10]float64{2})         // [10]float64{2} contains no function calls
	c3 = len([10]float64{c1})        // [10]float64{c1} contains no function calls
	c4 = len([10]float64{imag(2i)})  // imag(2i) is a constant and no function call is issued
	c5 = len([10]float64{imag(z)})   // invalid: imag(z) is a (non-constant) function call
)
var z complex128
</code></pre>
<h6 id="内存分配"><a href="#内存分配" id="内存分配">内存分配</a></h6>
<p>内置函数 <code>new</code> 接收一个类型 T，它会在运行时给变量分配内存，并且返回一个指向类型 <code>T</code> 的 <code>*T</code> 类型指针。变量的初始化在初始化值章节中介绍。</p>
<pre><code class="language-go">new(T)
</code></pre>
<p>例如：</p>
<pre><code class="language-go">type S struct { a int; b float64 }
new(S)
</code></pre>
<p>给 S 类型的变量分配空间，并初始化它（<code>a=0</code>，<code>b=0.0</code>），并且返回一个 <code>*S</code> 类型值保存变量所在的位置。</p>
<h6 id="创建切片，map 和 管道"><a href="#创建切片map-和-管道" id="创建切片map-和-管道">创建切片，map 和 管道</a></h6>
<p>内置函数 <code>make</code> 以一个类型作为参数，它必须是一个切片，map 或者管道类型，它返回一个 T 类型的值，而不是（*T）类型，它会按初始化值章节描述的方式进行初始化。</p>
<pre><code class="language-go">Call             Type T     Result

make(T, n)       slice      slice of type T with length n and capacity n
make(T, n, m)    slice      slice of type T with length n and capacity m

make(T)          map        map of type T
make(T, n)       map        map of type T with initial space for approximately n elements

make(T)          channel    unbuffered channel of type T
make(T, n)       channel    buffered channel of type T, buffer size n
</code></pre>
<p>n 和 m 必须是整数类型或者无类型常量。一个常量参数不能为负数并且该值在 <code>int</code> 类型的范围内；如果它是无类型常量，会被转换成 <code>int</code> 类型。如果 n 和 m 都是常量，那么 n 必须大于 m。如果 n 是负数或者大于 m 会引发运行时 panic。</p>
<pre><code class="language-go">s := make([]int, 10, 100)       // slice with len(s) == 10, cap(s) == 100
s := make([]int, 1e3)           // slice with len(s) == cap(s) == 1000
s := make([]int, 1&lt;&lt;63)         // illegal: len(s) is not representable by a value of type int
s := make([]int, 10, 0)         // illegal: len(s) &gt; cap(s)
c := make(chan int, 10)         // channel with a buffer size of 10
m := make(map[string]int, 100)  // map with initial space for approximately 100 elements
</code></pre>
<p>使用 make 来指定大小初始化 map 类型将会创建一个预留 n 个元素空间的 map 类型。更详细的行为依赖于具体实现。</p>
<h6 id="追加或者拷贝切片"><a href="#追加或者拷贝切片" id="追加或者拷贝切片">追加或者拷贝切片</a></h6>
<p>内置函数 <code>append</code> 和 <code>copy</code> 可以进行切片的通用操作。对于这两个函数，一个是拷贝内存，一个是引用内存。</p>
<p>可变参数的函数 <code>append</code> 可以向切片 s 中追加一个或多个 x 值，并返回这个切片。传进 <code>...T</code> 的值会根据参数传值。作为特例，<code>append</code> 在 s 为 <code>[]byte</code> 切片时，可以使用字符串后面跟 <code>...</code> 作为参数。</p>
<p>如果 s 的容积容纳不下这些元素，那么 <code>append</code> 会分配一个新的足够大的数组。否则会使用原来的底层数组。</p>
<pre><code class="language-go">s0 := []int{0, 0}
s1 := append(s0, 2)                // append a single element     s1 == []int{0, 0, 2}
s2 := append(s1, 3, 5, 7)          // append multiple elements    s2 == []int{0, 0, 2, 3, 5, 7}
s3 := append(s2, s0...)            // append a slice              s3 == []int{0, 0, 2, 3, 5, 7, 0, 0}
s4 := append(s3[3:6], s3[2:]...)   // append overlapping slice    s4 == []int{3, 5, 7, 2, 3, 5, 7, 0, 0}

var t []interface{}
t = append(t, 42, 3.1415, &quot;foo&quot;)   //                             t == []interface{}{42, 3.1415, &quot;foo&quot;}

var b []byte
b = append(b, &quot;bar&quot;...)            // append string contents      b == []byte{''b'', ''a'', ''r'' }
</code></pre>
<p><code>copy</code> 函数从 <code>src</code> 拷贝原属到 <code>dst</code> 并且返回拷贝元素的个数。参数中所有的元素类型必须是 T 类型或者能转换成 T 的类型。拷贝元素的数量是 <code>len(src)</code> 和 <code>len(dst)</code> 中的较小值。作为特例，<code>copy</code> 可以从 string 类型拷贝元素到 <code>[]byte</code> 类型。这会把字符串中的元素拷贝到字节切片中。</p>
<pre><code class="language-go">copy(dst, src []T) int
copy(dst []byte, src string) int
</code></pre>
<p>例：</p>
<pre><code class="language-go">var a = [...]int{0, 1, 2, 3, 4, 5, 6, 7}
var s = make([]int, 6)
var b = make([]byte, 5)
n1 := copy(s, a[0:])            // n1 == 6, s == []int{0, 1, 2, 3, 4, 5}
n2 := copy(s, s[2:])            // n2 == 4, s == []int{2, 3, 4, 5, 4, 5}
n3 := copy(b, &quot;Hello, World!&quot;)  // n3 == 5, b == []byte(&quot;Hello&quot;)
</code></pre>
<h6 id="删除 map 中的元素"><a href="#删除-map-中的元素" id="删除-map-中的元素">删除 map 中的元素</a></h6>
<p>内置函数 <code>delete</code> 移除 map 类型 m 中的键值 k。k 的类型必须是能够转换成 m 键类型的类型。</p>
<pre><code class="language-go">delete(m, k)  // remove element m[k] from map m
</code></pre>
<p>如果 map 类型 m 是 nil 或者 m[k] 不存在，那么 <code>delete</code> 函数不做任何事情。</p>
<h6 id="操作复数"><a href="#操作复数" id="操作复数">操作复数</a></h6>
<p>有三个函数可以组装或者分解复数。内置函数 <code>complex</code> 会构造一个复数，<code>real</code> 和 <code>imag</code> 会分解出复数的实部和虚部。</p>
<pre><code class="language-go">complex(realPart, imaginaryPart floatT) complexT
real(complexT) floatT
imag(complexT) floatT
</code></pre>
<p>参数的类型和返回值类型是对应的。对于 <code>complex</code>，两个参数必须是相同的浮点类型，并返回由相同浮点数组成的复数类型。<code>complex64</code> 是 <code>float32</code> 对应的类型，<code>complex128</code> 是 <code>float64</code> 对应的参数类型。如果参数是一个无类型常量，它会转换成另一个参数的类型。如果两个参数都是无类型常量，他们必须实数或者虚数部分为零，并且它会返回一个无类型的复数常量。</p>
<p><code>real</code> 和 <code>imag</code> 函数和 <code>complex</code> 正好相反的，所以对于一个值复数类型 Z 的值 z，<code>z==Z(complex(real(z),imag(z)))</code>。</p>
<p>如果这么操作都是常量，那么返回的值也是常量。</p>
<pre><code class="language-go">var a = complex(2, -2)             // complex128
const b = complex(1.0, -1.4)       // untyped complex constant 1 - 1.4i
x := float32(math.Cos(math.Pi/2))  // float32
var c64 = complex(5, -x)           // complex64
var s uint = complex(1, 0)         // untyped complex constant 1 + 0i can be converted to uint
_ = complex(1, 2&lt;&lt;s)               // illegal: 2 assumes floating-point type, cannot shift
var rl = real(c64)                 // float32
var im = imag(a)                   // float64
const c = imag(b)                  // untyped constant -1.4
_ = imag(3 &lt;&lt; s)                   // illegal: 3 assumes complex type, cannot shift
</code></pre>
<h6 id="处理 panic"><a href="#处理-panic" id="处理-panic">处理 panic</a></h6>
<p>两个内置函数 <code>panic</code> 和 <code>recover</code>，可以抛出和处理运行时 <code>panic</code> 和程序的错误条件。</p>
<pre><code class="language-go">func panic(interface{})
func recover() interface{}
</code></pre>
<p>当执行 F 函数时，显式的调用 <code>panic</code>或者运行时 panic 都会中断 F 的执行。但是 F 中的延迟函数还会执行。接下来调用 F 函数处的延迟函数也会执行，一直到顶级的延迟函数。鉴于这点，程序关闭并且错误条件可以抛出。包括 <code>panic</code> 中的值。这个顺序叫做 <code>panicking</code>。</p>
<pre><code class="language-go">panic(42)
panic(&quot;unreachable&quot;)
panic(Error(&quot;cannot parse&quot;))
</code></pre>
<p><code>recover</code> 函数允许程序从一个 panicking 中恢复执行。假设函数 G 延迟执行函数 D ，在 D 中调用 <code>recover</code> 这时如果在 G 执行时发生 panic 会在 D 中恢复。当函数执行到 D，<code>recover</code> 的返回值会返回 <code>panic</code> 对应的错误，并且终止 <code>panicking</code> 。在这个情况下 G 函数和 <code>panic</code> 之间的代码不会执行。任何在 D 中 G 之前的延迟函数会返回到调用者。</p>
<p>在下面两种情况下 <code>recover</code> 会返回 nil：</p>
<ul>
<li>panic 的参数为 nil</li>
<li>携程里没有发生 panic</li>
<li>
<p>recover 不是在延迟函数中执行</p>
</li>
</ul>
<p>本例中的 <code>protect</code> 函数会在 g 发生 panic 的时候恢复执行。</p>
<pre><code class="language-go">func protect(g func()) {
	defer func() {
		log.Println(&quot;done&quot;)  // Println executes normally even if there is a panic
		if x := recover(); x != nil {
			log.Printf(&quot;run time panic: %v&quot;, x)
		}
	}()
	log.Println(&quot;start&quot;)
	g()
}
</code></pre>
<h6 id="初始化"><a href="#初始化" id="初始化">初始化</a></h6>
<p>这个实现提供了多个内置函数来帮助进行初始化。这些函数用来输出信息但是不确定会一直存在于语言中，他们都没有返回值。</p>
<pre><code class="language-go">Function   Behavior

print      prints all arguments; formatting of arguments is implementation-specific
println    like print but prints spaces between arguments and a newline at the end
</code></pre>
<p>实现限制：<code>print</code> 和 <code>println</code> 不接受除了布尔值，数字，字符串以外的其他类型。</p>
<h4 id="程序的初始化和执行"><a href="#程序的初始化和执行" id="程序的初始化和执行">程序的初始化和执行</a></h4>
<h6 id="零值"><a href="#零值" id="零值">零值</a></h6>
<p>当为变量分配内存空间时，不管是声明还是调用 <code>new</code> 或者使用字面值和 <code>make</code> 初始化，只要创建了一个新值变量都会有一个默认值。这样的元素和值会使用它类型的零值：<code>false</code> 是布尔值的零值，0 为数值类型零值，&quot;&quot; 为字符串零值，nil 为指针，函数，接口，切片，频道，字典。初始化会递归完成，所以结构体里的数组中的元素也都会有它自己的零值。</p>
<p>下面两个声明时相等的：</p>
<pre><code class="language-go">var i int
var i int = 0
</code></pre>
<p>请看下面的声明：</p>
<pre><code class="language-go">type T struct { i int; f float64; next *T }
t := new(T)
t.i == 0
t.f == 0.0
t.next == nil
</code></pre>
<p>这和下面的声明时同等效果的：</p>
<pre><code class="language-go">var t T
</code></pre>
<h6 id="包的初始化"><a href="#包的初始化" id="包的初始化">包的初始化</a></h6>
<p>保级变量会按声明的顺序进行初始化，如果依赖其他变量，则会在其他变量之后进行初始化。</p>
<p>更确切的说，如果包级变量还没初始化并且没有初始化表达式或者表达式中不包含对其他未初始化变量的依赖，那么会认为它正在等待初始化。初始化过程会从最早声明的变量开始向下一个包级变量重复，直到没有需要初始化的变量。</p>
<p>如果在初始化过程完成后还有未初始化的变量，那么这些变量可能是循环初始化了，这事程序不是合法的。</p>
<p>在多个文件中变量的声明顺序会依据编译时文件出现的顺序：声明在第一个文件中的变量优先于第二个文件中声明的变量，依此类推。</p>
<p>对依赖关系的分析不会根据变量的具体值，它只分析在源码中是否引用了其他变量。例如，如果变量 x 的初始化表达式引用了变量 y 那么 x 就依赖于 y：</p>
<ul>
<li>引用一个变量或者函数中用到了一个变量</li>
<li>引用了一个方法值 <code>m</code> 或者方法表达式 <code>t.m</code> (这里的静态类型 <code>t</code> 不是借口类型，并且方法 <code>m</code> 是 <code>t</code> 方法集中的方法)。<code>t.m</code> 的返回值不会在此时影响。</li>
<li>
<p>变量，函数，或者方法 x 依赖变量 y</p>
</li>
</ul>
<p>依赖分析会在每个包中执行；他只考虑当前包中的析变量，函数，和方法。</p>
<p>例如，给定声明：</p>
<pre><code class="language-go">var (
	a = c + b
	b = f()
	c = f()
	d = 3
)

func f() int {
	d++
	return d
}
</code></pre>
<p>初始化顺序为 d，b，c，a。</p>
<p>变量可以在包中声明的初始化函数 <code>init</code> 中进行初始化，它没有参数和返回值。</p>
<pre><code class="language-go">func init() {}
</code></pre>
<p>可以为每个包定义多个该函数，甚至在一个文件中也可以。并且不会声明该该标识符。因此 init 函数不能在程序中调用。</p>
<p>还未导入的包会先初始化包级的变量然后按照 <code>init</code> 函数在源码中的顺序调用，它可能在包的多个文件中。如果需要导入一个包，它会在初始化自己之前先初始化这个需要导入的包。如果导入一个包多次，那这个包只会初始化一次。导入的包不能存在循环引用。</p>
<p>包的初始化——变量初始化和对 init 函数的调用会按顺序发生在同一个 goroutine 中。 <code>init</code> 函数可能会启动其他 goroutine。不过一般 <code>init</code> 函数都是按序进行初始化的：它只在上一步已经执行完成时才会调用下一个步骤。</p>
<p>确保初始化行为是可以复现的，构建系统鼓励在同一个包中包含多个文件这些文件在编译器中会以字母排序。</p>
<h6 id="程序执行"><a href="#程序执行" id="程序执行">程序执行</a></h6>
<p>一个完整的程序由一个 <code>main</code> 包导入所有需要的包。<code>main</code> 包必须以 <code>main</code> 作为包名并且声明一个没有参数和返回值的 <code>main</code> 函数。</p>
<pre><code class="language-go">func main() {}
</code></pre>
<p>程序先初始化 <code>main</code> 包然后调用 <code>main</code> 函数。当 <code>main</code> 函数返回时，程序就会退出。它不会等待其他 goroutines 完成。</p>
<h4 id="错误"><a href="#错误" id="错误">错误</a></h4>
<p>预定义的错误类型为：</p>
<pre><code class="language-go">type error interface {
	Error() string
}
</code></pre>
<p>它是表示错误信息的常规接口，nil 代表没有发生错误。例如，在文件中读取数据可以定义为：</p>
<pre><code class="language-go">func Read(f *File, b []byte) (n int, err error)
</code></pre>
<h4 id="运行时恐慌"><a href="#运行时恐慌" id="运行时恐慌">运行时恐慌</a></h4>
<p>运行时错误（例如数组的越界访问）会造成运行时恐慌，它和以 <code>runtime.Error</code> 接口实现调用内置的 <code>panic</code> 函数一样。<code>runtime.Error</code> 满足预定义的 <code>error</code> 接口。不同的错误值代表不同的运行时错误条件。</p>
<pre><code class="language-go">package runtime

type Error interface {
	error
	// and perhaps other methods
}
</code></pre>
<h4 id="系统相关"><a href="#系统相关" id="系统相关">系统相关</a></h4>
<h6 id="unsafe 包"><a href="#unsafe-包" id="unsafe-包">unsafe 包</a></h6>
<p><code>unsafe</code> 是编译器已知的内置包，可以通过导入路径 <code>unsafe</code> 访问包内容，提供 <code>unsafe</code> 包目的是支持底层编程（包括操作非 Go 类型的数据结构）。使用 <code>unsafe</code> 包必须自己保证类型安全而且它有可能破坏程序的移植性。<code>unsafe</code> 包提供了以下接口：</p>
<pre><code class="language-go">package unsafe

type ArbitraryType int  // 任意一个 Go 类型；它不是一个具体的类型。
type Pointer *ArbitraryType

func Alignof(variable ArbitraryType) uintptr
func Offsetof(selector ArbitraryType) uintptr
func Sizeof(variable ArbitraryType) uintptr
</code></pre>
<p><code>Pointer</code> 是一个指针类型，但是不能解引用 <code>Pointer</code> 的值。所有底层类型 <code>uintptr</code> 的指针和值都能转换成 <code>Pointer</code> 类型，反之亦然。<code>Pointer</code> 和  <code>uintptr</code> 之间的转换效果由具体实现定义。</p>
<pre><code class="language-go">var f float64
bits = *(*uint64)(unsafe.Pointer(&amp;f))

type ptr unsafe.Pointer
bits = *(*uint64)(ptr(&amp;f))

var p ptr = nil
</code></pre>
<p>假设变量 v 由 <code>var v = x</code> 定义。<code>Alignof</code> 以表达式 x 作为参数并返回 x 的对齐字节数。<code>Sizeof</code> 以表达式 x 作为参数并返回 x 的大小。</p>
<p>函数 <code>Offsetof</code> 以选择器 <code>s.f</code>（ s 或者 *s 结构体中的 f 字段）作为参数，返回字段相对结构体首地址的位置。如果 f 是一个嵌入字段，那 f 必须可以直接访问（不能通过指针进行间接访问）。对于结构体 s 的 f 字段：</p>
<pre><code class="language-go">uintptr(unsafe.Pointer(&amp;s)) + unsafe.Offsetof(s.f) == uintptr(unsafe.Pointer(&amp;s.f))
</code></pre>
<p>计算机的体系结构要求对齐内存地址（对于一个变量的地址有多种因素影响对齐）。<code>Alignof</code> 函数获取一个人和类型的表达式并返回变量对齐的字节数。对于变量 x：</p>
<pre><code class="language-go">uintptr(unsafe.Pointer(&amp;x)) % unsafe.Alignof(x) == 0
</code></pre>
<p>编译时 <code>uintptr</code> 类型常量表达式会调用 <code>Alignof</code>，<code>Offsetof</code>，和 <code>Sizeof</code>。</p>
<h6 id="确定的大小和对齐字节数"><a href="#确定的大小和对齐字节数" id="确定的大小和对齐字节数">确定的大小和对齐字节数</a></h6>
<p>对于数字类型，确定有以下尺寸：</p>
<pre><code class="language-go">type                                 size in bytes

byte, uint8, int8                     1
uint16, int16                         2
uint32, int32, float32                4
uint64, int64, float64, complex64     8
complex128                           16
</code></pre>
<p>Go 中规定的最小对齐特性：</p>
<ol>
<li>对于任意变量类型 x：<code>unsafe.Alignof(x)</code> 至少为 1。</li>
<li>对于结构体类型：<code>unsafe.Alignof(x)</code> 是所有内部字段 <code>unsafe.Alignof(x.f)</code> 的最大值，并且至少为 1。</li>
<li>
<p>对于数组类型：<code>unsafe.Alignof(x)</code> 和数组元素类型的 alignment 相同。</p>
</li>
</ol>
<p>结构体（数组）在内部没有字段（元素）的时候大小为 0。两个所占空间大小为 0 的不同变量可能在内存中拥有相同地址。</p>
', '## 介绍



这是一个 Go 语言的参考手册，你也可以访问[golang.org](https://golang.org/)获取更多信息和其他文档。

Go 是在设计时考虑了系统编程的通用型编程语言。它是强类型，有垃圾回收机制并原生支持并发编程。Go 程序由一个或多个 package 组成，这样可以高效的管理依赖。

Go 的语法简洁且有规则，这让自动化工具可以很容易的分析代码，例如：集成开发环境。



## 标记



语法采用扩展巴科斯范式。



```go
Production  = production_name "=" [ Expression ] "." .
Expression  = Alternative { "|" Alternative } .
Alternative = Term { Term } .
Term        = production_name | token [ "…" token ] | Group | Option | Repetition .
Group       = "(" Expression ")" .
Option      = "[" Expression "]" .
Repetition  = "{" Expression "}" .
```



产生式是由词法单元和以下操作符构成的表达式（优先级依次递增）：



```go
|   或
()  分组
[]  可选 (出现 0 或 1 次)
{}  可重复 (出现 0 到 n 次)
```



小写的产生式名称用来与词法单元区分。非终结符采用驼峰式。词法单元由双引号或反引号组成。



`a...b` 表示从 `a` 到 `b` 之间的任意字符。省略号 `...` 也可以在规范中表示对更详细的枚举和代码片段的省略。字符 `...` 不是 Go 语言的词法单元。



## 源码表示法



Go 的源代码使用 UTF-8 编码的 Unicode 文本。不过它并不是完全规范化的，单重音的代码点与由相同字符和音标组成的代码点是不同的；前者我们认为它是两个代码点。简单来讲，文档会在源代码文本中使用非规范的术语字符来表示一个 Unicode 代码点。



每个代码点都是不同的；相同字符的大写和小写形式表示不同的字符。



实现限制：为了兼容其他工具，编译器不允许出现 Utf-8 编码的源文本中的 NUL 字符（U+0000）。



实现限制：为了兼容其他工具，如果源文本中是以Utf-8 编码的字节序标记（U+FEFF）为起始代码点。编译器会忽略它。字节序标记不应出现在源文本的任何位置。



#### 字符



这些单词表示 Unicode 字符的类别：



```go
newline        = /* Unicode 代码点 U+000A */ .
unicode_char   = /* 排除换行以外的任意 Unicode 代码点 */ .
unicode_letter = /* 一个字母（"Letter"）类型的 Unicode 代码点  */ .
unicode_digit  = /* 一个数字（"Number, decimal digit"）类型的 Unicode 代码点  */ .
```



在 Unicode8.0 标准中，第 4.5 章节 “一般类别” 中定义了字符的类别。Go 能够处理任何字符集，包括 Lu，Li，Lt，Lm 或 Lo 作为 Unicode 字母，还可以把数字字符集 Nd 当作 Unicode 数字处理。



#### 字母和数字



我们认为下划线 `_` （U+005F）是一个字母：



```go
letter        = unicode_letter | "_" .
decimal_digit = "0" … "9" .
octal_digit   = "0" … "7" .
hex_digit     = "0" … "9" | "A" … "F" | "a" … "f" .
```



## 词汇元素



#### 注释



注释是程序的说明文档。在 Go 中有两种形式：



- 单行注释从 `//` 开始直到行末结束。
- 通用注释从 `/*` 开始直到 `*/` 结束。



注释不能嵌套在其他注释、字符串和 rune 的字面值中。不包含换行符的通用注释之间通过空格符连接，其他情况下每段注释都会另起一行。



#### 词汇元素



词汇元素构成了 Go 语言的词汇表。它有四种类型：标识符、关键字、操作符/标点符号、字面值。空白符可以是空格（U+0020）、水平制表符（U+0009）、换行符（U+000D）或换行符（U+000A）。它本身会被忽略，一般用来区分不同的词汇元素。换行符或文件终止符（EOF）还可能触发编译程序在源代码的行末或文件末尾追加分号。在分解源代码的词汇元素的过程中，会把当前可以形成有效词汇元素的最长字符序列作为下一个词汇元素。



#### 分号



正规语法在很多产生式中使用分号 ";" 作为终结符。Go 程序中遵循下面两条规则省略了大部分的分号：



1. 当某行的最后一个词汇元素是以下元素时自动补全分号：

- 一个标识符。
- 一个整数，浮点数，虚数，rune 或字符串字面值。

- 关键字 `break`、`continue`、`fallthrough` 和 `return` 其中之一。
- 操作符/标点符号 `++`，`--`，`)`，`]` 和 `}` 其中之一。

1. 为了支持独占一行的复杂语句，会省略与 ")" 或 "}" 相邻的分号。



为了反应惯用用途，本篇文档的所有例子都基于以上规则省略分号。



#### 标识符



标识符表示程序实体单元，例如：变量、类型。一个标识符由一个或多个字母和数字组成。标识符的首字符必须为字母。



```go
identifier = letter { letter | unicode_digit } .
```



```go
a
_x9
ThisVariableIsExported
αβ
```



Go 已经预定义了一些标识符。



#### 关键字



以下关键字是预留的，它们不能作为标识符：



```go
break        default      func         interface    select
case         defer        go           map          struct
chan         else         goto         package      switch
const        fallthrough  if           range        type
continue     for          import       return       var
```



#### 操作符和标点符号



以下字符序列用于表示操作符（包括赋值运算符）和标点符号：



```go
+    &     +=    &=     &&    ==    !=    (    )
-    |     -=    |=     ||    <     <=    [    ]
*    ^     *=    ^=     <-    >     >=    {    }
/    <<    /=    <<=    ++    =     :=    ,    ;
%    >>    %=    >>=    --    !     ...   .    :
     &^          &^=
```



#### 整型字面值



整型字面值是一个数字序列，相当于整型常量。可以使用前缀指定非小数进制：0 表示八进制，0x/0X 表示十六进制。在十六进制字面值中，字母 a-f 和 A-F 都表示数字 10-15。



```go
int_lit     = decimal_lit | octal_lit | hex_lit .
decimal_lit = ( "1" … "9" ) { decimal_digit } .
octal_lit   = "0" { octal_digit } .
hex_lit     = "0" ( "x" | "X" ) hex_digit { hex_digit } .
```



```go
42
0600
0xBadFace
170141183460469231731687303715884105727
```



#### 浮点字面值



浮点字面值是一个小数，相当于浮点数常量。它由整数部分，小数点，小数部分和指数部分构成。整数部分和小数部分用小数点链接；指数部分由  `e` / `E` 字符后接一个有符号指数构成。整数部分和小数部分可以省略其一；小数点和指数部分可以省略其一。



```go
float_lit = decimals "." [ decimals ] [ exponent ] |
            decimals exponent |
            "." decimals [ exponent ] .
decimals  = decimal_digit { decimal_digit } .
exponent  = ( "e" | "E" ) [ "+" | "-" ] decimals .
```



```go
0.
72.40
072.40  // == 72.40
2.71828
1.e+0
6.67428e-11
1E6
.25
.12345E+5
```



#### 虚数字面值



虚数字面值是一个小数，相当于复数常量中的虚数部分。它由浮点数或者整数后接小写字母 i 构成。



```go
imaginary_lit = (decimals | float_lit) "i" .
```



```go
0i
011i  // == 11i
0.i
2.71828i
1.e+0i
6.67428e-11i
1E6i
.25i
.12345E+5i
```



#### Rune 字面值



rune 类型字面值相当于一个 rune 常量。它是一个表示 Unicode 代码点的整数。rune 类型字面值表示为用单引号包裹的一个或多个字符，像 ''x'' 或 ''\n''。在单引号中除了换行符和未转义的单引号其他的字符都可以直接显示。单引号包裹的字符的值和字符在 Unicode 编码中的值相等，而以反斜线开头的多字符序列会把值翻译成多种格式。



使用引号表示单字符是最简单的方式；因为 Go 的源文本是 UTF-8 编码，一个整数可能代表多个 UTF-8 字节。例如， ''a'' 可以使用单字节表示字符 a，Unicode 编码 U+0061，值 0x61，而 ''ä'' 是两字节表示分音符的 a，Unicode 编码 U+00E4，值 0xe4。



反斜线能将任意值编码成 ASCII 文本。有四种方式将整数值表示为数字常量：`\x` 后接两个十六进制数；`\u` 后接四个十六进制数；`\U` 后接八个十六进制数。 `\` 后接三个八进制数。每种情况下都使用相应进制来表示字面量的整数值。



虽然这四种方式都以整数表示，但它们的有效区间并不相同。八进制只能表示 0 - 255 以内的整数。十六进制满可以满足需求。`\u` 和 `\U`  都可以表示 Unicode 代码点，不过其中的一些值是无效的，特别是 0x10FFFF 以上的值。



反斜线结合以下字符具有特殊含义：



```go
\a   U+0007 alert or bell
\b   U+0008 退格符
\f   U+000C form feed
\n   U+000A line feed or newline
\r   U+000D carriage return
\t   U+0009 水平制表符
\v   U+000b 垂直制表符
\\   U+005c 反斜线
\''   U+0027 单引号  (只在 rune 字面值中有效)
\"   U+0022 双引号  (只在字符串字面值中有效)
```



其他所有以反斜线开头的序列在 rune 的规则中都是非法的。



```go
rune_lit         = "''" ( unicode_value | byte_value ) "''" .
unicode_value    = unicode_char | little_u_value | big_u_value | escaped_char .
byte_value       = octal_byte_value | hex_byte_value .
octal_byte_value = `\` octal_digit octal_digit octal_digit .
hex_byte_value   = `\` "x" hex_digit hex_digit .
little_u_value   = `\` "u" hex_digit hex_digit hex_digit hex_digit .
big_u_value      = `\` "U" hex_digit hex_digit hex_digit hex_digit
                           hex_digit hex_digit hex_digit hex_digit .
escaped_char     = `\` ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | `\` | "''" | `"` ) .
```



```go
''a''
''ä''
''本''
''\t''
''\000''
''\007''
''\377''
''\x07''
''\xff''
''\u12e4''
''\U00101234''
''\''''         // 包含单引号的 rune 字面值
''aa''         // 无效: 太多字符
''\xa''        // 无效: 缺少十六进制数
''\0''         // 无效: 缺少八进制数
''\uDFFF''     // 无效: surrogate half
''\U00110000'' // 无效: 非法的 Unicode 代码点
```



#### 字符串字面量



字符串字面量表示从字符序列中获取的字符串常量。它有两种格式：原始字符串字面量和解释型字符串字面量。



原始字符串是由反引号包裹（`foo`）。字符串中除反引号以外的其他字符都会显示出来。原生字符串由反引号之间的（默认 UTF-8 编码）的字符组成。它的值为引号内未经解释（默认 UTF-8 编码）所有字符；尤其是，反斜线再字符串中没有特殊意义并且字符串中保留换行符。在原始字符串的值中会丢弃回车键返回 ''\r'' 字符。



解释型字符串由双引号之间的字符组成（"bar"）。除了换行符和双引号其他字符都会显示出来。双引号之间的文本组成字面量的值。反斜线的转义规则与 rune 字面量基本相同（不同的是 \’ 非法，而 \" 合法）。三位八进制数（\nnn）和两位十六进制数（\xnn）换码符的值表示相应字符串的字节。其他的换码符都表示字符各自的 UTF-8 编码（可能是多字节）。因此字符串 \377 和 \xFF 都表示值为 0xFF=255 的单个字节，而  `ÿ`, `\u00FF`, `\U000000FF` 和 `\xc3\xbf` 表示 UTF-8 编码字符 U+00FF 的两个字节 0xc3 0xbf。



```go
string_lit             = raw_string_lit | interpreted_string_lit .
raw_string_lit         = "`" { unicode_char | newline } "`" .
interpreted_string_lit = `"` { unicode_value | byte_value } `"` .
```



```go
`abc`                // 等价于 "abc"
`\n
\n`                  // 等价于 "\\n\n\\n"
"\n"
"\""                 // 等价于 `"`
"Hello, world!\n"
"日本語"
"\u65e5本\U00008a9e"
"\xff\u00FF"
"\uD800"             // 无效: surrogate half
"\U00110000"         // 无效: 无效的 Unicode 代码点
```



这些例子都表示相同的字符串：



```go
"日本語"                                 // UTF-8 文本
`日本語`                                 // UTF-8 文本作为原生字面值
"\u65e5\u672c\u8a9e"                    // 确定的 Unicode 代码点 
"\U000065e5\U0000672c\U00008a9e"        // 确定的 Unicode 代码点
"\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"  // 确定的 UTF-8 字节
```



如果源代码中使用两个代码点表示一个字符，例如带音标的字母，把它放在 rune 中会报错（它不是单代码点）。并且在字符串中会显示两个代码点。



## 常量



常量分为：布尔型，rune型，整型，浮点型，复数型，字符串型。其中 rune，整型，浮点型，复数型统称为数字常量。



常量的值可以表示为一个 rune字面量，整数字面量，浮点数字面量，虚数字面量，字符串字面量，表示常量的标识符，常量表达式，一个转换结果为常量的类型转换，和一些返回值为常量的内置函数(接受任何值的`unsafe.Sizeof`，接受部分表达式的`cap` 或 `len`，接受虚数常量的`real` 和 `imag`，接受数字常量的 `complex`)。布尔类型的值为预定义常量 `true` 或 `false`，预定义的标识符 `iota` 表示一个整型常量。



一般情况下复数常量是常量表达式的一种形式。会在常量表达式章节详细讨论。



数字常量可以表示任意精度的确定值而且不会溢出。因此，没有常量可以表示非 0，无穷大和非数字值。



常量可以指定类型也可以不指定类型。字面值常量，`true`，`false`，`iota`，和只包含无类型常量操作的常量表达式是无类型的。



常量可以通过常量声明和转换时显式的指定具体类型，也可以隐式的在变量声明、赋值或作为表达式操作元时隐式的指定具体类型。如果常量的值和他的类型不匹配，会报错。



无类型常量由一个默认的类型，这个类型会根据使用常量时的上下文进行隐式转换。例如：短变量声明 `i := 0` 没有指定 i 的类型。无类型常量的默认类型可以是：`bool`，`rune`，`int`，`float64`，`complex128` 或者 `string`，具体选择哪种类型由常量的值决定。



实现限制：虽然数字常量在 Go 中是任意精度，不过编译器在实现时会在内部限制精度。这意味着每个编译器实现都要：



- 至少保证整形常量有 256 位
- 浮点数常量（包括复数常量）都要保证至少 256 位的主体部分和至少 16 位的有符号指数部分

- 如果不能表示给定整数的精度抛出错误
- 如果浮点数或复数溢出抛出错误

- 如果由于精度限制不能表示浮点数或者复数进行舍入



这些要求同时作用于字面量常量额和常量表达式的结果。



## 变量



变量是一个用来储存值的位置。根据不同的变量类型，可以保存不同的值。



变量声明，函数参数和返回值，声明的函数签名，函数字面值都会为命名变量预留储存空间。调用内置的  `new`  函数或获取复合字面值的地址都会在运行时为变量分配存储空间。这种匿名变量是通过（可能是隐式的）指针间接引用的。



像数组，切片和结构体类型的变量，它们内部都包含很多元素或字段，而且这些元素和字段都可以直接被访问。数组和切片中的每个元素的行为和单独的变量基本相同。



变量的静态类型可以通过变量声明、提供给 `new` 的类型、复合字面值、结构体变量声明的元素类型以上几种方式确定。通过new或者类型初始化。接口类型的变量也有一个明确的动态类型，这个动态类型是在运行时赋值给变量的具体值类型（特例：预声明的 nil 是无类型的）。动态类型在程序的执行过程中可能并不相同，但是接口变量的值是可以分配给相同静态类型的变量。



```go
var x interface{}  // x 的静态类型为 interface{} 值为 nil
var v *T           // v 的静态类型为 *T 值为 nil
x = 42             // x 的动态类型为 int 值为 42
x = v              // x 动态类型为 *T 值为 (*T)(nil)
```



在表达式中使用变量可以取出变量的值；这个值就是变量最近一次被赋予的值。如果没有对变量赋过值，那么他的值是该类型的零值。



## 类型



类型是一个集合，集合包括值和针对值的操作&方法。一个类型可以使用类型名来表示。类型有多种表现形式：如果存在类型名，可以使用类型名表示，或者也可以使用根据已有类型组合成的类型字面值。



```go
Type      = TypeName | TypeLit | "(" Type ")" .
TypeName  = identifier | QualifiedIdent .
TypeLit   = ArrayType | StructType | PointerType | FunctionType | InterfaceType |
	    SliceType | MapType | ChannelType .
```



Go 已经预先声明了某些类型的名称。并引入了类型声明。复合类型（数组、结构体、指针、函数、接口、切片、map、channel）可以使用他们的类型字面值。



每个类型T都有一个底层类型。如果T是预定义类型或者类型字面值。那么底层类型就是他自身。否则，T的底层类型就是它再类型声明时引用到的类型。



```go
type (
	A1 = string
	A2 = A1
)

type (
	B1 string
	B2 B1
	B3 []B1
	B4 B3
)
```



`string`，`A1`，`A2`，`B1`，`B2` 的底层类型是 `string`。`[]B1`，`B3`，`B4` 的下游类型是[]B1。



#### 方法集



类型可能会有一个与之关联的方法集。接口类型的方法集就可以使用自身表示。对于其他类型，类型 T 的方法集由所有接收者类型为 T 的方法组成。而对应指针类型 *T 的方法集由所有接收者类型为 T 或 *T 的方法组成。如果是结构体类型且含有嵌入字段，那么方法集中可能还会包含更多的方法，具体请看结构体类型章节。其他类型的方法集都为空。方法集中的每个方法都有唯一且不为空的方法名。



类型的方法集用来确定类型实现的接口和以类型作为接收者能够调用的方法。



#### 布尔类型



布尔类型表示预定义常量 `true` 和 `false` 表示布尔真实值的集合。预定义的布尔类型为 `bool`；它是通过类型声明创建的。



#### 数字类型



一个数字类型相当于整型和浮点型的所有值的集合。预定义的数字类型包括：



```go
uint8       8 位无符号整数集合 (0 to 255)
uint16      16 位无符号整数集合 (0 to 65535)
uint32      32 位无符号整数集合 (0 to 4294967295)
uint64      64 位无符号整数集合 (0 to 18446744073709551615)

int8        8 位有符号整数集合 (-128 to 127)
int16       16 位有符号整数集合 (-32768 to 32767)
int32       32 位有符号整数集合 (-2147483648 to 2147483647)
int64       64 位有符号整数集合 (-9223372036854775808 to 9223372036854775807)

float32     IEEE-754 32 位浮点数集合
float64     IEEE-754 64 位浮点数集合

complex64   实部虚部都为 float32 的复数集合
complex128  实部虚部都为 float64 的复数集合

byte        uint8 的别名
rune        int32 的别名
```



n 位整数的值具有 n 比特的宽度并用补码表示。



以下几种预定义类型由具体平台实现指定长度：



```go
uint     32 或 64 位
int      和 uint 位数相同
uintptr  能够容纳指针值的无符号整数
```



为了避免移植性问题，除了被 uint8 的别名 byte 和 int32 的别名 rune，其他所有的数字类型都是通过类型声明定义。当在表达式中使用不同的数字类型需要进行类型转换。例如：int32 和 int 不是相同的类型，即使他们在指定的平台上是相等的。



#### 字符串类型



字符串类型表示字符串的值类型。字符串的值是一个字节序列（有可能为空）。字符串一旦创建就无法修改它的值。预定义的字符串类型是 `string`，它是通过类型声明定义的。



可以使用内置函数 `len` 获取字符串长度。如果字符串是常量那么它的长度在编译时也为常量。可以通过数字下标 0～len(s)-1 访问字符串字节。获取字符串的地址是非法操作；如果 `s[i]` 是字符串的第 i 个字节，那么 `&s[i]` 是无效的。



#### 数组类型



数组是一定数量的单一类型元素序列，而这个单一类型叫做元素类型。元素的个数表示元素的长度，它永远不是负数。



```go
ArrayType   = "[" ArrayLength "]" ElementType .
ArrayLength = Expression .
ElementType = Type .
```



长度是数组类型的一部分；它是一个类型为 int 的非负常量。可以用内置函数 `len` 获取数组的长度。元素可以通过下标 `0～len(a)-1` 访问。数组一般都是一维的，不过也可以是多维的。



```go
[32]byte
[2*N] struct { x, y int32 }
[1000]*float64
[3][5]int
[2][2][2]float64  // same as [2]([2]([2]float64))
```



#### 切片类型



切片描述了底层数组的一个连续片段并提供对连续片段内元素的访问。切片类型表示元素类型的数组的所有切片的集合。没有被初始化的切片用 nil 表示。



```go
SliceType = "[" "]" ElementType .
```



与数组一样，切片的可以使用索引访问并且有长度，切片的长度可以通过内置的 `len` 函数获取；与数组不同的是它的长度在运行时是可以变化的。我们可以通过下标 `0～len(s)-1` 来访问切片内的元素。切片的索引可能会小于相同元素再底层数组的索引。



切片一旦初始化，那么就有一个与之对应的底层数组保存切片中的元素。切片和底层的数组还有其他指向该数组的切片共享相同的储存空间；而不同的数组总是有着不同的存储空间。



切片的底层数组可能会延伸到切片末尾以外，切片的容积等于切片现在的长度加上数组中切片还没使用的长度；可以从原始切片中切出一个长度与容量相等的切片。切片的容量可以通过内置的 `cap(a)` 函数来获取。可以通过函数`make`来创建一个T类型的新切片。



使用内置函数 `make` 可以出实话给定元素类型 T 的切片。`make` 函数接收三个参数：切片类型、切片长度、切片容积，其中切片容积是可选参数。`make` 创建的切片会在底层分配一个切片所引用的新数组。



```go
make([]T, length, capacity)
```



`make` 的作用就是创建新数组并切分它，所以下面两种写法是等价的：



```go
make([]int, 50, 100)
new([100]int)[0:50]
```



与数组相同，切片一般是一维的，不过也可以复合成多维。数组中的数组都必须是相同的长度，但是切片中的切片长度是动态变化的，不过切片中的切片需要单独初始化。



#### 结构体类型



结构体是一个命名元素序列，命名元素也叫做字段，每个字段都对应一个名称和类型，字段的名字可以是显式指定的（标识符列表）也可以是隐式的（嵌入字段）。在结构体中非空字段具有唯一性。



```go
StructType    = "struct" "{" { FieldDecl ";" } "}" .
FieldDecl     = (IdentifierList Type | EmbeddedField) [ Tag ] .
EmbeddedField = [ "*" ] TypeName .
Tag           = string_lit .
```



```go
// 空结构体.
struct {}

// 6个字段的结构体.
struct {
	x, y int
	u float32
	_ float32  // padding
	A *[]int
	F func()
}
```



一个指定了类型而没有指定名称的字段叫做嵌入字段，嵌入字段必须指定类型名 T 或指向非接口类型的指针类型 *T，其中 T 不能为指针类型。或者一个非接口类型的指针。并且T本身不能为指针类型。这种情况下会把类型名作为字段的名字。



```go
// 一个包含 4 个嵌入字段 T1, *T2, P.T3 和 *P.T4 的结构体
struct {
	T1        // 字段名为 T1
	*T2       // 字段名为 T2
	P.T3      // 字段名为 T3
	*P.T4     // 字段名为 T4
	x, y int  // 字段名为 x 和 y
}
```



以下声明是错误的因为字段名称必须唯一。



```go
struct {
	T     // 嵌入字段 *T 与 *P.T 冲突
	*T    // 嵌入字段 T 与 *P.T 冲突
	*P.T  // 嵌入字段 T 与 *T 冲突
}
```



如果 `x.f` 是表示该字段或方法 `f` 的合法选择器，则会调用结构 `x` 中嵌入字段的字段或方法 `f`。



从嵌入字段组合来的字段与结构体原来的字段行为基本相同，只是不能在结构体的复合字面值中直接使用。



给定一个结构体 S 和一个类型 T，依据以下规则生成组合后的方法集：



- 如果 S 包含嵌入字段 T，则 S 和 *S 的方法集包括接收者为 T 的方法集，而 *S 包括 接收者为 *T 的方法集。
- 如果 S 包含字段 *T。那么S和*S均包含接收者为 T 和 *T 的所有方法集。



声明字段时可以给该字段添加一个字符串的 tag。这个 tag 将会成为它所对应字段的一个属性。空 tag 和缺省 tag 是相同的。tag 的值可以通过反射的接口获取，可以作为类型结构体的类型定义的一部分，也可以忽略。



```go
struct {
	x, y float64 ""  // 空 tag 和缺省 tag 相同
	name string  "any string is permitted as a tag"
	_    [4]byte "ceci n''est pas un champ de structure"
}

// 结构体对应一个 TimeStamp 的 protocol buffer.
// tag 字符串中定义了 protocol buffer 字段对应的数字;
// 一般使用 reflect 包读取他们.
struct {
	microsec  uint64 `protobuf:"1"`
	serverIP6 uint64 `protobuf:"2"`
}
```



#### 指针类型



指针类型表示所有指向给定类型变量的指针集合。这个指定的类型叫做指针的基础类型。没有初始化的指针值为nil。



```go
PointerType = "*" BaseType .
BaseType    = Type .
```



```go
*Point
*[4]int
```



#### 函数类型



函数类型可以表示所有具有相同参数类型和返回值类型的函数。未初始化的函数类型值为 nil。



```go
FunctionType   = "func" Signature .
Signature      = Parameters [ Result ] .
Result         = Parameters | Type .
Parameters     = "(" [ ParameterList [ "," ] ] ")" .
ParameterList  = ParameterDecl { "," ParameterDecl } .
ParameterDecl  = [ IdentifierList ] [ "..." ] Type .
```



在参数和返回值列表中，标识符列表必须同时存在或缺省。如果存在，那么每个名字都表示指定类型的一个参数/返回值，这些标识符必须非空并且不能重复。如果缺省，指定类型的参数/返回值使用对应的类型表示。参数列表和返回值列表一般都是需要加括号，不过在只有一个缺省返回值时，它可以不使用括号。



函数的最后一个参数可以添加前缀 `...`。包含这种参数的函数叫做变参函数，它可以接收零个或多个参数。



```go
func()
func(x int) int
func(a, _ int, z float32) bool
func(a, b int, z float32) (bool)
func(prefix string, values ...int)
func(a, b int, z float64, opt ...interface{}) (success bool)
func(int, int, float64) (float64, *[]int)
func(n int) func(p *T)
```



#### 接口类型



接口类型指定了一个方法集。一个接口类型变量可以保存任何方法集是该接口超集的类型。我们可以认为类型实现了接口。没有初始化的接口类型值为 nil。



```go
InterfaceType      = "interface" "{" { MethodSpec ";" } "}" .
MethodSpec         = MethodName Signature | InterfaceTypeName .
MethodName         = identifier .
InterfaceTypeName  = TypeName .
```



在接口类型的方法集中，每个方法的名称必须是非空且唯一。



```go
// A simple File interface
interface {
	Read(b Buffer) bool
	Write(b Buffer) bool
	Close()
}
```



接口可以由多个类型实现，例如：类型 `S1` 和类型 `S2` 都有以下方法集：



```go
func (p T) Read(b Buffer) bool { return … }
func (p T) Write(b Buffer) bool { return … }
func (p T) Close() { … }
```



（这里的类型 T 可以表示 `S1` 也可以表示 `S2` ） `S1` 和 `S2` 都实现了接口 `File`，而不用管类型是否还有其他方法。



一个类型实现了任何方法集的为其子集的接口。因此它可能实现了多个不同接口。例如：所有的类型都实现了空接口：



```go
interface{}
```



与之相似，思考下面这个定义为 `Locker` 的接口：



```go
type Locker interface {
	Lock()
	Unlock()
}
```



如果 `S1` 和 `S2` 也实现了它：



```go
func (p T) Lock() { … }
func (p T) Unlock() { … }
```



那它们就实现了两个接口 `Locker` 和 `File`。



一个接口 T 可以使用另一个接口 E 来指定方法。这种方式叫做将接口 E 嵌入进接口 T。它把 E 中所有的方法（包括导出和未导出的方法）全部添加进接口 T。



```go
type ReadWriter interface {
	Read(b Buffer) bool
	Write(b Buffer) bool
}

type File interface {
	ReadWriter  // 与添加 ReadWriter 接口中的方法是等价的
	Locker      // 与添加 Locker 接口中的方法是等价的 
	Close()
}

type LockedFile interface {
	Locker
	File        // 无效: Lock, Unlock 不是唯一的
	Lock()      // 无效: Lock 不是唯一的
}
```



接口 T 不能递归的嵌入进自己或已经嵌入过它的接口。



```go
// 无效: Bad 不能嵌入它自己
type Bad interface {
	Bad
}

// 无效: Bad1 不能嵌入已经引用它的 Bad2
type Bad1 interface {
	Bad2
}
type Bad2 interface {
	Bad1
}
```



#### Map类型



map 类型是一种以唯一值作为键的无序集合。



```go
MapType     = "map" "[" KeyType "]" ElementType .
KeyType     = Type .
```



map的键类型必须能使用比较运算符 `==` 和 `!=` 进行比较。因此它的键类型不能是函数，map，或者切片。如果键是接口类型，那么比较运算符必须能比较他的动态值。如果不能会抛出一个运行时错误。



```go
map[string]int
map[*T]struct{ x, y float64 }
map[string]interface{}
```



map中元素的个数叫做它的长度。对于一个map `m`。它的长度可以通过内置函数 `len` 获得，而且它的长度可能再运行时发生变化。map 可以再运行时添加和取回元素，页可以使用内置函数 `delete`移除元素。



可以使用内置函数 `make` 初始化一个新的且为空的 map。它能指定 map 的类型和预留的空间：



```go
make(map[string]int)
make(map[string]int, 100)
```



map 的预留空间不会固定住 map 的长度；它可以通过添加一定数量的元素来增加自己的长度（nil map 不能添加元素）。nil map 和空 map 是相等的，只是 nil map 不能添加元素。



#### Channel类型



channel提供一种手段在并发执行的函数间发送和接收指定类型的值。没有初始化的 channel 是nil。



```go
ChannelType = ( "chan" | "chan" "<-" | "<-" "chan" ) ElementType .
```



操作符 `<-` 可以指定 channel 的数据流动方向。如果没有指定方向，channel 默认是双向的。channel 可以通过转换和赋值来限制只读和只写。



```go
chan T          // 可以接收和发送 T 类型的数据
chan<- float64  // 只能发送 float64 类型的值
<-chan int      // 只能接收
```



`<-` 与最左侧的 `chan` 关联：



```go
chan<- chan int    // 等价于 chan<- (chan int)
chan<- <-chan int  // 等价于 chan<- (<-chan int)
<-chan <-chan int  // 等价于 <-chan (<-chan int)
chan (<-chan int)
```



可以通过内置的 `make` 函数初始化 channel。`make` 函数可以指定channel的类型和容量。



```go
make(chan int, 100)
```



容量是设置了最大能缓存元素的数量。如果没有设置容量或值为 0，channel 就是没有缓存的，这时只有当发送者和接收者都准备好后才会传输数据。而带缓存的 channel 在缓存没有满的时候依然可以成功发送数据，当缓存不为空的时候可以成功接收到数据，值为 nil 的 channel 不能传输数据。



可以通过内置函数 `close` 关闭 channel。在接收端的第二个返回值可以用来提示接收者在关闭的 channel 是否还包含数据。



channel 可以在发送语句，接收操作中使用。可以不考虑同步性直接在多个 goroutine 中对 channel 调用内置函数 `len` 和 `cap` 。channel 的行为和 FIFO 队列相同。举个例子，一个 goruntine 发送数据，另一个 goruntine 接收他们，接收数据的顺序和发送数据的顺序是相同的。



## 类型的属性和值



#### 类型标识



两个类型可能相同也可能不同。



定义的类型都是不同类型。如果两个类型的底层类型在结构上是相同的，那它们也是相等的。总的来说：



- 2 个数组的长度和元素类型相同，那么它们就是相同类型。
- 如果两个切片的元素类型相同那么它们就是相同类型。

- 如果两个结构体字段顺序相同，并且字段名称、字段类型和 tag 都相同那么它们就是相等的。非导出字段的字段名在不同的包中总是不同的。
- 如果两个指针的基础类型相同那么他们具有相同类型。

- 如果两个函数具有相同的参数和返回值列表，并且他们的类型相同那么他们就是相同的，参数的名称不一定要相同。
- 如果两个接口的方法集完全相同（方法的顺序）。

- 如果两个 map 类型的键类型和值类型相同那它们就是相等的。
- 如果两个 channel 类型包含的对象类型和 channel 的方向都是相同的那它们就是相同的。



给出下列声明：



```go
type (
	A0 = []string
	A1 = A0
	A2 = struct{ a, b int }
	A3 = int
	A4 = func(A3, float64) *A0
	A5 = func(x int, _ float64) *[]string
)

type (
	B0 A0
	B1 []string
	B2 struct{ a, b int }
	B3 struct{ a, c int }
	B4 func(int, float64) *B0
	B5 func(x int, y float64) *A1
)

type	C0 = B0
```



这些类型是相等的：



```go
A0, A1, and []string
A2 and struct{ a, b int }
A3 and int
A4, func(int, float64) *[]string, and A5

B0, B0, and C0
[]int and []int
struct{ a, b *T5 } and struct{ a, b *T5 }
func(x int, y float64) *[]string, func(int, float64) (result *[]string), and A5
```



B0 和 B1 不是一种类型因为它们是通过类型定义方式分别定义的；`func(int, float64) *B0` 和 `func(x int, y float64) *[]string` 是不同的，因为 B0 和 []string 不是相同类型。



#### 可分配性



在以下情况下，可以将 x 分配给类型为 T 的变量（把 x 分配给 T）：



- x 的类型为 T
- x 的类型 V 和 T 有相同的底层类型并且类型 T 或 V 至少一个定义的类型

- T 是一个接口类型并且 x 实现了 T
- x 是一个 channel，并且 T 是channel类型，类型V和类型T有相同的元素类型，并且 2 种类型至少有一种不是定义的类型

- x 等于 nil 并且 T 是一个指针，函数，切片，map，channel 或接口类型
- x 是一个可以表示 T 类型值的无类型常量



#### 代表性



满足以下条件时可以用 T 类型的值表示常量 x：



- T 值的集合包括 x
- T 是浮点型，而 x 在没有溢出的情况下能够近似成 T 类型。近似规则使用 `IEEE 754 round-to-even`，负零和无符号的零相同。需要注意的是，常量的值不会为负零，NaN，或无限值。

- T 为复数类型，并且 x 的 `real(x)` 和 `imag(x)` 部分由复数类型对应的浮点类型（`float32` 或 `float64` ）组成。



```go
x                   T           x 可以表示 T 的值，因为：

''a''                 byte        97 在 byte 类型值的集合中
97                  rune        rune 是 int32 的别名，97 在 32 位整型值的集合中
"foo"               string      "foo" 在字符串值的集合中
1024                int16       1024 在 16 位整型值的集合中
42.0                byte        42 在 8 位无符号整型值的集合中
1e10                uint64      10000000000 在 64 位无符号整型值的集合中
2.718281828459045   float32     2.718281828459045 的近似值 2.7182817 在 float32 类型值的集合中
-1e-1000            float64     -1e-1000 的近视值 IEEE -0.0，等于 0 
0i                  int         0 是整型值
(42 + 0i)           float32     42.0 (0 虚部) 在 float32 类型值的集合中
```



```go
x                   T           x 不能表示 T 的值，因为：

0                   bool        0 不在布尔值的集合中
''a''                 string      ''a'' 是 rune 类型, 它不在字符串类型的值集合中
1024                byte        1024 不在 8 位无符号整型值的集合中
-1                  uint16      -1 不在 16 位无符号整型值的集合中
1.1                 int         1.1 不是整型值
42i                 float32     (0 + 42i) 不在 float32 类型值的集合中
1e1000              float64     1e1000 取近似值时会溢出成 IEEE
```



## 代码块



代码块是用大括号括起来的声明和语句。



```go
Block = "{" StatementList "}" .
StatementList = { Statement ";" } .
```



除了源码中显式的代码块，也有一些隐式的代码块。



- 包含所有的Go代码的全局代码块。
- 包含所有包的代码的包代码块。

- 包含文件内的所有代码的文件代码块。
- 每个 if，switch和 for 的范围都会形成隐式的块。

- 每个 switch 和 select 条件都有自己的代码块。



代码块可以嵌套并且影响作用域。



## 声明和作用域



一段声明可以给常量，类型，变量，函数，标签，和包绑定标识符。程序中每个标识符都需要声明。相同标识符不能在同一个代码块中声明2次。并且相同标识符不能同时在文件和 package 代码块中声明。



空标识符可以和其他标识符一样在声明中使用。不过它不绑定标识符，等于没有声明。在 package 代码块中 `init` 标识符只能用做 `init` 函数的标识符，就像空标识符一样，它不会引入新的绑定。



```go
Declaration   = ConstDecl | TypeDecl | VarDecl .
TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .
```



声明过的标识符的作用域就是声明标识符所在的作用域。



go使用块来规定词汇的方位：



- 预定义的标识符具有全局作用域。
- 所有定义的顶级标识符具有包作用域。

- import进来的包的名字标识符具有文件作用域。
- 方法的接收者，函数参数，返回值变量具有函数作用域。

- 函数内定义的参量和变量标识符的作用域是标识符被声明到容纳他的块结束。



一个代码块中声明的标识符可以在它内部的代码块中重新声明。在内部代码块的作用域中标识符表示在内部代码块中声明的实体。



pakcage 语句不属于声明。包名不会出现在任何的作用域中。它的作用只是用来标识属于相同包的多个文件并在导入时指定默认包名。



#### 标签的作用域



可以使用标签语句来声明标签，并且可以在 `break`，`continue`，`goto` 语法中使用。如果只声明但没有使用标签时非法的。标签的作用域只有定义时的函数体，早递归函数体中没有作用。



#### 空标识符



空标识符使用下划线 `_` 代表。与一般的非空标识符不同，它作为匿名标识符在声明，运算元和赋值语句中都有特殊含义。



#### 预定义的标识符



以下标识符已经在全局作用域中预先声明：



```go
Types:
	bool byte complex64 complex128 error float32 float64
	int int8 int16 int32 int64 rune string
	uint uint8 uint16 uint32 uint64 uintptr

Constants:
	true false iota

Zero value:
	nil

Functions:
	append cap close complex copy delete imag len
	make new panic print println real recover
```



#### 导出标识符



标识符可以导出供其他包使用。在以下两种情况同时满足时标识符是导出的：



- 标识符的首字母是大写（Unicode 的 `Lu` 类）
- 标识符声明在包作用域或者它是字段名/方法名。



其他任何标识符都不是导出的。



#### 标识符的唯一性



给定一个标识符集合，一个标识符与集合中的每个标识符都不相同，那就认为这个标识符是唯一的。假设有两个标识符，如果它们的拼写不同，或者它们在不同的包中并没有导出，那它们就是不同标识符。相反，其他情况下都认为标识符是相同的。



#### 常量声明



常量声明使用常量表达式绑定一系列标识符。标识符的数量必须等于表达式的数量。左侧第 n 个标识符绑定右侧第 n 个表达式的值。



```go
ConstDecl      = "const" ( ConstSpec | "(" { ConstSpec ";" } ")" ) .
ConstSpec      = IdentifierList [ [ Type ] "=" ExpressionList ] .

IdentifierList = identifier { "," identifier } .
ExpressionList = Expression { "," Expression } .
```



如果给定类型，常量会指定类型，并且表达式的值必须能对这个类型进行赋值。

如果没有给定类型。常量会转换成相应的表达式类型。如果表达式的值是无类型常量，那么声明的常量也是无类型的，并且常量的标识符代表常量的值。例如：即使小数部分是 0，只要表达式是浮点数字面值，常量标识符也表示为浮点数常量。



```go
const Pi float64 = 3.14159265358979323846
const zero = 0.0         // 无类型浮点数常量
const (
	size int64 = 1024
	eof        = -1  // 无类型整型常量
)
const a, b, c = 3, 4, "foo"  // a = 3, b = 4, c = "foo", 无类型整型和字符串常量
const u, v float32 = 0, 3    // u = 0.0, v = 3.0
```



括号内的常量声明列表的表达式除了第一个必须声明其他表达式可以不写。空的表达式列表的值和类型都和前面的非空表达式相同。缺省的表达式列表等价于重复之前的表达式。标识符的数量必须等于表达式的数量。`iota`常量生成器是一个可以快速生成序列值的机制。



```go
const (
	Sunday = iota
	Monday
	Tuesday
	Wednesday
	Thursday
	Friday
	Partyday
	numberOfDays  // 非导出常量
)
```



#### Iota



在常量声明中，预定义的标识符 `iota` 表示连续的无类型整型常量。它的值为常量声明中每个常量定义的位置（从零开始）。它能够用来生成一个关联常量集合：



```go
const ( // iota is reset to 0
	c0 = iota  // c0 == 0
	c1 = iota  // c1 == 1
	c2 = iota  // c2 == 2
)

const ( // iota is reset to 0
	a = 1 << iota  // a == 1
	b = 1 << iota  // b == 2
	c = 3          // c == 3  (没有使用 iota 不过它的值依然递增)
	d = 1 << iota  // d == 8
)

const ( // iota is reset to 0
	u         = iota * 42  // u == 0     (无类型整型常量)
	v float64 = iota * 42  // v == 42.0  (float64 类型常量)
	w         = iota * 42  // w == 84    (无类型整型常量)
)

const x = iota  // x == 0  (iota 被重置)
const y = iota  // y == 0  (iota 被重置)
```



根据定义，在同一个常量定义中多次使用 `iota` 会得到相同的值：



```go
const (
	bit0, mask0 = 1 << iota, 1<<iota - 1  // bit0 == 1, mask0 == 0  (iota == 0)
	bit1, mask1                           // bit1 == 2, mask1 == 1  (iota == 1)
	_, _                                  //                        (iota == 2, unused)
	bit3, mask3                           // bit3 == 8, mask3 == 7  (iota == 3)
)
```



最后一个例子利用了最后一个非空表达式列表的隐式重复。



#### 类型声明



类型声明为类型绑定一个标识符。类型声明有2种方式：类型声明和别名声明。



```go
TypeDecl = "type" ( TypeSpec | "(" { TypeSpec ";" } ")" ) .
TypeSpec = AliasDecl | TypeDef .
```



##### Alias声明



别名声明给指定类型绑定一个标识符名称。



```go
AliasDecl = identifier "=" Type .
```



在标识符作用域内，它作为类型的别名。



```go
type (
	nodeList = []*Node  // nodeList 和 []*Node 是相同类型
	Polar    = polar    // Polar 和 polar 表示相同类型
)
```



##### Type 定义



类型定义会创建一个新类型并绑定一个标识符，新类型与给定类型具有相同的底层类型和操作。



```go
TypeDef = identifier Type .
```



这个类型叫做定义类型，它和其他所有类型都不相同，包括创建它的类型。



```go
type (
	Point struct{ x, y float64 }  // Point 和 struct{ x, y float64 } 是不同类型
	polar Point                   // polar 和 Point 表示不同类型
)

type TreeNode struct {
	left, right *TreeNode
	value *Comparable
}

type Block interface {
	BlockSize() int
	Encrypt(src, dst []byte)
	Decrypt(src, dst []byte)
}
```



定义类型可以关联该类型的方法。它不会继承原来类型的任何方法。但是接口类型的方法集和类型的结构没有改变。



```go
// Mutex 是一个拥有 Lock 和 Unlock 两个方法的数据类型。
type Mutex struct         { /* Mutex fields */ }
func (m *Mutex) Lock()    { /* Lock implementation */ }
func (m *Mutex) Unlock()  { /* Unlock implementation */ }

// NewMutex 与 Mutex 结构相同不过方法集为空。
type NewMutex Mutex

// PtrMutex 的底层类型 *Mutex 的方法集没有改变，
// 但是 PtrMutex 的方法集为空。
type PtrMutex *Mutex

// *PrintableMutex 包含嵌入字段 Mutex 的 Lock 和 Unlock 方法。
type PrintableMutex struct {
	Mutex
}

// MyBlock 是与 Block 有相同方法集的接口类型
type MyBlock Block
```



类型定义可以定义方法集不同的布尔值、数字和字符串类型：



```go
type TimeZone int

const (
	EST TimeZone = -(5 + iota)
	CST
	MST
	PST
)

func (tz TimeZone) String() string {
	return fmt.Sprintf("GMT%+dh", tz)
}
```



#### 变量声明



变量声明可以创建一个或多个变量，并绑定对应的标识符、指定类型和初始值。



```go
VarDecl     = "var" ( VarSpec | "(" { VarSpec ";" } ")" ) .
VarSpec     = IdentifierList ( Type [ "=" ExpressionList ] | "=" ExpressionList ) .
```



```go
var i int
var U, V, W float64
var k = 0
var x, y float32 = -1, -2
var (
	i       int
	u, v, s = 2.0, 3.0, "bar"
)
var re, im = complexSqrt(-1)
var _, found = entries[name]  // map lookup; only interested in "found"
```



如果给定一个表达式列表。变量会根据赋值规则使用表达式进行初始化。否则，每个变量都会初始化成变量类型的零值。



如果指定类型，变量会为指定类型。如果没有指定类型，变量会使用分配的初始值类型。如果初始值为无类型常量，它会转换成初始值的默认类型。如果是一个无类型布尔值，那么变量的类型就是 `bool`。值 `nil` 不能给没有指定类型的变量赋值。



```go
var d = math.Sin(0.5)  // d is float64
var i = 42             // i is int
var t, ok = x.(T)      // t is T, ok is bool
var n = nil            // illegal
```



实现的限制：在函数体内声明的变量如果没有使用过编译器需要报错。



#### 短变量声明



短变量声明的语法:



```go
ShortVarDecl = IdentifierList ":=" ExpressionList .
```



它比正常使用初始化表达式进行变量声明的方式要短，而且不指定类型：



```go
"var" IdentifierList = ExpressionList .
```



```go
i, j := 0, 10
f := func() int { return 7 }
ch := make(chan int)
r, w := os.Pipe(fd)  // os.Pipe() 返回两个值
_, y, _ := coord(p)  // coord() 返回三个值，我们只关注 y
```



和常规变量声明不同，即使之前在相同代码块中声明过的变量，也可以在短变量重新声明相同类型的变量，并且保证至少会有一个新的非空变量。总之，只应该在多变量短声明的时候重新声明变量，重新声明并不会使用新的变量，而是给变量分配新值。



```go
field1, offset := nextField(str, 0)
field2, offset := nextField(str, offset)  // 重新声明 offset
a, a := 1, 2                              // 非法：声明了 a 两次并且没有新的变量
```



短变量声明只能在函数中使用，例如在 `if`、`for`、`switch`语句的上下文中声明临时变量。



#### 函数声明



函数声明为函数绑定标识符。



```go
FunctionDecl = "func" FunctionName Signature [ FunctionBody ] .
FunctionName = identifier .
FunctionBody = Block .
```



如果函数指定了返回参数。函数体的语句必须以终止语句结束。



```go
func IndexRune(s string, r rune) int {
   for i, c := range s {
   	if c == r {
   		return i
   	}
   }
   // 无效：缺少 return 语句
}
```



函数声明可以没有函数体。这样的声明提供一个函数声明，并由其他外部实现，例如汇编脚本。



```go
func min(x int, y int) int {
	if x < y {
		return x
	}
	return y
}

func flushICache(begin, end uintptr)  // 由外部实现
```



#### 方法声明



方法是一个带接收者的函数，方法声明为方法绑定标识符作为方法名并指定方法对应的接收者类型。



```go
MethodDecl = "func" Receiver MethodName Signature [ FunctionBody ] .
Receiver   = Parameters .
```



接收者通过在方法增加一个额外的参数来指定。这个参数必须是一个非可变参数。它的类型必须是 T 或者 T 的指针（可能包含括号）。T 被称作接收者的基础类型；它不能是指针或接口类型，并且只能在同一个包中定义方法。声明后，我们认为方法绑定了基础类型，并且可以通过 T 或 *T 选择器访问方法名。



非空的接收者标识符在方法签名中必须是唯一的。如果接收者的值没有在该方法中使用，那么接收者标识符可以省略。函数和方法的参数也是一样。



对于一个基础类型。绑定的非空的方法名必须是唯一的。如果基础类型是一个结构体，非空的方法名也不能与结构体字段重复。



给定一个`Point`类型。声明：



```go
func (p *Point) Length() float64 {
	return math.Sqrt(p.x * p.x + p.y * p.y)
}

func (p *Point) Scale(factor float64) {
	p.x *= factor
	p.y *= factor
}
```



为类型 `*Point`绑定了2个方法 `Length` 和 `Scale`。

方法的类型就是以接收者作为第一个参数的函数类型，例如 `Scale` 方法：



```go
func(p *Point, factor float64)
```



但是以这种方式声明的函数并不是方法。



## 表达式



表达式通过针对运算元使用运算符和函数来获取计算值。



#### 运算元



运算元代表表达式中的一个简单的。运算元可以是字面值，非空标识符。或括号表达式。



空标识符只能出现在赋值声明的左侧。



```go
Operand     = Literal | OperandName | MethodExpr | "(" Expression ")" .
Literal     = BasicLit | CompositeLit | FunctionLit .
BasicLit    = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
OperandName = identifier | QualifiedIdent.
```



#### 修饰标识符



修饰标识符是以包名作为前缀修饰的标识符。包名和标识符都不能为空。



```go
QualifiedIdent = PackageName "." identifier .
```



修饰标识符可以用来访问不同包（需要先导入）中的标识符。标识符必须是导出的并在包级代码块声明才能够被访问。



```go
math.Sin	// 表示 math 包中的 Sin 函数
```



#### 复合字面值



复合字面值能为结构体、数组、切片和 map 初始化值。它每次只能创建一个值。字面值由一个字面值类型和使用括号括起来的元素列表组成。元素前也可以声明元素对应的键。



```go
CompositeLit  = LiteralType LiteralValue .
LiteralType   = StructType | ArrayType | "[" "..." "]" ElementType |
                SliceType | MapType | TypeName .
LiteralValue  = "{" [ ElementList [ "," ] ] "}" .
ElementList   = KeyedElement { "," KeyedElement } .
KeyedElement  = [ Key ":" ] Element .
Key           = FieldName | Expression | LiteralValue .
FieldName     = identifier .
Element       = Expression | LiteralValue .
```



字面值类型的底层类型必须是一个结构体，数组，切片或 map 类型（如果没有指定类型名就会强制执行这个约束）。元素的类型和键都必须能够分配给相应的字段的元素和键类型；没有额外的类型转换。键可以表示结构体的字段名，切片和数组的索引，map 类型的键。对于 map 字面值，所有的元素都必须有键。如果相同字段名或常量值的键对应多个元素就会报错。如果 map 类型的键为非常量类型，请看求值顺序章节。



结构体字面值遵循以下规则：



- 在结构体中，键必须是它的字段名。
- 不包含任何键的元素列表的顺序需要与结构体字段的声明顺序相同。

- 如果一个元素指定了键，那么所有的元素都必须指定键。
- 包含键的元素列表不需要指定结构体的每个字字段，缺省字段会使用字段类型的零值。

- 字面值可以不指定元素；这样的字面值等于该类型的零值。
- 指定非本包的非导出字段会报错。



给定声明：



```go
type Point3D struct { x, y, z float64 }
type Line struct { p, q Point3D }
```



我们可以使用这种写法：



```go
origin := Point3D{}                            // Point3D 的零值
line := Line{origin, Point3D{y: -4, z: 12.3}}  // line.q.x 的零值
```



数组和切片遵循以下规则：



- 每个元素都关联一个数字索引标记元素再数组中的位置。
- 给元素指定的键会作为它的索引。键必须是能够表示非负的 `int` 类型值的常量；如果是指定类型的常量，那么常量必须是整型。

- 元素没有指定键时会使用之前的索引加一。如果第一个元素没有指定键，它的索引为零。



对复合字面值取址会生成指向由字面量初始化的变量的指针。



```go
var pointer *Point3D = &Point3D{y: 1000}
```



数组字面值需要在类型中指定数组的长度。如果提供的元素少于数组的长度，那么缺少元素的位置将会使用元素类型的零值替代。如果索引超过数组的长度会报错。`…` 表示数组的长度等于最大元素索引加一。



```go
buffer := [10]string{}             // len(buffer) == 10
intSet := [6]int{1, 2, 3, 5}       // len(intSet) == 6
days := [...]string{"Sat", "Sun"}  // len(days) == 2
```



切片字面值底层其实就是数组字面值。因此它的长度和容量都是元素的最大索引加一。切片字面值的格式为：



```go
[]T{x1, x2, … xn}
```



可以在数组上进行切片操作从而获得切片：



```go
tmp := [n]T{x1, x2, … xn}
tmp[0 : n]
```



在一个数组、切片或 map 类型 T 中。元素或者 map 的键可能有自己的字面值类型，如果字面值类型和元素或者键类型相同，那么对应的类型标识符可以省略。与之类似，如果元素或键的类型为 `*T`，那么它们的 `&T` 也可以省略。



```go
[...]Point{{1.5, -3.5}, {0, 0}}     // same as [...]Point{Point{1.5, -3.5}, Point{0, 0}}
[][]int{{1, 2, 3}, {4, 5}}          // same as [][]int{[]int{1, 2, 3}, []int{4, 5}}
[][]Point{{{0, 1}, {1, 2}}}         // same as [][]Point{[]Point{Point{0, 1}, Point{1, 2}}}
map[string]Point{"orig": {0, 0}}    // same as map[string]Point{"orig": Point{0, 0}}
map[Point]string{{0, 0}: "orig"}    // same as map[Point]string{Point{0, 0}: "orig"}

type PPoint *Point
[2]*Point{{1.5, -3.5}, {}}          // same as [2]*Point{&Point{1.5, -3.5}, &Point{}}
[2]PPoint{{1.5, -3.5}, {}}          // same as [2]PPoint{PPoint(&Point{1.5, -3.5}), PPoint(&Point{})}
```



当复合字面值使用字面值类型的类型名格式出现在 `if`、`for` 或 `switch` 语句的关键字和括号之间并且没有使用圆括号包裹的时候，会引发语法歧义。在这种特殊的情况下字面值的括号会被认为是语句的代码块。为了避免歧义，复合字面值必须用括号括起来。



```go
if x == (T{a,b,c}[i]) { … }
if (x == T{a,b,c}[i]) { … }
```



下面是合法的数组、切片和 map 的例子：



```go
// list of prime numbers
primes := []int{2, 3, 5, 7, 9, 2147483647}

// vowels[ch] is true if ch is a vowel
vowels := [128]bool{''a'': true, ''e'': true, ''i'': true, ''o'': true, ''u'': true, ''y'': true}

// the array [10]float32{-1, 0, 0, 0, -0.1, -0.1, 0, 0, 0, -1}
filter := [10]float32{-1, 4: -0.1, -0.1, 9: -1}

// frequencies in Hz for equal-tempered scale (A4 = 440Hz)
noteFrequency := map[string]float32{
	"C0": 16.35, "D0": 18.35, "E0": 20.60, "F0": 21.83,
	"G0": 24.50, "A0": 27.50, "B0": 30.87,
}
```



#### 函数字面值



函数字面值表示一个匿名函数。



```go
FunctionLit = "func" Function .
```



```go
func(a, b int, z float64) bool { return a*b < int(z) }
```



函数字面值能分配给变量或直接调用。



函数字面值是一个闭包。它可以引用包裹函数中的变量，这些变量在包裹函数和函数字面值之间是共享的。并且它会一直存在直到生命周期结束。



#### 主要表达式



主要表达式是一元和二元表达式的运算元。



```go
PrimaryExpr =
	Operand |
	Conversion |
	PrimaryExpr Selector |
	PrimaryExpr Index |
	PrimaryExpr Slice |
	PrimaryExpr TypeAssertion |
	PrimaryExpr Arguments .

Selector       = "." identifier .
Index          = "[" Expression "]" .
Slice          = "[" [ Expression ] ":" [ Expression ] "]" |
                 "[" [ Expression ] ":" Expression ":" Expression "]" .
TypeAssertion  = "." "(" Type ")" .
Arguments      = "(" [ ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ] ] ")" .
```



```go
x
2
(s + ".txt")
f(3.1415, true)
Point{1, 2}
m["foo"]
s[i : j + 1]
obj.color
f.p[i].x()
```



#### 选择器



对于一个 x 不是包名的主要表达式，选择器表达式：



```go
x.f
```



表示 x 的字段或方法 f（有时为 *x）。标识符 f 叫做（字段/方法）选择器。它不能是空标识符。选择器表达式的类型就是 f 的类型。如果 x 是包名。请参考修饰标识符。



选择器 f 可以表示类型 T 的方法或字段 f。也可以表示类型 T 的嵌入方法或字段 f。访问 f 所需穿过的嵌套层数叫做它在类型 T 中的深度。声明在 T 中的字段或方法的深度为 0。声明在 T 的嵌入字段 A 中的方法或字段的深度等于 f 在 A 中的深度加一。



选择器遵循以下原则：



- 对于非指针/接口类型 T/*T 的值 x，x.f 表示第一层的方法/字段。如果在第一层没有对应的 f，选择器表达式就是非法的。
- 对于接口类型 I 的值 x，`x.f`表示动态值 x 的方法名 f。如果接口 I 的方法集中没有 f 方法，选择器就是非法的。

- 作为例外，如果 x 是一个指针类型并且 (*x).f 是合法的选择器表达式（只能表示字段，不能表示方法）。那么(*x).f 可以简写成 x.f。
- 在其他情况下，x.f 都是非法的。

- 如果x是指针类型，并且值为 nil，其中 f 为结构体字段。赋值或取值 x.f 会引起运行时恐慌。
- 如果x是接口类型，并且值为 nil。调用 x.f  会引起运行时恐慌。



例如给定声明：



```go
type T0 struct {
	x int
}

func (*T0) M0()

type T1 struct {
	y int
}

func (T1) M1()

type T2 struct {
	z int
	T1
	*T0
}

func (*T2) M2()

type Q *T2

var t T2     // with t.T0 != nil
var p *T2    // with p != nil and (*p).T0 != nil
var q Q = p
```



结果：



```go
t.z          // t.z
t.y          // t.T1.y
t.x          // (*t.T0).x

p.z          // (*p).z
p.y          // (*p).T1.y
p.x          // (*(*p).T0).x

q.x          // (*(*q).T0).x        (*q).x is a valid field selector

p.M0()       // ((*p).T0).M0()      M0 expects *T0 receiver
p.M1()       // ((*p).T1).M1()      M1 expects T1 receiver
p.M2()       // p.M2()              M2 expects *T2 receiver
t.M2()       // (&t).M2()           M2 expects *T2 receiver, see section on Calls
```



但是下面这种方式是不合法的：



```go
q.M0()       // (*q).M0 is valid but not a field selector
```



#### 方法表达式



如果 M 在类型 T 的方法集中。那么 T.M 就是能够正常调用的函数。使用与 M 相同的参数只是在参数列表的最前面增加了接收者参数。



```go
MethodExpr    = ReceiverType "." MethodName .
ReceiverType  = TypeName | "(" "*" TypeName ")" | "(" ReceiverType ")" .
```



假设结构体 T 有两个方法。接收者类型为 T 的 Mv 方法和接收者类型为 *T 的 Mp 方法：



```go
type T struct {
	a int
}
func (tv  T) Mv(a int) int         { return 0 }  // value receiver
func (tp *T) Mp(f float32) float32 { return 1 }  // pointer receiver

var t T
```



表达式



```go
T.Mv
```



将会生成一个等价于 Mv 方法只是第一个参数显式声明接受者的函数。它的签名为：



```go
func(tv T, a int) int
```



这个函数能够通过接收者正常调用，以下5种方式是等价的：



```go
t.Mv(7)
T.Mv(t, 7)
(T).Mv(t, 7)
f1 := T.Mv; f1(t, 7)
f2 := (T).Mv; f2(t, 7)
```



与之类似：



```go
(*T).Mp
```



生成表示 Mp 的函数签名：



```go
func(tp *T, f float32) float32
```



对于一个把值作为接收者的方法，我们可以显式的从指针接收者获得函数：



```go
(*T).Mv
```



生成表示 Mv 的函数签名：



```go
func(tv *T, a int) int
```



这样的函数会通过接收者间接的创建一个值作为接收者传入底层方法中。方法内不能修改接收者的值，因为它的地址是在函数的调用栈里面。



最后一个例子。把值作为接收者函数当做指针作为接收者的方法是非法的，因为指针接收者的方法集中不包含值类型的方法集。



通过函数调用语法从方法中获取函数的值。接收者作为调用函数的第一个参数。给定  `f :=T.Mv`，f 作为`f(t,7)` 进行调用而不是 `t.f(7)`。想创建一个绑定接收者的函数可以使用函数字面值或者方法值。



在接口类型中定义函数获取函数值是合法的。最终的函数调用会使用接口类型作为接收者。



#### 方法值



如果表达式 x 拥有静态类型 T 并且 M 在类型 T 的方法集中。x.M 叫做方法值。方法值 `x.M` 是一个函数值，这个函数和 x.M 拥有相同的参数列表。表达式 x 在计算方法值时会被保存和计算，这个拷贝的副本会作为任何接下来调用的接收者。



类型 T 可能是接口类型也可能不是接口类型。



与方法表达式中讲过的一样，假设类型 T 有两个方法：接收者类型为 T 的 Mv 和接受者类型为 *T 的 Mp ：



```go
type T struct {
	a int
}
func (tv  T) Mv(a int) int         { return 0 }  // value receiver
func (tp *T) Mp(f float32) float32 { return 1 }  // pointer receiver

var t T
var pt *T
func makeT() T
```



表达式：



```go
t.Mv
```



生成一个类型的函数值：



```go
func(int) int
```



以下两种调用是等价的：



```go
t.Mv(7)
f := t.Mv; f(7)
```



相似的，表达式：



```go
pt.Mp
```



生成一个类型的函数值：



```go
func(float32) float32
```



与选择器相同，使用指针调用以值作为接收者的非接口方法会自动将指针解引用：`pt.Mv` 等价于 `(*pt).Mv`。



与方法调用相同，使用值调用以指针作为接收者的非接口方法会自动对值取址：`pt.Mv` 等价于 `(&pt).Mv`。



```go
f := t.Mv; f(7)   // like t.Mv(7)
f := pt.Mp; f(7)  // like pt.Mp(7)
f := pt.Mv; f(7)  // like (*pt).Mv(7)
f := t.Mp; f(7)   // like (&t).Mp(7)
f := makeT().Mp   // invalid: result of makeT() is not addressable
```



尽管上面使用的都是非接口类型的例子，不过对于接口类型同样适用。



```go
var i interface { M(int) } = myVal
f := i.M; f(7)  // like i.M(7)
```



#### index表达式



主要表达式格式：



```go
a[x]
```



可以表示数组元素、数组的指针、切片、字符串或 map 类型 a 索引 x 对应的值。x 称作索引或者 map 的键。遵循以下规则：



如果a不是 map 类型：



- 索引 x 必须是整型或无类型常量。
- 常量索引必须是非负数且可以使用 int 类型表示。

- 无类型的常量索引会作为 int 型的值。
- 索引 x 的范围在 `0<=x<len(a)` 内，否则就是越界。



对于数组类型 A：



- 常量索引必须在合法范围内。
- 如果 x 在运行时越界会引起运行时恐慌。

- `a[x]` 表示数组在索引 x 处的元素。`a[x]` 的类型就是 A 的元素类型。



对于数组的指针类型：



- 可以使用 `a[x]` 表示 `(*a)[x]`。



对于切片类型 S：



- 如果 x 在运行时越界会引起运行时恐慌。
- `a[x]` 表示切片在索引 x 处的元素。`a[x]` 的类型就是 S 的元素类型。



对于字符串类型：



- 如果字符串 a 为常量，那么常量索引必须在合法范围内。
- 如果 x 在运行时越界会引起运行时恐慌。

- a[x] 表示索引 x 处的非常量字节，它是byte类型。
- 不能对 a[x] 分配值。



对于 map 类型 M：



- 必须保证 x 的类型能够给 M 的键分配值。
- 如果map包含键为 x 的值，a[x] 就是 map 中键 x 对应的值，它的类型就是 M 的元素类型。

- 如果 map 值为 nil 或不包含这个实体，那么 a[x] 为 M 元素类型的零值。



否则 a[x] 就是非法的。



基于 `map[K]V` 类型  a 的索引表达式可以使用特殊格式的赋值和初始化语法。



```go
v, ok = a[x]
v, ok := a[x]
var v, ok = a[x]
```



它会额外生成一个无类型的布尔值。如果 ok 是 true，那么代表在map中有该键，如果没有 ok 为 false。



给一个值为 nil 的 map 类型变量赋值会导致运行时恐慌。



#### 切片表达式



切片表达式可以基于字符串、数组、数组指针、切片创建字符串子串或切片。它有两种变体，一种是简单的格式是指定开始和结束位置，完全格式的语法还可以指定容量。



\####### 简单切片表达式



对于数组、字符串、指针数组、切片 a，主要表达式：



```go
a[low:high]
```



可以构造字符串子串或切片。索引 `low` 和 `high` 决定结果切片中的元素。结果切片的索引从 0 开始，长度为 `high - low`。从数组切分出的切片 s 拥有类型 `[]int`，长度为 3 ，容积为 4。



```go
a := [5]int{1, 2, 3, 4, 5}
s := a[1:4]
```



```go
s[0] == 2
s[1] == 3
s[2] == 4
```



为了方便起见，索引值都可以缺省。当 low 缺省时默认从 0 开始。当缺 high 缺省时默认的取切片的长度。



```go
a[2:]  // same as a[2 : len(a)]
a[:3]  // same as a[0 : 3]
a[:]   // same as a[0 : len(a)]
```



如果 a 是一个数组指针，那么 `a[low:high]` 可以表示 `(*a)[low : high]`。



对于数组或者字符串，索引的范围是`0<=low<=high<=len(a)`。对于切片，最大的索引值可以为切片的容量，而不是切片的长度。常量索引必须为非负数，且能够转换成 int 类型。对于数组或者常量字符串。常量索引值必须在合法范围内。如果2个索引都是常量。low 必须小于 high。如果索引在运行时访问了非法内存，程序会发生运行时恐慌。



除了无类型字符串，对于切片和字符串的操作结果是非常量类型的值，它的类型与运算元相同。如果运算元为无类型字符串，那么结果类型会为 string。如果把数组作为运算元，它必须是可寻址的，并且获得的切片和原数组具有同一元素类型。



如果切片运算元为 nil，那么结果也是 nil。否则结果切片会和运算元共享相同的底层无类型数组。



###### 完全切片表达式



对于数组，数组指针或非字符串切片，主要表达式为：



```go
a[low : high : max]
```



它会构造一个同类型切片，并具有与简单切片表达式的 `a[low:high]` 相同的长度和元素。另外，它还可以把切片的容量设置为 `max - low`。这时只有第一个索引可以为缺省值，默认为零。从数组中获得切片以后：



```go
a := [5]int{1, 2, 3, 4, 5}
t := a[1:3:5]
```



切片 t 为 []int 类型，长度为 2，容量为 4，并且元素为：



```go
t[0] == 2
t[1] == 3
```



和简单切片表达式一样，如果 a 是数组指针 ，那么 `a[low:high:max]` 可以简写为 `(*a)[low:high:max]`。如果切分操作元是数组，那么这个数组必须是可以寻址的。



如果索引必须在 `0 <= low <= high <= max <= cap(a)` 范围内。常量索引不能是负数并且能够使用 `int` 类型表示；对于数组，索引必须在合法范围内。如果有多个索引都是常量的，那么所有索引都需要在合法范围内。如果索引是非法的，会引起运行时恐慌。



#### 类型断言



对于接口类型 x 和类型 T，主要表达式：



```go
x.(T)
```



可以断言 x 不是 nil  且 x 的值是 T 类型。标记 x.(T) 叫做类型断言。



更确切的说，如果 T 不是接口类型，那么 x.(T) 将会断言动态类型 x 的类型是不是 T。

这时，T 必须实现了 x 的（接口）类型。否则断言会是非法的因为 x 不能保存 T 类型的值。如果 T 是接口类型，那么可以断言动态类型 x 是否实现了 T 接口。



如果类型断言成功，表达式的值为 x 的值，但它的类型是T。如果断言失败，将会导致运行时恐慌。换句话说，即使 x 是运行时确定的，x.(T) 也必须是编程时就确认存在的。



```go
var x interface{} = 7          // x 拥有动态类型 int 值为 7
i := x.(int)                   // i 为 int 类型值为 7

type I interface { m() }

func f(y I) {
   s := y.(string)        // 非法: 字符串没有实现接口 I （缺少 m 方法）
   r := y.(io.Reader)     // r 拥有接口 io.Reader 所以 y 的动态类型必须同时实现 I 和 io.Reader
   …
}
```



类型断言可以使用特定格式的赋值和初始化语句。



```go
v, ok = x.(T)
v, ok := x.(T)
var v, ok = x.(T)
var v, ok T1 = x.(T)
```



这时将会额外生成一个无类型的布尔值。如果断言成功，ok返回 `true`，否则是 `false`。并且 v 会是 T 类型的零值。这时不会有恐慌发生。



#### 调用



给定函数类型为 F 的表达式 f：



```go
f(a1, a2, … an)
```



可以使用 a1,a2...an 来调用函数 f。除一种特殊情况之外，函数参数必须是对应 F 函数参数类型的单值表达式，且在函数调用前就已经完成求值。表达式的结果类型是 f 的结果类型。函数调用和方法调用相似，只是方法额外需要一个接收者类型。



```go
math.Atan2(x, y)  // function call
var pt *Point
pt.Scale(3.5)     // method call with receiver pt
```



在函数调用中，函数的值和参数是按照顺序求值的。在计算之后作为参数会传进函数，函数开始执行。当函数执行完成后返回的参数将会返回给函数的调用者。



调用值为 nil 的函数会导致运行时恐慌。



作为特例，如果函数或者方法的返回值等于参数列表的个数，那么会嵌套调用。这将把返回值直接赋值给下一次调用函数的参数。



```go
func Split(s string, pos int) (string, string) {
	return s[0:pos], s[pos:]
}

func Join(s, t string) string {
	return s + t
}

if Join(Split(value, len(value)/2)) != value {
	log.Panic("test fails")
}
```



如果 x 的方法集中包含 m 那么 `x.m()` 是合法的。并且参数列表和 m 的参数列表相同。如果x是可寻址的，那么那么x指针的方法集`(&x).m()`可以简写成`x.m()`。



```go
var p Point
p.Scale(3.5)
```



没有方法类型，也没有方法字面值。



#### 通过 `...` 来传递参数



如果 f 的最后一个参数 p 的类型是 `...T`。那么在函数内部 p 参数的类型就是 `[]T`。如果 f 调用时没有传入 p 对应的参数，那么p为 nil。否则这些参数会以切片方式传入，在新的底层切片中。切片中的类型都是能赋值给类型 T 的值。这个切片的长度和容量在不同的调用中有所不同。



给定函数调用：



```go
func Greeting(prefix string, who ...string)
Greeting("nobody")
Greeting("hello:", "Joe", "Anna", "Eileen")
```



在 `Greeting` 中，第一次调用时，`who`是 nil 类型。而在第二次调用时是`[]string{"Joe", "Anna", "Eileen"}`。



如果在调用的时候的最后一个参数是[]T，那么我们可以使用`...`来将切片中的值依次赋值给参数列表。



给定切片s并且调用:



```go
s := []string{"James", "Jasmine"}
Greeting("goodbye:", s...)
```



z 在 `Greeting`。中 `who` 会和切片 s 共享相同的底层数组。



#### 操作符



操作符用来连接运算元。



```go
Expression = UnaryExpr | Expression binary_op Expression .
UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .

binary_op  = "||" | "&&" | rel_op | add_op | mul_op .
rel_op     = "==" | "!=" | "<" | "<=" | ">" | ">=" .
add_op     = "+" | "-" | "|" | "^" .
mul_op     = "*" | "/" | "%" | "<<" | ">>" | "&" | "&^" .

unary_op   = "+" | "-" | "!" | "^" | "*" | "&" | "<-" .
```



比较运算符在此处讨论。对于其他二元操作符，两个操作元的类型必须是相同的，除了位移和无类型常量。针对常量的操作，请看常量表达式章节。



除了位移操作，如果其中一个操作符是无类型常量，而另个不是，那么无类型的常量会转换成另一个运算元的类型。



在右移表达式中的运算元必须是无符号的整数或者可以转换成 uint 的无类型的常量。如果左移一个无类型常量那么结果依然是无类型的。他首先会转换成指定类型。



```go
var s uint = 33
var i = 1<<s           // 1 has type int
var j int32 = 1<<s     // 1 has type int32; j == 0
var k = uint64(1<<s)   // 1 has type uint64; k == 1<<33
var m int = 1.0<<s     // 1.0 has type int; m == 0 if ints are 32bits in size
var n = 1.0<<s == j    // 1.0 has type int32; n == true
var o = 1<<s == 2<<s   // 1 and 2 have type int; o == true if ints are 32bits in size
var p = 1<<s == 1<<33  // illegal if ints are 32bits in size: 1 has type int, but 1<<33 overflows int
var u = 1.0<<s         // illegal: 1.0 has type float64, cannot shift
var u1 = 1.0<<s != 0   // illegal: 1.0 has type float64, cannot shift
var u2 = 1<<s != 1.0   // illegal: 1 has type float64, cannot shift
var v float32 = 1<<s   // illegal: 1 has type float32, cannot shift
var w int64 = 1.0<<33  // 1.0<<33 is a constant shift expression
```



###### 运算符优先级



一元运算符拥有最高优先级。++ 和 -- 是语句而不是表达式，他们在运算符的优先级之外。所以 (*p)++ 和 *p++ 是一样的。



二元运算符有 5 个优先级。乘法运算符在最高级，紧接着是加法运算符。比较运算符，&& 运算符，最后是 ||。



```go
Precedence    Operator
    5             *  /  %  <<  >>  &  &^
    4             +  -  |  ^
    3             ==  !=  <  <=  >  >=
    2             &&
    1             ||
```



相同优先级的二元运算符的执行顺序是由左到右。例如 `x/y*z`和`(x/y)*z` 是一样的。



```go
+x
23 + 3*x[i]
x <= f()
^a >> b
f() || g()
x == y+1 && <-chanPtr > 0
```



#### 算数运算符



算数运算符应用在 2 个数字值之间，别切生成一个相同类型的值作为第一个运算元。四种算数运算符(+,-,*,/)应用在数字，浮点，复合类型之中。+ 也可以用于字符串。位运算和位移运算只适用于整数。



```go
+    sum                    integers, floats, complex values, strings
-    difference             integers, floats, complex values
*    product                integers, floats, complex values
/    quotient               integers, floats, complex values
%    remainder              integers

&    bitwise AND            integers
|    bitwise OR             integers
^    bitwise XOR            integers
&^   bit clear (AND NOT)    integers

<<   left shift             integer << unsigned integer
>>   right shift            integer >> unsigned integer
```



###### 数字运算符



对于两个整数 x 和 y。整数商 `q=x/y` 和余数 `r=x%y` 遵循以下规律。



```go
x = q*y + r  and  |r| < |y|
```



`x/y` 截断为 0。



```go
x     y     x / y     x % y
 5     3       1         2
-5     3      -1        -2
 5    -3      -1         2
-5    -3       1        -2
```



作为这个规则的例外情况，如果 x 非常大，那么 `q=x/-1` 等于 x。



```go
x, q
int8                     -128
int16                  -32768
int32             -2147483648
int64    -9223372036854775808
```



如果除数是一个常量。那么它不能是 0，如果除数在运行时为 0，会导致运行时恐慌。如果除数是负数并且除数是：



```go
x     x / 4     x % 4     x >> 2     x & 3
 11      2         3         2          3
-11     -2        -3        -3          1
```



位移运算符移动左侧运算元右侧元算元指定的位数。如果左侧是有符号整型，那它就实现了位移运算，如果是无符号整数使用逻辑位移。位移运算没有上限，位移操作让左边运算元位移 n 个 1。`x<<1` 和 `x*2` 是相等的。并且 `x>>1` 和 `x/2` 是相同的。



对于整数运算元，一元运算符+-^定义如下：



```go
+x                          is 0 + x
-x    negation              is 0 - x
^x    bitwise complement    is m ^ x  with m = "all bits set to 1" for unsigned x
                                      and  m = -1 for signed x
```



###### 整型溢出



对于无符号的值，运算符+-*和<<都是2禁止运算。这里的n是无符号类型的宽度，无符号整型将会丢弃溢出的位，并且程序将会返回`wrap around`。



对于有符号的整数，操作符+=*<<都会溢出并且值存在，并且代表相应的有符号的值。在运算时不会抛出异常。标一起不会报错。所以不是所有情况下x<x+1都成立。



###### 浮点数运算符



对于浮点数和其他复杂数字，+x和x是一样的，-x是x的对立面。除了IEEE-754还没有指定浮点数除0或者复数的结果。是否抛出异常将会依赖其具体实现。



一种实现可以合并多个浮点操作进一个操作，有可能是夸语句的，并且他的结果可能和依次单独执行的结果不一样。1个浮点数类型将会转变成目标的精度，防止四舍五入的融合。



```go
// FMA allowed for computing r, because x*y is not explicitly rounded:
r  = x*y + z
r  = z;   r += x*y
t  = x*y; r = t + z
*p = x*y; r = *p + z
r  = x*y + float64(z)

// FMA disallowed for computing r, because it would omit rounding of x*y:
r  = float64(x*y) + z
r  = z; r += float64(x*y)
t  = float64(x*y); r = t + z
```



###### 字符串



字符串可以使用+和+=操作符。



```go
s := "hi" + string(c)
s += " and good bye"
```



字符串想家将会创建一个新的字符串。



#### 比较运算符



比较运算符比较连个运算元，并且生成一个无类型的布尔值。



```go
==    equal
!=    not equal
<     less
<=    less or equal
>     greater
>=    greater or equal
```



在任何比较运算元中2种类型必须是可以分配的。



使用等于运算符`==`和`!=`的运算元必须是可比较的。使用顺序运算符`<`,`<=`,`>`和`>=`必须是可比较的。这些限制导致比较运算符被定义成以下的方式。



- 布尔值是可比较的，两个布尔值当他们同为`true`或者false的使用是相等的
- 整数值是可比较和排序的

- 浮点数是可比较和排序的，具体定义在IEEE-754标准中。
- 复数是可比较的，2个复数当实部和虚部都相等时就是相等的。

- 字符串是可以比较和排序的。是按照字节顺序排序。
- 指针式可以排序的，连个指针当指向相同变量时是相同的，或者他们2个都是nil。指向一个为非配的变量的结果是未定义的。

- channel是可比较的。当两个管道是用同一个make出来的，或者都是nil时时相等的。
- 接口值时可以比较的，2个接口值时相等的如果2个标识符的动态类型是一样的或者他们都是nil。

- 一个非接口类型的值x和一个接口类型的值T在非接口类型是可以比较的并且非接口类型实现了接口是是可以比较的。当他们的动态类型类型相同时时相等的。
- 当结构体内的所有字段都是可以比较的时候，他是可以比较的。连个结构体的值当非空字段都相等时他们是相等的。

- 数组类型的值时可比较的，如果数组的原属时可以比较的，那么当数组的所有值是相等的时候他们就是相等的。



使用两个动态类型的标识符来比较接口的值。如果这个类型的值时不可比较的，那么将会引起一个panic。这个行为不仅仅时接口，数组结构体接口字段都有这个问题。



切片，map，和函数值都是不可比较的，然而，作为一个特殊的例子，切片，map和函数的值的nil时可以比较的，指针，channel和接口的值nil也是可以比较的。



```go
const c = 3 < 4            // c is the untyped boolean constant true

type MyBool bool
var x, y int
var (
	// The result of a comparison is an untyped boolean.
	// The usual assignment rules apply.
	b3        = x == y // b3 has type bool
	b4 bool   = x == y // b4 has type bool
	b5 MyBool = x == y // b5 has type MyBool
)
```



#### 逻辑操作符



逻辑运算符使用布尔值值，并且生成一个相同类型的结果值作为操作元。右面的操作元计算是有条件的。



```go
&&    conditional AND    p && q  is  "if p then q else false"
||    conditional OR     p || q  is  "if p then true else q"
!     NOT                !p      is  "not p"
```



#### 地址操作符



以类型 T 的 x 作为运算元，取址操作 `&x` 会生成一个类型为 `*T` 并指向 x 的指针。运算元必须是能够取址的，它可以是一个变量，指针，切片的取值操作；或是一个可取址结构体的字段选择器；或是对于可取址数组的索引取值操作。作为寻址能力的例外，x 可能是一个复合字面值。如果对 x 进行取址操作将会 panic，`&x` 也会 panic。



对于一个 `*T` 类型的运算元 x，指针解引用 `*x` 表示 x 指向的 T 类型。如果 x 为 nil，那么解引用 `*x` 会 panic。



```go
&x
&a[f(2)]
&Point{2, 3}
*p
*pf(x)

var x *int = nil
*x   // causes a run-time panic
&*x  // causes a run-time panic
```



#### 接收操作符



对于管道类型的运算元 `ch`，接收操作 `<-ch` 返回值是管道 `ch` 接收到的值。带方向的管道需要有接受权限，接收操作的类型也是通道的元素类型。表达式会一直阻塞直到接收到返回值。从 nil 通道接收值会一直阻塞。从一个已经关闭的通道接收数据会在其他数据都被接收以后生成该通道元素类型的零值。



```go
v1 := <-ch
v2 = <-ch
f(<-ch)
<-strobe  // wait until clock pulse and discard received value
```



接收数据的表达式可以使用赋值表达式。



```go
x, ok = <-ch
x, ok := <-ch
var x, ok = <-ch
var x, ok T = <-ch
```



它还可以生成一个额外的无类型布尔值来表示通道是否关闭。如果 ok 为 `true` 说明获取到的是发送到通道内的数据，而 `false` 它就返回一个零值因为通道内没有元素且已经关闭。



#### 类型转换



类型转换表达式 `T(x)` 其中 T 代表类型，x 代表可以转换成 T 类型的表达式。



```go
Conversion = Type "(" Expression [ "," ] ")" .
```



如果类型是以 `*` 或 `<-` 开头，或以关键字 `func` 开头并且没有返回值列表，那么它必须用括号括起来避免歧义：



```go
*Point(p)        // same as *(Point(p))
(*Point)(p)      // p is converted to *Point
<-chan int(c)    // same as <-(chan int(c))
(<-chan int)(c)  // c is converted to <-chan int
func()(x)        // function signature func() x
(func())(x)      // x is converted to func()
(func() int)(x)  // x is converted to func() int
func() int(x)    // x is converted to func() int (unambiguous)
```



常量 x 可以在可以用类型 T 表示时自动转换。作为一个特例，整数常量 x 可以转换成字符串类型就和非常量 x 一样。



对常量的转换会生成一个指定类型的常量。



```go
uint(iota)               // iota value of type uint
float32(2.718281828)     // 2.718281828 of type float32
complex128(1)            // 1.0 + 0.0i of type complex128
float32(0.49999999)      // 0.5 of type float32
float64(-1e-1000)        // 0.0 of type float64
string(''x'')              // "x" of type string
string(0x266c)           // "♬" of type string
MyString("foo" + "bar")  // "foobar" of type MyString
string([]byte{''a''})      // not a constant: []byte{''a''} is not a constant
(*int)(nil)              // not a constant: nil is not a constant, *int is not a boolean, numeric, or string type
int(1.2)                 // illegal: 1.2 cannot be represented as an int
string(65.0)             // illegal: 65.0 is not an integer constant
```



非常量 x 可以在以下情况下转换成类型 T：



- x 可以给类型 T 赋值
- 忽略的结构体标签，x 的类型和 T 具有相同的底层类型

- 忽略的结构体标签，x 的类型和 T 都是指针类型，并且指针所指的类型具有相同的底层类型
- x 的类型和 T 都是整数或者浮点数类型

- x 的类型和 T 都是复数类型
- x 是一个字符串而 T 时字节切片或者 rune 切片



在比较两个结构体类型的时候会忽略结构体标签：



```go
type Person struct {
	Name    string
	Address *struct {
		Street string
		City   string
	}
}

var data *struct {
	Name    string `json:"name"`
	Address *struct {
		Street string `json:"street"`
		City   string `json:"city"`
	} `json:"address"`
}

var person = (*Person)(data)  // ignoring tags, the underlying types are identical
```



这个规则也适用于数字类型与字符串类型间的相互转换。这个转换可能会改变 x 的值并且会增加运行时消耗。包 unsafe 实现了这个功能底层的限制。



###### 数字之间的转换



对于非常量的数字转换，需要遵守以下规则：



- 在转换整型数字时，如果是一个有符号整型，它是继承有符号的无限精度；否则就不用继承符号。转换时会截断数字以适应类型的大小。例如：如果 `v:=uint16(0x10F0)`，然后 ``uint32(int8(v)) == 0xFFFFFFF0 。类型转换总是生成有效值，并且永远不会溢出。
- 如果要将浮点数转换成整型，会丢弃小数部分（截断为零）。

- 如果要将整型或浮点型转换成浮点数类型，或或者一个复数转换成其他复数类型，结果会四舍五入成指定精度。例如： 可以使用超出IEEE-754 32位数的附加精度来存储float32类型的变量x的值，但float32（x）表示将x的值舍入为32位精度的结果。x + 0.1 会使用超过 32 位的精度，而 `float32(x+0.1)` 不会。



在所有浮点数和复数的非常量转换中，如果结构类型不能成功表示数据，那么结果将会依赖于具体平台实现。



###### 字符串的类型转换



1. 转换一个有符号或者无符号的整型值会转换成对应的 UTF-8 表示整型值。不在范围内的 Unicode 代码点会转换成 "\uFFFD"。

```go
string(''a'')       // "a"
string(-1)        // "\ufffd" == "\xef\xbf\xbd"
string(0xf8)      // "\u00f8" == "ø" == "\xc3\xb8"
type MyString string
MyString(0x65e5)  // "\u65e5" == "日" == "\xe6\x97\xa5"
```

1. 将字节切片转换成字符串类型会生成一个由切片元素组成的字符串



```go
string([]byte{''h'', ''e'', ''l'', ''l'', ''\xc3'', ''\xb8''})   // "hellø"
string([]byte{})                                     // ""
string([]byte(nil))                                  // ""

type MyBytes []byte
string(MyBytes{''h'', ''e'', ''l'', ''l'', ''\xc3'', ''\xb8''})  // "hellø"
```



1. 将 rune 切片转换成字符串类型会生成一个由切片元素组成的字符串



```go
string([]rune{0x767d, 0x9d6c, 0x7fd4})   // "\u767d\u9d6c\u7fd4" == "白鵬翔"
string([]rune{})                         // ""
string([]rune(nil))                      // ""

type MyRunes []rune
string(MyRunes{0x767d, 0x9d6c, 0x7fd4})  // "\u767d\u9d6c\u7fd4" == "白鵬翔"
```



1. 将字符串转换成字节切片会生成由字符串中每个字节组成的切片

```go
[]byte("hellø")   // []byte{''h'', ''e'', ''l'', ''l'', ''\xc3'', ''\xb8''}
[]byte("")        // []byte{}

MyBytes("hellø")  // []byte{''h'', ''e'', ''l'', ''l'', ''\xc3'', ''\xb8''}
```

1. 将字符串转换成 rune 切片会生成由字符串中每个 Unicode 代码点组成的切片



```go
[]rune(MyString("白鵬翔"))  // []rune{0x767d, 0x9d6c, 0x7fd4}
[]rune("")                 // []rune{}

MyRunes("白鵬翔")           // []rune{0x767d, 0x9d6c, 0x7fd4}
```



###### 常量表达式



常量表达式只包含常量运算元并且在编译程序时就已经计算完成。



无类型布尔值，数值和字符串常量都可以当作运算元。除了位置操作符，如果二元运算符石不同类型的常量，操作元，和非布尔值，和即将在接下来出现的：整型，rune，浮点数和复数类型。例如：一个无类型整型常量减去无类型复数常量，结果为复数常量。



一个常量的比较运算会生成无类型的布尔常量。如果左移运算是一个无类型常量，结果会是一个整型常量。它会和原来常量为相同类型。其他与无类型常量的运算都会生成相同类型的结果（布尔值，整型，浮点数，复数，字符串常量）。



```go
const a = 2 + 3.0          // a == 5.0   (untyped floating-point constant)
const b = 15 / 4           // b == 3     (untyped integer constant)
const c = 15 / 4.0         // c == 3.75  (untyped floating-point constant)
const Θ float64 = 3/2      // Θ == 1.0   (type float64, 3/2 is integer division)
const Π float64 = 3/2.     // Π == 1.5   (type float64, 3/2. is float division)
const d = 1 << 3.0         // d == 8     (untyped integer constant)
const e = 1.0 << 3         // e == 8     (untyped integer constant)
const f = int32(1) << 33   // illegal    (constant 8589934592 overflows int32)
const g = float64(2) >> 1  // illegal    (float64(2) is a typed floating-point constant)
const h = "foo" > "bar"    // h == true  (untyped boolean constant)
const j = true             // j == true  (untyped boolean constant)
const k = ''w'' + 1          // k == ''x''   (untyped rune constant)
const l = "hi"             // l == "hi"  (untyped string constant)
const m = string(k)        // m == "x"   (type string)
const Σ = 1 - 0.707i       //            (untyped complex constant)
const Δ = Σ + 2.0e-4       //            (untyped complex constant)
const Φ = iota*1i - 1/1i   //            (untyped complex constant)
```



对一个无类型整数，rune，或浮点数应用内置的 `complex` 函数会生成无类型的复数常量。



```go
const ic = complex(0, c)   // ic == 3.75i  (untyped complex constant)
const iΘ = complex(0, Θ)   // iΘ == 1i     (type complex128)
```



常量表达式总是一个明确的值；中间值和常量自己可以比语言所支持的精度更高，下面的声明是合法的：



```go
const Huge = 1 << 100         // Huge == 1267650600228229401496703205376  (untyped integer constant)
const Four int8 = Huge >> 98  // Four == 4                                (type int8)
```



常量的除法的除数不能为 0:



```go
3.14 / 0.0   // illegal: division by zero
```



定义了类型的常量的精度必须根据常量类型定义。所以下面的常量表达式是非法的：



```go
uint(-1)     // -1 cannot be represented as a uint
int(3.14)    // 3.14 cannot be represented as an int
int64(Huge)  // 1267650600228229401496703205376 cannot be represented as an int64
Four * 300   // operand 300 cannot be represented as an int8 (type of Four)
Four * 100   // product 400 cannot be represented as an int8 (type of Four)
```



补码使用的一元操作符 ^ 对于非常量的匹配模式：补码对于无符号常量为 1，对于有符号和无类型常量为 -1。



```go
^1         // untyped integer constant, equal to -2
uint8(^1)  // illegal: same as uint8(-2), -2 cannot be represented as a uint8
^uint8(1)  // typed uint8 constant, same as 0xFF ^ uint8(1) = uint8(0xFE)
int8(^1)   // same as int8(-2)
^int8(1)   // same as -1 ^ int8(1) = -2
```



实现限制：编译器在处理无类型浮点数和复数时会取近似值；具体请看常量章节。这个取近似值的操作在浮点数在整数上下文时会产生无效值，即使在计算过后是一个整型。



#### 运算优先级



在包级别，初始化的依赖性由变量声明的初始化表达式顺序决定。否则，当计算表达式内的操作数时，赋值，返回语句，所有函数调用，方法调用，和通信操作都会由左向右计算。



例如，在函数作用域中的赋值：



```go
y[f()], ok = g(h(), i()+x[j()], <-c), k()
```



函数调用和通信的发生顺序为：`f()`，`h()`，`i()`，`j()`，`<-c`，`g()` 和 `k()`。但是对 y 和 x 的取值操作没有指定。



```go
a := 1
f := func() int { a++; return a }
x := []int{a, f()}            // x may be [1, 2] or [2, 2]: evaluation order between a and f() is not specified
m := map[int]int{a: 1, a: 2}  // m may be {2: 1} or {2: 2}: evaluation order between the two map assignments is not specified
n := map[int]int{a: f()}      // n may be {2: 3} or {3: 3}: evaluation order between the key and the value is not specified
```



在包级别，依赖的初始化顺序会覆盖这个从左向右的规则：



```go
var a, b, c = f() + v(), g(), sqr(u()) + v()

func f() int        { return c }
func g() int        { return a }
func sqr(x int) int { return x*x }

// functions u and v are independent of all other variables and functions
```



## 语句



语句控制程序的执行。



```go
Statement =
	Declaration | LabeledStmt | SimpleStmt |
	GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt |
	FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt |
	DeferStmt .

SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .
```



#### 终止语句



终止语句会阻止相同代码块中下面所有语句的执行。以下语句属于终止语句：



1. `return` 和 `goto` 语句
2. 对内置 `panic` 函数的调用

1. 代码块结束
2. `if` 语句中：

1. else 分支
2. 所有分支末尾

1. `for`语句中：

1. `break` 语句和循环结束

1. `switch` 语句：

1. 在 `switch` 语句中没有 `break` 语句，
2. 有一个默认的 case

1. 语句列表中的每个 case 语句和有可能存在的 `fallthrough` 语句

1. `select` 语句中：

1. 没有 break 语句
2. 每个 case 中的语句列表，如果包含默认 case



所有其他语句都不是中断语句。



如果语句序列不为空并且最后一个非空语句是终止语句，那么语句序列就以终结语句结尾。



#### 空语句



空语句不做任何事情。



```go
EmptyStmt = .
```



#### 标签语句



标签语句可以作为 `goto`，`break` 和 `continue` 语句的目标。



```go
LabeledStmt = Label ":" Statement .
Label       = identifier .
```



```go
Error: log.Panic("error encountered")
```



#### 表达式语句



除了特定的内置函数，一般的函数、方法和接收操作都可以出现在表达式语句的上下文中。这些语句可以使用括号括起来。



```go
ExpressionStmt = Expression .
```



下面的内置函数不允许出现在语句的上下文中：



```go
append cap complex imag len make new real
unsafe.Alignof unsafe.Offsetof unsafe.Sizeof
```



```go
h(x+y)
f.Close()
<-ch
(<-ch)
len("foo")  // illegal if len is the built-in function
```



#### 发送语句



发送语句可以向通道发送一个值。通道表达式必须是通道类型，通道方向必须允许发送操作，并且值类型是可以分配给通道元素通道类型。



```go
SendStmt = Channel "<-" Expression .
Channel  = Expression .
```



通道类型和值表达式会在发送之前求值。发送操作会一致阻塞，直到可以进行发送操作。如果接收者已经准备好向没有缓存的通道发送值可以立即执行。如果通道内还有缓存空间，向通道内发送值也会立即执行。向关闭的通道发送数据会导致运行时恐慌。像值为 nil 的通道发送数据会一直阻塞。



```go
ch <- 3  // send value 3 to channel ch
```



#### 递增/递减语句



“++” 和 “--” 语句可以递增或者递减运算元一个无类型常量 1。作为一个赋值语句，运算元必须是可寻址的或者 map 的索引表达式。



```go
IncDecStmt = Expression ( "++" | "--" ) .
```



下面的赋值语句在语义上是等价的：



```go
IncDec statement    Assignment
x++                 x += 1
x--                 x -= 1
```



#### 赋值



```go
Assignment = ExpressionList assign_op ExpressionList .

assign_op = [ add_op | mul_op ] "=" .
```



所有左侧运算元都必须是可寻址的、map 索引表达式或空标识符其中之一。运算元可以用括号括起来。



```go
x = 1
*p = f()
a[i] = 23
(k) = <-ch  // same as: k = <-ch
```



对于赋值操作 `x op= y` 其中 `op` 为二元运算符，它和 `x=x op (y)` 是等价的，不过它只计算一次 x。`op=` 是单独的一个词汇单元，在赋值操作中左侧表达式和右侧表达式必须都是单值表达式，并且左侧表达式不能是空白标识符。



```go
a[i] <<= 2
i &^= 1<<n
```



元祖赋值语句会把运算返回的多个值分别分配给变量列表。它有两种格式，第一种：它是返回多值的表达式，例如函数调用、通道和 map 运算、类型断言。左侧运算元的数量必须等于返回值的数量。如果函数返回两个值：



```go
x, y = f()
```



它会将第一个返回值分配给 x ，把第二个返回值分配给 y。第二种格式中，左侧运算元的数量必须等于右侧运算元的数量。每个表达式都只能返回单一值，右侧第 n 个值会赋值给左侧第 n 个变量。



```go
one, two, three = ''一'', ''二'', ''三''
```



空标识符可以在分配时忽略一个右面位置的表达式：



```go
_ = x       // evaluate x but ignore it
x, _ = f()  // evaluate f() but ignore second result value
```



赋值分为两个阶段。首先会计算左侧运算元的索引表达式和指针的解引用工作并以一定顺序计算右侧表达式的值。



然后依次对左侧运算元赋值。



```go
a, b = b, a  // exchange a and b

x := []int{1, 2, 3}
i := 0
i, x[i] = 1, 2  // set i = 1, x[0] = 2

i = 0
x[i], i = 2, 1  // set x[0] = 2, i = 1

x[0], x[0] = 1, 2  // set x[0] = 1, then x[0] = 2 (so x[0] == 2 at end)

x[1], x[3] = 4, 5  // set x[1] = 4, then panic setting x[3] = 5.

type Point struct { x, y int }
var p *Point
x[2], p.x = 6, 7  // set x[2] = 6, then panic setting p.x = 7

i = 2
x = []int{3, 5, 7}
for i, x[i] = range x {  // set i, x[2] = 0, x[0]
	break
}
// after this loop, i == 0 and x == []int{3, 5, 3}
```



在赋值语句中每个值都必须能分配给左侧指定类型的值。除了以下特例：



1. 任何类型都能分配给空标识符。
2. 如果把无类型常量分配给接口类型或者空标识符，它会转换成默认类型。

1. 如果无类型的布尔值分配给了接口类型或者空标识符，它会先转换成 `bool` 类型。



#### if 语句



`if` 语句根据布尔值表达式的值来决定执行条件分支的代码。如果表达式为真，就执行 `if` 分支内的代码，否则执行 `else` 分支的代码。



```go
IfStmt = "if" [ SimpleStmt ";" ] Expression Block [ "else" ( IfStmt | Block ) ] .
```



```go
if x > max {
	x = max
}
```



表达式可能先于普通语句，它会在表达式求值之前发生。



```go
if x := f(); x < y {
	return x
} else if x > z {
	return z
} else {
	return y
}
```



#### switch 语句



#### for 语句



for 语句可以用来重复执行一段代码。它有三种格式：迭代器可以是单一条件、for 分句或者 range 语句。



```go
ForStmt = "for" [ Condition | ForClause | RangeClause ] Block .
Condition = Expression .
```



###### 单一条件的 for 语句



这种情况下 for 会在条件为 true 时一直重复。条件会在每次迭代时都重新计算。如果没有指定条件，默认一直为 true。



```go
for a < b {
	a *= 2
}
```



###### 带分句的 for 语句



带分句的 for 语句也是由条件控制，只是它有一个初始化和寄送的过程。例如赋值、递增或者递减语句。初始化语句可以是短变量声明，但是寄送语句不能。在初始化语句中声明的变量可以在迭代过程中使用。



```go
ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
InitStmt = SimpleStmt .
PostStmt = SimpleStmt .
```



```go
for i := 0; i < 10; i++ {
	f(i)
}
```



如果初始化语句非空，它会在进入迭代前执行一次；post 语句在每次循环后都会执行一次。在只有条件的情况下可以省略分号。如果缺省条件语句，默认为 true。



```go
for cond { S() }    is the same as    for ; cond ; { S() }
for      { S() }    is the same as    for true     { S() }
```



###### 带 range 分句的 for 语句



带 range 分句的 for 语句可以访问数组、切片、字符串、map 的所有元素，还可以从通道中接收值。迭代获得元素分配给了相应的迭代变量并执行代码块。



```go
RangeClause = [ ExpressionList "=" | IdentifierList ":=" ] "range" Expression .
```



右侧的 range 分句表达式叫做 range 表达式，它可能是数组、数组的指针、切片、字符串、map 或通道接收者类型。在分配时，左侧运算元必须是可寻址的或者 map 的索引表达式；它们作为迭代变量。如果 range 表达式是一个通道类型，至少需要有一个变量，它也可以有两个变量。如果迭代变量是空标识符，就代表在分句中不存在该标识符。



```go
Range expression                          1st value          2nd value

array or slice  a  [n]E, *[n]E, or []E    index    i  int    a[i]       E
string          s  string type            index    i  int    see below  rune
map             m  map[K]V                key      k  K      m[k]       V
channel         c  chan E, <-chan E       element  e  E
```



```go
var testdata *struct {
	a *[7]int
}
for i, _ := range testdata.a {
	// testdata.a is never evaluated; len(testdata.a) is constant
	// i ranges from 0 to 6
	f(i)
}

var a [10]string
for i, s := range a {
	// type of i is int
	// type of s is string
	// s == a[i]
	g(i, s)
}

var key string
var val interface {}  // element type of m is assignable to val
m := map[string]int{"mon":0, "tue":1, "wed":2, "thu":3, "fri":4, "sat":5, "sun":6}
for key, val = range m {
	h(key, val)
}
// key == last map key encountered in iteration
// val == map[key]

var ch chan Work = producer()
for w := range ch {
	doWork(w)
}

// empty a channel
for range ch {}
```



#### Go 语句



`go` 语句会开始在相同地址空间中的单独 goroutine 中调用函数。



```go
GoStmt = "go" Expression .
```



表达式必须是函数或者方法调用；它不能使用括号括起来，调用内置函数有表达式语句的限制。



函数的值和参数会按顺序在调用的 goroutine 中求值。不像普通的函数调用，程序不会等待函数调用完成，而是直接开启一个新的 goroutine 执行函数。函数退出时，goroutine 也会退出。函数的任何返回值都会被丢弃。



```go
go Server()
go func(ch chan<- bool) { for { sleep(10); ch <- true }} (c)
```



#### select 语句



select 语句会在接收/发送操作集中选择一个执行。它看起来和 switch 很像，只不过是专门针对通信操作的。



```go
SelectStmt = "select" "{" { CommClause } "}" .
CommClause = CommCase ":" StatementList .
CommCase   = "case" ( SendStmt | RecvStmt ) | "default" .
RecvStmt   = [ ExpressionList "=" | IdentifierList ":=" ] RecvExpr .
RecvExpr   = Expression .
```



接收表达式可以将接收表达式的值分配给一个或两个变量。接收表达式必须是一个接收运算元（可以使用括号括起来）。它最多允许有一个 default 语句。



select 语句执行以下几个步骤：



1. 对于 select 语句的所有分句，接收操作的通道运算元、通道、发送语句的右侧表达式都会执行一次操作。
2. 如果一个或多个通信同时发生，它会通过一致性随机选择一个执行。如果没有 default 语句，select 语句会一直阻塞。

1. 除了 default 分句，其他分句只有在开始进行通信的时候才会执行。
2. 如果 select 分句是一个接收语句，它可以给变量分配值。

1. 执行 select 分句内的内容。



如果向 nil 通道发送信息在没有 default 分句的情况下会一直阻塞。



```go
var a []int
var c, c1, c2, c3, c4 chan int
var i1, i2 int
select {
case i1 = <-c1:
	print("received ", i1, " from c1\n")
case c2 <- i2:
	print("sent ", i2, " to c2\n")
case i3, ok := (<-c3):  // same as: i3, ok := <-c3
	if ok {
		print("received ", i3, " from c3\n")
	} else {
		print("c3 is closed\n")
	}
case a[f()] = <-c4:
	// same as:
	// case t := <-c4
	//	a[f()] = t
default:
	print("no communication\n")
}

for {  // send random sequence of bits to c
	select {
	case c <- 0:  // note: no statement, no fallthrough, no folding of cases
	case c <- 1:
	}
}

select {}  // block forever
```



#### return 语句



`return` 语句会终止函数 F 的执行并可选的返回一个或多个返回值。所有的滞后函数都会在 F 返回到它的调用者之前执行。



```go
ReturnStmt = "return" [ ExpressionList ] .
```



如果函数没有返回值类型，return 不能返回任何值。



```go
func noResult() {
	return
}
```



有三种方式能够返回指定类型的值：



1. 返回值可以直接在 return 语句中列出。每个表达式都必须返回一个值并且能够分配给相应的返回值类型。

```go
func simpleF() int {
	return 2
}

func complexF1() (re float64, im float64) {
	return -7.0, -4.0
}
```

1. return 语句的表达式列表可以是一个返回多值的函数调用。这时会使用临时变量来获取函数调用的返回值并直接将其作为 return 语句的表达式列表。

```go
func complexF2() (re float64, im float64) {
	return complexF1()
}
```

1. 如果制定了返回值的标识符那么 return 的表达式列表可以为空。返回值参数会作为普通的本地变量按需分配。return 语句会直接返回它们。

```go
func complexF3() (re float64, im float64) {
	re = 7.0
	im = 4.0
	return
}

func (devnull) Write(p []byte) (n int, _ error) {
	n = len(p)
	return
}
```



不管如何声明，所有的返回值都会在进入函数前提前初始化成类型的零值。return 语句会在所有 defer 函数之前指定返回值。



实现限制：编译器不允许在覆盖了命名返回值的作用域中直接返回。



```go
func f(n int) (res int, err error) {
	if _, err := f(n-1); err != nil {
		return  // invalid return statement: err is shadowed
	}
	return
}
```



#### break 语句



`break` 语句会在 `for`、`switch` 或 `select` 语句内部退出到相同函数的某个位置。



```go
BreakStmt = "break" [ Label ] .
```



如果想指定标签，它必须出现在它所中止的 `for`、`switch` 或 `select` 语句旁。



```go
OuterLoop:
	for i = 0; i < n; i++ {
		for j = 0; j < m; j++ {
			switch a[i][j] {
			case nil:
				state = Error
				break OuterLoop
			case item:
				state = Found
				break OuterLoop
			}
		}
	}
```



#### continue 语句



`continue` 语句会提前 `for` 语句的下一次迭代。`for` 语句必须和 `continue` 在相同函数中。



```go
RowLoop:
	for y, row := range rows {
		for x, data := range row {
			if data == endOfRow {
				continue RowLoop
			}
			row[x] = data + bias(x, y)
		}
	}
```



#### goto 语句



`goto` 会将程序跳转到相同函数的指定标签处。



```go
GotoStmt = "goto" Label .
```



```go
goto Error
```



goto 语句不允许跳过作用域内程序变量的初始化工作。



```go
goto L  // BAD
	v := 3
L:
```



上面的程序是错误的，因为它跳过了变量 v 的初始化过程。



```go
if n%2 == 1 {
	goto L1
}
for n > 0 {
	f()
	n--
L1:
	f()
	n--
}
```



标签作用域外的 goto 语句不能跳转到标签处，所以上面的代码是错误的。



#### Fallthrough 语句



`fallthrough` 语句会跳转到 `switch` 语句中的下一个 case 分句中。它应该只在最后一个非空分句中使用。



```go
FallthroughStmt = "fallthrough" .
```



#### Defer 语句



`defer` 语句会在包裹函数返回后触发函数调用。这里的返回泛指函数因为 return 语句终止、到达函数末尾或者当前 goroutine 触发运行时恐慌。



```go
DeferStmt = "defer" Expression .
```



表达式必须是函数或者方法调用；它不能使用括号括起来，调用内置函数会有一些限制。



每次执行 defer 语句执行时都会计算函数的参数和值，但是并不会调用函数。相反，函数的调用是在包裹函数返回后进行，它们的执行顺序与声明顺序正好相反。如果 defer 对应的函数值为 nil，会在调用函数的时候导致运行时恐慌而不是声明 defer 语句的时候。



例如：当 defer 函数为函数字面值且包裹函数具有命名结果值，此时，我们在defer 函数中可以访问和修改命名的结果值。defer 函数的所有返回值都会被忽略。



```go
lock(l)
defer unlock(l)  // unlocking happens before surrounding function returns

// prints 3 2 1 0 before surrounding function returns
for i := 0; i <= 3; i++ {
	defer fmt.Print(i)
}

// f returns 1
func f() (result int) {
	defer func() {
		result++
	}()
	return 0
}
```



#### 内置函数



内置函数是预定义的。调用他们和其他函数一样只是他们接受一个类型而不是一个表达式。



内置函数没有标准的 Go 类型，所以他们只能作为调用表达式；而不能作为函数的值。



###### Close



对于管道类型 c，内置函数 `close(c)` 意味着不在有数据插入到管道中。如果 `c` 是一个只接收数据的管道，会发生错误。向已经关闭的发送数据或者重复关闭已经关闭的管道会导致运行时恐慌。关闭 nil 管道会引起运行时恐慌。调用 close 后所有之前发送的数据都能接收到，并且在最后不会阻塞而返回零值。多值的接收操作能够返回接收到的数据和表示管道是否关闭的布尔值。



###### 长度和容积



内置函数 `len` 和 `cap` 可以接收多种类型的参数，并且返回一个 int 类型结果值。函数的实现能够确保结果值不会溢出。



```go
Call      Argument type    Result

len(s)    string type      string length in bytes
          [n]T, *[n]T      array length (== n)
          []T              slice length
          map[K]T          map length (number of defined keys)
          chan T           number of elements queued in channel buffer

cap(s)    [n]T, *[n]T      array length (== n)
          []T              slice capacity
          chan T           channel buffer capacity
```



切片的容积底层数组包含的元素个数。在任何情况下都有以下关系：



```go
0 <= len(s) <= cap(s)
```



`nil` 切片，map，或者 channel 的长度都为 0。`nil` 切片，管道的容积都为 0。



表达式 `len(x)` 在 `s` 是字符串常量时也为常量。如果 `s` 为数组或者指向数组的指针并且表达式 s 不包含 `channel` 接收器或者函数调用那么 `len(s)` 和 `cap(s)` 也是常量；在这个情况下 s 时不能求值的。其他情况下 `len` 和 `cap` 不是常量并且 `s` 是可以求值的。



```go
const (
	c1 = imag(2i)                    // imag(2i) = 2.0 is a constant
	c2 = len([10]float64{2})         // [10]float64{2} contains no function calls
	c3 = len([10]float64{c1})        // [10]float64{c1} contains no function calls
	c4 = len([10]float64{imag(2i)})  // imag(2i) is a constant and no function call is issued
	c5 = len([10]float64{imag(z)})   // invalid: imag(z) is a (non-constant) function call
)
var z complex128
```



###### 内存分配



内置函数 `new` 接收一个类型 T，它会在运行时给变量分配内存，并且返回一个指向类型 `T` 的 `*T` 类型指针。变量的初始化在初始化值章节中介绍。



```go
new(T)
```



例如：



```go
type S struct { a int; b float64 }
new(S)
```



给 S 类型的变量分配空间，并初始化它（`a=0`，`b=0.0`），并且返回一个 `*S` 类型值保存变量所在的位置。



###### 创建切片，map 和 管道



内置函数 `make` 以一个类型作为参数，它必须是一个切片，map 或者管道类型，它返回一个 T 类型的值，而不是（*T）类型，它会按初始化值章节描述的方式进行初始化。



```go
Call             Type T     Result

make(T, n)       slice      slice of type T with length n and capacity n
make(T, n, m)    slice      slice of type T with length n and capacity m

make(T)          map        map of type T
make(T, n)       map        map of type T with initial space for approximately n elements

make(T)          channel    unbuffered channel of type T
make(T, n)       channel    buffered channel of type T, buffer size n
```



n 和 m 必须是整数类型或者无类型常量。一个常量参数不能为负数并且该值在 `int` 类型的范围内；如果它是无类型常量，会被转换成 `int` 类型。如果 n 和 m 都是常量，那么 n 必须大于 m。如果 n 是负数或者大于 m 会引发运行时 panic。



```go
s := make([]int, 10, 100)       // slice with len(s) == 10, cap(s) == 100
s := make([]int, 1e3)           // slice with len(s) == cap(s) == 1000
s := make([]int, 1<<63)         // illegal: len(s) is not representable by a value of type int
s := make([]int, 10, 0)         // illegal: len(s) > cap(s)
c := make(chan int, 10)         // channel with a buffer size of 10
m := make(map[string]int, 100)  // map with initial space for approximately 100 elements
```



使用 make 来指定大小初始化 map 类型将会创建一个预留 n 个元素空间的 map 类型。更详细的行为依赖于具体实现。



###### 追加或者拷贝切片



内置函数 `append` 和 `copy` 可以进行切片的通用操作。对于这两个函数，一个是拷贝内存，一个是引用内存。



可变参数的函数 `append` 可以向切片 s 中追加一个或多个 x 值，并返回这个切片。传进 `...T` 的值会根据参数传值。作为特例，`append` 在 s 为 `[]byte` 切片时，可以使用字符串后面跟 `...` 作为参数。



如果 s 的容积容纳不下这些元素，那么 `append` 会分配一个新的足够大的数组。否则会使用原来的底层数组。



```go
s0 := []int{0, 0}
s1 := append(s0, 2)                // append a single element     s1 == []int{0, 0, 2}
s2 := append(s1, 3, 5, 7)          // append multiple elements    s2 == []int{0, 0, 2, 3, 5, 7}
s3 := append(s2, s0...)            // append a slice              s3 == []int{0, 0, 2, 3, 5, 7, 0, 0}
s4 := append(s3[3:6], s3[2:]...)   // append overlapping slice    s4 == []int{3, 5, 7, 2, 3, 5, 7, 0, 0}

var t []interface{}
t = append(t, 42, 3.1415, "foo")   //                             t == []interface{}{42, 3.1415, "foo"}

var b []byte
b = append(b, "bar"...)            // append string contents      b == []byte{''b'', ''a'', ''r'' }
```



`copy` 函数从 `src` 拷贝原属到 `dst` 并且返回拷贝元素的个数。参数中所有的元素类型必须是 T 类型或者能转换成 T 的类型。拷贝元素的数量是 `len(src)` 和 `len(dst)` 中的较小值。作为特例，`copy` 可以从 string 类型拷贝元素到 `[]byte` 类型。这会把字符串中的元素拷贝到字节切片中。



```go
copy(dst, src []T) int
copy(dst []byte, src string) int
```



例：



```go
var a = [...]int{0, 1, 2, 3, 4, 5, 6, 7}
var s = make([]int, 6)
var b = make([]byte, 5)
n1 := copy(s, a[0:])            // n1 == 6, s == []int{0, 1, 2, 3, 4, 5}
n2 := copy(s, s[2:])            // n2 == 4, s == []int{2, 3, 4, 5, 4, 5}
n3 := copy(b, "Hello, World!")  // n3 == 5, b == []byte("Hello")
```



###### 删除 map 中的元素



内置函数 `delete` 移除 map 类型 m 中的键值 k。k 的类型必须是能够转换成 m 键类型的类型。



```go
delete(m, k)  // remove element m[k] from map m
```



如果 map 类型 m 是 nil 或者 m[k] 不存在，那么 `delete` 函数不做任何事情。



###### 操作复数



有三个函数可以组装或者分解复数。内置函数 `complex` 会构造一个复数，`real` 和 `imag` 会分解出复数的实部和虚部。



```go
complex(realPart, imaginaryPart floatT) complexT
real(complexT) floatT
imag(complexT) floatT
```



参数的类型和返回值类型是对应的。对于 `complex`，两个参数必须是相同的浮点类型，并返回由相同浮点数组成的复数类型。`complex64` 是 `float32` 对应的类型，`complex128` 是 `float64` 对应的参数类型。如果参数是一个无类型常量，它会转换成另一个参数的类型。如果两个参数都是无类型常量，他们必须实数或者虚数部分为零，并且它会返回一个无类型的复数常量。



`real` 和 `imag` 函数和 `complex` 正好相反的，所以对于一个值复数类型 Z 的值 z，`z==Z(complex(real(z),imag(z)))`。



如果这么操作都是常量，那么返回的值也是常量。



```go
var a = complex(2, -2)             // complex128
const b = complex(1.0, -1.4)       // untyped complex constant 1 - 1.4i
x := float32(math.Cos(math.Pi/2))  // float32
var c64 = complex(5, -x)           // complex64
var s uint = complex(1, 0)         // untyped complex constant 1 + 0i can be converted to uint
_ = complex(1, 2<<s)               // illegal: 2 assumes floating-point type, cannot shift
var rl = real(c64)                 // float32
var im = imag(a)                   // float64
const c = imag(b)                  // untyped constant -1.4
_ = imag(3 << s)                   // illegal: 3 assumes complex type, cannot shift
```



###### 处理 panic



两个内置函数 `panic` 和 `recover`，可以抛出和处理运行时 `panic` 和程序的错误条件。



```go
func panic(interface{})
func recover() interface{}
```



当执行 F 函数时，显式的调用 `panic`或者运行时 panic 都会中断 F 的执行。但是 F 中的延迟函数还会执行。接下来调用 F 函数处的延迟函数也会执行，一直到顶级的延迟函数。鉴于这点，程序关闭并且错误条件可以抛出。包括 `panic` 中的值。这个顺序叫做 `panicking`。



```go
panic(42)
panic("unreachable")
panic(Error("cannot parse"))
```



`recover` 函数允许程序从一个 panicking 中恢复执行。假设函数 G 延迟执行函数 D ，在 D 中调用 `recover` 这时如果在 G 执行时发生 panic 会在 D 中恢复。当函数执行到 D，`recover` 的返回值会返回 `panic` 对应的错误，并且终止 `panicking` 。在这个情况下 G 函数和 `panic` 之间的代码不会执行。任何在 D 中 G 之前的延迟函数会返回到调用者。



在下面两种情况下 `recover` 会返回 nil：



- panic 的参数为 nil
- 携程里没有发生 panic

- recover 不是在延迟函数中执行



本例中的 `protect` 函数会在 g 发生 panic 的时候恢复执行。



```go
func protect(g func()) {
	defer func() {
		log.Println("done")  // Println executes normally even if there is a panic
		if x := recover(); x != nil {
			log.Printf("run time panic: %v", x)
		}
	}()
	log.Println("start")
	g()
}
```



###### 初始化



这个实现提供了多个内置函数来帮助进行初始化。这些函数用来输出信息但是不确定会一直存在于语言中，他们都没有返回值。



```go
Function   Behavior

print      prints all arguments; formatting of arguments is implementation-specific
println    like print but prints spaces between arguments and a newline at the end
```



实现限制：`print` 和 `println` 不接受除了布尔值，数字，字符串以外的其他类型。



#### 程序的初始化和执行



###### 零值



当为变量分配内存空间时，不管是声明还是调用 `new` 或者使用字面值和 `make` 初始化，只要创建了一个新值变量都会有一个默认值。这样的元素和值会使用它类型的零值：`false` 是布尔值的零值，0 为数值类型零值，"" 为字符串零值，nil 为指针，函数，接口，切片，频道，字典。初始化会递归完成，所以结构体里的数组中的元素也都会有它自己的零值。



下面两个声明时相等的：



```go
var i int
var i int = 0
```



请看下面的声明：



```go
type T struct { i int; f float64; next *T }
t := new(T)
t.i == 0
t.f == 0.0
t.next == nil
```



这和下面的声明时同等效果的：



```go
var t T
```



###### 包的初始化



保级变量会按声明的顺序进行初始化，如果依赖其他变量，则会在其他变量之后进行初始化。



更确切的说，如果包级变量还没初始化并且没有初始化表达式或者表达式中不包含对其他未初始化变量的依赖，那么会认为它正在等待初始化。初始化过程会从最早声明的变量开始向下一个包级变量重复，直到没有需要初始化的变量。



如果在初始化过程完成后还有未初始化的变量，那么这些变量可能是循环初始化了，这事程序不是合法的。



在多个文件中变量的声明顺序会依据编译时文件出现的顺序：声明在第一个文件中的变量优先于第二个文件中声明的变量，依此类推。



对依赖关系的分析不会根据变量的具体值，它只分析在源码中是否引用了其他变量。例如，如果变量 x 的初始化表达式引用了变量 y 那么 x 就依赖于 y：



- 引用一个变量或者函数中用到了一个变量
- 引用了一个方法值 `m` 或者方法表达式 `t.m` (这里的静态类型 `t` 不是借口类型，并且方法 `m` 是 `t` 方法集中的方法)。`t.m` 的返回值不会在此时影响。

- 变量，函数，或者方法 x 依赖变量 y



依赖分析会在每个包中执行；他只考虑当前包中的析变量，函数，和方法。



例如，给定声明：



```go
var (
	a = c + b
	b = f()
	c = f()
	d = 3
)

func f() int {
	d++
	return d
}
```



初始化顺序为 d，b，c，a。



变量可以在包中声明的初始化函数 `init` 中进行初始化，它没有参数和返回值。



```go
func init() {}
```



可以为每个包定义多个该函数，甚至在一个文件中也可以。并且不会声明该该标识符。因此 init 函数不能在程序中调用。



还未导入的包会先初始化包级的变量然后按照 `init` 函数在源码中的顺序调用，它可能在包的多个文件中。如果需要导入一个包，它会在初始化自己之前先初始化这个需要导入的包。如果导入一个包多次，那这个包只会初始化一次。导入的包不能存在循环引用。



包的初始化——变量初始化和对 init 函数的调用会按顺序发生在同一个 goroutine 中。 `init` 函数可能会启动其他 goroutine。不过一般 `init` 函数都是按序进行初始化的：它只在上一步已经执行完成时才会调用下一个步骤。



确保初始化行为是可以复现的，构建系统鼓励在同一个包中包含多个文件这些文件在编译器中会以字母排序。



###### 程序执行



一个完整的程序由一个 `main` 包导入所有需要的包。`main` 包必须以 `main` 作为包名并且声明一个没有参数和返回值的 `main` 函数。



```go
func main() {}
```



程序先初始化 `main` 包然后调用 `main` 函数。当 `main` 函数返回时，程序就会退出。它不会等待其他 goroutines 完成。



#### 错误



预定义的错误类型为：



```go
type error interface {
	Error() string
}
```



它是表示错误信息的常规接口，nil 代表没有发生错误。例如，在文件中读取数据可以定义为：



```go
func Read(f *File, b []byte) (n int, err error)
```



#### 运行时恐慌



运行时错误（例如数组的越界访问）会造成运行时恐慌，它和以 `runtime.Error` 接口实现调用内置的 `panic` 函数一样。`runtime.Error` 满足预定义的 `error` 接口。不同的错误值代表不同的运行时错误条件。



```go
package runtime

type Error interface {
	error
	// and perhaps other methods
}
```



#### 系统相关



###### unsafe 包



`unsafe` 是编译器已知的内置包，可以通过导入路径 `unsafe` 访问包内容，提供 `unsafe` 包目的是支持底层编程（包括操作非 Go 类型的数据结构）。使用 `unsafe` 包必须自己保证类型安全而且它有可能破坏程序的移植性。`unsafe` 包提供了以下接口：



```go
package unsafe

type ArbitraryType int  // 任意一个 Go 类型；它不是一个具体的类型。
type Pointer *ArbitraryType

func Alignof(variable ArbitraryType) uintptr
func Offsetof(selector ArbitraryType) uintptr
func Sizeof(variable ArbitraryType) uintptr
```



`Pointer` 是一个指针类型，但是不能解引用 `Pointer` 的值。所有底层类型 `uintptr` 的指针和值都能转换成 `Pointer` 类型，反之亦然。`Pointer` 和  `uintptr` 之间的转换效果由具体实现定义。



```go
var f float64
bits = *(*uint64)(unsafe.Pointer(&f))

type ptr unsafe.Pointer
bits = *(*uint64)(ptr(&f))

var p ptr = nil
```



假设变量 v 由 `var v = x` 定义。`Alignof` 以表达式 x 作为参数并返回 x 的对齐字节数。`Sizeof` 以表达式 x 作为参数并返回 x 的大小。



函数 `Offsetof` 以选择器 `s.f`（ s 或者 *s 结构体中的 f 字段）作为参数，返回字段相对结构体首地址的位置。如果 f 是一个嵌入字段，那 f 必须可以直接访问（不能通过指针进行间接访问）。对于结构体 s 的 f 字段：



```go
uintptr(unsafe.Pointer(&s)) + unsafe.Offsetof(s.f) == uintptr(unsafe.Pointer(&s.f))
```



计算机的体系结构要求对齐内存地址（对于一个变量的地址有多种因素影响对齐）。`Alignof` 函数获取一个人和类型的表达式并返回变量对齐的字节数。对于变量 x：



```go
uintptr(unsafe.Pointer(&x)) % unsafe.Alignof(x) == 0
```



编译时 `uintptr` 类型常量表达式会调用 `Alignof`，`Offsetof`，和 `Sizeof`。



###### 确定的大小和对齐字节数



对于数字类型，确定有以下尺寸：



```go
type                                 size in bytes

byte, uint8, int8                     1
uint16, int16                         2
uint32, int32, float32                4
uint64, int64, float64, complex64     8
complex128                           16
```



Go 中规定的最小对齐特性：



1. 对于任意变量类型 x：`unsafe.Alignof(x)` 至少为 1。
2. 对于结构体类型：`unsafe.Alignof(x)` 是所有内部字段 `unsafe.Alignof(x.f)` 的最大值，并且至少为 1。

1. 对于数组类型：`unsafe.Alignof(x)` 和数组元素类型的 alignment 相同。



结构体（数组）在内部没有字段（元素）的时候大小为 0。两个所占空间大小为 0 的不同变量可能在内存中拥有相同地址。', '介绍
这是一个 Go 语言的参考手册，你也可以访问golang.org获取更多信息和其他文档。
Go 是在设计时考虑了系统编程的通用型编程语言。它是强类型，有垃圾回收机制并原生支持并发编程。Go 程序由一个或多个 package 组成，这样可以高效的管理依赖。
Go 的语法简洁且有规则，这让自动化工具可以很容易的分析代码，例如：集成开发环境。
标记
语法采用扩展巴科斯范式。
Production  = production_name "=" [ Expression ] "." .
Expression  = Alternative { "|" Alternative } .
Alternative = Term { Term } .
Term        = production_name | token [ "…" token ] | Group | Option | Repetition .
Group       = "(" Expression ")" .
Option      = "[" Expression "]" .
Repetition  = "{" Expression "}" .

产生式是由词法单元和以下操作符构成的表达式（优先级依次递增）：
|   或
()  分组
[]  可选 (出现 0 或 1 次)
{}  可重复 (出现 0 到 n 次)

小写的产生式名称用来与词法单元区分。非终结符采用驼峰式。词法单元由双引号或反引号组成。
a...b 表示从 a 到 b 之间的任意字符。省略号 ... 也可以在规范中表示对更详细的枚举和代码片段的省略。字符 ... 不是 Go 语言的词法单元。
源码表示法
Go 的源代码使用 UTF-8 编码的 Unicode 文本。不过它并不是完全规范化的，单重音的代码点与由相同字符和音标组成的代码点是不同的；前者我们认为它是两个代码点。简单来讲，文档会在源代码文本中使用非规范的术语字符来表示一个 Unicode 代码点。
每个代码点都是不同的；相同字符的大写和小写形式表示不同的字符。
实现限制：为了兼容其他工具，编译器不允许出现 Utf-8 编码的源文本中的 NUL 字符（U+0000）。
实现限制：为了兼容其他工具，如果源文本中是以Utf-8 编码的字节序标记（U+FEFF）为起始代码点。编译器会忽略它。字节序标记不应出现在源文本的任何位置。
字符
这些单词表示 Unicode 字符的类别：
newline        = /* Unicode 代码点 U+000A */ .
unicode_char   = /* 排除换行以外的任意 Unicode 代码点 */ .
unicode_letter = /* 一个字母（"Letter"）类型的 Unicode 代码点  */ .
unicode_digit  = /* 一个数字（"Number, decimal digit"）类型的 Unicode 代码点  */ .

在 Unicode8.0 标准中，第 4.5 章节 “一般类别” 中定义了字符的类别。Go 能够处理任何字符集，包括 Lu，Li，Lt，Lm 或 Lo 作为 Unicode 字母，还可以把数字字符集 Nd 当作 Unicode 数字处理。
字母和数字
我们认为下划线 _ （U+005F）是一个字母：
letter        = unicode_letter | "_" .
decimal_digit = "0" … "9" .
octal_digit   = "0" … "7" .
hex_digit     = "0" … "9" | "A" … "F" | "a" … "f" .

词汇元素
注释
注释是程序的说明文档。在 Go 中有两种形式：

单行注释从 // 开始直到行末结束。
通用注释从 /* 开始直到 */ 结束。

注释不能嵌套在其他注释、字符串和 rune 的字面值中。不包含换行符的通用注释之间通过空格符连接，其他情况下每段注释都会另起一行。
词汇元素
词汇元素构成了 Go 语言的词汇表。它有四种类型：标识符、关键字、操作符/标点符号、字面值。空白符可以是空格（U+0020）、水平制表符（U+0009）、换行符（U+000D）或换行符（U+000A）。它本身会被忽略，一般用来区分不同的词汇元素。换行符或文件终止符（EOF）还可能触发编译程序在源代码的行末或文件末尾追加分号。在分解源代码的词汇元素的过程中，会把当前可以形成有效词汇元素的最长字符序列作为下一个词汇元素。
分号
正规语法在很多产生式中使用分号 “;” 作为终结符。Go 程序中遵循下面两条规则省略了大部分的分号：

当某行的最后一个词汇元素是以下元素时自动补全分号：


一个标识符。
一个整数，浮点数，虚数，rune 或字符串字面值。

关键字 break、continue、fallthrough 和 return 其中之一。

操作符/标点符号 ++，--，)，] 和 } 其中之一。


为了支持独占一行的复杂语句，会省略与 “)” 或 “}” 相邻的分号。

为了反应惯用用途，本篇文档的所有例子都基于以上规则省略分号。
标识符
标识符表示程序实体单元，例如：变量、类型。一个标识符由一个或多个字母和数字组成。标识符的首字符必须为字母。
identifier = letter { letter | unicode_digit } .

a
_x9
ThisVariableIsExported
αβ

Go 已经预定义了一些标识符。
关键字
以下关键字是预留的，它们不能作为标识符：
break        default      func         interface    select
case         defer        go           map          struct
chan         else         goto         package      switch
const        fallthrough  if           range        type
continue     for          import       return       var

操作符和标点符号
以下字符序列用于表示操作符（包括赋值运算符）和标点符号：
+    &     +=    &=     &&    ==    !=    (    )
-    |     -=    |=     ||    <     <=    [    ]
*    ^     *=    ^=     <-    >     >=    {    }
/    <<    /=    <<=    ++    =     :=    ,    ;
%    >>    %=    >>=    --    !     ...   .    :
     &^          &^=

整型字面值
整型字面值是一个数字序列，相当于整型常量。可以使用前缀指定非小数进制：0 表示八进制，0x/0X 表示十六进制。在十六进制字面值中，字母 a-f 和 A-F 都表示数字 10-15。
int_lit     = decimal_lit | octal_lit | hex_lit .
decimal_lit = ( "1" … "9" ) { decimal_digit } .
octal_lit   = "0" { octal_digit } .
hex_lit     = "0" ( "x" | "X" ) hex_digit { hex_digit } .

42
0600
0xBadFace
170141183460469231731687303715884105727

浮点字面值
浮点字面值是一个小数，相当于浮点数常量。它由整数部分，小数点，小数部分和指数部分构成。整数部分和小数部分用小数点链接；指数部分由  e / E 字符后接一个有符号指数构成。整数部分和小数部分可以省略其一；小数点和指数部分可以省略其一。
float_lit = decimals "." [ decimals ] [ exponent ] |
            decimals exponent |
            "." decimals [ exponent ] .
decimals  = decimal_digit { decimal_digit } .
exponent  = ( "e" | "E" ) [ "+" | "-" ] decimals .

0.
72.40
072.40  // == 72.40
2.71828
1.e+0
6.67428e-11
1E6
.25
.12345E+5

虚数字面值
虚数字面值是一个小数，相当于复数常量中的虚数部分。它由浮点数或者整数后接小写字母 i 构成。
imaginary_lit = (decimals | float_lit) "i" .

0i
011i  // == 11i
0.i
2.71828i
1.e+0i
6.67428e-11i
1E6i
.25i
.12345E+5i

Rune 字面值
rune 类型字面值相当于一个 rune 常量。它是一个表示 Unicode 代码点的整数。rune 类型字面值表示为用单引号包裹的一个或多个字符，像 ‘x’ 或 ‘\n’。在单引号中除了换行符和未转义的单引号其他的字符都可以直接显示。单引号包裹的字符的值和字符在 Unicode 编码中的值相等，而以反斜线开头的多字符序列会把值翻译成多种格式。
使用引号表示单字符是最简单的方式；因为 Go 的源文本是 UTF-8 编码，一个整数可能代表多个 UTF-8 字节。例如， ‘a’ 可以使用单字节表示字符 a，Unicode 编码 U+0061，值 0x61，而 ‘ä’ 是两字节表示分音符的 a，Unicode 编码 U+00E4，值 0xe4。
反斜线能将任意值编码成 ASCII 文本。有四种方式将整数值表示为数字常量：\x 后接两个十六进制数；\u 后接四个十六进制数；\U 后接八个十六进制数。 \ 后接三个八进制数。每种情况下都使用相应进制来表示字面量的整数值。
虽然这四种方式都以整数表示，但它们的有效区间并不相同。八进制只能表示 0 - 255 以内的整数。十六进制满可以满足需求。\u 和 \U  都可以表示 Unicode 代码点，不过其中的一些值是无效的，特别是 0x10FFFF 以上的值。
反斜线结合以下字符具有特殊含义：
\a   U+0007 alert or bell
\b   U+0008 退格符
\f   U+000C form feed
\n   U+000A line feed or newline
\r   U+000D carriage return
\t   U+0009 水平制表符
\v   U+000b 垂直制表符
\\   U+005c 反斜线
\''   U+0027 单引号  (只在 rune 字面值中有效)
\"   U+0022 双引号  (只在字符串字面值中有效)

其他所有以反斜线开头的序列在 rune 的规则中都是非法的。
rune_lit         = "''" ( unicode_value | byte_value ) "''" .
unicode_value    = unicode_char | little_u_value | big_u_value | escaped_char .
byte_value       = octal_byte_value | hex_byte_value .
octal_byte_value = `\` octal_digit octal_digit octal_digit .
hex_byte_value   = `\` "x" hex_digit hex_digit .
little_u_value   = `\` "u" hex_digit hex_digit hex_digit hex_digit .
big_u_value      = `\` "U" hex_digit hex_digit hex_digit hex_digit
                           hex_digit hex_digit hex_digit hex_digit .
escaped_char     = `\` ( "a" | "b" | "f" | "n" | "r" | "t" | "v" | `\` | "''" | `"` ) .

''a''
''ä''
''本''
''\t''
''\000''
''\007''
''\377''
''\x07''
''\xff''
''\u12e4''
''\U00101234''
''\''''         // 包含单引号的 rune 字面值
''aa''         // 无效: 太多字符
''\xa''        // 无效: 缺少十六进制数
''\0''         // 无效: 缺少八进制数
''\uDFFF''     // 无效: surrogate half
''\U00110000'' // 无效: 非法的 Unicode 代码点

字符串字面量
字符串字面量表示从字符序列中获取的字符串常量。它有两种格式：原始字符串字面量和解释型字符串字面量。
原始字符串是由反引号包裹（foo）。字符串中除反引号以外的其他字符都会显示出来。原生字符串由反引号之间的（默认 UTF-8 编码）的字符组成。它的值为引号内未经解释（默认 UTF-8 编码）所有字符；尤其是，反斜线再字符串中没有特殊意义并且字符串中保留换行符。在原始字符串的值中会丢弃回车键返回 ‘\r’ 字符。
解释型字符串由双引号之间的字符组成（“bar”）。除了换行符和双引号其他字符都会显示出来。双引号之间的文本组成字面量的值。反斜线的转义规则与 rune 字面量基本相同（不同的是 \’ 非法，而 " 合法）。三位八进制数（\nnn）和两位十六进制数（\xnn）换码符的值表示相应字符串的字节。其他的换码符都表示字符各自的 UTF-8 编码（可能是多字节）。因此字符串 \377 和 \xFF 都表示值为 0xFF=255 的单个字节，而  ÿ, \u00FF, \U000000FF 和 \xc3\xbf 表示 UTF-8 编码字符 U+00FF 的两个字节 0xc3 0xbf。
string_lit             = raw_string_lit | interpreted_string_lit .
raw_string_lit         = "`" { unicode_char | newline } "`" .
interpreted_string_lit = `"` { unicode_value | byte_value } `"` .

`abc`                // 等价于 "abc"
`\n
\n`                  // 等价于 "\\n\n\\n"
"\n"
"\""                 // 等价于 `"`
"Hello, world!\n"
"日本語"
"\u65e5本\U00008a9e"
"\xff\u00FF"
"\uD800"             // 无效: surrogate half
"\U00110000"         // 无效: 无效的 Unicode 代码点

这些例子都表示相同的字符串：
"日本語"                                 // UTF-8 文本
`日本語`                                 // UTF-8 文本作为原生字面值
"\u65e5\u672c\u8a9e"                    // 确定的 Unicode 代码点 
"\U000065e5\U0000672c\U00008a9e"        // 确定的 Unicode 代码点
"\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e"  // 确定的 UTF-8 字节

如果源代码中使用两个代码点表示一个字符，例如带音标的字母，把它放在 rune 中会报错（它不是单代码点）。并且在字符串中会显示两个代码点。
常量
常量分为：布尔型，rune型，整型，浮点型，复数型，字符串型。其中 rune，整型，浮点型，复数型统称为数字常量。
常量的值可以表示为一个 rune字面量，整数字面量，浮点数字面量，虚数字面量，字符串字面量，表示常量的标识符，常量表达式，一个转换结果为常量的类型转换，和一些返回值为常量的内置函数(接受任何值的unsafe.Sizeof，接受部分表达式的cap 或 len，接受虚数常量的real 和 imag，接受数字常量的 complex)。布尔类型的值为预定义常量 true 或 false，预定义的标识符 iota 表示一个整型常量。
一般情况下复数常量是常量表达式的一种形式。会在常量表达式章节详细讨论。
数字常量可以表示任意精度的确定值而且不会溢出。因此，没有常量可以表示非 0，无穷大和非数字值。
常量可以指定类型也可以不指定类型。字面值常量，true，false，iota，和只包含无类型常量操作的常量表达式是无类型的。
常量可以通过常量声明和转换时显式的指定具体类型，也可以隐式的在变量声明、赋值或作为表达式操作元时隐式的指定具体类型。如果常量的值和他的类型不匹配，会报错。
无类型常量由一个默认的类型，这个类型会根据使用常量时的上下文进行隐式转换。例如：短变量声明 i := 0 没有指定 i 的类型。无类型常量的默认类型可以是：bool，rune，int，float64，complex128 或者 string，具体选择哪种类型由常量的值决定。
实现限制：虽然数字常量在 Go 中是任意精度，不过编译器在实现时会在内部限制精度。这意味着每个编译器实现都要：

至少保证整形常量有 256 位
浮点数常量（包括复数常量）都要保证至少 256 位的主体部分和至少 16 位的有符号指数部分

如果不能表示给定整数的精度抛出错误

如果浮点数或复数溢出抛出错误

如果由于精度限制不能表示浮点数或者复数进行舍入


这些要求同时作用于字面量常量额和常量表达式的结果。
变量
变量是一个用来储存值的位置。根据不同的变量类型，可以保存不同的值。
变量声明，函数参数和返回值，声明的函数签名，函数字面值都会为命名变量预留储存空间。调用内置的  new  函数或获取复合字面值的地址都会在运行时为变量分配存储空间。这种匿名变量是通过（可能是隐式的）指针间接引用的。
像数组，切片和结构体类型的变量，它们内部都包含很多元素或字段，而且这些元素和字段都可以直接被访问。数组和切片中的每个元素的行为和单独的变量基本相同。
变量的静态类型可以通过变量声明、提供给 new 的类型、复合字面值、结构体变量声明的元素类型以上几种方式确定。通过new或者类型初始化。接口类型的变量也有一个明确的动态类型，这个动态类型是在运行时赋值给变量的具体值类型（特例：预声明的 nil 是无类型的）。动态类型在程序的执行过程中可能并不相同，但是接口变量的值是可以分配给相同静态类型的变量。
var x interface{}  // x 的静态类型为 interface{} 值为 nil
var v *T           // v 的静态类型为 *T 值为 nil
x = 42             // x 的动态类型为 int 值为 42
x = v              // x 动态类型为 *T 值为 (*T)(nil)

在表达式中使用变量可以取出变量的值；这个值就是变量最近一次被赋予的值。如果没有对变量赋过值，那么他的值是该类型的零值。
类型
类型是一个集合，集合包括值和针对值的操作&方法。一个类型可以使用类型名来表示。类型有多种表现形式：如果存在类型名，可以使用类型名表示，或者也可以使用根据已有类型组合成的类型字面值。
Type      = TypeName | TypeLit | "(" Type ")" .
TypeName  = identifier | QualifiedIdent .
TypeLit   = ArrayType | StructType | PointerType | FunctionType | InterfaceType |
	    SliceType | MapType | ChannelType .

Go 已经预先声明了某些类型的名称。并引入了类型声明。复合类型（数组、结构体、指针、函数、接口、切片、map、channel）可以使用他们的类型字面值。
每个类型T都有一个底层类型。如果T是预定义类型或者类型字面值。那么底层类型就是他自身。否则，T的底层类型就是它再类型声明时引用到的类型。
type (
	A1 = string
	A2 = A1
)

type (
	B1 string
	B2 B1
	B3 []B1
	B4 B3
)

string，A1，A2，B1，B2 的底层类型是 string。[]B1，B3，B4 的下游类型是[]B1。
方法集
类型可能会有一个与之关联的方法集。接口类型的方法集就可以使用自身表示。对于其他类型，类型 T 的方法集由所有接收者类型为 T 的方法组成。而对应指针类型 *T 的方法集由所有接收者类型为 T 或 *T 的方法组成。如果是结构体类型且含有嵌入字段，那么方法集中可能还会包含更多的方法，具体请看结构体类型章节。其他类型的方法集都为空。方法集中的每个方法都有唯一且不为空的方法名。
类型的方法集用来确定类型实现的接口和以类型作为接收者能够调用的方法。
布尔类型
布尔类型表示预定义常量 true 和 false 表示布尔真实值的集合。预定义的布尔类型为 bool；它是通过类型声明创建的。
数字类型
一个数字类型相当于整型和浮点型的所有值的集合。预定义的数字类型包括：
uint8       8 位无符号整数集合 (0 to 255)
uint16      16 位无符号整数集合 (0 to 65535)
uint32      32 位无符号整数集合 (0 to 4294967295)
uint64      64 位无符号整数集合 (0 to 18446744073709551615)

int8        8 位有符号整数集合 (-128 to 127)
int16       16 位有符号整数集合 (-32768 to 32767)
int32       32 位有符号整数集合 (-2147483648 to 2147483647)
int64       64 位有符号整数集合 (-9223372036854775808 to 9223372036854775807)

float32     IEEE-754 32 位浮点数集合
float64     IEEE-754 64 位浮点数集合

complex64   实部虚部都为 float32 的复数集合
complex128  实部虚部都为 float64 的复数集合

byte        uint8 的别名
rune        int32 的别名

n 位整数的值具有 n 比特的宽度并用补码表示。
以下几种预定义类型由具体平台实现指定长度：
uint     32 或 64 位
int      和 uint 位数相同
uintptr  能够容纳指针值的无符号整数

为了避免移植性问题，除了被 uint8 的别名 byte 和 int32 的别名 rune，其他所有的数字类型都是通过类型声明定义。当在表达式中使用不同的数字类型需要进行类型转换。例如：int32 和 int 不是相同的类型，即使他们在指定的平台上是相等的。
字符串类型
字符串类型表示字符串的值类型。字符串的值是一个字节序列（有可能为空）。字符串一旦创建就无法修改它的值。预定义的字符串类型是 string，它是通过类型声明定义的。
可以使用内置函数 len 获取字符串长度。如果字符串是常量那么它的长度在编译时也为常量。可以通过数字下标 0～len(s)-1 访问字符串字节。获取字符串的地址是非法操作；如果 s[i] 是字符串的第 i 个字节，那么 &s[i] 是无效的。
数组类型
数组是一定数量的单一类型元素序列，而这个单一类型叫做元素类型。元素的个数表示元素的长度，它永远不是负数。
ArrayType   = "[" ArrayLength "]" ElementType .
ArrayLength = Expression .
ElementType = Type .

长度是数组类型的一部分；它是一个类型为 int 的非负常量。可以用内置函数 len 获取数组的长度。元素可以通过下标 0～len(a)-1 访问。数组一般都是一维的，不过也可以是多维的。
[32]byte
[2*N] struct { x, y int32 }
[1000]*float64
[3][5]int
[2][2][2]float64  // same as [2]([2]([2]float64))

切片类型
切片描述了底层数组的一个连续片段并提供对连续片段内元素的访问。切片类型表示元素类型的数组的所有切片的集合。没有被初始化的切片用 nil 表示。
SliceType = "[" "]" ElementType .

与数组一样，切片的可以使用索引访问并且有长度，切片的长度可以通过内置的 len 函数获取；与数组不同的是它的长度在运行时是可以变化的。我们可以通过下标 0～len(s)-1 来访问切片内的元素。切片的索引可能会小于相同元素再底层数组的索引。
切片一旦初始化，那么就有一个与之对应的底层数组保存切片中的元素。切片和底层的数组还有其他指向该数组的切片共享相同的储存空间；而不同的数组总是有着不同的存储空间。
切片的底层数组可能会延伸到切片末尾以外，切片的容积等于切片现在的长度加上数组中切片还没使用的长度；可以从原始切片中切出一个长度与容量相等的切片。切片的容量可以通过内置的 cap(a) 函数来获取。可以通过函数make来创建一个T类型的新切片。
使用内置函数 make 可以出实话给定元素类型 T 的切片。make 函数接收三个参数：切片类型、切片长度、切片容积，其中切片容积是可选参数。make 创建的切片会在底层分配一个切片所引用的新数组。
make([]T, length, capacity)

make 的作用就是创建新数组并切分它，所以下面两种写法是等价的：
make([]int, 50, 100)
new([100]int)[0:50]

与数组相同，切片一般是一维的，不过也可以复合成多维。数组中的数组都必须是相同的长度，但是切片中的切片长度是动态变化的，不过切片中的切片需要单独初始化。
结构体类型
结构体是一个命名元素序列，命名元素也叫做字段，每个字段都对应一个名称和类型，字段的名字可以是显式指定的（标识符列表）也可以是隐式的（嵌入字段）。在结构体中非空字段具有唯一性。
StructType    = "struct" "{" { FieldDecl ";" } "}" .
FieldDecl     = (IdentifierList Type | EmbeddedField) [ Tag ] .
EmbeddedField = [ "*" ] TypeName .
Tag           = string_lit .

// 空结构体.
struct {}

// 6个字段的结构体.
struct {
	x, y int
	u float32
	_ float32  // padding
	A *[]int
	F func()
}

一个指定了类型而没有指定名称的字段叫做嵌入字段，嵌入字段必须指定类型名 T 或指向非接口类型的指针类型 *T，其中 T 不能为指针类型。或者一个非接口类型的指针。并且T本身不能为指针类型。这种情况下会把类型名作为字段的名字。
// 一个包含 4 个嵌入字段 T1, *T2, P.T3 和 *P.T4 的结构体
struct {
	T1        // 字段名为 T1
	*T2       // 字段名为 T2
	P.T3      // 字段名为 T3
	*P.T4     // 字段名为 T4
	x, y int  // 字段名为 x 和 y
}

以下声明是错误的因为字段名称必须唯一。
struct {
	T     // 嵌入字段 *T 与 *P.T 冲突
	*T    // 嵌入字段 T 与 *P.T 冲突
	*P.T  // 嵌入字段 T 与 *T 冲突
}

如果 x.f 是表示该字段或方法 f 的合法选择器，则会调用结构 x 中嵌入字段的字段或方法 f。
从嵌入字段组合来的字段与结构体原来的字段行为基本相同，只是不能在结构体的复合字面值中直接使用。
给定一个结构体 S 和一个类型 T，依据以下规则生成组合后的方法集：

如果 S 包含嵌入字段 T，则 S 和 *S 的方法集包括接收者为 T 的方法集，而 *S 包括 接收者为 *T 的方法集。
如果 S 包含字段 T。那么S和S均包含接收者为 T 和 *T 的所有方法集。

声明字段时可以给该字段添加一个字符串的 tag。这个 tag 将会成为它所对应字段的一个属性。空 tag 和缺省 tag 是相同的。tag 的值可以通过反射的接口获取，可以作为类型结构体的类型定义的一部分，也可以忽略。
struct {
	x, y float64 ""  // 空 tag 和缺省 tag 相同
	name string  "any string is permitted as a tag"
	_    [4]byte "ceci n''est pas un champ de structure"
}

// 结构体对应一个 TimeStamp 的 protocol buffer.
// tag 字符串中定义了 protocol buffer 字段对应的数字;
// 一般使用 reflect 包读取他们.
struct {
	microsec  uint64 `protobuf:"1"`
	serverIP6 uint64 `protobuf:"2"`
}

指针类型
指针类型表示所有指向给定类型变量的指针集合。这个指定的类型叫做指针的基础类型。没有初始化的指针值为nil。
PointerType = "*" BaseType .
BaseType    = Type .

*Point
*[4]int

函数类型
函数类型可以表示所有具有相同参数类型和返回值类型的函数。未初始化的函数类型值为 nil。
FunctionType   = "func" Signature .
Signature      = Parameters [ Result ] .
Result         = Parameters | Type .
Parameters     = "(" [ ParameterList [ "," ] ] ")" .
ParameterList  = ParameterDecl { "," ParameterDecl } .
ParameterDecl  = [ IdentifierList ] [ "..." ] Type .

在参数和返回值列表中，标识符列表必须同时存在或缺省。如果存在，那么每个名字都表示指定类型的一个参数/返回值，这些标识符必须非空并且不能重复。如果缺省，指定类型的参数/返回值使用对应的类型表示。参数列表和返回值列表一般都是需要加括号，不过在只有一个缺省返回值时，它可以不使用括号。
函数的最后一个参数可以添加前缀 ...。包含这种参数的函数叫做变参函数，它可以接收零个或多个参数。
func()
func(x int) int
func(a, _ int, z float32) bool
func(a, b int, z float32) (bool)
func(prefix string, values ...int)
func(a, b int, z float64, opt ...interface{}) (success bool)
func(int, int, float64) (float64, *[]int)
func(n int) func(p *T)

接口类型
接口类型指定了一个方法集。一个接口类型变量可以保存任何方法集是该接口超集的类型。我们可以认为类型实现了接口。没有初始化的接口类型值为 nil。
InterfaceType      = "interface" "{" { MethodSpec ";" } "}" .
MethodSpec         = MethodName Signature | InterfaceTypeName .
MethodName         = identifier .
InterfaceTypeName  = TypeName .

在接口类型的方法集中，每个方法的名称必须是非空且唯一。
// A simple File interface
interface {
	Read(b Buffer) bool
	Write(b Buffer) bool
	Close()
}

接口可以由多个类型实现，例如：类型 S1 和类型 S2 都有以下方法集：
func (p T) Read(b Buffer) bool { return … }
func (p T) Write(b Buffer) bool { return … }
func (p T) Close() { … }

（这里的类型 T 可以表示 S1 也可以表示 S2 ） S1 和 S2 都实现了接口 File，而不用管类型是否还有其他方法。
一个类型实现了任何方法集的为其子集的接口。因此它可能实现了多个不同接口。例如：所有的类型都实现了空接口：
interface{}

与之相似，思考下面这个定义为 Locker 的接口：
type Locker interface {
	Lock()
	Unlock()
}

如果 S1 和 S2 也实现了它：
func (p T) Lock() { … }
func (p T) Unlock() { … }

那它们就实现了两个接口 Locker 和 File。
一个接口 T 可以使用另一个接口 E 来指定方法。这种方式叫做将接口 E 嵌入进接口 T。它把 E 中所有的方法（包括导出和未导出的方法）全部添加进接口 T。
type ReadWriter interface {
	Read(b Buffer) bool
	Write(b Buffer) bool
}

type File interface {
	ReadWriter  // 与添加 ReadWriter 接口中的方法是等价的
	Locker      // 与添加 Locker 接口中的方法是等价的 
	Close()
}

type LockedFile interface {
	Locker
	File        // 无效: Lock, Unlock 不是唯一的
	Lock()      // 无效: Lock 不是唯一的
}

接口 T 不能递归的嵌入进自己或已经嵌入过它的接口。
// 无效: Bad 不能嵌入它自己
type Bad interface {
	Bad
}

// 无效: Bad1 不能嵌入已经引用它的 Bad2
type Bad1 interface {
	Bad2
}
type Bad2 interface {
	Bad1
}

Map类型
map 类型是一种以唯一值作为键的无序集合。
MapType     = "map" "[" KeyType "]" ElementType .
KeyType     = Type .

map的键类型必须能使用比较运算符 == 和 != 进行比较。因此它的键类型不能是函数，map，或者切片。如果键是接口类型，那么比较运算符必须能比较他的动态值。如果不能会抛出一个运行时错误。
map[string]int
map[*T]struct{ x, y float64 }
map[string]interface{}

map中元素的个数叫做它的长度。对于一个map m。它的长度可以通过内置函数 len 获得，而且它的长度可能再运行时发生变化。map 可以再运行时添加和取回元素，页可以使用内置函数 delete移除元素。
可以使用内置函数 make 初始化一个新的且为空的 map。它能指定 map 的类型和预留的空间：
make(map[string]int)
make(map[string]int, 100)

map 的预留空间不会固定住 map 的长度；它可以通过添加一定数量的元素来增加自己的长度（nil map 不能添加元素）。nil map 和空 map 是相等的，只是 nil map 不能添加元素。
Channel类型
channel提供一种手段在并发执行的函数间发送和接收指定类型的值。没有初始化的 channel 是nil。
ChannelType = ( "chan" | "chan" "<-" | "<-" "chan" ) ElementType .

操作符 <- 可以指定 channel 的数据流动方向。如果没有指定方向，channel 默认是双向的。channel 可以通过转换和赋值来限制只读和只写。
chan T          // 可以接收和发送 T 类型的数据
chan<- float64  // 只能发送 float64 类型的值
<-chan int      // 只能接收

<- 与最左侧的 chan 关联：
chan<- chan int    // 等价于 chan<- (chan int)
chan<- <-chan int  // 等价于 chan<- (<-chan int)
<-chan <-chan int  // 等价于 <-chan (<-chan int)
chan (<-chan int)

可以通过内置的 make 函数初始化 channel。make 函数可以指定channel的类型和容量。
make(chan int, 100)

容量是设置了最大能缓存元素的数量。如果没有设置容量或值为 0，channel 就是没有缓存的，这时只有当发送者和接收者都准备好后才会传输数据。而带缓存的 channel 在缓存没有满的时候依然可以成功发送数据，当缓存不为空的时候可以成功接收到数据，值为 nil 的 channel 不能传输数据。
可以通过内置函数 close 关闭 channel。在接收端的第二个返回值可以用来提示接收者在关闭的 channel 是否还包含数据。
channel 可以在发送语句，接收操作中使用。可以不考虑同步性直接在多个 goroutine 中对 channel 调用内置函数 len 和 cap 。channel 的行为和 FIFO 队列相同。举个例子，一个 goruntine 发送数据，另一个 goruntine 接收他们，接收数据的顺序和发送数据的顺序是相同的。
类型的属性和值
类型标识
两个类型可能相同也可能不同。
定义的类型都是不同类型。如果两个类型的底层类型在结构上是相同的，那它们也是相等的。总的来说：

2 个数组的长度和元素类型相同，那么它们就是相同类型。
如果两个切片的元素类型相同那么它们就是相同类型。

如果两个结构体字段顺序相同，并且字段名称、字段类型和 tag 都相同那么它们就是相等的。非导出字段的字段名在不同的包中总是不同的。

如果两个指针的基础类型相同那么他们具有相同类型。

如果两个函数具有相同的参数和返回值列表，并且他们的类型相同那么他们就是相同的，参数的名称不一定要相同。

如果两个接口的方法集完全相同（方法的顺序）。

如果两个 map 类型的键类型和值类型相同那它们就是相等的。

如果两个 channel 类型包含的对象类型和 channel 的方向都是相同的那它们就是相同的。

给出下列声明：
type (
	A0 = []string
	A1 = A0
	A2 = struct{ a, b int }
	A3 = int
	A4 = func(A3, float64) *A0
	A5 = func(x int, _ float64) *[]string
)

type (
	B0 A0
	B1 []string
	B2 struct{ a, b int }
	B3 struct{ a, c int }
	B4 func(int, float64) *B0
	B5 func(x int, y float64) *A1
)

type	C0 = B0

这些类型是相等的：
A0, A1, and []string
A2 and struct{ a, b int }
A3 and int
A4, func(int, float64) *[]string, and A5

B0, B0, and C0
[]int and []int
struct{ a, b *T5 } and struct{ a, b *T5 }
func(x int, y float64) *[]string, func(int, float64) (result *[]string), and A5

B0 和 B1 不是一种类型因为它们是通过类型定义方式分别定义的；func(int, float64) *B0 和 func(x int, y float64) *[]string 是不同的，因为 B0 和 []string 不是相同类型。
可分配性
在以下情况下，可以将 x 分配给类型为 T 的变量（把 x 分配给 T）：

x 的类型为 T
x 的类型 V 和 T 有相同的底层类型并且类型 T 或 V 至少一个定义的类型

T 是一个接口类型并且 x 实现了 T

x 是一个 channel，并且 T 是channel类型，类型V和类型T有相同的元素类型，并且 2 种类型至少有一种不是定义的类型

x 等于 nil 并且 T 是一个指针，函数，切片，map，channel 或接口类型

x 是一个可以表示 T 类型值的无类型常量

代表性
满足以下条件时可以用 T 类型的值表示常量 x：

T 值的集合包括 x
T 是浮点型，而 x 在没有溢出的情况下能够近似成 T 类型。近似规则使用 IEEE 754 round-to-even，负零和无符号的零相同。需要注意的是，常量的值不会为负零，NaN，或无限值。

T 为复数类型，并且 x 的 real(x) 和 imag(x) 部分由复数类型对应的浮点类型（float32 或 float64 ）组成。


x                   T           x 可以表示 T 的值，因为：

''a''                 byte        97 在 byte 类型值的集合中
97                  rune        rune 是 int32 的别名，97 在 32 位整型值的集合中
"foo"               string      "foo" 在字符串值的集合中
1024                int16       1024 在 16 位整型值的集合中
42.0                byte        42 在 8 位无符号整型值的集合中
1e10                uint64      10000000000 在 64 位无符号整型值的集合中
2.718281828459045   float32     2.718281828459045 的近似值 2.7182817 在 float32 类型值的集合中
-1e-1000            float64     -1e-1000 的近视值 IEEE -0.0，等于 0 
0i                  int         0 是整型值
(42 + 0i)           float32     42.0 (0 虚部) 在 float32 类型值的集合中

x                   T           x 不能表示 T 的值，因为：

0                   bool        0 不在布尔值的集合中
''a''                 string      ''a'' 是 rune 类型, 它不在字符串类型的值集合中
1024                byte        1024 不在 8 位无符号整型值的集合中
-1                  uint16      -1 不在 16 位无符号整型值的集合中
1.1                 int         1.1 不是整型值
42i                 float32     (0 + 42i) 不在 float32 类型值的集合中
1e1000              float64     1e1000 取近似值时会溢出成 IEEE

代码块
代码块是用大括号括起来的声明和语句。
Block = "{" StatementList "}" .
StatementList = { Statement ";" } .

除了源码中显式的代码块，也有一些隐式的代码块。

包含所有的Go代码的全局代码块。
包含所有包的代码的包代码块。

包含文件内的所有代码的文件代码块。

每个 if，switch和 for 的范围都会形成隐式的块。

每个 switch 和 select 条件都有自己的代码块。


代码块可以嵌套并且影响作用域。
声明和作用域
一段声明可以给常量，类型，变量，函数，标签，和包绑定标识符。程序中每个标识符都需要声明。相同标识符不能在同一个代码块中声明2次。并且相同标识符不能同时在文件和 package 代码块中声明。
空标识符可以和其他标识符一样在声明中使用。不过它不绑定标识符，等于没有声明。在 package 代码块中 init 标识符只能用做 init 函数的标识符，就像空标识符一样，它不会引入新的绑定。
Declaration   = ConstDecl | TypeDecl | VarDecl .
TopLevelDecl  = Declaration | FunctionDecl | MethodDecl .

声明过的标识符的作用域就是声明标识符所在的作用域。
go使用块来规定词汇的方位：

预定义的标识符具有全局作用域。
所有定义的顶级标识符具有包作用域。

import进来的包的名字标识符具有文件作用域。

方法的接收者，函数参数，返回值变量具有函数作用域。

函数内定义的参量和变量标识符的作用域是标识符被声明到容纳他的块结束。


一个代码块中声明的标识符可以在它内部的代码块中重新声明。在内部代码块的作用域中标识符表示在内部代码块中声明的实体。
pakcage 语句不属于声明。包名不会出现在任何的作用域中。它的作用只是用来标识属于相同包的多个文件并在导入时指定默认包名。
标签的作用域
可以使用标签语句来声明标签，并且可以在 break，continue，goto 语法中使用。如果只声明但没有使用标签时非法的。标签的作用域只有定义时的函数体，早递归函数体中没有作用。
空标识符
空标识符使用下划线 _ 代表。与一般的非空标识符不同，它作为匿名标识符在声明，运算元和赋值语句中都有特殊含义。
预定义的标识符
以下标识符已经在全局作用域中预先声明：
Types:
	bool byte complex64 complex128 error float32 float64
	int int8 int16 int32 int64 rune string
	uint uint8 uint16 uint32 uint64 uintptr

Constants:
	true false iota

Zero value:
	nil

Functions:
	append cap close complex copy delete imag len
	make new panic print println real recover

导出标识符
标识符可以导出供其他包使用。在以下两种情况同时满足时标识符是导出的：

标识符的首字母是大写（Unicode 的 Lu 类）
标识符声明在包作用域或者它是字段名/方法名。

其他任何标识符都不是导出的。
标识符的唯一性
给定一个标识符集合，一个标识符与集合中的每个标识符都不相同，那就认为这个标识符是唯一的。假设有两个标识符，如果它们的拼写不同，或者它们在不同的包中并没有导出，那它们就是不同标识符。相反，其他情况下都认为标识符是相同的。
常量声明
常量声明使用常量表达式绑定一系列标识符。标识符的数量必须等于表达式的数量。左侧第 n 个标识符绑定右侧第 n 个表达式的值。
ConstDecl      = "const" ( ConstSpec | "(" { ConstSpec ";" } ")" ) .
ConstSpec      = IdentifierList [ [ Type ] "=" ExpressionList ] .

IdentifierList = identifier { "," identifier } .
ExpressionList = Expression { "," Expression } .

如果给定类型，常量会指定类型，并且表达式的值必须能对这个类型进行赋值。
如果没有给定类型。常量会转换成相应的表达式类型。如果表达式的值是无类型常量，那么声明的常量也是无类型的，并且常量的标识符代表常量的值。例如：即使小数部分是 0，只要表达式是浮点数字面值，常量标识符也表示为浮点数常量。
const Pi float64 = 3.14159265358979323846
const zero = 0.0         // 无类型浮点数常量
const (
	size int64 = 1024
	eof        = -1  // 无类型整型常量
)
const a, b, c = 3, 4, "foo"  // a = 3, b = 4, c = "foo", 无类型整型和字符串常量
const u, v float32 = 0, 3    // u = 0.0, v = 3.0

括号内的常量声明列表的表达式除了第一个必须声明其他表达式可以不写。空的表达式列表的值和类型都和前面的非空表达式相同。缺省的表达式列表等价于重复之前的表达式。标识符的数量必须等于表达式的数量。iota常量生成器是一个可以快速生成序列值的机制。
const (
	Sunday = iota
	Monday
	Tuesday
	Wednesday
	Thursday
	Friday
	Partyday
	numberOfDays  // 非导出常量
)

Iota
在常量声明中，预定义的标识符 iota 表示连续的无类型整型常量。它的值为常量声明中每个常量定义的位置（从零开始）。它能够用来生成一个关联常量集合：
const ( // iota is reset to 0
	c0 = iota  // c0 == 0
	c1 = iota  // c1 == 1
	c2 = iota  // c2 == 2
)

const ( // iota is reset to 0
	a = 1 << iota  // a == 1
	b = 1 << iota  // b == 2
	c = 3          // c == 3  (没有使用 iota 不过它的值依然递增)
	d = 1 << iota  // d == 8
)

const ( // iota is reset to 0
	u         = iota * 42  // u == 0     (无类型整型常量)
	v float64 = iota * 42  // v == 42.0  (float64 类型常量)
	w         = iota * 42  // w == 84    (无类型整型常量)
)

const x = iota  // x == 0  (iota 被重置)
const y = iota  // y == 0  (iota 被重置)

根据定义，在同一个常量定义中多次使用 iota 会得到相同的值：
const (
	bit0, mask0 = 1 << iota, 1<<iota - 1  // bit0 == 1, mask0 == 0  (iota == 0)
	bit1, mask1                           // bit1 == 2, mask1 == 1  (iota == 1)
	_, _                                  //                        (iota == 2, unused)
	bit3, mask3                           // bit3 == 8, mask3 == 7  (iota == 3)
)

最后一个例子利用了最后一个非空表达式列表的隐式重复。
类型声明
类型声明为类型绑定一个标识符。类型声明有2种方式：类型声明和别名声明。
TypeDecl = "type" ( TypeSpec | "(" { TypeSpec ";" } ")" ) .
TypeSpec = AliasDecl | TypeDef .

Alias声明
别名声明给指定类型绑定一个标识符名称。
AliasDecl = identifier "=" Type .

在标识符作用域内，它作为类型的别名。
type (
	nodeList = []*Node  // nodeList 和 []*Node 是相同类型
	Polar    = polar    // Polar 和 polar 表示相同类型
)

Type 定义
类型定义会创建一个新类型并绑定一个标识符，新类型与给定类型具有相同的底层类型和操作。
TypeDef = identifier Type .

这个类型叫做定义类型，它和其他所有类型都不相同，包括创建它的类型。
type (
	Point struct{ x, y float64 }  // Point 和 struct{ x, y float64 } 是不同类型
	polar Point                   // polar 和 Point 表示不同类型
)

type TreeNode struct {
	left, right *TreeNode
	value *Comparable
}

type Block interface {
	BlockSize() int
	Encrypt(src, dst []byte)
	Decrypt(src, dst []byte)
}

定义类型可以关联该类型的方法。它不会继承原来类型的任何方法。但是接口类型的方法集和类型的结构没有改变。
// Mutex 是一个拥有 Lock 和 Unlock 两个方法的数据类型。
type Mutex struct         { /* Mutex fields */ }
func (m *Mutex) Lock()    { /* Lock implementation */ }
func (m *Mutex) Unlock()  { /* Unlock implementation */ }

// NewMutex 与 Mutex 结构相同不过方法集为空。
type NewMutex Mutex

// PtrMutex 的底层类型 *Mutex 的方法集没有改变，
// 但是 PtrMutex 的方法集为空。
type PtrMutex *Mutex

// *PrintableMutex 包含嵌入字段 Mutex 的 Lock 和 Unlock 方法。
type PrintableMutex struct {
	Mutex
}

// MyBlock 是与 Block 有相同方法集的接口类型
type MyBlock Block

类型定义可以定义方法集不同的布尔值、数字和字符串类型：
type TimeZone int

const (
	EST TimeZone = -(5 + iota)
	CST
	MST
	PST
)

func (tz TimeZone) String() string {
	return fmt.Sprintf("GMT%+dh", tz)
}

变量声明
变量声明可以创建一个或多个变量，并绑定对应的标识符、指定类型和初始值。
VarDecl     = "var" ( VarSpec | "(" { VarSpec ";" } ")" ) .
VarSpec     = IdentifierList ( Type [ "=" ExpressionList ] | "=" ExpressionList ) .

var i int
var U, V, W float64
var k = 0
var x, y float32 = -1, -2
var (
	i       int
	u, v, s = 2.0, 3.0, "bar"
)
var re, im = complexSqrt(-1)
var _, found = entries[name]  // map lookup; only interested in "found"

如果给定一个表达式列表。变量会根据赋值规则使用表达式进行初始化。否则，每个变量都会初始化成变量类型的零值。
如果指定类型，变量会为指定类型。如果没有指定类型，变量会使用分配的初始值类型。如果初始值为无类型常量，它会转换成初始值的默认类型。如果是一个无类型布尔值，那么变量的类型就是 bool。值 nil 不能给没有指定类型的变量赋值。
var d = math.Sin(0.5)  // d is float64
var i = 42             // i is int
var t, ok = x.(T)      // t is T, ok is bool
var n = nil            // illegal

实现的限制：在函数体内声明的变量如果没有使用过编译器需要报错。
短变量声明
短变量声明的语法:
ShortVarDecl = IdentifierList ":=" ExpressionList .

它比正常使用初始化表达式进行变量声明的方式要短，而且不指定类型：
"var" IdentifierList = ExpressionList .

i, j := 0, 10
f := func() int { return 7 }
ch := make(chan int)
r, w := os.Pipe(fd)  // os.Pipe() 返回两个值
_, y, _ := coord(p)  // coord() 返回三个值，我们只关注 y

和常规变量声明不同，即使之前在相同代码块中声明过的变量，也可以在短变量重新声明相同类型的变量，并且保证至少会有一个新的非空变量。总之，只应该在多变量短声明的时候重新声明变量，重新声明并不会使用新的变量，而是给变量分配新值。
field1, offset := nextField(str, 0)
field2, offset := nextField(str, offset)  // 重新声明 offset
a, a := 1, 2                              // 非法：声明了 a 两次并且没有新的变量

短变量声明只能在函数中使用，例如在 if、for、switch语句的上下文中声明临时变量。
函数声明
函数声明为函数绑定标识符。
FunctionDecl = "func" FunctionName Signature [ FunctionBody ] .
FunctionName = identifier .
FunctionBody = Block .

如果函数指定了返回参数。函数体的语句必须以终止语句结束。
func IndexRune(s string, r rune) int {
   for i, c := range s {
   	if c == r {
   		return i
   	}
   }
   // 无效：缺少 return 语句
}

函数声明可以没有函数体。这样的声明提供一个函数声明，并由其他外部实现，例如汇编脚本。
func min(x int, y int) int {
	if x < y {
		return x
	}
	return y
}

func flushICache(begin, end uintptr)  // 由外部实现

方法声明
方法是一个带接收者的函数，方法声明为方法绑定标识符作为方法名并指定方法对应的接收者类型。
MethodDecl = "func" Receiver MethodName Signature [ FunctionBody ] .
Receiver   = Parameters .

接收者通过在方法增加一个额外的参数来指定。这个参数必须是一个非可变参数。它的类型必须是 T 或者 T 的指针（可能包含括号）。T 被称作接收者的基础类型；它不能是指针或接口类型，并且只能在同一个包中定义方法。声明后，我们认为方法绑定了基础类型，并且可以通过 T 或 *T 选择器访问方法名。
非空的接收者标识符在方法签名中必须是唯一的。如果接收者的值没有在该方法中使用，那么接收者标识符可以省略。函数和方法的参数也是一样。
对于一个基础类型。绑定的非空的方法名必须是唯一的。如果基础类型是一个结构体，非空的方法名也不能与结构体字段重复。
给定一个Point类型。声明：
func (p *Point) Length() float64 {
	return math.Sqrt(p.x * p.x + p.y * p.y)
}

func (p *Point) Scale(factor float64) {
	p.x *= factor
	p.y *= factor
}

为类型 *Point绑定了2个方法 Length 和 Scale。
方法的类型就是以接收者作为第一个参数的函数类型，例如 Scale 方法：
func(p *Point, factor float64)

但是以这种方式声明的函数并不是方法。
表达式
表达式通过针对运算元使用运算符和函数来获取计算值。
运算元
运算元代表表达式中的一个简单的。运算元可以是字面值，非空标识符。或括号表达式。
空标识符只能出现在赋值声明的左侧。
Operand     = Literal | OperandName | MethodExpr | "(" Expression ")" .
Literal     = BasicLit | CompositeLit | FunctionLit .
BasicLit    = int_lit | float_lit | imaginary_lit | rune_lit | string_lit .
OperandName = identifier | QualifiedIdent.

修饰标识符
修饰标识符是以包名作为前缀修饰的标识符。包名和标识符都不能为空。
QualifiedIdent = PackageName "." identifier .

修饰标识符可以用来访问不同包（需要先导入）中的标识符。标识符必须是导出的并在包级代码块声明才能够被访问。
math.Sin	// 表示 math 包中的 Sin 函数

复合字面值
复合字面值能为结构体、数组、切片和 map 初始化值。它每次只能创建一个值。字面值由一个字面值类型和使用括号括起来的元素列表组成。元素前也可以声明元素对应的键。
CompositeLit  = LiteralType LiteralValue .
LiteralType   = StructType | ArrayType | "[" "..." "]" ElementType |
                SliceType | MapType | TypeName .
LiteralValue  = "{" [ ElementList [ "," ] ] "}" .
ElementList   = KeyedElement { "," KeyedElement } .
KeyedElement  = [ Key ":" ] Element .
Key           = FieldName | Expression | LiteralValue .
FieldName     = identifier .
Element       = Expression | LiteralValue .

字面值类型的底层类型必须是一个结构体，数组，切片或 map 类型（如果没有指定类型名就会强制执行这个约束）。元素的类型和键都必须能够分配给相应的字段的元素和键类型；没有额外的类型转换。键可以表示结构体的字段名，切片和数组的索引，map 类型的键。对于 map 字面值，所有的元素都必须有键。如果相同字段名或常量值的键对应多个元素就会报错。如果 map 类型的键为非常量类型，请看求值顺序章节。
结构体字面值遵循以下规则：

在结构体中，键必须是它的字段名。
不包含任何键的元素列表的顺序需要与结构体字段的声明顺序相同。

如果一个元素指定了键，那么所有的元素都必须指定键。

包含键的元素列表不需要指定结构体的每个字字段，缺省字段会使用字段类型的零值。

字面值可以不指定元素；这样的字面值等于该类型的零值。

指定非本包的非导出字段会报错。

给定声明：
type Point3D struct { x, y, z float64 }
type Line struct { p, q Point3D }

我们可以使用这种写法：
origin := Point3D{}                            // Point3D 的零值
line := Line{origin, Point3D{y: -4, z: 12.3}}  // line.q.x 的零值

数组和切片遵循以下规则：

每个元素都关联一个数字索引标记元素再数组中的位置。
给元素指定的键会作为它的索引。键必须是能够表示非负的 int 类型值的常量；如果是指定类型的常量，那么常量必须是整型。

元素没有指定键时会使用之前的索引加一。如果第一个元素没有指定键，它的索引为零。


对复合字面值取址会生成指向由字面量初始化的变量的指针。
var pointer *Point3D = &Point3D{y: 1000}

数组字面值需要在类型中指定数组的长度。如果提供的元素少于数组的长度，那么缺少元素的位置将会使用元素类型的零值替代。如果索引超过数组的长度会报错。… 表示数组的长度等于最大元素索引加一。
buffer := [10]string{}             // len(buffer) == 10
intSet := [6]int{1, 2, 3, 5}       // len(intSet) == 6
days := [...]string{"Sat", "Sun"}  // len(days) == 2

切片字面值底层其实就是数组字面值。因此它的长度和容量都是元素的最大索引加一。切片字面值的格式为：
[]T{x1, x2, … xn}

可以在数组上进行切片操作从而获得切片：
tmp := [n]T{x1, x2, … xn}
tmp[0 : n]

在一个数组、切片或 map 类型 T 中。元素或者 map 的键可能有自己的字面值类型，如果字面值类型和元素或者键类型相同，那么对应的类型标识符可以省略。与之类似，如果元素或键的类型为 *T，那么它们的 &T 也可以省略。
[...]Point{{1.5, -3.5}, {0, 0}}     // same as [...]Point{Point{1.5, -3.5}, Point{0, 0}}
[][]int{{1, 2, 3}, {4, 5}}          // same as [][]int{[]int{1, 2, 3}, []int{4, 5}}
[][]Point{{{0, 1}, {1, 2}}}         // same as [][]Point{[]Point{Point{0, 1}, Point{1, 2}}}
map[string]Point{"orig": {0, 0}}    // same as map[string]Point{"orig": Point{0, 0}}
map[Point]string{{0, 0}: "orig"}    // same as map[Point]string{Point{0, 0}: "orig"}

type PPoint *Point
[2]*Point{{1.5, -3.5}, {}}          // same as [2]*Point{&Point{1.5, -3.5}, &Point{}}
[2]PPoint{{1.5, -3.5}, {}}          // same as [2]PPoint{PPoint(&Point{1.5, -3.5}), PPoint(&Point{})}

当复合字面值使用字面值类型的类型名格式出现在 if、for 或 switch 语句的关键字和括号之间并且没有使用圆括号包裹的时候，会引发语法歧义。在这种特殊的情况下字面值的括号会被认为是语句的代码块。为了避免歧义，复合字面值必须用括号括起来。
if x == (T{a,b,c}[i]) { … }
if (x == T{a,b,c}[i]) { … }

下面是合法的数组、切片和 map 的例子：
// list of prime numbers
primes := []int{2, 3, 5, 7, 9, 2147483647}

// vowels[ch] is true if ch is a vowel
vowels := [128]bool{''a'': true, ''e'': true, ''i'': true, ''o'': true, ''u'': true, ''y'': true}

// the array [10]float32{-1, 0, 0, 0, -0.1, -0.1, 0, 0, 0, -1}
filter := [10]float32{-1, 4: -0.1, -0.1, 9: -1}

// frequencies in Hz for equal-tempered scale (A4 = 440Hz)
noteFrequency := map[string]float32{
	"C0": 16.35, "D0": 18.35, "E0": 20.60, "F0": 21.83,
	"G0": 24.50, "A0": 27.50, "B0": 30.87,
}

函数字面值
函数字面值表示一个匿名函数。
FunctionLit = "func" Function .

func(a, b int, z float64) bool { return a*b < int(z) }

函数字面值能分配给变量或直接调用。
函数字面值是一个闭包。它可以引用包裹函数中的变量，这些变量在包裹函数和函数字面值之间是共享的。并且它会一直存在直到生命周期结束。
主要表达式
主要表达式是一元和二元表达式的运算元。
PrimaryExpr =
	Operand |
	Conversion |
	PrimaryExpr Selector |
	PrimaryExpr Index |
	PrimaryExpr Slice |
	PrimaryExpr TypeAssertion |
	PrimaryExpr Arguments .

Selector       = "." identifier .
Index          = "[" Expression "]" .
Slice          = "[" [ Expression ] ":" [ Expression ] "]" |
                 "[" [ Expression ] ":" Expression ":" Expression "]" .
TypeAssertion  = "." "(" Type ")" .
Arguments      = "(" [ ( ExpressionList | Type [ "," ExpressionList ] ) [ "..." ] [ "," ] ] ")" .

x
2
(s + ".txt")
f(3.1415, true)
Point{1, 2}
m["foo"]
s[i : j + 1]
obj.color
f.p[i].x()

选择器
对于一个 x 不是包名的主要表达式，选择器表达式：
x.f

表示 x 的字段或方法 f（有时为 *x）。标识符 f 叫做（字段/方法）选择器。它不能是空标识符。选择器表达式的类型就是 f 的类型。如果 x 是包名。请参考修饰标识符。
选择器 f 可以表示类型 T 的方法或字段 f。也可以表示类型 T 的嵌入方法或字段 f。访问 f 所需穿过的嵌套层数叫做它在类型 T 中的深度。声明在 T 中的字段或方法的深度为 0。声明在 T 的嵌入字段 A 中的方法或字段的深度等于 f 在 A 中的深度加一。
选择器遵循以下原则：

对于非指针/接口类型 T/*T 的值 x，x.f 表示第一层的方法/字段。如果在第一层没有对应的 f，选择器表达式就是非法的。
对于接口类型 I 的值 x，x.f表示动态值 x 的方法名 f。如果接口 I 的方法集中没有 f 方法，选择器就是非法的。

作为例外，如果 x 是一个指针类型并且 (*x).f 是合法的选择器表达式（只能表示字段，不能表示方法）。那么(*x).f 可以简写成 x.f。

在其他情况下，x.f 都是非法的。

如果x是指针类型，并且值为 nil，其中 f 为结构体字段。赋值或取值 x.f 会引起运行时恐慌。

如果x是接口类型，并且值为 nil。调用 x.f  会引起运行时恐慌。

例如给定声明：
type T0 struct {
	x int
}

func (*T0) M0()

type T1 struct {
	y int
}

func (T1) M1()

type T2 struct {
	z int
	T1
	*T0
}

func (*T2) M2()

type Q *T2

var t T2     // with t.T0 != nil
var p *T2    // with p != nil and (*p).T0 != nil
var q Q = p

结果：
t.z          // t.z
t.y          // t.T1.y
t.x          // (*t.T0).x

p.z          // (*p).z
p.y          // (*p).T1.y
p.x          // (*(*p).T0).x

q.x          // (*(*q).T0).x        (*q).x is a valid field selector

p.M0()       // ((*p).T0).M0()      M0 expects *T0 receiver
p.M1()       // ((*p).T1).M1()      M1 expects T1 receiver
p.M2()       // p.M2()              M2 expects *T2 receiver
t.M2()       // (&t).M2()           M2 expects *T2 receiver, see section on Calls

但是下面这种方式是不合法的：
q.M0()       // (*q).M0 is valid but not a field selector

方法表达式
如果 M 在类型 T 的方法集中。那么 T.M 就是能够正常调用的函数。使用与 M 相同的参数只是在参数列表的最前面增加了接收者参数。
MethodExpr    = ReceiverType "." MethodName .
ReceiverType  = TypeName | "(" "*" TypeName ")" | "(" ReceiverType ")" .

假设结构体 T 有两个方法。接收者类型为 T 的 Mv 方法和接收者类型为 *T 的 Mp 方法：
type T struct {
	a int
}
func (tv  T) Mv(a int) int         { return 0 }  // value receiver
func (tp *T) Mp(f float32) float32 { return 1 }  // pointer receiver

var t T

表达式
T.Mv

将会生成一个等价于 Mv 方法只是第一个参数显式声明接受者的函数。它的签名为：
func(tv T, a int) int

这个函数能够通过接收者正常调用，以下5种方式是等价的：
t.Mv(7)
T.Mv(t, 7)
(T).Mv(t, 7)
f1 := T.Mv; f1(t, 7)
f2 := (T).Mv; f2(t, 7)

与之类似：
(*T).Mp

生成表示 Mp 的函数签名：
func(tp *T, f float32) float32

对于一个把值作为接收者的方法，我们可以显式的从指针接收者获得函数：
(*T).Mv

生成表示 Mv 的函数签名：
func(tv *T, a int) int

这样的函数会通过接收者间接的创建一个值作为接收者传入底层方法中。方法内不能修改接收者的值，因为它的地址是在函数的调用栈里面。
最后一个例子。把值作为接收者函数当做指针作为接收者的方法是非法的，因为指针接收者的方法集中不包含值类型的方法集。
通过函数调用语法从方法中获取函数的值。接收者作为调用函数的第一个参数。给定  f :=T.Mv，f 作为f(t,7) 进行调用而不是 t.f(7)。想创建一个绑定接收者的函数可以使用函数字面值或者方法值。
在接口类型中定义函数获取函数值是合法的。最终的函数调用会使用接口类型作为接收者。
方法值
如果表达式 x 拥有静态类型 T 并且 M 在类型 T 的方法集中。x.M 叫做方法值。方法值 x.M 是一个函数值，这个函数和 x.M 拥有相同的参数列表。表达式 x 在计算方法值时会被保存和计算，这个拷贝的副本会作为任何接下来调用的接收者。
类型 T 可能是接口类型也可能不是接口类型。
与方法表达式中讲过的一样，假设类型 T 有两个方法：接收者类型为 T 的 Mv 和接受者类型为 *T 的 Mp ：
type T struct {
	a int
}
func (tv  T) Mv(a int) int         { return 0 }  // value receiver
func (tp *T) Mp(f float32) float32 { return 1 }  // pointer receiver

var t T
var pt *T
func makeT() T

表达式：
t.Mv

生成一个类型的函数值：
func(int) int

以下两种调用是等价的：
t.Mv(7)
f := t.Mv; f(7)

相似的，表达式：
pt.Mp

生成一个类型的函数值：
func(float32) float32

与选择器相同，使用指针调用以值作为接收者的非接口方法会自动将指针解引用：pt.Mv 等价于 (*pt).Mv。
与方法调用相同，使用值调用以指针作为接收者的非接口方法会自动对值取址：pt.Mv 等价于 (&pt).Mv。
f := t.Mv; f(7)   // like t.Mv(7)
f := pt.Mp; f(7)  // like pt.Mp(7)
f := pt.Mv; f(7)  // like (*pt).Mv(7)
f := t.Mp; f(7)   // like (&t).Mp(7)
f := makeT().Mp   // invalid: result of makeT() is not addressable

尽管上面使用的都是非接口类型的例子，不过对于接口类型同样适用。
var i interface { M(int) } = myVal
f := i.M; f(7)  // like i.M(7)

index表达式
主要表达式格式：
a[x]

可以表示数组元素、数组的指针、切片、字符串或 map 类型 a 索引 x 对应的值。x 称作索引或者 map 的键。遵循以下规则：
如果a不是 map 类型：

索引 x 必须是整型或无类型常量。
常量索引必须是非负数且可以使用 int 类型表示。

无类型的常量索引会作为 int 型的值。

索引 x 的范围在 0<=x<len(a) 内，否则就是越界。

对于数组类型 A：

常量索引必须在合法范围内。
如果 x 在运行时越界会引起运行时恐慌。

a[x] 表示数组在索引 x 处的元素。a[x] 的类型就是 A 的元素类型。


对于数组的指针类型：

可以使用 a[x] 表示 (*a)[x]。

对于切片类型 S：

如果 x 在运行时越界会引起运行时恐慌。
a[x] 表示切片在索引 x 处的元素。a[x] 的类型就是 S 的元素类型。

对于字符串类型：

如果字符串 a 为常量，那么常量索引必须在合法范围内。
如果 x 在运行时越界会引起运行时恐慌。

a[x] 表示索引 x 处的非常量字节，它是byte类型。

不能对 a[x] 分配值。

对于 map 类型 M：

必须保证 x 的类型能够给 M 的键分配值。
如果map包含键为 x 的值，a[x] 就是 map 中键 x 对应的值，它的类型就是 M 的元素类型。

如果 map 值为 nil 或不包含这个实体，那么 a[x] 为 M 元素类型的零值。


否则 a[x] 就是非法的。
基于 map[K]V 类型  a 的索引表达式可以使用特殊格式的赋值和初始化语法。
v, ok = a[x]
v, ok := a[x]
var v, ok = a[x]

它会额外生成一个无类型的布尔值。如果 ok 是 true，那么代表在map中有该键，如果没有 ok 为 false。
给一个值为 nil 的 map 类型变量赋值会导致运行时恐慌。
切片表达式
切片表达式可以基于字符串、数组、数组指针、切片创建字符串子串或切片。它有两种变体，一种是简单的格式是指定开始和结束位置，完全格式的语法还可以指定容量。
####### 简单切片表达式
对于数组、字符串、指针数组、切片 a，主要表达式：
a[low:high]

可以构造字符串子串或切片。索引 low 和 high 决定结果切片中的元素。结果切片的索引从 0 开始，长度为 high - low。从数组切分出的切片 s 拥有类型 []int，长度为 3 ，容积为 4。
a := [5]int{1, 2, 3, 4, 5}
s := a[1:4]

s[0] == 2
s[1] == 3
s[2] == 4

为了方便起见，索引值都可以缺省。当 low 缺省时默认从 0 开始。当缺 high 缺省时默认的取切片的长度。
a[2:]  // same as a[2 : len(a)]
a[:3]  // same as a[0 : 3]
a[:]   // same as a[0 : len(a)]

如果 a 是一个数组指针，那么 a[low:high] 可以表示 (*a)[low : high]。
对于数组或者字符串，索引的范围是0<=low<=high<=len(a)。对于切片，最大的索引值可以为切片的容量，而不是切片的长度。常量索引必须为非负数，且能够转换成 int 类型。对于数组或者常量字符串。常量索引值必须在合法范围内。如果2个索引都是常量。low 必须小于 high。如果索引在运行时访问了非法内存，程序会发生运行时恐慌。
除了无类型字符串，对于切片和字符串的操作结果是非常量类型的值，它的类型与运算元相同。如果运算元为无类型字符串，那么结果类型会为 string。如果把数组作为运算元，它必须是可寻址的，并且获得的切片和原数组具有同一元素类型。
如果切片运算元为 nil，那么结果也是 nil。否则结果切片会和运算元共享相同的底层无类型数组。
完全切片表达式
对于数组，数组指针或非字符串切片，主要表达式为：
a[low : high : max]

它会构造一个同类型切片，并具有与简单切片表达式的 a[low:high] 相同的长度和元素。另外，它还可以把切片的容量设置为 max - low。这时只有第一个索引可以为缺省值，默认为零。从数组中获得切片以后：
a := [5]int{1, 2, 3, 4, 5}
t := a[1:3:5]

切片 t 为 []int 类型，长度为 2，容量为 4，并且元素为：
t[0] == 2
t[1] == 3

和简单切片表达式一样，如果 a 是数组指针 ，那么 a[low:high:max] 可以简写为 (*a)[low:high:max]。如果切分操作元是数组，那么这个数组必须是可以寻址的。
如果索引必须在 0 <= low <= high <= max <= cap(a) 范围内。常量索引不能是负数并且能够使用 int 类型表示；对于数组，索引必须在合法范围内。如果有多个索引都是常量的，那么所有索引都需要在合法范围内。如果索引是非法的，会引起运行时恐慌。
类型断言
对于接口类型 x 和类型 T，主要表达式：
x.(T)

可以断言 x 不是 nil  且 x 的值是 T 类型。标记 x.(T) 叫做类型断言。
更确切的说，如果 T 不是接口类型，那么 x.(T) 将会断言动态类型 x 的类型是不是 T。
这时，T 必须实现了 x 的（接口）类型。否则断言会是非法的因为 x 不能保存 T 类型的值。如果 T 是接口类型，那么可以断言动态类型 x 是否实现了 T 接口。
如果类型断言成功，表达式的值为 x 的值，但它的类型是T。如果断言失败，将会导致运行时恐慌。换句话说，即使 x 是运行时确定的，x.(T) 也必须是编程时就确认存在的。
var x interface{} = 7          // x 拥有动态类型 int 值为 7
i := x.(int)                   // i 为 int 类型值为 7

type I interface { m() }

func f(y I) {
   s := y.(string)        // 非法: 字符串没有实现接口 I （缺少 m 方法）
   r := y.(io.Reader)     // r 拥有接口 io.Reader 所以 y 的动态类型必须同时实现 I 和 io.Reader
   …
}

类型断言可以使用特定格式的赋值和初始化语句。
v, ok = x.(T)
v, ok := x.(T)
var v, ok = x.(T)
var v, ok T1 = x.(T)

这时将会额外生成一个无类型的布尔值。如果断言成功，ok返回 true，否则是 false。并且 v 会是 T 类型的零值。这时不会有恐慌发生。
调用
给定函数类型为 F 的表达式 f：
f(a1, a2, … an)

可以使用 a1,a2…an 来调用函数 f。除一种特殊情况之外，函数参数必须是对应 F 函数参数类型的单值表达式，且在函数调用前就已经完成求值。表达式的结果类型是 f 的结果类型。函数调用和方法调用相似，只是方法额外需要一个接收者类型。
math.Atan2(x, y)  // function call
var pt *Point
pt.Scale(3.5)     // method call with receiver pt

在函数调用中，函数的值和参数是按照顺序求值的。在计算之后作为参数会传进函数，函数开始执行。当函数执行完成后返回的参数将会返回给函数的调用者。
调用值为 nil 的函数会导致运行时恐慌。
作为特例，如果函数或者方法的返回值等于参数列表的个数，那么会嵌套调用。这将把返回值直接赋值给下一次调用函数的参数。
func Split(s string, pos int) (string, string) {
	return s[0:pos], s[pos:]
}

func Join(s, t string) string {
	return s + t
}

if Join(Split(value, len(value)/2)) != value {
	log.Panic("test fails")
}

如果 x 的方法集中包含 m 那么 x.m() 是合法的。并且参数列表和 m 的参数列表相同。如果x是可寻址的，那么那么x指针的方法集(&x).m()可以简写成x.m()。
var p Point
p.Scale(3.5)

没有方法类型，也没有方法字面值。
通过 ... 来传递参数
如果 f 的最后一个参数 p 的类型是 ...T。那么在函数内部 p 参数的类型就是 []T。如果 f 调用时没有传入 p 对应的参数，那么p为 nil。否则这些参数会以切片方式传入，在新的底层切片中。切片中的类型都是能赋值给类型 T 的值。这个切片的长度和容量在不同的调用中有所不同。
给定函数调用：
func Greeting(prefix string, who ...string)
Greeting("nobody")
Greeting("hello:", "Joe", "Anna", "Eileen")

在 Greeting 中，第一次调用时，who是 nil 类型。而在第二次调用时是[]string{"Joe", "Anna", "Eileen"}。
如果在调用的时候的最后一个参数是[]T，那么我们可以使用...来将切片中的值依次赋值给参数列表。
给定切片s并且调用:
s := []string{"James", "Jasmine"}
Greeting("goodbye:", s...)

z 在 Greeting。中 who 会和切片 s 共享相同的底层数组。
操作符
操作符用来连接运算元。
Expression = UnaryExpr | Expression binary_op Expression .
UnaryExpr  = PrimaryExpr | unary_op UnaryExpr .

binary_op  = "||" | "&&" | rel_op | add_op | mul_op .
rel_op     = "==" | "!=" | "<" | "<=" | ">" | ">=" .
add_op     = "+" | "-" | "|" | "^" .
mul_op     = "*" | "/" | "%" | "<<" | ">>" | "&" | "&^" .

unary_op   = "+" | "-" | "!" | "^" | "*" | "&" | "<-" .

比较运算符在此处讨论。对于其他二元操作符，两个操作元的类型必须是相同的，除了位移和无类型常量。针对常量的操作，请看常量表达式章节。
除了位移操作，如果其中一个操作符是无类型常量，而另个不是，那么无类型的常量会转换成另一个运算元的类型。
在右移表达式中的运算元必须是无符号的整数或者可以转换成 uint 的无类型的常量。如果左移一个无类型常量那么结果依然是无类型的。他首先会转换成指定类型。
var s uint = 33
var i = 1<<s           // 1 has type int
var j int32 = 1<<s     // 1 has type int32; j == 0
var k = uint64(1<<s)   // 1 has type uint64; k == 1<<33
var m int = 1.0<<s     // 1.0 has type int; m == 0 if ints are 32bits in size
var n = 1.0<<s == j    // 1.0 has type int32; n == true
var o = 1<<s == 2<<s   // 1 and 2 have type int; o == true if ints are 32bits in size
var p = 1<<s == 1<<33  // illegal if ints are 32bits in size: 1 has type int, but 1<<33 overflows int
var u = 1.0<<s         // illegal: 1.0 has type float64, cannot shift
var u1 = 1.0<<s != 0   // illegal: 1.0 has type float64, cannot shift
var u2 = 1<<s != 1.0   // illegal: 1 has type float64, cannot shift
var v float32 = 1<<s   // illegal: 1 has type float32, cannot shift
var w int64 = 1.0<<33  // 1.0<<33 is a constant shift expression

运算符优先级
一元运算符拥有最高优先级。++ 和 – 是语句而不是表达式，他们在运算符的优先级之外。所以 (*p)++ 和 *p++ 是一样的。
二元运算符有 5 个优先级。乘法运算符在最高级，紧接着是加法运算符。比较运算符，&& 运算符，最后是 ||。
Precedence    Operator
    5             *  /  %  <<  >>  &  &^
    4             +  -  |  ^
    3             ==  !=  <  <=  >  >=
    2             &&
    1             ||

相同优先级的二元运算符的执行顺序是由左到右。例如 x/y*z和(x/y)*z 是一样的。
+x
23 + 3*x[i]
x <= f()
^a >> b
f() || g()
x == y+1 && <-chanPtr > 0

算数运算符
算数运算符应用在 2 个数字值之间，别切生成一个相同类型的值作为第一个运算元。四种算数运算符(+,-,*,/)应用在数字，浮点，复合类型之中。+ 也可以用于字符串。位运算和位移运算只适用于整数。
+    sum                    integers, floats, complex values, strings
-    difference             integers, floats, complex values
*    product                integers, floats, complex values
/    quotient               integers, floats, complex values
%    remainder              integers

&    bitwise AND            integers
|    bitwise OR             integers
^    bitwise XOR            integers
&^   bit clear (AND NOT)    integers

<<   left shift             integer << unsigned integer
>>   right shift            integer >> unsigned integer

数字运算符
对于两个整数 x 和 y。整数商 q=x/y 和余数 r=x%y 遵循以下规律。
x = q*y + r  and  |r| < |y|

x/y 截断为 0。
x     y     x / y     x % y
 5     3       1         2
-5     3      -1        -2
 5    -3      -1         2
-5    -3       1        -2

作为这个规则的例外情况，如果 x 非常大，那么 q=x/-1 等于 x。
x, q
int8                     -128
int16                  -32768
int32             -2147483648
int64    -9223372036854775808

如果除数是一个常量。那么它不能是 0，如果除数在运行时为 0，会导致运行时恐慌。如果除数是负数并且除数是：
x     x / 4     x % 4     x >> 2     x & 3
 11      2         3         2          3
-11     -2        -3        -3          1

位移运算符移动左侧运算元右侧元算元指定的位数。如果左侧是有符号整型，那它就实现了位移运算，如果是无符号整数使用逻辑位移。位移运算没有上限，位移操作让左边运算元位移 n 个 1。x<<1 和 x*2 是相等的。并且 x>>1 和 x/2 是相同的。
对于整数运算元，一元运算符+-^定义如下：
+x                          is 0 + x
-x    negation              is 0 - x
^x    bitwise complement    is m ^ x  with m = "all bits set to 1" for unsigned x
                                      and  m = -1 for signed x

整型溢出
对于无符号的值，运算符+-*和<<都是2禁止运算。这里的n是无符号类型的宽度，无符号整型将会丢弃溢出的位，并且程序将会返回wrap around。
对于有符号的整数，操作符+=*<<都会溢出并且值存在，并且代表相应的有符号的值。在运算时不会抛出异常。标一起不会报错。所以不是所有情况下x<x+1都成立。
浮点数运算符
对于浮点数和其他复杂数字，+x和x是一样的，-x是x的对立面。除了IEEE-754还没有指定浮点数除0或者复数的结果。是否抛出异常将会依赖其具体实现。
一种实现可以合并多个浮点操作进一个操作，有可能是夸语句的，并且他的结果可能和依次单独执行的结果不一样。1个浮点数类型将会转变成目标的精度，防止四舍五入的融合。
// FMA allowed for computing r, because x*y is not explicitly rounded:
r  = x*y + z
r  = z;   r += x*y
t  = x*y; r = t + z
*p = x*y; r = *p + z
r  = x*y + float64(z)

// FMA disallowed for computing r, because it would omit rounding of x*y:
r  = float64(x*y) + z
r  = z; r += float64(x*y)
t  = float64(x*y); r = t + z

字符串
字符串可以使用+和+=操作符。
s := "hi" + string(c)
s += " and good bye"

字符串想家将会创建一个新的字符串。
比较运算符
比较运算符比较连个运算元，并且生成一个无类型的布尔值。
==    equal
!=    not equal
<     less
<=    less or equal
>     greater
>=    greater or equal

在任何比较运算元中2种类型必须是可以分配的。
使用等于运算符==和!=的运算元必须是可比较的。使用顺序运算符<,<=,>和>=必须是可比较的。这些限制导致比较运算符被定义成以下的方式。

布尔值是可比较的，两个布尔值当他们同为true或者false的使用是相等的
整数值是可比较和排序的

浮点数是可比较和排序的，具体定义在IEEE-754标准中。

复数是可比较的，2个复数当实部和虚部都相等时就是相等的。

字符串是可以比较和排序的。是按照字节顺序排序。

指针式可以排序的，连个指针当指向相同变量时是相同的，或者他们2个都是nil。指向一个为非配的变量的结果是未定义的。

channel是可比较的。当两个管道是用同一个make出来的，或者都是nil时时相等的。

接口值时可以比较的，2个接口值时相等的如果2个标识符的动态类型是一样的或者他们都是nil。

一个非接口类型的值x和一个接口类型的值T在非接口类型是可以比较的并且非接口类型实现了接口是是可以比较的。当他们的动态类型类型相同时时相等的。

当结构体内的所有字段都是可以比较的时候，他是可以比较的。连个结构体的值当非空字段都相等时他们是相等的。

数组类型的值时可比较的，如果数组的原属时可以比较的，那么当数组的所有值是相等的时候他们就是相等的。


使用两个动态类型的标识符来比较接口的值。如果这个类型的值时不可比较的，那么将会引起一个panic。这个行为不仅仅时接口，数组结构体接口字段都有这个问题。
切片，map，和函数值都是不可比较的，然而，作为一个特殊的例子，切片，map和函数的值的nil时可以比较的，指针，channel和接口的值nil也是可以比较的。
const c = 3 < 4            // c is the untyped boolean constant true

type MyBool bool
var x, y int
var (
	// The result of a comparison is an untyped boolean.
	// The usual assignment rules apply.
	b3        = x == y // b3 has type bool
	b4 bool   = x == y // b4 has type bool
	b5 MyBool = x == y // b5 has type MyBool
)

逻辑操作符
逻辑运算符使用布尔值值，并且生成一个相同类型的结果值作为操作元。右面的操作元计算是有条件的。
&&    conditional AND    p && q  is  "if p then q else false"
||    conditional OR     p || q  is  "if p then true else q"
!     NOT                !p      is  "not p"

地址操作符
以类型 T 的 x 作为运算元，取址操作 &x 会生成一个类型为 *T 并指向 x 的指针。运算元必须是能够取址的，它可以是一个变量，指针，切片的取值操作；或是一个可取址结构体的字段选择器；或是对于可取址数组的索引取值操作。作为寻址能力的例外，x 可能是一个复合字面值。如果对 x 进行取址操作将会 panic，&x 也会 panic。
对于一个 *T 类型的运算元 x，指针解引用 *x 表示 x 指向的 T 类型。如果 x 为 nil，那么解引用 *x 会 panic。
&x
&a[f(2)]
&Point{2, 3}
*p
*pf(x)

var x *int = nil
*x   // causes a run-time panic
&*x  // causes a run-time panic

接收操作符
对于管道类型的运算元 ch，接收操作 <-ch 返回值是管道 ch 接收到的值。带方向的管道需要有接受权限，接收操作的类型也是通道的元素类型。表达式会一直阻塞直到接收到返回值。从 nil 通道接收值会一直阻塞。从一个已经关闭的通道接收数据会在其他数据都被接收以后生成该通道元素类型的零值。
v1 := <-ch
v2 = <-ch
f(<-ch)
<-strobe  // wait until clock pulse and discard received value

接收数据的表达式可以使用赋值表达式。
x, ok = <-ch
x, ok := <-ch
var x, ok = <-ch
var x, ok T = <-ch

它还可以生成一个额外的无类型布尔值来表示通道是否关闭。如果 ok 为 true 说明获取到的是发送到通道内的数据，而 false 它就返回一个零值因为通道内没有元素且已经关闭。
类型转换
类型转换表达式 T(x) 其中 T 代表类型，x 代表可以转换成 T 类型的表达式。
Conversion = Type "(" Expression [ "," ] ")" .

如果类型是以 * 或 <- 开头，或以关键字 func 开头并且没有返回值列表，那么它必须用括号括起来避免歧义：
*Point(p)        // same as *(Point(p))
(*Point)(p)      // p is converted to *Point
<-chan int(c)    // same as <-(chan int(c))
(<-chan int)(c)  // c is converted to <-chan int
func()(x)        // function signature func() x
(func())(x)      // x is converted to func()
(func() int)(x)  // x is converted to func() int
func() int(x)    // x is converted to func() int (unambiguous)

常量 x 可以在可以用类型 T 表示时自动转换。作为一个特例，整数常量 x 可以转换成字符串类型就和非常量 x 一样。
对常量的转换会生成一个指定类型的常量。
uint(iota)               // iota value of type uint
float32(2.718281828)     // 2.718281828 of type float32
complex128(1)            // 1.0 + 0.0i of type complex128
float32(0.49999999)      // 0.5 of type float32
float64(-1e-1000)        // 0.0 of type float64
string(''x'')              // "x" of type string
string(0x266c)           // "♬" of type string
MyString("foo" + "bar")  // "foobar" of type MyString
string([]byte{''a''})      // not a constant: []byte{''a''} is not a constant
(*int)(nil)              // not a constant: nil is not a constant, *int is not a boolean, numeric, or string type
int(1.2)                 // illegal: 1.2 cannot be represented as an int
string(65.0)             // illegal: 65.0 is not an integer constant

非常量 x 可以在以下情况下转换成类型 T：

x 可以给类型 T 赋值
忽略的结构体标签，x 的类型和 T 具有相同的底层类型

忽略的结构体标签，x 的类型和 T 都是指针类型，并且指针所指的类型具有相同的底层类型

x 的类型和 T 都是整数或者浮点数类型

x 的类型和 T 都是复数类型

x 是一个字符串而 T 时字节切片或者 rune 切片

在比较两个结构体类型的时候会忽略结构体标签：
type Person struct {
	Name    string
	Address *struct {
		Street string
		City   string
	}
}

var data *struct {
	Name    string `json:"name"`
	Address *struct {
		Street string `json:"street"`
		City   string `json:"city"`
	} `json:"address"`
}

var person = (*Person)(data)  // ignoring tags, the underlying types are identical

这个规则也适用于数字类型与字符串类型间的相互转换。这个转换可能会改变 x 的值并且会增加运行时消耗。包 unsafe 实现了这个功能底层的限制。
数字之间的转换
对于非常量的数字转换，需要遵守以下规则：

在转换整型数字时，如果是一个有符号整型，它是继承有符号的无限精度；否则就不用继承符号。转换时会截断数字以适应类型的大小。例如：如果 v:=uint16(0x10F0)，然后 ``uint32(int8(v)) == 0xFFFFFFF0 。类型转换总是生成有效值，并且永远不会溢出。
如果要将浮点数转换成整型，会丢弃小数部分（截断为零）。

如果要将整型或浮点型转换成浮点数类型，或或者一个复数转换成其他复数类型，结果会四舍五入成指定精度。例如： 可以使用超出IEEE-754 32位数的附加精度来存储float32类型的变量x的值，但float32（x）表示将x的值舍入为32位精度的结果。x + 0.1 会使用超过 32 位的精度，而 float32(x+0.1) 不会。


在所有浮点数和复数的非常量转换中，如果结构类型不能成功表示数据，那么结果将会依赖于具体平台实现。
字符串的类型转换

转换一个有符号或者无符号的整型值会转换成对应的 UTF-8 表示整型值。不在范围内的 Unicode 代码点会转换成 “\uFFFD”。

string(''a'')       // "a"
string(-1)        // "\ufffd" == "\xef\xbf\xbd"
string(0xf8)      // "\u00f8" == "ø" == "\xc3\xb8"
type MyString string
MyString(0x65e5)  // "\u65e5" == "日" == "\xe6\x97\xa5"


将字节切片转换成字符串类型会生成一个由切片元素组成的字符串

string([]byte{''h'', ''e'', ''l'', ''l'', ''\xc3'', ''\xb8''})   // "hellø"
string([]byte{})                                     // ""
string([]byte(nil))                                  // ""

type MyBytes []byte
string(MyBytes{''h'', ''e'', ''l'', ''l'', ''\xc3'', ''\xb8''})  // "hellø"


将 rune 切片转换成字符串类型会生成一个由切片元素组成的字符串

string([]rune{0x767d, 0x9d6c, 0x7fd4})   // "\u767d\u9d6c\u7fd4" == "白鵬翔"
string([]rune{})                         // ""
string([]rune(nil))                      // ""

type MyRunes []rune
string(MyRunes{0x767d, 0x9d6c, 0x7fd4})  // "\u767d\u9d6c\u7fd4" == "白鵬翔"


将字符串转换成字节切片会生成由字符串中每个字节组成的切片

[]byte("hellø")   // []byte{''h'', ''e'', ''l'', ''l'', ''\xc3'', ''\xb8''}
[]byte("")        // []byte{}

MyBytes("hellø")  // []byte{''h'', ''e'', ''l'', ''l'', ''\xc3'', ''\xb8''}


将字符串转换成 rune 切片会生成由字符串中每个 Unicode 代码点组成的切片

[]rune(MyString("白鵬翔"))  // []rune{0x767d, 0x9d6c, 0x7fd4}
[]rune("")                 // []rune{}

MyRunes("白鵬翔")           // []rune{0x767d, 0x9d6c, 0x7fd4}

常量表达式
常量表达式只包含常量运算元并且在编译程序时就已经计算完成。
无类型布尔值，数值和字符串常量都可以当作运算元。除了位置操作符，如果二元运算符石不同类型的常量，操作元，和非布尔值，和即将在接下来出现的：整型，rune，浮点数和复数类型。例如：一个无类型整型常量减去无类型复数常量，结果为复数常量。
一个常量的比较运算会生成无类型的布尔常量。如果左移运算是一个无类型常量，结果会是一个整型常量。它会和原来常量为相同类型。其他与无类型常量的运算都会生成相同类型的结果（布尔值，整型，浮点数，复数，字符串常量）。
const a = 2 + 3.0          // a == 5.0   (untyped floating-point constant)
const b = 15 / 4           // b == 3     (untyped integer constant)
const c = 15 / 4.0         // c == 3.75  (untyped floating-point constant)
const Θ float64 = 3/2      // Θ == 1.0   (type float64, 3/2 is integer division)
const Π float64 = 3/2.     // Π == 1.5   (type float64, 3/2. is float division)
const d = 1 << 3.0         // d == 8     (untyped integer constant)
const e = 1.0 << 3         // e == 8     (untyped integer constant)
const f = int32(1) << 33   // illegal    (constant 8589934592 overflows int32)
const g = float64(2) >> 1  // illegal    (float64(2) is a typed floating-point constant)
const h = "foo" > "bar"    // h == true  (untyped boolean constant)
const j = true             // j == true  (untyped boolean constant)
const k = ''w'' + 1          // k == ''x''   (untyped rune constant)
const l = "hi"             // l == "hi"  (untyped string constant)
const m = string(k)        // m == "x"   (type string)
const Σ = 1 - 0.707i       //            (untyped complex constant)
const Δ = Σ + 2.0e-4       //            (untyped complex constant)
const Φ = iota*1i - 1/1i   //            (untyped complex constant)

对一个无类型整数，rune，或浮点数应用内置的 complex 函数会生成无类型的复数常量。
const ic = complex(0, c)   // ic == 3.75i  (untyped complex constant)
const iΘ = complex(0, Θ)   // iΘ == 1i     (type complex128)

常量表达式总是一个明确的值；中间值和常量自己可以比语言所支持的精度更高，下面的声明是合法的：
const Huge = 1 << 100         // Huge == 1267650600228229401496703205376  (untyped integer constant)
const Four int8 = Huge >> 98  // Four == 4                                (type int8)

常量的除法的除数不能为 0:
3.14 / 0.0   // illegal: division by zero

定义了类型的常量的精度必须根据常量类型定义。所以下面的常量表达式是非法的：
uint(-1)     // -1 cannot be represented as a uint
int(3.14)    // 3.14 cannot be represented as an int
int64(Huge)  // 1267650600228229401496703205376 cannot be represented as an int64
Four * 300   // operand 300 cannot be represented as an int8 (type of Four)
Four * 100   // product 400 cannot be represented as an int8 (type of Four)

补码使用的一元操作符 ^ 对于非常量的匹配模式：补码对于无符号常量为 1，对于有符号和无类型常量为 -1。
^1         // untyped integer constant, equal to -2
uint8(^1)  // illegal: same as uint8(-2), -2 cannot be represented as a uint8
^uint8(1)  // typed uint8 constant, same as 0xFF ^ uint8(1) = uint8(0xFE)
int8(^1)   // same as int8(-2)
^int8(1)   // same as -1 ^ int8(1) = -2

实现限制：编译器在处理无类型浮点数和复数时会取近似值；具体请看常量章节。这个取近似值的操作在浮点数在整数上下文时会产生无效值，即使在计算过后是一个整型。
运算优先级
在包级别，初始化的依赖性由变量声明的初始化表达式顺序决定。否则，当计算表达式内的操作数时，赋值，返回语句，所有函数调用，方法调用，和通信操作都会由左向右计算。
例如，在函数作用域中的赋值：
y[f()], ok = g(h(), i()+x[j()], <-c), k()

函数调用和通信的发生顺序为：f()，h()，i()，j()，<-c，g() 和 k()。但是对 y 和 x 的取值操作没有指定。
a := 1
f := func() int { a++; return a }
x := []int{a, f()}            // x may be [1, 2] or [2, 2]: evaluation order between a and f() is not specified
m := map[int]int{a: 1, a: 2}  // m may be {2: 1} or {2: 2}: evaluation order between the two map assignments is not specified
n := map[int]int{a: f()}      // n may be {2: 3} or {3: 3}: evaluation order between the key and the value is not specified

在包级别，依赖的初始化顺序会覆盖这个从左向右的规则：
var a, b, c = f() + v(), g(), sqr(u()) + v()

func f() int        { return c }
func g() int        { return a }
func sqr(x int) int { return x*x }

// functions u and v are independent of all other variables and functions

语句
语句控制程序的执行。
Statement =
	Declaration | LabeledStmt | SimpleStmt |
	GoStmt | ReturnStmt | BreakStmt | ContinueStmt | GotoStmt |
	FallthroughStmt | Block | IfStmt | SwitchStmt | SelectStmt | ForStmt |
	DeferStmt .

SimpleStmt = EmptyStmt | ExpressionStmt | SendStmt | IncDecStmt | Assignment | ShortVarDecl .

终止语句
终止语句会阻止相同代码块中下面所有语句的执行。以下语句属于终止语句：

return 和 goto 语句
对内置 panic 函数的调用

代码块结束

if 语句中：

else 分支

所有分支末尾

for语句中：


break 语句和循环结束


switch 语句：


在 switch 语句中没有 break 语句，

有一个默认的 case

语句列表中的每个 case 语句和有可能存在的 fallthrough 语句


select 语句中：


没有 break 语句

每个 case 中的语句列表，如果包含默认 case

所有其他语句都不是中断语句。
如果语句序列不为空并且最后一个非空语句是终止语句，那么语句序列就以终结语句结尾。
空语句
空语句不做任何事情。
EmptyStmt = .

标签语句
标签语句可以作为 goto，break 和 continue 语句的目标。
LabeledStmt = Label ":" Statement .
Label       = identifier .

Error: log.Panic("error encountered")

表达式语句
除了特定的内置函数，一般的函数、方法和接收操作都可以出现在表达式语句的上下文中。这些语句可以使用括号括起来。
ExpressionStmt = Expression .

下面的内置函数不允许出现在语句的上下文中：
append cap complex imag len make new real
unsafe.Alignof unsafe.Offsetof unsafe.Sizeof

h(x+y)
f.Close()
<-ch
(<-ch)
len("foo")  // illegal if len is the built-in function

发送语句
发送语句可以向通道发送一个值。通道表达式必须是通道类型，通道方向必须允许发送操作，并且值类型是可以分配给通道元素通道类型。
SendStmt = Channel "<-" Expression .
Channel  = Expression .

通道类型和值表达式会在发送之前求值。发送操作会一致阻塞，直到可以进行发送操作。如果接收者已经准备好向没有缓存的通道发送值可以立即执行。如果通道内还有缓存空间，向通道内发送值也会立即执行。向关闭的通道发送数据会导致运行时恐慌。像值为 nil 的通道发送数据会一直阻塞。
ch <- 3  // send value 3 to channel ch

递增/递减语句
“++” 和 “–” 语句可以递增或者递减运算元一个无类型常量 1。作为一个赋值语句，运算元必须是可寻址的或者 map 的索引表达式。
IncDecStmt = Expression ( "++" | "--" ) .

下面的赋值语句在语义上是等价的：
IncDec statement    Assignment
x++                 x += 1
x--                 x -= 1

赋值
Assignment = ExpressionList assign_op ExpressionList .

assign_op = [ add_op | mul_op ] "=" .

所有左侧运算元都必须是可寻址的、map 索引表达式或空标识符其中之一。运算元可以用括号括起来。
x = 1
*p = f()
a[i] = 23
(k) = <-ch  // same as: k = <-ch

对于赋值操作 x op= y 其中 op 为二元运算符，它和 x=x op (y) 是等价的，不过它只计算一次 x。op= 是单独的一个词汇单元，在赋值操作中左侧表达式和右侧表达式必须都是单值表达式，并且左侧表达式不能是空白标识符。
a[i] <<= 2
i &^= 1<<n

元祖赋值语句会把运算返回的多个值分别分配给变量列表。它有两种格式，第一种：它是返回多值的表达式，例如函数调用、通道和 map 运算、类型断言。左侧运算元的数量必须等于返回值的数量。如果函数返回两个值：
x, y = f()

它会将第一个返回值分配给 x ，把第二个返回值分配给 y。第二种格式中，左侧运算元的数量必须等于右侧运算元的数量。每个表达式都只能返回单一值，右侧第 n 个值会赋值给左侧第 n 个变量。
one, two, three = ''一'', ''二'', ''三''

空标识符可以在分配时忽略一个右面位置的表达式：
_ = x       // evaluate x but ignore it
x, _ = f()  // evaluate f() but ignore second result value

赋值分为两个阶段。首先会计算左侧运算元的索引表达式和指针的解引用工作并以一定顺序计算右侧表达式的值。
然后依次对左侧运算元赋值。
a, b = b, a  // exchange a and b

x := []int{1, 2, 3}
i := 0
i, x[i] = 1, 2  // set i = 1, x[0] = 2

i = 0
x[i], i = 2, 1  // set x[0] = 2, i = 1

x[0], x[0] = 1, 2  // set x[0] = 1, then x[0] = 2 (so x[0] == 2 at end)

x[1], x[3] = 4, 5  // set x[1] = 4, then panic setting x[3] = 5.

type Point struct { x, y int }
var p *Point
x[2], p.x = 6, 7  // set x[2] = 6, then panic setting p.x = 7

i = 2
x = []int{3, 5, 7}
for i, x[i] = range x {  // set i, x[2] = 0, x[0]
	break
}
// after this loop, i == 0 and x == []int{3, 5, 3}

在赋值语句中每个值都必须能分配给左侧指定类型的值。除了以下特例：

任何类型都能分配给空标识符。
如果把无类型常量分配给接口类型或者空标识符，它会转换成默认类型。

如果无类型的布尔值分配给了接口类型或者空标识符，它会先转换成 bool 类型。


if 语句
if 语句根据布尔值表达式的值来决定执行条件分支的代码。如果表达式为真，就执行 if 分支内的代码，否则执行 else 分支的代码。
IfStmt = "if" [ SimpleStmt ";" ] Expression Block [ "else" ( IfStmt | Block ) ] .

if x > max {
	x = max
}

表达式可能先于普通语句，它会在表达式求值之前发生。
if x := f(); x < y {
	return x
} else if x > z {
	return z
} else {
	return y
}

switch 语句
for 语句
for 语句可以用来重复执行一段代码。它有三种格式：迭代器可以是单一条件、for 分句或者 range 语句。
ForStmt = "for" [ Condition | ForClause | RangeClause ] Block .
Condition = Expression .

单一条件的 for 语句
这种情况下 for 会在条件为 true 时一直重复。条件会在每次迭代时都重新计算。如果没有指定条件，默认一直为 true。
for a < b {
	a *= 2
}

带分句的 for 语句
带分句的 for 语句也是由条件控制，只是它有一个初始化和寄送的过程。例如赋值、递增或者递减语句。初始化语句可以是短变量声明，但是寄送语句不能。在初始化语句中声明的变量可以在迭代过程中使用。
ForClause = [ InitStmt ] ";" [ Condition ] ";" [ PostStmt ] .
InitStmt = SimpleStmt .
PostStmt = SimpleStmt .

for i := 0; i < 10; i++ {
	f(i)
}

如果初始化语句非空，它会在进入迭代前执行一次；post 语句在每次循环后都会执行一次。在只有条件的情况下可以省略分号。如果缺省条件语句，默认为 true。
for cond { S() }    is the same as    for ; cond ; { S() }
for      { S() }    is the same as    for true     { S() }

带 range 分句的 for 语句
带 range 分句的 for 语句可以访问数组、切片、字符串、map 的所有元素，还可以从通道中接收值。迭代获得元素分配给了相应的迭代变量并执行代码块。
RangeClause = [ ExpressionList "=" | IdentifierList ":=" ] "range" Expression .

右侧的 range 分句表达式叫做 range 表达式，它可能是数组、数组的指针、切片、字符串、map 或通道接收者类型。在分配时，左侧运算元必须是可寻址的或者 map 的索引表达式；它们作为迭代变量。如果 range 表达式是一个通道类型，至少需要有一个变量，它也可以有两个变量。如果迭代变量是空标识符，就代表在分句中不存在该标识符。
Range expression                          1st value          2nd value

array or slice  a  [n]E, *[n]E, or []E    index    i  int    a[i]       E
string          s  string type            index    i  int    see below  rune
map             m  map[K]V                key      k  K      m[k]       V
channel         c  chan E, <-chan E       element  e  E

var testdata *struct {
	a *[7]int
}
for i, _ := range testdata.a {
	// testdata.a is never evaluated; len(testdata.a) is constant
	// i ranges from 0 to 6
	f(i)
}

var a [10]string
for i, s := range a {
	// type of i is int
	// type of s is string
	// s == a[i]
	g(i, s)
}

var key string
var val interface {}  // element type of m is assignable to val
m := map[string]int{"mon":0, "tue":1, "wed":2, "thu":3, "fri":4, "sat":5, "sun":6}
for key, val = range m {
	h(key, val)
}
// key == last map key encountered in iteration
// val == map[key]

var ch chan Work = producer()
for w := range ch {
	doWork(w)
}

// empty a channel
for range ch {}

Go 语句
go 语句会开始在相同地址空间中的单独 goroutine 中调用函数。
GoStmt = "go" Expression .

表达式必须是函数或者方法调用；它不能使用括号括起来，调用内置函数有表达式语句的限制。
函数的值和参数会按顺序在调用的 goroutine 中求值。不像普通的函数调用，程序不会等待函数调用完成，而是直接开启一个新的 goroutine 执行函数。函数退出时，goroutine 也会退出。函数的任何返回值都会被丢弃。
go Server()
go func(ch chan<- bool) { for { sleep(10); ch <- true }} (c)

select 语句
select 语句会在接收/发送操作集中选择一个执行。它看起来和 switch 很像，只不过是专门针对通信操作的。
SelectStmt = "select" "{" { CommClause } "}" .
CommClause = CommCase ":" StatementList .
CommCase   = "case" ( SendStmt | RecvStmt ) | "default" .
RecvStmt   = [ ExpressionList "=" | IdentifierList ":=" ] RecvExpr .
RecvExpr   = Expression .

接收表达式可以将接收表达式的值分配给一个或两个变量。接收表达式必须是一个接收运算元（可以使用括号括起来）。它最多允许有一个 default 语句。
select 语句执行以下几个步骤：

对于 select 语句的所有分句，接收操作的通道运算元、通道、发送语句的右侧表达式都会执行一次操作。
如果一个或多个通信同时发生，它会通过一致性随机选择一个执行。如果没有 default 语句，select 语句会一直阻塞。

除了 default 分句，其他分句只有在开始进行通信的时候才会执行。

如果 select 分句是一个接收语句，它可以给变量分配值。

执行 select 分句内的内容。


如果向 nil 通道发送信息在没有 default 分句的情况下会一直阻塞。
var a []int
var c, c1, c2, c3, c4 chan int
var i1, i2 int
select {
case i1 = <-c1:
	print("received ", i1, " from c1\n")
case c2 <- i2:
	print("sent ", i2, " to c2\n")
case i3, ok := (<-c3):  // same as: i3, ok := <-c3
	if ok {
		print("received ", i3, " from c3\n")
	} else {
		print("c3 is closed\n")
	}
case a[f()] = <-c4:
	// same as:
	// case t := <-c4
	//	a[f()] = t
default:
	print("no communication\n")
}

for {  // send random sequence of bits to c
	select {
	case c <- 0:  // note: no statement, no fallthrough, no folding of cases
	case c <- 1:
	}
}

select {}  // block forever

return 语句
return 语句会终止函数 F 的执行并可选的返回一个或多个返回值。所有的滞后函数都会在 F 返回到它的调用者之前执行。
ReturnStmt = "return" [ ExpressionList ] .

如果函数没有返回值类型，return 不能返回任何值。
func noResult() {
	return
}

有三种方式能够返回指定类型的值：

返回值可以直接在 return 语句中列出。每个表达式都必须返回一个值并且能够分配给相应的返回值类型。

func simpleF() int {
	return 2
}

func complexF1() (re float64, im float64) {
	return -7.0, -4.0
}


return 语句的表达式列表可以是一个返回多值的函数调用。这时会使用临时变量来获取函数调用的返回值并直接将其作为 return 语句的表达式列表。

func complexF2() (re float64, im float64) {
	return complexF1()
}


如果制定了返回值的标识符那么 return 的表达式列表可以为空。返回值参数会作为普通的本地变量按需分配。return 语句会直接返回它们。

func complexF3() (re float64, im float64) {
	re = 7.0
	im = 4.0
	return
}

func (devnull) Write(p []byte) (n int, _ error) {
	n = len(p)
	return
}

不管如何声明，所有的返回值都会在进入函数前提前初始化成类型的零值。return 语句会在所有 defer 函数之前指定返回值。
实现限制：编译器不允许在覆盖了命名返回值的作用域中直接返回。
func f(n int) (res int, err error) {
	if _, err := f(n-1); err != nil {
		return  // invalid return statement: err is shadowed
	}
	return
}

break 语句
break 语句会在 for、switch 或 select 语句内部退出到相同函数的某个位置。
BreakStmt = "break" [ Label ] .

如果想指定标签，它必须出现在它所中止的 for、switch 或 select 语句旁。
OuterLoop:
	for i = 0; i < n; i++ {
		for j = 0; j < m; j++ {
			switch a[i][j] {
			case nil:
				state = Error
				break OuterLoop
			case item:
				state = Found
				break OuterLoop
			}
		}
	}

continue 语句
continue 语句会提前 for 语句的下一次迭代。for 语句必须和 continue 在相同函数中。
RowLoop:
	for y, row := range rows {
		for x, data := range row {
			if data == endOfRow {
				continue RowLoop
			}
			row[x] = data + bias(x, y)
		}
	}

goto 语句
goto 会将程序跳转到相同函数的指定标签处。
GotoStmt = "goto" Label .

goto Error

goto 语句不允许跳过作用域内程序变量的初始化工作。
goto L  // BAD
	v := 3
L:

上面的程序是错误的，因为它跳过了变量 v 的初始化过程。
if n%2 == 1 {
	goto L1
}
for n > 0 {
	f()
	n--
L1:
	f()
	n--
}

标签作用域外的 goto 语句不能跳转到标签处，所以上面的代码是错误的。
Fallthrough 语句
fallthrough 语句会跳转到 switch 语句中的下一个 case 分句中。它应该只在最后一个非空分句中使用。
FallthroughStmt = "fallthrough" .

Defer 语句
defer 语句会在包裹函数返回后触发函数调用。这里的返回泛指函数因为 return 语句终止、到达函数末尾或者当前 goroutine 触发运行时恐慌。
DeferStmt = "defer" Expression .

表达式必须是函数或者方法调用；它不能使用括号括起来，调用内置函数会有一些限制。
每次执行 defer 语句执行时都会计算函数的参数和值，但是并不会调用函数。相反，函数的调用是在包裹函数返回后进行，它们的执行顺序与声明顺序正好相反。如果 defer 对应的函数值为 nil，会在调用函数的时候导致运行时恐慌而不是声明 defer 语句的时候。
例如：当 defer 函数为函数字面值且包裹函数具有命名结果值，此时，我们在defer 函数中可以访问和修改命名的结果值。defer 函数的所有返回值都会被忽略。
lock(l)
defer unlock(l)  // unlocking happens before surrounding function returns

// prints 3 2 1 0 before surrounding function returns
for i := 0; i <= 3; i++ {
	defer fmt.Print(i)
}

// f returns 1
func f() (result int) {
	defer func() {
		result++
	}()
	return 0
}

内置函数
内置函数是预定义的。调用他们和其他函数一样只是他们接受一个类型而不是一个表达式。
内置函数没有标准的 Go 类型，所以他们只能作为调用表达式；而不能作为函数的值。
Close
对于管道类型 c，内置函数 close(c) 意味着不在有数据插入到管道中。如果 c 是一个只接收数据的管道，会发生错误。向已经关闭的发送数据或者重复关闭已经关闭的管道会导致运行时恐慌。关闭 nil 管道会引起运行时恐慌。调用 close 后所有之前发送的数据都能接收到，并且在最后不会阻塞而返回零值。多值的接收操作能够返回接收到的数据和表示管道是否关闭的布尔值。
长度和容积
内置函数 len 和 cap 可以接收多种类型的参数，并且返回一个 int 类型结果值。函数的实现能够确保结果值不会溢出。
Call      Argument type    Result

len(s)    string type      string length in bytes
          [n]T, *[n]T      array length (== n)
          []T              slice length
          map[K]T          map length (number of defined keys)
          chan T           number of elements queued in channel buffer

cap(s)    [n]T, *[n]T      array length (== n)
          []T              slice capacity
          chan T           channel buffer capacity

切片的容积底层数组包含的元素个数。在任何情况下都有以下关系：
0 <= len(s) <= cap(s)

nil 切片，map，或者 channel 的长度都为 0。nil 切片，管道的容积都为 0。
表达式 len(x) 在 s 是字符串常量时也为常量。如果 s 为数组或者指向数组的指针并且表达式 s 不包含 channel 接收器或者函数调用那么 len(s) 和 cap(s) 也是常量；在这个情况下 s 时不能求值的。其他情况下 len 和 cap 不是常量并且 s 是可以求值的。
const (
	c1 = imag(2i)                    // imag(2i) = 2.0 is a constant
	c2 = len([10]float64{2})         // [10]float64{2} contains no function calls
	c3 = len([10]float64{c1})        // [10]float64{c1} contains no function calls
	c4 = len([10]float64{imag(2i)})  // imag(2i) is a constant and no function call is issued
	c5 = len([10]float64{imag(z)})   // invalid: imag(z) is a (non-constant) function call
)
var z complex128

内存分配
内置函数 new 接收一个类型 T，它会在运行时给变量分配内存，并且返回一个指向类型 T 的 *T 类型指针。变量的初始化在初始化值章节中介绍。
new(T)

例如：
type S struct { a int; b float64 }
new(S)

给 S 类型的变量分配空间，并初始化它（a=0，b=0.0），并且返回一个 *S 类型值保存变量所在的位置。
创建切片，map 和 管道
内置函数 make 以一个类型作为参数，它必须是一个切片，map 或者管道类型，它返回一个 T 类型的值，而不是（*T）类型，它会按初始化值章节描述的方式进行初始化。
Call             Type T     Result

make(T, n)       slice      slice of type T with length n and capacity n
make(T, n, m)    slice      slice of type T with length n and capacity m

make(T)          map        map of type T
make(T, n)       map        map of type T with initial space for approximately n elements

make(T)          channel    unbuffered channel of type T
make(T, n)       channel    buffered channel of type T, buffer size n

n 和 m 必须是整数类型或者无类型常量。一个常量参数不能为负数并且该值在 int 类型的范围内；如果它是无类型常量，会被转换成 int 类型。如果 n 和 m 都是常量，那么 n 必须大于 m。如果 n 是负数或者大于 m 会引发运行时 panic。
s := make([]int, 10, 100)       // slice with len(s) == 10, cap(s) == 100
s := make([]int, 1e3)           // slice with len(s) == cap(s) == 1000
s := make([]int, 1<<63)         // illegal: len(s) is not representable by a value of type int
s := make([]int, 10, 0)         // illegal: len(s) > cap(s)
c := make(chan int, 10)         // channel with a buffer size of 10
m := make(map[string]int, 100)  // map with initial space for approximately 100 elements

使用 make 来指定大小初始化 map 类型将会创建一个预留 n 个元素空间的 map 类型。更详细的行为依赖于具体实现。
追加或者拷贝切片
内置函数 append 和 copy 可以进行切片的通用操作。对于这两个函数，一个是拷贝内存，一个是引用内存。
可变参数的函数 append 可以向切片 s 中追加一个或多个 x 值，并返回这个切片。传进 ...T 的值会根据参数传值。作为特例，append 在 s 为 []byte 切片时，可以使用字符串后面跟 ... 作为参数。
如果 s 的容积容纳不下这些元素，那么 append 会分配一个新的足够大的数组。否则会使用原来的底层数组。
s0 := []int{0, 0}
s1 := append(s0, 2)                // append a single element     s1 == []int{0, 0, 2}
s2 := append(s1, 3, 5, 7)          // append multiple elements    s2 == []int{0, 0, 2, 3, 5, 7}
s3 := append(s2, s0...)            // append a slice              s3 == []int{0, 0, 2, 3, 5, 7, 0, 0}
s4 := append(s3[3:6], s3[2:]...)   // append overlapping slice    s4 == []int{3, 5, 7, 2, 3, 5, 7, 0, 0}

var t []interface{}
t = append(t, 42, 3.1415, "foo")   //                             t == []interface{}{42, 3.1415, "foo"}

var b []byte
b = append(b, "bar"...)            // append string contents      b == []byte{''b'', ''a'', ''r'' }

copy 函数从 src 拷贝原属到 dst 并且返回拷贝元素的个数。参数中所有的元素类型必须是 T 类型或者能转换成 T 的类型。拷贝元素的数量是 len(src) 和 len(dst) 中的较小值。作为特例，copy 可以从 string 类型拷贝元素到 []byte 类型。这会把字符串中的元素拷贝到字节切片中。
copy(dst, src []T) int
copy(dst []byte, src string) int

例：
var a = [...]int{0, 1, 2, 3, 4, 5, 6, 7}
var s = make([]int, 6)
var b = make([]byte, 5)
n1 := copy(s, a[0:])            // n1 == 6, s == []int{0, 1, 2, 3, 4, 5}
n2 := copy(s, s[2:])            // n2 == 4, s == []int{2, 3, 4, 5, 4, 5}
n3 := copy(b, "Hello, World!")  // n3 == 5, b == []byte("Hello")

删除 map 中的元素
内置函数 delete 移除 map 类型 m 中的键值 k。k 的类型必须是能够转换成 m 键类型的类型。
delete(m, k)  // remove element m[k] from map m

如果 map 类型 m 是 nil 或者 m[k] 不存在，那么 delete 函数不做任何事情。
操作复数
有三个函数可以组装或者分解复数。内置函数 complex 会构造一个复数，real 和 imag 会分解出复数的实部和虚部。
complex(realPart, imaginaryPart floatT) complexT
real(complexT) floatT
imag(complexT) floatT

参数的类型和返回值类型是对应的。对于 complex，两个参数必须是相同的浮点类型，并返回由相同浮点数组成的复数类型。complex64 是 float32 对应的类型，complex128 是 float64 对应的参数类型。如果参数是一个无类型常量，它会转换成另一个参数的类型。如果两个参数都是无类型常量，他们必须实数或者虚数部分为零，并且它会返回一个无类型的复数常量。
real 和 imag 函数和 complex 正好相反的，所以对于一个值复数类型 Z 的值 z，z==Z(complex(real(z),imag(z)))。
如果这么操作都是常量，那么返回的值也是常量。
var a = complex(2, -2)             // complex128
const b = complex(1.0, -1.4)       // untyped complex constant 1 - 1.4i
x := float32(math.Cos(math.Pi/2))  // float32
var c64 = complex(5, -x)           // complex64
var s uint = complex(1, 0)         // untyped complex constant 1 + 0i can be converted to uint
_ = complex(1, 2<<s)               // illegal: 2 assumes floating-point type, cannot shift
var rl = real(c64)                 // float32
var im = imag(a)                   // float64
const c = imag(b)                  // untyped constant -1.4
_ = imag(3 << s)                   // illegal: 3 assumes complex type, cannot shift

处理 panic
两个内置函数 panic 和 recover，可以抛出和处理运行时 panic 和程序的错误条件。
func panic(interface{})
func recover() interface{}

当执行 F 函数时，显式的调用 panic或者运行时 panic 都会中断 F 的执行。但是 F 中的延迟函数还会执行。接下来调用 F 函数处的延迟函数也会执行，一直到顶级的延迟函数。鉴于这点，程序关闭并且错误条件可以抛出。包括 panic 中的值。这个顺序叫做 panicking。
panic(42)
panic("unreachable")
panic(Error("cannot parse"))

recover 函数允许程序从一个 panicking 中恢复执行。假设函数 G 延迟执行函数 D ，在 D 中调用 recover 这时如果在 G 执行时发生 panic 会在 D 中恢复。当函数执行到 D，recover 的返回值会返回 panic 对应的错误，并且终止 panicking 。在这个情况下 G 函数和 panic 之间的代码不会执行。任何在 D 中 G 之前的延迟函数会返回到调用者。
在下面两种情况下 recover 会返回 nil：

panic 的参数为 nil
携程里没有发生 panic

recover 不是在延迟函数中执行


本例中的 protect 函数会在 g 发生 panic 的时候恢复执行。
func protect(g func()) {
	defer func() {
		log.Println("done")  // Println executes normally even if there is a panic
		if x := recover(); x != nil {
			log.Printf("run time panic: %v", x)
		}
	}()
	log.Println("start")
	g()
}

初始化
这个实现提供了多个内置函数来帮助进行初始化。这些函数用来输出信息但是不确定会一直存在于语言中，他们都没有返回值。
Function   Behavior

print      prints all arguments; formatting of arguments is implementation-specific
println    like print but prints spaces between arguments and a newline at the end

实现限制：print 和 println 不接受除了布尔值，数字，字符串以外的其他类型。
程序的初始化和执行
零值
当为变量分配内存空间时，不管是声明还是调用 new 或者使用字面值和 make 初始化，只要创建了一个新值变量都会有一个默认值。这样的元素和值会使用它类型的零值：false 是布尔值的零值，0 为数值类型零值，"" 为字符串零值，nil 为指针，函数，接口，切片，频道，字典。初始化会递归完成，所以结构体里的数组中的元素也都会有它自己的零值。
下面两个声明时相等的：
var i int
var i int = 0

请看下面的声明：
type T struct { i int; f float64; next *T }
t := new(T)
t.i == 0
t.f == 0.0
t.next == nil

这和下面的声明时同等效果的：
var t T

包的初始化
保级变量会按声明的顺序进行初始化，如果依赖其他变量，则会在其他变量之后进行初始化。
更确切的说，如果包级变量还没初始化并且没有初始化表达式或者表达式中不包含对其他未初始化变量的依赖，那么会认为它正在等待初始化。初始化过程会从最早声明的变量开始向下一个包级变量重复，直到没有需要初始化的变量。
如果在初始化过程完成后还有未初始化的变量，那么这些变量可能是循环初始化了，这事程序不是合法的。
在多个文件中变量的声明顺序会依据编译时文件出现的顺序：声明在第一个文件中的变量优先于第二个文件中声明的变量，依此类推。
对依赖关系的分析不会根据变量的具体值，它只分析在源码中是否引用了其他变量。例如，如果变量 x 的初始化表达式引用了变量 y 那么 x 就依赖于 y：

引用一个变量或者函数中用到了一个变量
引用了一个方法值 m 或者方法表达式 t.m (这里的静态类型 t 不是借口类型，并且方法 m 是 t 方法集中的方法)。t.m 的返回值不会在此时影响。

变量，函数，或者方法 x 依赖变量 y


依赖分析会在每个包中执行；他只考虑当前包中的析变量，函数，和方法。
例如，给定声明：
var (
	a = c + b
	b = f()
	c = f()
	d = 3
)

func f() int {
	d++
	return d
}

初始化顺序为 d，b，c，a。
变量可以在包中声明的初始化函数 init 中进行初始化，它没有参数和返回值。
func init() {}

可以为每个包定义多个该函数，甚至在一个文件中也可以。并且不会声明该该标识符。因此 init 函数不能在程序中调用。
还未导入的包会先初始化包级的变量然后按照 init 函数在源码中的顺序调用，它可能在包的多个文件中。如果需要导入一个包，它会在初始化自己之前先初始化这个需要导入的包。如果导入一个包多次，那这个包只会初始化一次。导入的包不能存在循环引用。
包的初始化——变量初始化和对 init 函数的调用会按顺序发生在同一个 goroutine 中。 init 函数可能会启动其他 goroutine。不过一般 init 函数都是按序进行初始化的：它只在上一步已经执行完成时才会调用下一个步骤。
确保初始化行为是可以复现的，构建系统鼓励在同一个包中包含多个文件这些文件在编译器中会以字母排序。
程序执行
一个完整的程序由一个 main 包导入所有需要的包。main 包必须以 main 作为包名并且声明一个没有参数和返回值的 main 函数。
func main() {}

程序先初始化 main 包然后调用 main 函数。当 main 函数返回时，程序就会退出。它不会等待其他 goroutines 完成。
错误
预定义的错误类型为：
type error interface {
	Error() string
}

它是表示错误信息的常规接口，nil 代表没有发生错误。例如，在文件中读取数据可以定义为：
func Read(f *File, b []byte) (n int, err error)

运行时恐慌
运行时错误（例如数组的越界访问）会造成运行时恐慌，它和以 runtime.Error 接口实现调用内置的 panic 函数一样。runtime.Error 满足预定义的 error 接口。不同的错误值代表不同的运行时错误条件。
package runtime

type Error interface {
	error
	// and perhaps other methods
}

系统相关
unsafe 包
unsafe 是编译器已知的内置包，可以通过导入路径 unsafe 访问包内容，提供 unsafe 包目的是支持底层编程（包括操作非 Go 类型的数据结构）。使用 unsafe 包必须自己保证类型安全而且它有可能破坏程序的移植性。unsafe 包提供了以下接口：
package unsafe

type ArbitraryType int  // 任意一个 Go 类型；它不是一个具体的类型。
type Pointer *ArbitraryType

func Alignof(variable ArbitraryType) uintptr
func Offsetof(selector ArbitraryType) uintptr
func Sizeof(variable ArbitraryType) uintptr

Pointer 是一个指针类型，但是不能解引用 Pointer 的值。所有底层类型 uintptr 的指针和值都能转换成 Pointer 类型，反之亦然。Pointer 和  uintptr 之间的转换效果由具体实现定义。
var f float64
bits = *(*uint64)(unsafe.Pointer(&f))

type ptr unsafe.Pointer
bits = *(*uint64)(ptr(&f))

var p ptr = nil

假设变量 v 由 var v = x 定义。Alignof 以表达式 x 作为参数并返回 x 的对齐字节数。Sizeof 以表达式 x 作为参数并返回 x 的大小。
函数 Offsetof 以选择器 s.f（ s 或者 *s 结构体中的 f 字段）作为参数，返回字段相对结构体首地址的位置。如果 f 是一个嵌入字段，那 f 必须可以直接访问（不能通过指针进行间接访问）。对于结构体 s 的 f 字段：
uintptr(unsafe.Pointer(&s)) + unsafe.Offsetof(s.f) == uintptr(unsafe.Pointer(&s.f))

计算机的体系结构要求对齐内存地址（对于一个变量的地址有多种因素影响对齐）。Alignof 函数获取一个人和类型的表达式并返回变量对齐的字节数。对于变量 x：
uintptr(unsafe.Pointer(&x)) % unsafe.Alignof(x) == 0

编译时 uintptr 类型常量表达式会调用 Alignof，Offsetof，和 Sizeof。
确定的大小和对齐字节数
对于数字类型，确定有以下尺寸：
type                                 size in bytes

byte, uint8, int8                     1
uint16, int16                         2
uint32, int32, float32                4
uint64, int64, float64, complex64     8
complex128                           16

Go 中规定的最小对齐特性：

对于任意变量类型 x：unsafe.Alignof(x) 至少为 1。
对于结构体类型：unsafe.Alignof(x) 是所有内部字段 unsafe.Alignof(x.f) 的最大值，并且至少为 1。

对于数组类型：unsafe.Alignof(x) 和数组元素类型的 alignment 相同。


结构体（数组）在内部没有字段（元素）的时候大小为 0。两个所占空间大小为 0 的不同变量可能在内存中拥有相同地址。
', 9);
INSERT INTO public.article_content VALUES (1598253892775182336, '2022-12-01 17:53:16.816', false, '2022-12-01 17:53:16.816', '<p>保存草稿测试</p>
', '保存草稿测试', '保存草稿测试
', 1598253892754210816);
INSERT INTO public.article_content VALUES (1598951510111158272, '2022-12-03 16:05:21.753', false, '2022-12-03 16:05:21.753', '<p>！！！</p>
', '！！！', '！！！
', 1598951510023077888);
INSERT INTO public.article_content VALUES (1599374122385670144, '2022-12-04 20:04:40.37', false, '2022-12-04 20:04:40.37', '<p>背景<br />
让网页变为黑白配色，是个常见的诉求。而且往往是突如其来的诉求，是无法预知的。当发生这样的需求时，我们需要迅速完成变更发布。</p>
<p>2022年12月1日，掘金首页已经变成了黑白配色。</p>
<p>我的小网站首页 game.hullqin.cn 也变成了黑白配色。</p>
<p>一行代码<br />
这一行代码是个CSS代码：</p>
<p>filter: grayscale(1)<br />
复制代码<br />
为了使整个网页生效，你可以把它放在 <html> 标签的样式里。直接写到 html 文件内，例如：</p>
<pre><code class="language-html">&lt;style&gt;
html {
  filter: grayscale(1);
}
&lt;/style&gt;
</code></pre>
<p>复制代码<br />
你也可以用内联样式，只要没用 important CSS 语法，内联样式优先级最高：</p>
<pre><code class="language-html">&lt;html style=&quot;filter:grayscale(1)&quot;&gt;
...
&lt;/html&gt;
</code></pre>
<p>复制代码<br />
为了更好的兼容性，你可以补一个带 -webkit- 前缀的样式，放在 filter 后面：</p>
<pre><code class="language-html">&lt;html style=&quot;filter:grayscale(1);-webkit-filter:grayscale(1)&quot;&gt;
...
&lt;/html&gt;
</code></pre>
<p>复制代码<br />
原理<br />
我们使用了 CSS 特性 filter，并用了 grayscale 对图片进行灰度转换，允许有一个参数，可以是数字（0到1）或百分比，0% 到 100% 之间的值会使灰度线性变化。</p>
<p>如果你不想完全灰掉。可以设置个相对小的数字。</p>
<p>掘金首页是设置了 0.95，也挺大的，看不出彩色。</p>
<p>兼容性<br />
我们使用了 CSS 特性 filter，兼容性还是不错的：</p>
<p>如果你想获得更好的兼容性，可以加一个前缀 -webkit-：</p>
<p>filter: grayscale(.95);<br />
-webkit-filter: grayscale(.95);<br />
复制代码<br />
这正是掘金的做法：</p>
<p>掘金是把样式加到了 html 元素上。</p>
<p>filter 样式加到 <html> 还是 <body> 上<br />
我的小网页是把 filter 样式加到了 <body> 元素上。通常这没有问题。</p>
<pre><code class="language-html">&lt;body style=&quot;filter:grayscale(1);-webkit-filter:grayscale(1)&quot;&gt;
...
&lt;/body&gt;
</code></pre>
<p>复制代码<br />
但如果你的网页内有「绝对和固定定位」元素，一定要把 filter 样式加到 <html> 上。</p>
<p>原因见: drafts.fxtf.org/filter-effe…</p>
<p>引用：</p>
<p>A value other than none for the filter property results in the creation of a containing block for absolute and fixed positioned descendants unless the element it applies to is a document root element in the current browsing context.</p>
<p>翻译：</p>
<p>若 filter 属性的值不是 none，会给「绝对和固定定位的后代」创建一个 containing block，除非 filter 对应的元素是「当前浏览上下文中的文档根元素」（即<html>）。</p>
<p>因此，兼容性最好的方法是把 filter 样式加到 <html> 上。这样不会影响「绝对和固定定位的后代」。</p>
<p>这里小程序有个坑，如果你的页面代码有「绝对和固定定位的后代」，就不能把 filter 样式 加到 <page> 上，而是要找个元素，这个元素没有「绝对和固定定位的后代」，你可以把 filter 样式加到这个元素上。</p>
<p>写在最后<br />
我是HullQin，公众号线下聚会游戏的作者（欢迎关注公众号，联系我，交个朋友），转发本文前需获得作者HullQin授权。我独立开发了《联机桌游合集》，是个网页，可以很方便的跟朋友联机玩斗地主、五子棋、象棋等游戏，不收费无广告。还独立开发了《合成大西瓜重制版》。还开发了《Dice Crush》参加Game Jam 2022。喜欢可以关注我噢～我有空了会分享做游戏的相关技术，会在这2个专栏里分享：《教你做小游戏》、《极致用户体验》。本文正在参加「金石计划 . 瓜分6万现金大奖」</p>
', '背景
让网页变为黑白配色，是个常见的诉求。而且往往是突如其来的诉求，是无法预知的。当发生这样的需求时，我们需要迅速完成变更发布。

2022年12月1日，掘金首页已经变成了黑白配色。

我的小网站首页 game.hullqin.cn 也变成了黑白配色。

一行代码
这一行代码是个CSS代码：

filter: grayscale(1)
复制代码
为了使整个网页生效，你可以把它放在 <html> 标签的样式里。直接写到 html 文件内，例如：

```html
<style>
html {
  filter: grayscale(1);
}
</style>
```
复制代码
你也可以用内联样式，只要没用 important CSS 语法，内联样式优先级最高：
```html
<html style="filter:grayscale(1)">
...
</html>
```
复制代码
为了更好的兼容性，你可以补一个带 -webkit- 前缀的样式，放在 filter 后面：
```html
<html style="filter:grayscale(1);-webkit-filter:grayscale(1)">
...
</html>
```
复制代码
原理
我们使用了 CSS 特性 filter，并用了 grayscale 对图片进行灰度转换，允许有一个参数，可以是数字（0到1）或百分比，0% 到 100% 之间的值会使灰度线性变化。

如果你不想完全灰掉。可以设置个相对小的数字。

掘金首页是设置了 0.95，也挺大的，看不出彩色。

兼容性
我们使用了 CSS 特性 filter，兼容性还是不错的：



如果你想获得更好的兼容性，可以加一个前缀 -webkit-：

filter: grayscale(.95);
-webkit-filter: grayscale(.95);
复制代码
这正是掘金的做法：



掘金是把样式加到了 html 元素上。

filter 样式加到 <html> 还是 <body> 上
我的小网页是把 filter 样式加到了 <body> 元素上。通常这没有问题。
```html
<body style="filter:grayscale(1);-webkit-filter:grayscale(1)">
...
</body>
```
复制代码
但如果你的网页内有「绝对和固定定位」元素，一定要把 filter 样式加到 <html> 上。

原因见: drafts.fxtf.org/filter-effe…

引用：

A value other than none for the filter property results in the creation of a containing block for absolute and fixed positioned descendants unless the element it applies to is a document root element in the current browsing context.

翻译：

若 filter 属性的值不是 none，会给「绝对和固定定位的后代」创建一个 containing block，除非 filter 对应的元素是「当前浏览上下文中的文档根元素」（即<html>）。

因此，兼容性最好的方法是把 filter 样式加到 <html> 上。这样不会影响「绝对和固定定位的后代」。

这里小程序有个坑，如果你的页面代码有「绝对和固定定位的后代」，就不能把 filter 样式 加到 <page> 上，而是要找个元素，这个元素没有「绝对和固定定位的后代」，你可以把 filter 样式加到这个元素上。

写在最后
我是HullQin，公众号线下聚会游戏的作者（欢迎关注公众号，联系我，交个朋友），转发本文前需获得作者HullQin授权。我独立开发了《联机桌游合集》，是个网页，可以很方便的跟朋友联机玩斗地主、五子棋、象棋等游戏，不收费无广告。还独立开发了《合成大西瓜重制版》。还开发了《Dice Crush》参加Game Jam 2022。喜欢可以关注我噢～我有空了会分享做游戏的相关技术，会在这2个专栏里分享：《教你做小游戏》、《极致用户体验》。本文正在参加「金石计划 . 瓜分6万现金大奖」', '背景
让网页变为黑白配色，是个常见的诉求。而且往往是突如其来的诉求，是无法预知的。当发生这样的需求时，我们需要迅速完成变更发布。
2022年12月1日，掘金首页已经变成了黑白配色。
我的小网站首页 game.hullqin.cn 也变成了黑白配色。
一行代码
这一行代码是个CSS代码：
filter: grayscale(1)
复制代码
为了使整个网页生效，你可以把它放在  标签的样式里。直接写到 html 文件内，例如：
<style>
html {
  filter: grayscale(1);
}
</style>

复制代码
你也可以用内联样式，只要没用 important CSS 语法，内联样式优先级最高：
<html style="filter:grayscale(1)">
...
</html>

复制代码
为了更好的兼容性，你可以补一个带 -webkit- 前缀的样式，放在 filter 后面：
<html style="filter:grayscale(1);-webkit-filter:grayscale(1)">
...
</html>

复制代码
原理
我们使用了 CSS 特性 filter，并用了 grayscale 对图片进行灰度转换，允许有一个参数，可以是数字（0到1）或百分比，0% 到 100% 之间的值会使灰度线性变化。
如果你不想完全灰掉。可以设置个相对小的数字。
掘金首页是设置了 0.95，也挺大的，看不出彩色。
兼容性
我们使用了 CSS 特性 filter，兼容性还是不错的：
如果你想获得更好的兼容性，可以加一个前缀 -webkit-：
filter: grayscale(.95);
-webkit-filter: grayscale(.95);
复制代码
这正是掘金的做法：
掘金是把样式加到了 html 元素上。
filter 样式加到  还是  上
我的小网页是把 filter 样式加到了  元素上。通常这没有问题。
<body style="filter:grayscale(1);-webkit-filter:grayscale(1)">
...
</body>

复制代码
但如果你的网页内有「绝对和固定定位」元素，一定要把 filter 样式加到  上。
原因见: drafts.fxtf.org/filter-effe…
引用：
A value other than none for the filter property results in the creation of a containing block for absolute and fixed positioned descendants unless the element it applies to is a document root element in the current browsing context.
翻译：
若 filter 属性的值不是 none，会给「绝对和固定定位的后代」创建一个 containing block，除非 filter 对应的元素是「当前浏览上下文中的文档根元素」（即）。
因此，兼容性最好的方法是把 filter 样式加到  上。这样不会影响「绝对和固定定位的后代」。
这里小程序有个坑，如果你的页面代码有「绝对和固定定位的后代」，就不能把 filter 样式 加到  上，而是要找个元素，这个元素没有「绝对和固定定位的后代」，你可以把 filter 样式加到这个元素上。
写在最后
我是HullQin，公众号线下聚会游戏的作者（欢迎关注公众号，联系我，交个朋友），转发本文前需获得作者HullQin授权。我独立开发了《联机桌游合集》，是个网页，可以很方便的跟朋友联机玩斗地主、五子棋、象棋等游戏，不收费无广告。还独立开发了《合成大西瓜重制版》。还开发了《Dice Crush》参加Game Jam 2022。喜欢可以关注我噢～我有空了会分享做游戏的相关技术，会在这2个专栏里分享：《教你做小游戏》、《极致用户体验》。本文正在参加「金石计划 . 瓜分6万现金大奖」
', 1599374122381475840);
INSERT INTO public.article_content VALUES (1599743283666354176, '2022-12-05 20:31:35.278', false, '2022-12-14 12:14:35.332', '<h1 id="README"><a href="#readme" id="readme">README</a></h1>
<p>该文件用来测试和展示书写README的各种markdown语法。GitHub的markdown语法在标准的markdown语法基础上做了扩充，称之为<code>GitHub Flavored Markdown</code>。简称<code>GFM</code>，GFM在GitHub上有广泛应用，除了README文件外，issues和wiki均支持markdown语法。</p>
<hr />
<table>
<thead>
<tr><th>作者</th><th>果冻虾仁</th></tr>
</thead>
<tbody>
<tr><td>知乎</td><td>[<img src="https://img.shields.io/badge/dynamic/json?color=0084ff&amp;logo=zhihu&amp;label=%E6%9E%9C%E5%86%BB%E8%99%BE%E4%BB%81&amp;query=%24.data.totalSubs&amp;url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dzhihu%26queryKey%3Dguodongxiaren" alt="zhihu-shield" />]<a href="https://www.zhihu.com/people/guodongxiaren" title="我的知乎，欢迎关注">zhihu</a></td></tr>
<tr><td>公众号</td><td>编程往事</td></tr>
</tbody>
</table>
<hr />
<h2 id="目录"><a href="#目录" id="目录">目录</a></h2>
<ul>
<li><a href="#横线" rel="nofollow" target="_blank">横线</a></li>
<li><a href="#标题" rel="nofollow" target="_blank">标题</a></li>
<li><a href="#文本" rel="nofollow" target="_blank">文本</a>
<ul>
<li>普通文本</li>
<li>单行文本</li>
<li>多行文本</li>
<li>文字高亮</li>
<li>换行</li>
<li>斜体</li>
<li>粗体</li>
<li>删除线</li>
</ul>
</li>
<li><a href="#图片" rel="nofollow" target="_blank">图片</a>
<ul>
<li>来源于网络的图片</li>
<li>GitHub仓库中的图片</li>
</ul>
</li>
<li><a href="#链接" rel="nofollow" target="_blank">链接</a>
<ul>
<li>文字超链接
<ul>
<li>链接外部URL</li>
<li>链接本仓库里的URL</li>
</ul>
</li>
<li>锚点</li>
<li><a href="#图片链接" rel="nofollow" target="_blank">图片链接</a></li>
</ul>
</li>
<li><a href="#列表" rel="nofollow" target="_blank">列表</a>
<ul>
<li>无序列表</li>
<li>有序列表</li>
<li>复选框列表</li>
</ul>
</li>
<li><a href="#块引用" rel="nofollow" target="_blank">块引用</a></li>
<li><a href="#代码高亮" rel="nofollow" target="_blank">代码高亮</a></li>
<li><a href="#表格" rel="nofollow" target="_blank">表格</a></li>
<li><a href="#表情" rel="nofollow" target="_blank">表情</a></li>
<li><a href="#diff语法" rel="nofollow" target="_blank">diff语法</a></li>
<li><a href="#常用HTML语法" rel="nofollow" target="_blank">常用HTML语法</a>
<ul>
<li><a href="#折叠" rel="nofollow" target="_blank">折叠</a></li>
<li><a href="#居中" rel="nofollow" target="_blank">居中</a></li>
</ul>
</li>
<li><a href="#其他" rel="nofollow" target="_blank">其他</a>
<ul>
<li><a href="#徽章" rel="nofollow" target="_blank">徽章</a></li>
<li><a href="#star历史" rel="nofollow" target="_blank">star历史</a></li>
</ul>
</li>
</ul>
<h3 id="横线"><a href="#横线" id="横线">横线</a></h3>
<hr />
<p>***、&mdash;、___可以显示横线效果</p>
<hr />
<hr />
<hr />
<h2 id="标题"><a href="#标题" id="标题">标题</a></h2>
<pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
</code></pre>
<p>效果如下：</p>
<h1 id="一级标题"><a href="#一级标题" id="一级标题">一级标题</a></h1>
<h2 id="二级标题"><a href="#二级标题" id="二级标题">二级标题</a></h2>
<h3 id="三级标题"><a href="#三级标题" id="三级标题">三级标题</a></h3>
<h4 id="四级标题"><a href="#四级标题" id="四级标题">四级标题</a></h4>
<h5 id="五级标题"><a href="#五级标题" id="五级标题">五级标题</a></h5>
<h6 id="六级标题"><a href="#六级标题" id="六级标题">六级标题</a></h6>
<h2 id="文本"><a href="#文本" id="文本">文本</a></h2>
<h3 id="普通文本"><a href="#普通文本" id="普通文本">普通文本</a></h3>
<p>这是一段普通的文本</p>
<h3 id="单行文本"><a href="#单行文本" id="单行文本">单行文本</a></h3>
<pre><code>Hello,大家好，我是果冻虾仁。
</code></pre>
<p>在一行开头加入1个Tab或者4个空格。</p>
<h3 id="文本块"><a href="#文本块" id="文本块">文本块</a></h3>
<h4 id="语法1"><a href="#语法1" id="语法1">语法1</a></h4>
<p>在连续几行的文本开头加入1个Tab或者4个空格。</p>
<pre><code>欢迎到访
很高兴见到您
祝您，早上好，中午好，下午好，晚安
</code></pre>
<h4 id="语法2"><a href="#语法2" id="语法2">语法2</a></h4>
<p>使用一对各三个的反引号：</p>
<pre><code>欢迎到访
我是C++码农
你可以在知乎、CSDN、简书搜索【果冻虾仁】找到我
</code></pre>
<p>该语法也可以实现代码高亮，见<a href="#代码高亮" rel="nofollow" target="_blank">代码高亮</a></p>
<h3 id="文字高亮"><a href="#文字高亮" id="文字高亮">文字高亮</a></h3>
<p>文字高亮功能能使行内部分文字高亮，使用一对反引号。<br />
语法：</p>
<pre><code>`linux` `网络编程` `socket` `epoll`
</code></pre>
<p>效果：<code>linux</code> <code>网络编程</code> <code>socket</code> <code>epoll</code></p>
<p>也适合做一篇文章的tag</p>
<h4 id="换行"><a href="#换行" id="换行">换行</a></h4>
<p>直接回车不能换行，<br />
可以在上一行文本后面补两个空格，<br />
这样下一行的文本就换行了。</p>
<p>或者就是在两行文本直接加一个空行。</p>
<p>也能实现换行效果，不过这个行间距有点大。</p>
<h4 id="斜体、粗体、删除线"><a href="#斜体粗体删除线" id="斜体粗体删除线">斜体、粗体、删除线</a></h4>
<table>
<thead>
<tr><th>语法</th><th>效果</th></tr>
</thead>
<tbody>
<tr><td><code>*斜体1*</code></td><td><em>斜体1</em></td></tr>
<tr><td><code>_斜体2_</code></td><td> <em>斜体2</em></td></tr>
<tr><td><code>**粗体1**</code></td><td><strong>粗体1</strong></td></tr>
<tr><td><code>__粗体2__</code></td><td><strong>粗体2</strong></td></tr>
<tr><td><code>这是一个 ~~删除线~~</code></td><td>这是一个 <del>删除线</del></td></tr>
<tr><td><code>***斜粗体1***</code></td><td><strong><em>斜粗体1</em></strong></td></tr>
<tr><td><code>___斜粗体2___</code></td><td><strong><em>斜粗体2</em></strong></td></tr>
<tr><td><code>***~~斜粗体删除线1~~***</code></td><td>***<del>斜粗体删除线1</del>***</td></tr>
<tr><td><code>~~***斜粗体删除线2***~~</code></td><td><del><strong><em>斜粗体删除线2</em></strong></del></td></tr>
</tbody>
</table>
<pre><code>斜体、粗体、删除线可混合使用
</code></pre>
<h2 id="图片"><a href="#图片" id="图片">图片</a></h2>
<p>基本格式：</p>
<pre><code>![alt](URL title)
</code></pre>
<p>alt和title即对应HTML中的alt和title属性（都可省略）：<br />
- alt表示图片显示失败时的替换文本<br />
- title表示鼠标悬停在图片时的显示文本（注意这里要加引号）</p>
<p>URL即图片的url地址，如果引用本仓库中的图片，直接使用<strong>相对路径</strong>就可了，如果引用其他github仓库中的图片要注意格式，即：<code>仓库地址/raw/分支名/图片路径</code>，如：</p>
<pre><code>https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif
</code></pre>
<table>
<thead>
<tr><th>#</th><th>语法</th><th>效果</th></tr>
</thead>
<tbody>
<tr><td>1</td><td><code>![baidu](http://www.baidu.com/img/bdlogo.gif &quot;百度logo&quot;)</code></td><td><img src="http://www.baidu.com/img/bdlogo.gif" alt="baidu" title="百度logo" loading="lazy" /></td></tr>
<tr><td>2</td><td><code>![][code-past]</code></td><td><img src="/img/codepast-logo.jpg" alt="" title="公众号：编程往事" /></td></tr>
</tbody>
</table>
<p>注意例2的写法使用了<strong>URL标识符</strong>的形式，在<a href="#链接" rel="nofollow" target="_blank">链接</a>一节有介绍。</p>
<blockquote>
<p>在文末有code-past的定义：</p>
<pre><code>[code-past]:/img/codepast-logo.jpg &quot;公众号：编程往事&quot;
</code></pre>
</blockquote>
<h2 id="链接"><a href="#链接" id="链接">链接</a></h2>
<h3 id="链接外部URL"><a href="#链接外部url" id="链接外部url">链接外部URL</a></h3>
<table>
<thead>
<tr><th>#</th><th>语法</th><th>效果</th></tr>
</thead>
<tbody>
<tr><td>1</td><td><code>[我的博客](http://blog.csdn.net/guodongxiaren &quot;悬停显示&quot;)</code></td><td><a href="http://blog.csdn.net/guodongxiaren" title="悬停显示" rel="nofollow" target="_blank">我的博客</a></td></tr>
<tr><td>2</td><td><code>[我的知乎][zhihu]</code></td><td><a href="https://www.zhihu.com/people/guodongxiaren" title="我的知乎，欢迎关注">我的知乎</a> </td></tr>
</tbody>
</table>
<p>语法2由两部分组成：<br />
- 第一部分使用两个中括号，[ ]里的标识符（本例中zhihu），可以是数字，字母等的组合，标识符上下对应就行了（<strong>姑且称之为URL标识符</strong>）<br />
- 第二部分标记实际URL。</p>
<blockquote>
<p>使用URL标识符能达到复用的目的，一般把全文所有的URL标识符统一放在文章末尾，这样看起来比较干净。除了干净之外，它还能达到复用的目的，比如你在多个地方想使用同一个链接，那么文内使用标识符，只在最底部给标识符定义出实际的URL链接即可，类似编程语言中的变量。</p>
<blockquote>
<p>URL标识符是我起的名字，不知道是否准确。囧。。</p>
</blockquote>
</blockquote>
<h3 id="链接本仓库里的URL"><a href="#链接本仓库里的url" id="链接本仓库里的url">链接本仓库里的URL</a></h3>
<table>
<thead>
<tr><th>语法</th><th>效果</th></tr>
</thead>
<tbody>
<tr><td><code>[我的简介](/example/profile.md)</code></td><td><a href="/example/profile.md" rel="nofollow" target="_blank">我的简介</a></td></tr>
<tr><td><code>[example](./example)</code></td><td><a href="./example" rel="nofollow" target="_blank">example</a></td></tr>
</tbody>
</table>
<h3 id="图片链接"><a href="#图片链接" id="图片链接">图片链接</a></h3>
<p>给图片加链接的本质是混合图片显示语法和普通的链接语法。普通的链接中[ ]内部是链接要显示的文本，而图片链接[ ]里面则是要显示的图片。<br />
直接混合两种语法当然可以，但是十分啰嗦，为此我们可以使用URL标识符的形式。</p>
<table>
<thead>
<tr><th>#</th><th>语法</th><th align="center">效果</th></tr>
</thead>
<tbody>
<tr><td>1</td><td><code>[![weibo-logo]](http://weibo.com/linpiaochen)</code></td><td align="center"><a href="http://weibo.com/linpiaochen" rel="nofollow" target="_blank"><img src="/img/weibo.png" alt="weibo-logo" title="点击图片进入我的微博" /></a></td></tr>
<tr><td>2</td><td><code>[![](/img/zhihu.png &quot;我的知乎，欢迎关注&quot;)][zhihu]</code></td><td align="center"><a href="https://www.zhihu.com/people/guodongxiaren" title="我的知乎，欢迎关注"><img src="/img/zhihu.png" alt="" title="我的知乎，欢迎关注" loading="lazy" /></a></td></tr>
<tr><td>3</td><td><code>[![csdn-logo]][csdn]</code></td><td align="center">[<img src="/img/csdn.png" alt="csdn-logo" title="我的CSDN博客" />]<a href="http://blog.csdn.net/guodongxiaren" title="我的博客">csdn</a></td></tr>
</tbody>
</table>
<p>因为图片本身和链接本身都支持URL标识符的形式，所以图片链接也可以很简洁（见例3）。<br />
注意，此时鼠标悬停时显示的文字是图片的title，而非链接本身的title了。</p>
<blockquote>
<p>本文URL标识符都放置于文末</p>
</blockquote>
<h3 id="锚点"><a href="#锚点" id="锚点">锚点</a></h3>
<p>其实呢，每一个标题都是一个锚点，和HTML的锚点（<code>#</code>）类似，比如我们</p>
<table>
<thead>
<tr><th>语法</th><th>效果</th></tr>
</thead>
<tbody>
<tr><td><code>[回到顶部](#readme)</code></td><td><a href="#readme" rel="nofollow" target="_blank">回到顶部</a></td></tr>
</tbody>
</table>
<p>不过要注意，标题中的英文字母都被转化为<strong>小写字母</strong>了。</p>
<blockquote>
<p>以前GitHub对中文支持的不好，所以中文标题不能正确识别为锚点，但是现在已经没问题啦！</p>
</blockquote>
<h2 id="列表"><a href="#列表" id="列表">列表</a></h2>
<h3 id="无序列表"><a href="#无序列表" id="无序列表">无序列表</a></h3>
<h4 id="语法"><a href="#语法" id="语法">语法</a></h4>
<pre><code>* 昵称：果冻虾仁
- 别名：隔壁老王
* 英文名：Jelly
</code></pre>
<h4 id="效果"><a href="#效果" id="效果">效果</a></h4>
<ul>
<li>昵称：果冻虾仁</li>
<li>别名：隔壁老王</li>
<li>英文名：Jelly</li>
</ul>
<h3 id="多级无序列表"><a href="#多级无序列表" id="多级无序列表">多级无序列表</a></h3>
<h4 id="语法"><a href="#语法" id="语法">语法</a></h4>
<pre><code>* 编程语言
    * 脚本语言
        * Python
</code></pre>
<h4 id="效果"><a href="#效果" id="效果">效果</a></h4>
<ul>
<li>编程语言
<ul>
<li>脚本语言
<ul>
<li>Python</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="一级有序列表"><a href="#一级有序列表" id="一级有序列表">一级有序列表</a></h3>
<h4 id="语法"><a href="#语法" id="语法">语法</a></h4>
<p>就是在数字后面加一个点，再加一个空格。不过看起来起来可能不够明显。</p>
<pre><code>面向对象的三个基本特征：

1. 封装
2. 继承
3. 多态
</code></pre>
<h4 id="效果"><a href="#效果" id="效果">效果</a></h4>
<p>面向对象的三个基本特征：</p>
<ol>
<li>封装</li>
<li>继承</li>
<li>多态</li>
</ol>
<h3 id="多级有序列表"><a href="#多级有序列表" id="多级有序列表">多级有序列表</a></h3>
<p>和无序列表一样，有序列表也有多级结构。</p>
<h4 id="语法"><a href="#语法" id="语法">语法</a></h4>
<pre><code>1. 这是一级的有序列表，数字1还是1
   1. 这是二级的有序列表，阿拉伯数字在显示的时候变成了罗马数字
      1. 这是三级的有序列表，数字在显示的时候变成了英文字母
</code></pre>
<h4 id="效果"><a href="#效果" id="效果">效果</a></h4>
<ol>
<li>这是一级的有序列表，数字1还是1</li>
<li>这是二级的有序列表，阿拉伯数字在显示的时候变成了罗马数字
<ol>
<li>这是三级的有序列表，数字在显示的时候变成了英文字母</li>
</ol>
</li>
</ol>
<h3 id="复选框列表"><a href="#复选框列表" id="复选框列表">复选框列表</a></h3>
<h4 id="语法"><a href="#语法" id="语法">语法</a></h4>
<pre><code>- [x] 需求分析
- [x] 系统设计
- [x] 详细设计
- [ ] 编码
- [ ] 测试
- [ ] 交付
</code></pre>
<h4 id="效果"><a href="#效果" id="效果">效果</a></h4>
<ul>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="checked" disabled="disabled" readonly="readonly" />&nbsp;需求分析</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="checked" disabled="disabled" readonly="readonly" />&nbsp;系统设计</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" checked="checked" disabled="disabled" readonly="readonly" />&nbsp;详细设计</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" readonly="readonly" />&nbsp;编码</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" readonly="readonly" />&nbsp;测试</li>
<li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" readonly="readonly" />&nbsp;交付</li>
</ul>
<p>您可以使用这个功能来标注某个项目各项任务的完成情况。</p>
<blockquote>
<p>Tip:</p>
<blockquote>
<p>在GitHub的<strong>issue</strong>中使用该语法是可以实时点击复选框来勾选或解除勾选的，而无需修改issue原文。</p>
</blockquote>
</blockquote>
<h2 id="块引用"><a href="#块引用" id="块引用">块引用</a></h2>
<h3 id="常用于引用文本"><a href="#常用于引用文本" id="常用于引用文本">常用于引用文本</a></h3>
<h4 id="文本摘自《深入理解计算机系统》P27"><a href="#文本摘自深入理解计算机系统p27" id="文本摘自深入理解计算机系统p27">文本摘自《深入理解计算机系统》P27</a></h4>
<p>　令人吃惊的是，在哪种字节顺序是合适的这个问题上，人们表现得非常情绪化。实际上术语“little endian”（小端）和“big endian”（大端）出自Jonathan Swift的《格利佛游记》一书，其中交战的两个派别无法就应该从哪一端打开一个半熟的鸡蛋达成一致。因此，争论沦为关于社会政治的争论。只要选择了一种规则并且始终如一的坚持，其实对于哪种字节排序的选择都是任意的。</p>
<blockquote>
<p><strong>“端”（endian）的起源</strong><br />
以下是Jonathan Swift在1726年关于大小端之争历史的描述：<br />
“……下面我要告诉你的是，Lilliput和Blefuscu这两大强国在过去36个月里一直在苦战。战争开始是由于以下的原因：我们大家都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端，可是当今的皇帝的祖父小时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝，就下了一道敕令，命令全体臣民吃鸡蛋时打破较小的一端，违令者重罚。”</p>
</blockquote>
<h3 id="块引用有多级结构"><a href="#块引用有多级结构" id="块引用有多级结构">块引用有多级结构</a></h3>
<h4 id="语法"><a href="#语法" id="语法">语法</a></h4>
<pre><code>&gt; 数据结构
&gt;&gt; 树
&gt;&gt;&gt; 二叉树
&gt;&gt;&gt;&gt; 平衡二叉树
&gt;&gt;&gt;&gt;&gt; 满二叉树
</code></pre>
<h4 id="效果"><a href="#效果" id="效果">效果</a></h4>
<blockquote>
<p>数据结构</p>
<blockquote>
<p>树</p>
<blockquote>
<p>二叉树</p>
<blockquote>
<p>平衡二叉树</p>
<blockquote>
<p>满二叉树</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<h2 id="代码高亮"><a href="#代码高亮" id="代码高亮">代码高亮</a></h2>
<h3 id="语法"><a href="#语法" id="语法">语法</a></h3>
<p>在三个反引号后面加上编程语言的名字，另起一行开始写代码，最后一行再加上三个反引号。</p>
<h3 id="效果"><a href="#效果" id="效果">效果</a></h3>
<pre><code class="language-Java">public static void main(String[]args){} //Java
</code></pre>
<pre><code class="language-c">int main(int argc, char *argv[]) //C
</code></pre>
<pre><code class="language-Bash">echo &quot;hello GitHub&quot; #Bash
</code></pre>
<pre><code class="language-javascript">document.getElementById(&quot;myH1&quot;).innerHTML=&quot;Welcome to my Homepage&quot;; //javascipt
</code></pre>
<pre><code class="language-cpp">string &amp;operator+(const string&amp; A,const string&amp; B) //cpp
</code></pre>
<h2 id="表格"><a href="#表格" id="表格">表格</a></h2>
<table>
<thead>
<tr><th>表头1  </th><th> 表头2</th></tr>
</thead>
<tbody>
<tr><td>表格单元  </td><td> 表格单元 </td></tr>
<tr><td>表格单元  </td><td> 表格单元 </td></tr>
</tbody>
</table>
<table>
<thead>
<tr><th> 表头1  </th><th> 表头2</th></tr>
</thead>
<tbody>
<tr><td> 表格单元   </td><td> 表格单元   </td></tr>
<tr><td> 表格单元   </td><td> 表格单元   </td></tr>
</tbody>
</table>
<h3 id="对齐"><a href="#对齐" id="对齐">对齐</a></h3>
<p>表格可以指定对齐方式</p>
<table>
<thead>
<tr><th align="left"> 左对齐 </th><th align="center"> 居中  </th><th align="right"> 右对齐 </th></tr>
</thead>
<tbody>
<tr><td align="left"> col 3 is      </td><td align="center"> some wordy text </td><td align="right"> $1600 </td></tr>
<tr><td align="left"> col 2 is      </td><td align="center"> centered        </td><td align="right">   $12 </td></tr>
<tr><td align="left"> zebra stripes </td><td align="center"> are neat        </td><td align="right">    $1 </td></tr>
</tbody>
</table>
<h3 id="混合其他语法"><a href="#混合其他语法" id="混合其他语法">混合其他语法</a></h3>
<p>表格单元中的内容可以和其他大多数GFM语法配合使用，如：</p>
<h4 id="使用普通文本的删除线，斜体等效果"><a href="#使用普通文本的删除线斜体等效果" id="使用普通文本的删除线斜体等效果">使用普通文本的删除线，斜体等效果</a></h4>
<table>
<thead>
<tr><th> 名字 </th><th> 描述 </th></tr>
</thead>
<tbody>
<tr><td> Help      </td><td> <del>Display the</del> help window.</td></tr>
<tr><td> Close     </td><td> <em>Closes</em> a window     </td></tr>
</tbody>
</table>
<h4 id="表格中嵌入图片（链接）"><a href="#表格中嵌入图片链接" id="表格中嵌入图片链接">表格中嵌入图片（链接）</a></h4>
<p>其实前面介绍图片显示、图片链接的时候为了清晰就是放在在表格中显示的。</p>
<table>
<thead>
<tr><th> 图片 </th><th> 描述 </th></tr>
</thead>
<tbody>
<tr><td><img src="http://www.baidu.com/img/bdlogo.gif" alt="baidu" title="百度logo" /> </td><td> 百度</td></tr>
</tbody>
</table>
<h2 id="表情"><a href="#表情" id="表情">表情</a></h2>
<p>Github的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。</p>
<p>比如<code>:blush:</code>，可以显示<img src="/img/blush.png" alt="emoji people:blush" height="20" width="20" align="absmiddle" />。</p>
<p>具体每一个表情的符号码，可以查询GitHub的官方网页<a href="http://www.emoji-cheat-sheet.com" rel="nofollow" target="_blank">http://www.emoji-cheat-sheet.com</a>。</p>
<p>但是这个网页每次都打开<strong>奇慢</strong>。。所以我整理到了本repo中，大家可以直接在此查看<a href="./emoji.md" rel="nofollow" target="_blank">emoji</a>。</p>
<h2 id="diff语法"><a href="#diff语法" id="diff语法">diff语法</a></h2>
<p>版本控制的系统中都少不了diff的功能，即展示一个文件内容的增加与删除。<br />
GFM中可以显示的展示diff效果。使用绿色表示新增，红色表示删除。</p>
<h4 id="语法"><a href="#语法" id="语法">语法</a></h4>
<p>其语法与代码高亮类似，只是在三个反引号后面写diff，<br />
并且其内容中，可以用 <code>+</code>开头表示新增，<code>-</code>开头表示删除。<br />
另外还有有 <code>!</code>和<code>#</code>的语法。</p>
<h4 id="效果"><a href="#效果" id="效果">效果</a></h4>
<pre><code class="language-diff">+ 人闲桂花落，
- 夜静春山空。
! 月出惊山鸟，
# 时鸣春涧中。
</code></pre>
<h2 id="常用HTML语法"><a href="#常用html语法" id="常用html语法">常用HTML语法</a></h2>
<p>markdown是支持HTML语法的，虽然不鼓励大量使用HTML语法，毕竟那样就丧失了markdown的意义，但是有一些HTML语法在写README的时候是很少的补充。</p>
<h3 id="折叠"><a href="#折叠" id="折叠">折叠</a></h3>
<pre><code>&lt;details&gt;
&lt;summary&gt;Linux环境&lt;/summary&gt;

##### 编译
xxxx

##### 安装
xxxx
&lt;/details&gt;
</code></pre>
<details>
<summary>Linux环境</summary>
<h5 id="编译"><a href="#编译" id="编译">编译</a></h5>
<p>xxxx</p>
<h5 id="安装"><a href="#安装" id="安装">安装</a></h5>
<p>xxxx</p>
</details>
<h3 id="居中"><a href="#居中" id="居中">居中</a></h3>
<p>很多地方都会用到居中的效果，比如如下内容将会把一个表格在页面中居中展示：</p>
<pre><code>&lt;div align=&quot;center&quot;&gt;

| 表头1  | 表头2|
| ---------- | -----------|
| 表格单元   | 表格单元   |
| 表格单元   | 表格单元   |

&lt;/div&gt;
</code></pre>
<div align="center">
<table>
<thead>
<tr><th> 表头1  </th><th> 表头2</th></tr>
</thead>
<tbody>
<tr><td> 表格单元   </td><td> 表格单元   </td></tr>
<tr><td> 表格单元   </td><td> 表格单元   </td></tr>
</tbody>
</table>
</div>
<p>其他任意需要居中展示的语法，都可以放在其中。</p>
<h2 id="其他"><a href="#其他" id="其他">其他</a></h2>
<p>还有一些非markdown语法，但是在README文件中也很实用的组件。</p>
<h3 id="徽章"><a href="#徽章" id="徽章">徽章</a></h3>
<p>绘制徽章，首选就是<a href="https://shields.io/" rel="nofollow" target="_blank">shields.io</a>  具体语法去官网探索。</p>
<p><img src="https://img.shields.io/badge/license-MIT-green" alt="LICENSE" loading="lazy" /><br />
<img src="https://img.shields.io/badge/Author-guodongxiaren-blue.svg" alt="Author" loading="lazy" /><br />
<img src="https://img.shields.io/badge/dynamic/json?color=0084ff&amp;logo=zhihu&amp;label=%E6%9E%9C%E5%86%BB%E8%99%BE%E4%BB%81&amp;query=%24.data.totalSubs&amp;url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dzhihu%26queryKey%3Dguodongxiaren" alt="zhihu-shield" /></p>
<p>其次有些第三方平台也提供方便的徽章，比如gitter：</p>
<p><a href="https://gitter.im/guodongxiaren/README?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" rel="nofollow" target="_blank"><img src="https://badges.gitter.im/guodongxiaren/README.svg" alt="Join the chat at https://gitter.im/guodongxiaren/README" loading="lazy" /></a></p>
<h3 id="star历史"><a href="#star历史" id="star历史">star历史</a></h3>
<p>star历史可以使用这个网站<a href="https://star-history.com/" rel="nofollow" target="_blank">star-history.com</a></p>
<pre><code>[![Star History Chart](https://api.star-history.com/svg?repos=guodongxiaren/README&amp;type=Date)](https://star-history.com/#guodongxiaren/README&amp;Date)
</code></pre>
<p>这段代码的显示效果如下：</p>
<p><a href="https://star-history.com/#guodongxiaren/README&amp;Date" rel="nofollow" target="_blank"><img src="https://api.star-history.com/svg?repos=guodongxiaren/README&amp;type=Date" alt="Star History Chart" loading="lazy" /></a></p>
<hr />
', 'README
===========================

该文件用来测试和展示书写README的各种markdown语法。GitHub的markdown语法在标准的markdown语法基础上做了扩充，称之为`GitHub Flavored Markdown`。简称`GFM`，GFM在GitHub上有广泛应用，除了README文件外，issues和wiki均支持markdown语法。

****

|作者|果冻虾仁|
|---|---
|知乎|[![zhihu-shield]][zhihu]
|公众号|编程往事


****
## 目录
* [横线](#横线)
* [标题](#标题)
* [文本](#文本)
    * 普通文本
    * 单行文本
    * 多行文本
    * 文字高亮
    * 换行
    * 斜体
    * 粗体
    * 删除线
* [图片](#图片)
    * 来源于网络的图片
    * GitHub仓库中的图片
* [链接](#链接)
    * 文字超链接
        *  链接外部URL
        *  链接本仓库里的URL
    *  锚点
    * [图片链接](#图片链接)
* [列表](#列表)
    * 无序列表
    * 有序列表
    * 复选框列表
* [块引用](#块引用)
* [代码高亮](#代码高亮)
* [表格](#表格)
* [表情](#表情)
* [diff语法](#diff语法)
* [常用HTML语法](#常用HTML语法)
    * [折叠](#折叠)
    * [居中](#居中)
* [其他](#其他)
    * [徽章](#徽章)
    * [star历史](#star历史)

### 横线
-----------
***、---、___可以显示横线效果

***
---
___



## 标题
```
# 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
```
效果如下：

# 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题


## 文本
### 普通文本
这是一段普通的文本
### 单行文本
    Hello,大家好，我是果冻虾仁。
在一行开头加入1个Tab或者4个空格。
### 文本块
#### 语法1
在连续几行的文本开头加入1个Tab或者4个空格。

    欢迎到访
    很高兴见到您
    祝您，早上好，中午好，下午好，晚安

#### 语法2
使用一对各三个的反引号：
```
欢迎到访
我是C++码农
你可以在知乎、CSDN、简书搜索【果冻虾仁】找到我
```
该语法也可以实现代码高亮，见[代码高亮](#代码高亮)
### 文字高亮
文字高亮功能能使行内部分文字高亮，使用一对反引号。
语法：
```
`linux` `网络编程` `socket` `epoll`
```
效果：`linux` `网络编程` `socket` `epoll`

也适合做一篇文章的tag
#### 换行
直接回车不能换行，
可以在上一行文本后面补两个空格，
这样下一行的文本就换行了。

或者就是在两行文本直接加一个空行。

也能实现换行效果，不过这个行间距有点大。
#### 斜体、粗体、删除线

|语法|效果|
|----|-----|
|`*斜体1*`|*斜体1*|
|`_斜体2_`| _斜体2_|
|`**粗体1**`|**粗体1**|
|`__粗体2__`|__粗体2__|
|`这是一个 ~~删除线~~`|这是一个 ~~删除线~~|
|`***斜粗体1***`|***斜粗体1***|
|`___斜粗体2___`|___斜粗体2___|
|`***~~斜粗体删除线1~~***`|***~~斜粗体删除线1~~***|
|`~~***斜粗体删除线2***~~`|~~***斜粗体删除线2***~~|

    斜体、粗体、删除线可混合使用

## 图片
基本格式：
```
![alt](URL title)
```
alt和title即对应HTML中的alt和title属性（都可省略）：
- alt表示图片显示失败时的替换文本
- title表示鼠标悬停在图片时的显示文本（注意这里要加引号）

URL即图片的url地址，如果引用本仓库中的图片，直接使用**相对路径**就可了，如果引用其他github仓库中的图片要注意格式，即：`仓库地址/raw/分支名/图片路径`，如：
```
https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif
```

|#|语法|效果|
|---|---|----
|1|`![baidu](http://www.baidu.com/img/bdlogo.gif "百度logo")`|![baidu](http://www.baidu.com/img/bdlogo.gif "百度logo")
|2|`![][code-past]`|![][code-past]

注意例2的写法使用了**URL标识符**的形式，在[链接](#链接)一节有介绍。
>在文末有code-past的定义：
```
[code-past]:/img/codepast-logo.jpg "公众号：编程往事"
```

## 链接
### 链接外部URL

|#|语法|效果|
|---|----|-----|
|1|`[我的博客](http://blog.csdn.net/guodongxiaren "悬停显示")`|[我的博客](http://blog.csdn.net/guodongxiaren "悬停显示")|
|2|`[我的知乎][zhihu] `|[我的知乎][zhihu] |

语法2由两部分组成：
- 第一部分使用两个中括号，[ ]里的标识符（本例中zhihu），可以是数字，字母等的组合，标识符上下对应就行了（**姑且称之为URL标识符**）
- 第二部分标记实际URL。

>使用URL标识符能达到复用的目的，一般把全文所有的URL标识符统一放在文章末尾，这样看起来比较干净。除了干净之外，它还能达到复用的目的，比如你在多个地方想使用同一个链接，那么文内使用标识符，只在最底部给标识符定义出实际的URL链接即可，类似编程语言中的变量。
>>URL标识符是我起的名字，不知道是否准确。囧。。

### 链接本仓库里的URL

|语法|效果|
|----|-----|
|`[我的简介](/example/profile.md)`|[我的简介](/example/profile.md)|
|`[example](./example)`|[example](./example)|

### 图片链接
给图片加链接的本质是混合图片显示语法和普通的链接语法。普通的链接中[ ]内部是链接要显示的文本，而图片链接[ ]里面则是要显示的图片。
直接混合两种语法当然可以，但是十分啰嗦，为此我们可以使用URL标识符的形式。

|#|语法|效果|
|---|----|:---:|
|1|`[![weibo-logo]](http://weibo.com/linpiaochen)`|[![weibo-logo]](http://weibo.com/linpiaochen)|
|2|`[![](/img/zhihu.png "我的知乎，欢迎关注")][zhihu]`|[![](/img/zhihu.png "我的知乎，欢迎关注")][zhihu]|
|3|`[![csdn-logo]][csdn]`|[![csdn-logo]][csdn]|

因为图片本身和链接本身都支持URL标识符的形式，所以图片链接也可以很简洁（见例3）。
注意，此时鼠标悬停时显示的文字是图片的title，而非链接本身的title了。
> 本文URL标识符都放置于文末

### 锚点
其实呢，每一个标题都是一个锚点，和HTML的锚点（`#`）类似，比如我们

|语法|效果|
|---|---|
|`[回到顶部](#readme)`|[回到顶部](#readme)|

不过要注意，标题中的英文字母都被转化为**小写字母**了。
> 以前GitHub对中文支持的不好，所以中文标题不能正确识别为锚点，但是现在已经没问题啦！

## 列表
### 无序列表
#### 语法
```
* 昵称：果冻虾仁
- 别名：隔壁老王
* 英文名：Jelly
```
#### 效果
* 昵称：果冻虾仁
- 别名：隔壁老王
* 英文名：Jelly

### 多级无序列表
#### 语法
```
* 编程语言
    * 脚本语言
        * Python
```
#### 效果
* 编程语言
    * 脚本语言
        * Python

### 一级有序列表
#### 语法
就是在数字后面加一个点，再加一个空格。不过看起来起来可能不够明显。
```
面向对象的三个基本特征：

1. 封装
2. 继承
3. 多态
```

#### 效果
面向对象的三个基本特征：

1. 封装
2. 继承
3. 多态


### 多级有序列表
和无序列表一样，有序列表也有多级结构。
#### 语法
```
1. 这是一级的有序列表，数字1还是1
   1. 这是二级的有序列表，阿拉伯数字在显示的时候变成了罗马数字
      1. 这是三级的有序列表，数字在显示的时候变成了英文字母
```

#### 效果

1. 这是一级的有序列表，数字1还是1
   1. 这是二级的有序列表，阿拉伯数字在显示的时候变成了罗马数字
      1. 这是三级的有序列表，数字在显示的时候变成了英文字母


### 复选框列表
#### 语法
```
- [x] 需求分析
- [x] 系统设计
- [x] 详细设计
- [ ] 编码
- [ ] 测试
- [ ] 交付
```
#### 效果

- [x] 需求分析
- [x] 系统设计
- [x] 详细设计
- [ ] 编码
- [ ] 测试
- [ ] 交付

您可以使用这个功能来标注某个项目各项任务的完成情况。
> Tip:
>> 在GitHub的**issue**中使用该语法是可以实时点击复选框来勾选或解除勾选的，而无需修改issue原文。

## 块引用

### 常用于引用文本
#### 文本摘自《深入理解计算机系统》P27
　令人吃惊的是，在哪种字节顺序是合适的这个问题上，人们表现得非常情绪化。实际上术语“little endian”（小端）和“big endian”（大端）出自Jonathan Swift的《格利佛游记》一书，其中交战的两个派别无法就应该从哪一端打开一个半熟的鸡蛋达成一致。因此，争论沦为关于社会政治的争论。只要选择了一种规则并且始终如一的坚持，其实对于哪种字节排序的选择都是任意的。
> **“端”（endian）的起源**
以下是Jonathan Swift在1726年关于大小端之争历史的描述：
“……下面我要告诉你的是，Lilliput和Blefuscu这两大强国在过去36个月里一直在苦战。战争开始是由于以下的原因：我们大家都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端，可是当今的皇帝的祖父小时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝，就下了一道敕令，命令全体臣民吃鸡蛋时打破较小的一端，违令者重罚。”

### 块引用有多级结构
#### 语法
```
> 数据结构
>> 树
>>> 二叉树
>>>> 平衡二叉树
>>>>> 满二叉树
```
#### 效果
> 数据结构
>> 树
>>> 二叉树
>>>> 平衡二叉树
>>>>> 满二叉树

## 代码高亮

### 语法
在三个反引号后面加上编程语言的名字，另起一行开始写代码，最后一行再加上三个反引号。

### 效果
```Java
public static void main(String[]args){} //Java
```
```c
int main(int argc, char *argv[]) //C
```
```Bash
echo "hello GitHub" #Bash
```
```javascript
document.getElementById("myH1").innerHTML="Welcome to my Homepage"; //javascipt
```
```cpp
string &operator+(const string& A,const string& B) //cpp
```
## 表格

表头1  | 表头2|
--------- | --------|
表格单元  | 表格单元 |
表格单元  | 表格单元 |

| 表头1  | 表头2|
| ---------- | -----------|
| 表格单元   | 表格单元   |
| 表格单元   | 表格单元   |

### 对齐
表格可以指定对齐方式

| 左对齐 | 居中  | 右对齐 |
| :------------ |:---------------:| -----:|
| col 3 is      | some wordy text | $1600 |
| col 2 is      | centered        |   $12 |
| zebra stripes | are neat        |    $1 |

### 混合其他语法
表格单元中的内容可以和其他大多数GFM语法配合使用，如：
#### 使用普通文本的删除线，斜体等效果

| 名字 | 描述 |
| ------------- | ----------- |
| Help      | ~~Display the~~ help window.|
| Close     | _Closes_ a window     |

#### 表格中嵌入图片（链接）
其实前面介绍图片显示、图片链接的时候为了清晰就是放在在表格中显示的。

| 图片 | 描述 |
| ---- | ---- |
|![baidu][baidu-logo] | 百度|

## 表情
Github的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。

比如`:blush:`，可以显示:blush:。

具体每一个表情的符号码，可以查询GitHub的官方网页[http://www.emoji-cheat-sheet.com](http://www.emoji-cheat-sheet.com)。

但是这个网页每次都打开**奇慢**。。所以我整理到了本repo中，大家可以直接在此查看[emoji](./emoji.md)。

## diff语法
版本控制的系统中都少不了diff的功能，即展示一个文件内容的增加与删除。
GFM中可以显示的展示diff效果。使用绿色表示新增，红色表示删除。
#### 语法
其语法与代码高亮类似，只是在三个反引号后面写diff，
并且其内容中，可以用 `+ `开头表示新增，`- `开头表示删除。
另外还有有 `!`和`#`的语法。

#### 效果

```diff
+ 人闲桂花落，
- 夜静春山空。
! 月出惊山鸟，
# 时鸣春涧中。
```
## 常用HTML语法
markdown是支持HTML语法的，虽然不鼓励大量使用HTML语法，毕竟那样就丧失了markdown的意义，但是有一些HTML语法在写README的时候是很少的补充。
### 折叠
```
<details>
<summary>Linux环境</summary>

##### 编译
xxxx

##### 安装
xxxx
</details>
```
<details>
<summary>Linux环境</summary>

##### 编译
xxxx

##### 安装
xxxx

</details>

### 居中

很多地方都会用到居中的效果，比如如下内容将会把一个表格在页面中居中展示：

```
<div align="center">

| 表头1  | 表头2|
| ---------- | -----------|
| 表格单元   | 表格单元   |
| 表格单元   | 表格单元   |

</div>
```

<div align="center">

| 表头1  | 表头2|
| ---------- | -----------|
| 表格单元   | 表格单元   |
| 表格单元   | 表格单元   |

</div>

其他任意需要居中展示的语法，都可以放在其中。

## 其他
还有一些非markdown语法，但是在README文件中也很实用的组件。
### 徽章
绘制徽章，首选就是[shields.io](https://shields.io/)  具体语法去官网探索。

![LICENSE](https://img.shields.io/badge/license-MIT-green)
![Author](https://img.shields.io/badge/Author-guodongxiaren-blue.svg)
![zhihu-shield]

其次有些第三方平台也提供方便的徽章，比如gitter：

[![Join the chat at https://gitter.im/guodongxiaren/README](https://badges.gitter.im/guodongxiaren/README.svg)](https://gitter.im/guodongxiaren/README?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)

### star历史
star历史可以使用这个网站[star-history.com](https://star-history.com/)
```
[![Star History Chart](https://api.star-history.com/svg?repos=guodongxiaren/README&type=Date)](https://star-history.com/#guodongxiaren/README&Date)
```
这段代码的显示效果如下：

[![Star History Chart](https://api.star-history.com/svg?repos=guodongxiaren/README&type=Date)](https://star-history.com/#guodongxiaren/README&Date)


--------------------------------
[csdn]:http://blog.csdn.net/guodongxiaren "我的博客"
[zhihu]:https://www.zhihu.com/people/guodongxiaren "我的知乎，欢迎关注"
[weibo]:http://weibo.com/linpiaochen
[baidu-logo]:http://www.baidu.com/img/bdlogo.gif "百度logo"
[weibo-logo]:/img/weibo.png "点击图片进入我的微博"
[csdn-logo]:/img/csdn.png "我的CSDN博客"
[code-past]:/img/codepast-logo.jpg "公众号：编程往事"
[zhihu-shield]:https://img.shields.io/badge/dynamic/json?color=0084ff&logo=zhihu&label=%E6%9E%9C%E5%86%BB%E8%99%BE%E4%BB%81&query=%24.data.totalSubs&url=https%3A%2F%2Fapi.spencerwoo.com%2Fsubstats%2F%3Fsource%3Dzhihu%26queryKey%3Dguodongxiaren', 'README
该文件用来测试和展示书写README的各种markdown语法。GitHub的markdown语法在标准的markdown语法基础上做了扩充，称之为GitHub Flavored Markdown。简称GFM，GFM在GitHub上有广泛应用，除了README文件外，issues和wiki均支持markdown语法。



作者果冻虾仁


知乎[]zhihu
公众号编程往事



目录

横线
标题
文本

普通文本
单行文本
多行文本
文字高亮
换行
斜体
粗体
删除线


图片

来源于网络的图片
GitHub仓库中的图片


链接

文字超链接

链接外部URL
链接本仓库里的URL


锚点
图片链接


列表

无序列表
有序列表
复选框列表


块引用
代码高亮
表格
表情
diff语法
常用HTML语法

折叠
居中


其他

徽章
star历史



横线

***、—、___可以显示横线效果



标题
# 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题

效果如下：
一级标题
二级标题
三级标题
四级标题
五级标题
六级标题
文本
普通文本
这是一段普通的文本
单行文本
Hello,大家好，我是果冻虾仁。

在一行开头加入1个Tab或者4个空格。
文本块
语法1
在连续几行的文本开头加入1个Tab或者4个空格。
欢迎到访
很高兴见到您
祝您，早上好，中午好，下午好，晚安

语法2
使用一对各三个的反引号：
欢迎到访
我是C++码农
你可以在知乎、CSDN、简书搜索【果冻虾仁】找到我

该语法也可以实现代码高亮，见代码高亮
文字高亮
文字高亮功能能使行内部分文字高亮，使用一对反引号。
语法：
`linux` `网络编程` `socket` `epoll`

效果：linux 网络编程 socket epoll
也适合做一篇文章的tag
换行
直接回车不能换行，
可以在上一行文本后面补两个空格，
这样下一行的文本就换行了。
或者就是在两行文本直接加一个空行。
也能实现换行效果，不过这个行间距有点大。
斜体、粗体、删除线


语法效果


*斜体1*斜体1
_斜体2_ 斜体2
**粗体1**粗体1
__粗体2__粗体2
这是一个 ~~删除线~~这是一个 删除线
***斜粗体1***斜粗体1
___斜粗体2___斜粗体2
***~~斜粗体删除线1~~******斜粗体删除线1***
~~***斜粗体删除线2***~~斜粗体删除线2


斜体、粗体、删除线可混合使用

图片
基本格式：
![alt](URL title)

alt和title即对应HTML中的alt和title属性（都可省略）：
- alt表示图片显示失败时的替换文本
- title表示鼠标悬停在图片时的显示文本（注意这里要加引号）
URL即图片的url地址，如果引用本仓库中的图片，直接使用相对路径就可了，如果引用其他github仓库中的图片要注意格式，即：仓库地址/raw/分支名/图片路径，如：
https://github.com/guodongxiaren/ImageCache/raw/master/Logo/foryou.gif



#语法效果


1![baidu](http://www.baidu.com/img/bdlogo.gif "百度logo")
2![][code-past]


注意例2的写法使用了URL标识符的形式，在链接一节有介绍。

在文末有code-past的定义：
[code-past]:/img/codepast-logo.jpg "公众号：编程往事"


链接
链接外部URL


#语法效果


1[我的博客](http://blog.csdn.net/guodongxiaren "悬停显示")我的博客
2[我的知乎][zhihu]我的知乎 


语法2由两部分组成：
- 第一部分使用两个中括号，[ ]里的标识符（本例中zhihu），可以是数字，字母等的组合，标识符上下对应就行了（姑且称之为URL标识符）
- 第二部分标记实际URL。

使用URL标识符能达到复用的目的，一般把全文所有的URL标识符统一放在文章末尾，这样看起来比较干净。除了干净之外，它还能达到复用的目的，比如你在多个地方想使用同一个链接，那么文内使用标识符，只在最底部给标识符定义出实际的URL链接即可，类似编程语言中的变量。

URL标识符是我起的名字，不知道是否准确。囧。。


链接本仓库里的URL


语法效果


[我的简介](/example/profile.md)我的简介
[example](./example)example


图片链接
给图片加链接的本质是混合图片显示语法和普通的链接语法。普通的链接中[ ]内部是链接要显示的文本，而图片链接[ ]里面则是要显示的图片。
直接混合两种语法当然可以，但是十分啰嗦，为此我们可以使用URL标识符的形式。


#语法效果


1[![weibo-logo]](http://weibo.com/linpiaochen)
2[![](/img/zhihu.png "我的知乎，欢迎关注")][zhihu]
3[![csdn-logo]][csdn][]csdn


因为图片本身和链接本身都支持URL标识符的形式，所以图片链接也可以很简洁（见例3）。
注意，此时鼠标悬停时显示的文字是图片的title，而非链接本身的title了。

本文URL标识符都放置于文末

锚点
其实呢，每一个标题都是一个锚点，和HTML的锚点（#）类似，比如我们


语法效果


[回到顶部](#readme)回到顶部


不过要注意，标题中的英文字母都被转化为小写字母了。

以前GitHub对中文支持的不好，所以中文标题不能正确识别为锚点，但是现在已经没问题啦！

列表
无序列表
语法
* 昵称：果冻虾仁
- 别名：隔壁老王
* 英文名：Jelly

效果

昵称：果冻虾仁
别名：隔壁老王
英文名：Jelly

多级无序列表
语法
* 编程语言
    * 脚本语言
        * Python

效果

编程语言

脚本语言

Python





一级有序列表
语法
就是在数字后面加一个点，再加一个空格。不过看起来起来可能不够明显。
面向对象的三个基本特征：

1. 封装
2. 继承
3. 多态

效果
面向对象的三个基本特征：

封装
继承
多态

多级有序列表
和无序列表一样，有序列表也有多级结构。
语法
1. 这是一级的有序列表，数字1还是1
   1. 这是二级的有序列表，阿拉伯数字在显示的时候变成了罗马数字
      1. 这是三级的有序列表，数字在显示的时候变成了英文字母

效果

这是一级的有序列表，数字1还是1
这是二级的有序列表，阿拉伯数字在显示的时候变成了罗马数字

这是三级的有序列表，数字在显示的时候变成了英文字母



复选框列表
语法
- [x] 需求分析
- [x] 系统设计
- [x] 详细设计
- [ ] 编码
- [ ] 测试
- [ ] 交付

效果

 需求分析
 系统设计
 详细设计
 编码
 测试
 交付

您可以使用这个功能来标注某个项目各项任务的完成情况。

Tip:

在GitHub的issue中使用该语法是可以实时点击复选框来勾选或解除勾选的，而无需修改issue原文。


块引用
常用于引用文本
文本摘自《深入理解计算机系统》P27
　令人吃惊的是，在哪种字节顺序是合适的这个问题上，人们表现得非常情绪化。实际上术语“little endian”（小端）和“big endian”（大端）出自Jonathan Swift的《格利佛游记》一书，其中交战的两个派别无法就应该从哪一端打开一个半熟的鸡蛋达成一致。因此，争论沦为关于社会政治的争论。只要选择了一种规则并且始终如一的坚持，其实对于哪种字节排序的选择都是任意的。

“端”（endian）的起源
以下是Jonathan Swift在1726年关于大小端之争历史的描述：
“……下面我要告诉你的是，Lilliput和Blefuscu这两大强国在过去36个月里一直在苦战。战争开始是由于以下的原因：我们大家都认为，吃鸡蛋前，原始的方法是打破鸡蛋较大的一端，可是当今的皇帝的祖父小时候吃鸡蛋，一次按古法打鸡蛋时碰巧将一个手指弄破了，因此他的父亲，当时的皇帝，就下了一道敕令，命令全体臣民吃鸡蛋时打破较小的一端，违令者重罚。”

块引用有多级结构
语法
> 数据结构
>> 树
>>> 二叉树
>>>> 平衡二叉树
>>>>> 满二叉树

效果

数据结构

树

二叉树

平衡二叉树

满二叉树





代码高亮
语法
在三个反引号后面加上编程语言的名字，另起一行开始写代码，最后一行再加上三个反引号。
效果
public static void main(String[]args){} //Java

int main(int argc, char *argv[]) //C

echo "hello GitHub" #Bash

document.getElementById("myH1").innerHTML="Welcome to my Homepage"; //javascipt

string &operator+(const string& A,const string& B) //cpp

表格


表头1   表头2


表格单元   表格单元 
表格单元   表格单元 




 表头1   表头2


 表格单元    表格单元   
 表格单元    表格单元   


对齐
表格可以指定对齐方式


 左对齐  居中   右对齐 


 col 3 is       some wordy text  $1600 
 col 2 is       centered           $12 
 zebra stripes  are neat            $1 


混合其他语法
表格单元中的内容可以和其他大多数GFM语法配合使用，如：
使用普通文本的删除线，斜体等效果


 名字  描述 


 Help       Display the help window.
 Close      Closes a window     


表格中嵌入图片（链接）
其实前面介绍图片显示、图片链接的时候为了清晰就是放在在表格中显示的。


 图片  描述 


  百度


表情
Github的Markdown语法支持添加emoji表情，输入不同的符号码（两个冒号包围的字符）可以显示出不同的表情。
比如:blush:，可以显示。
具体每一个表情的符号码，可以查询GitHub的官方网页http://www.emoji-cheat-sheet.com。
但是这个网页每次都打开奇慢。。所以我整理到了本repo中，大家可以直接在此查看emoji。
diff语法
版本控制的系统中都少不了diff的功能，即展示一个文件内容的增加与删除。
GFM中可以显示的展示diff效果。使用绿色表示新增，红色表示删除。
语法
其语法与代码高亮类似，只是在三个反引号后面写diff，
并且其内容中，可以用 +开头表示新增，-开头表示删除。
另外还有有 !和#的语法。
效果
+ 人闲桂花落，
- 夜静春山空。
! 月出惊山鸟，
# 时鸣春涧中。

常用HTML语法
markdown是支持HTML语法的，虽然不鼓励大量使用HTML语法，毕竟那样就丧失了markdown的意义，但是有一些HTML语法在写README的时候是很少的补充。
折叠
<details>
<summary>Linux环境</summary>

##### 编译
xxxx

##### 安装
xxxx
</details>


Linux环境
编译
xxxx
安装
xxxx

居中
很多地方都会用到居中的效果，比如如下内容将会把一个表格在页面中居中展示：
<div align="center">

| 表头1  | 表头2|
| ---------- | -----------|
| 表格单元   | 表格单元   |
| 表格单元   | 表格单元   |

</div>




 表头1   表头2


 表格单元    表格单元   
 表格单元    表格单元   



其他任意需要居中展示的语法，都可以放在其中。
其他
还有一些非markdown语法，但是在README文件中也很实用的组件。
徽章
绘制徽章，首选就是shields.io  具体语法去官网探索。



其次有些第三方平台也提供方便的徽章，比如gitter：

star历史
star历史可以使用这个网站star-history.com
[![Star History Chart](https://api.star-history.com/svg?repos=guodongxiaren/README&type=Date)](https://star-history.com/#guodongxiaren/README&Date)

这段代码的显示效果如下：


', 1599743283574079488);
INSERT INTO public.article_content VALUES (94, '2022-08-27 06:06:45.027', false, '2022-09-15 10:41:12.565', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', '修改gradle脚本，加速spring4.1源码编译构建速度

程序员欣宸

于 2018-07-01 17:50:21 发布

2097
 收藏
分类专栏： spring-framework spring4源码分析与实战 文章标签： spring gradle
版权

spring-framework
同时被 2 个专栏收录
20 篇文章23 订阅
订阅专栏

spring4源码分析与实战
20 篇文章72 订阅
订阅专栏
本次优化的策略是跳过task来节省时间，例如文档包和源码包，因此，如果您的目标是拿到最新jar包，那么这种手段适合您，如果您想拿到包括文档、源码等在内的所有构建资源，那么这种方式就不适合了；

原文地址：https://blog.csdn.net/boling_cavalry/article/details/80873343

先列举一下软硬件环境信息：
1. 硬件：i5-8400，16G(DDR4-2667MHz)，SSD128G
2. 操作系统：win10 64位
3. JDK：1.8.0_171
4. Gradle：2.14.1
5. IntelliJ IDEA：2018.1.5
6. spring-framework源码：4.1.8.RELEASE

注意，windows下编译spring-framwork4.1源码请参考《Win10环境编译spring-framework4.1.9版本，报错”Failed to capture snapshot of input files for task ‘distZip’”》进行修改，否则会构建失败；

下载后并导入到IEDA之后，如果不调整build.gradle脚本就直接编译，耗时16分43秒，如下图：



现在我们来修改build.gradle文件，去掉一些与jar包构建无关的task；

找到configure(subprojects - project(“:spring-build-src”))，在这个方法的结尾处有如下代码：
artifacts {
    archives sourcesJar
    archives javadocJar
}
1
2
3
4
改成下面这样，也就是将大括号内的两行都注释掉

artifacts {
    //archives sourcesJar
    //archives javadocJar
}
1
2
3
4

2. 找到configure(rootProject)，在这个方法的结尾处有如下代码：

artifacts {
    archives docsZip
    archives schemaZip
    archives distZip
}
1
2
3
4
5
改成下面这样，也就是将大括号内的三行都注释掉

artifacts {
    //archives docsZip
    //archives schemaZip
    //archives distZip
}
1
2
3
4
5

3. build.gradle修改完毕，可以再次构建了，记得使用-x test参数跳过测试，操作如下图：


4. 如下图所示，仅用1分59秒就完成构建，去子工程的build目录发现所需jar包构建成功（例如spring-framework-4.1.8.RELEASE\spring-context\build\libs）：


5. 为了保证数据准确，每次build之前已经做过clean操作；


程序员欣宸
已关注

2


0


0

专栏目录
程序员欣宸文章汇总(Java篇)
程序员欣宸的博客
 6064
本文保存了作者所有Java相关文章的地址，并做了轻量级分类，希望您能从中找到有参考价值的内容，那将是我的荣幸；
程序员欣宸文章汇总(DevOps篇)
程序员欣宸的博客
 6328
本文保存了作者所有DevOps相关文章的地址，并做了轻量级分类，希望您能从中找到有参考价值的内容，那将是我的荣幸
修改gradle脚本，加速spring源码编译构建速度
程序员欣宸的博客
 1555
本次优化的策略是跳过task来节省时间，例如文档包和源码包，因此，如果您的目标是拿到最新jar包，那么这种手段适合您，如果您想拿到包括文档、源码等在内的所有构建资源，那么这种方式就不适...
每次吃一点AndroidのGradle加速
lcs353732057的专栏
 181
目录：1、Gradle初识2、Gradle加速3、AndroidStudio工程下的build.gradle文件4、AndroidStudio导入工程还是卡卡卡？？？ Android小仙 1. Gradle是什么？ 1.1. 概念 Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具。一种依赖管理工具，面向Java应用为主，它
android源码编译模块慢,有赞Android秒级编译优化实践
weixin_34116482的博客
 258
1. 有赞Android秒级编译优化实践有赞-明天2. ⽬目录背景⽅方案调研有赞⽅方案实践成果未来规划3. 背景Android端现状Kotlin33%客户端PhonePad每周发版业务账户交易易商品45W库存共26个⼦子业务模块导购…⽉月均上线功能 50+Java67%4. 遇到的问题编译时间1818团队开发效率下降1513.512新⼈人⼊入⻔门成本提⾼高98不不利利于紧急问题修复4.502016...
windows下idea构建springframework5.1.x源码阅读环境（无需翻墙）
Leehom_Wang的博客
 213
1.安装jdk1.8,略过。 2.安装gradle-4.10.3 springframework5.1.x源码构建工具是gradle-4.10.3版本。 点击链接从gradle官网下载4.10.3版本的二进制包 下载后解压 添加环境变量，GRADLE_HOME 为安装目录,GRADLE_USER_HOME为类似maven的本地仓库。 添加path 打开cmd查看是否安装成功执行 grade -v 最重要的点： 为了加速构建过程中依赖包的下载速度，使用阿里云镜像。 在gradle安装目录下的init.
spring-framework5.1源码编译导入idea
qq_39095701的博客
 83
主要是为了编译spring源码而写 一、环境准备 我自己测试的环境 1、jdk11 2、gradle 6.8.3 3、idea2021.1 4、spring-framework5.1 5、git 源码地址： spring-framework5.1 gradle 6.8.3 二、具体步骤 1、搜先找到源码内的build.gradle，settings.gradle这两个文件，因为原本加载会很慢，所以我们需要用到阿里云镜像地址来加速下载速度 阿里云仓库地址链接 我们需要把这两个地址添加到build.grad
加快gradle的编译速度总结-亲身经历
u011904605的博客
 2264
http://www.jianshu.com/p/200d55b4d40a http://www.jianshu.com/p/200d55b4d40a http://www.jianshu.com/p/200d55b4d40a 加快gradle的编译速度总结-亲身经历 说明 刚进公司，由于公司准备新地方，所以电脑不够用，先用自己的电脑开发。然后配置
使用 idea 构建spring 5.2.8 源码
胡歌粉丝的博客
 449
使用 idea 构建spring源码前言准备工作开始构建 前言 最近不知道是在哪的个人信息被泄露了，老是有电话打来资讯： 亲~，我们这边有java架构师课程哟，面对阿里 P7 P8 呦，实在不行还有大数据分析师，大数据实战课程有没有兴趣呢，只要一万+的学费，就能换取年薪 60W+的 工作呦~ 我当时就想说 “你丫的敢跟我签合同吗，没找到薪水那么高的，你马上退钱吗！” 其实这些大家都心知肚明，这种培训不能说没用，但是和它所说的涨薪幅度还是有差距了，当然，过程中“被迫”瞄了几眼，观察了下课程，几乎都有Sprin
Androidstudio中gradle配置和使用
LANGZI7758521的专栏
 2106
加速篇 GRADLE的构建过程通常会比较漫长，一个中等项目，10M左右大小的app，一次完整构建大概在5分钟左右，是不是很吓人，当然，如果是在调试阶段，采用Android Studuo 2.0，默认提供的Instant Run方式，每次修改都不会重新构建项目，从而加快了构建过程。恩，这是另一个故事，这里，我们先谈谈GRADLE脚本的加速姿势。 一般来说，GRADLE一次完整的构建过程通常分成三
Gradle源码解析：生命周期的三个阶段
m0_70748845的博客
 152
gradle是和maven、ant一样是一个强大的构建工具，使用构建工具来描述它还不能凸显他的强大，确切的说应该是编程框架更灵活： maven\ant构建程序时不能修改构建的过程（构建脚本） （例如修改打包出的apk名字gradle就可轻松做到）粒度性： maven\ant构建程序时源代码和构建工具相互独立； 我们不知道源码做了什么gradle从源码的编译、资源的编译、生成一个个Task逐个执行Task；Task源码开源扩展性： 支持插件机制兼容性：兼容所有ant、maven功能也就是各种任务（Task）的
GRADLE 构建最佳实践
weixin_34297704的博客
 42
随着谷歌对Eclipse的无情抛弃和对Android Studio的日趋完善，使用gradle构建Android项目已经成为开发者的一项必会良技。那么，问题来了，采用什么样的姿势才能让项目开发构建过程高潮迭起，精彩不断呢？ 其实网上有很多关于gradle的文章，gradle官方和谷歌也提供了详细的文档和教程，可素，当你在构建过程中遇到一些问题或者有特殊的爱好（需求）的时候，这些东西未必能帮（me...
为你的Android项目加速Gradle构建
weixin_34348805的博客
 31
2019独角兽企业重金招聘Python工程师标准>>> ...
使用Gradle方式构建Kotlin缓存
xiangzhihong8的专栏
 1520
Kotlin 1.2.21 允许 Kotlin 项目使用构建缓存，通过 Gradle 的构建缓存功能，可以提升 Kotlin 代码的编译速度，加快开发周期。本文将结合实际例子，介绍利用 Gradle 加速 Kotlin 代码编译的原理、配置示例以及在 IDE 中的使用方法。 原理 构建缓存的工作原理是在缓存中存储编译过的类、测试结果和其它构建工序，同时记录所有的任务输入，包括输入文件内容、相关...
换掉 Maven，我用它！！！
芋艿V
 17
点击上方“芋道源码”，选择“设为星标”管她前浪，还是后浪？能浪的浪，才是好浪！每天 8:55 更新文章，每天掉亿点点头发...源码精品专栏原创 | Java 2020 超神之路，很肝~中...
用完Gradle之后，我开始嫌弃Maven了！
最新发布
weixin_44421461的博客
 14
点击上方“Java基基”，选择“设为星标”做积极的人，而不是积极废人！每天14:00更新文章，每天掉亿点点头发...源码精品专栏原创 | Java 2021超神之路，很肝~中文详细注释的开源项目RPC 框架 Dubbo 源码解析网络应用框架 Netty 源码解析消息中间件 RocketMQ 源码解析数据库中间件 Sharding-JDBC 和 MyCAT 源码解析作业调度中间件 Elast...
用完Gradle后，贼快！开始嫌弃Maven了...
weixin_44421461的博客
 64
点击上方“Java基基”，选择“设为星标”做积极的人，而不是积极废人！源码精品专栏原创 | Java 2020超神之路，很肝~中文详细注释的开源项目RPC 框架 Dubbo 源码解析...
gradle 最全的配置选项 构建最佳实践
成都-春哥的博客
 2083
2016-04-28 figo Android程序员 今天推荐给各位的是 figo 同学几周前的一篇旧文，虽是旧文，我也是才看到，感觉非常不错，可能还有一些同学同样错过，仍然推荐给各位。figo 同学是一位经验非常丰富的开发者，喜欢分享，其博客 figotan.org 上文章质量都很高，推荐各位关注。 随着谷歌对Eclipse的无情抛弃和对Android S
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', '修改gradle脚本，加速spring4.1源码编译构建速度

程序员欣宸

于 2018-07-01 17:50:21 发布

2097
 收藏
分类专栏： spring-framework spring4源码分析与实战 文章标签： spring gradle
版权

spring-framework
同时被 2 个专栏收录
20 篇文章23 订阅
订阅专栏

spring4源码分析与实战
20 篇文章72 订阅
订阅专栏
本次优化的策略是跳过task来节省时间，例如文档包和源码包，因此，如果您的目标是拿到最新jar包，那么这种手段适合您，如果您想拿到包括文档、源码等在内的所有构建资源，那么这种方式就不适合了；

原文地址：https://blog.csdn.net/boling_cavalry/article/details/80873343

先列举一下软硬件环境信息：
1. 硬件：i5-8400，16G(DDR4-2667MHz)，SSD128G
2. 操作系统：win10 64位
3. JDK：1.8.0_171
4. Gradle：2.14.1
5. IntelliJ IDEA：2018.1.5
6. spring-framework源码：4.1.8.RELEASE

注意，windows下编译spring-framwork4.1源码请参考《Win10环境编译spring-framework4.1.9版本，报错”Failed to capture snapshot of input files for task ‘distZip’”》进行修改，否则会构建失败；

下载后并导入到IEDA之后，如果不调整build.gradle脚本就直接编译，耗时16分43秒，如下图：



现在我们来修改build.gradle文件，去掉一些与jar包构建无关的task；

找到configure(subprojects - project(“:spring-build-src”))，在这个方法的结尾处有如下代码：
artifacts {
    archives sourcesJar
    archives javadocJar
}
1
2
3
4
改成下面这样，也就是将大括号内的两行都注释掉

artifacts {
    //archives sourcesJar
    //archives javadocJar
}
1
2
3
4

2. 找到configure(rootProject)，在这个方法的结尾处有如下代码：

artifacts {
    archives docsZip
    archives schemaZip
    archives distZip
}
1
2
3
4
5
改成下面这样，也就是将大括号内的三行都注释掉

artifacts {
    //archives docsZip
    //archives schemaZip
    //archives distZip
}
1
2
3
4
5

3. build.gradle修改完毕，可以再次构建了，记得使用-x test参数跳过测试，操作如下图：


4. 如下图所示，仅用1分59秒就完成构建，去子工程的build目录发现所需jar包构建成功（例如spring-framework-4.1.8.RELEASE\spring-context\build\libs）：


5. 为了保证数据准确，每次build之前已经做过clean操作；


程序员欣宸
已关注

2


0


0

专栏目录
程序员欣宸文章汇总(Java篇)
程序员欣宸的博客
 6064
本文保存了作者所有Java相关文章的地址，并做了轻量级分类，希望您能从中找到有参考价值的内容，那将是我的荣幸；
程序员欣宸文章汇总(DevOps篇)
程序员欣宸的博客
 6328
本文保存了作者所有DevOps相关文章的地址，并做了轻量级分类，希望您能从中找到有参考价值的内容，那将是我的荣幸
修改gradle脚本，加速spring源码编译构建速度
程序员欣宸的博客
 1555
本次优化的策略是跳过task来节省时间，例如文档包和源码包，因此，如果您的目标是拿到最新jar包，那么这种手段适合您，如果您想拿到包括文档、源码等在内的所有构建资源，那么这种方式就不适...
每次吃一点AndroidのGradle加速
lcs353732057的专栏
 181
目录：1、Gradle初识2、Gradle加速3、AndroidStudio工程下的build.gradle文件4、AndroidStudio导入工程还是卡卡卡？？？ Android小仙 1. Gradle是什么？ 1.1. 概念 Gradle是一个基于Apache Ant和Apache Maven概念的项目自动化建构工具。一种依赖管理工具，面向Java应用为主，它
android源码编译模块慢,有赞Android秒级编译优化实践
weixin_34116482的博客
 258
1. 有赞Android秒级编译优化实践有赞-明天2. ⽬目录背景⽅方案调研有赞⽅方案实践成果未来规划3. 背景Android端现状Kotlin33%客户端PhonePad每周发版业务账户交易易商品45W库存共26个⼦子业务模块导购…⽉月均上线功能 50+Java67%4. 遇到的问题编译时间1818团队开发效率下降1513.512新⼈人⼊入⻔门成本提⾼高98不不利利于紧急问题修复4.502016...
windows下idea构建springframework5.1.x源码阅读环境（无需翻墙）
Leehom_Wang的博客
 213
1.安装jdk1.8,略过。 2.安装gradle-4.10.3 springframework5.1.x源码构建工具是gradle-4.10.3版本。 点击链接从gradle官网下载4.10.3版本的二进制包 下载后解压 添加环境变量，GRADLE_HOME 为安装目录,GRADLE_USER_HOME为类似maven的本地仓库。 添加path 打开cmd查看是否安装成功执行 grade -v 最重要的点： 为了加速构建过程中依赖包的下载速度，使用阿里云镜像。 在gradle安装目录下的init.
spring-framework5.1源码编译导入idea
qq_39095701的博客
 83
主要是为了编译spring源码而写 一、环境准备 我自己测试的环境 1、jdk11 2、gradle 6.8.3 3、idea2021.1 4、spring-framework5.1 5、git 源码地址： spring-framework5.1 gradle 6.8.3 二、具体步骤 1、搜先找到源码内的build.gradle，settings.gradle这两个文件，因为原本加载会很慢，所以我们需要用到阿里云镜像地址来加速下载速度 阿里云仓库地址链接 我们需要把这两个地址添加到build.grad
加快gradle的编译速度总结-亲身经历
u011904605的博客
 2264
http://www.jianshu.com/p/200d55b4d40a http://www.jianshu.com/p/200d55b4d40a http://www.jianshu.com/p/200d55b4d40a 加快gradle的编译速度总结-亲身经历 说明 刚进公司，由于公司准备新地方，所以电脑不够用，先用自己的电脑开发。然后配置
使用 idea 构建spring 5.2.8 源码
胡歌粉丝的博客
 449
使用 idea 构建spring源码前言准备工作开始构建 前言 最近不知道是在哪的个人信息被泄露了，老是有电话打来资讯： 亲~，我们这边有java架构师课程哟，面对阿里 P7 P8 呦，实在不行还有大数据分析师，大数据实战课程有没有兴趣呢，只要一万+的学费，就能换取年薪 60W+的 工作呦~ 我当时就想说 “你丫的敢跟我签合同吗，没找到薪水那么高的，你马上退钱吗！” 其实这些大家都心知肚明，这种培训不能说没用，但是和它所说的涨薪幅度还是有差距了，当然，过程中“被迫”瞄了几眼，观察了下课程，几乎都有Sprin
Androidstudio中gradle配置和使用
LANGZI7758521的专栏
 2106
加速篇 GRADLE的构建过程通常会比较漫长，一个中等项目，10M左右大小的app，一次完整构建大概在5分钟左右，是不是很吓人，当然，如果是在调试阶段，采用Android Studuo 2.0，默认提供的Instant Run方式，每次修改都不会重新构建项目，从而加快了构建过程。恩，这是另一个故事，这里，我们先谈谈GRADLE脚本的加速姿势。 一般来说，GRADLE一次完整的构建过程通常分成三
Gradle源码解析：生命周期的三个阶段
m0_70748845的博客
 152
gradle是和maven、ant一样是一个强大的构建工具，使用构建工具来描述它还不能凸显他的强大，确切的说应该是编程框架更灵活： maven\ant构建程序时不能修改构建的过程（构建脚本） （例如修改打包出的apk名字gradle就可轻松做到）粒度性： maven\ant构建程序时源代码和构建工具相互独立； 我们不知道源码做了什么gradle从源码的编译、资源的编译、生成一个个Task逐个执行Task；Task源码开源扩展性： 支持插件机制兼容性：兼容所有ant、maven功能也就是各种任务（Task）的
GRADLE 构建最佳实践
weixin_34297704的博客
 42
随着谷歌对Eclipse的无情抛弃和对Android Studio的日趋完善，使用gradle构建Android项目已经成为开发者的一项必会良技。那么，问题来了，采用什么样的姿势才能让项目开发构建过程高潮迭起，精彩不断呢？ 其实网上有很多关于gradle的文章，gradle官方和谷歌也提供了详细的文档和教程，可素，当你在构建过程中遇到一些问题或者有特殊的爱好（需求）的时候，这些东西未必能帮（me...
为你的Android项目加速Gradle构建
weixin_34348805的博客
 31
2019独角兽企业重金招聘Python工程师标准>>> ...
使用Gradle方式构建Kotlin缓存
xiangzhihong8的专栏
 1520
Kotlin 1.2.21 允许 Kotlin 项目使用构建缓存，通过 Gradle 的构建缓存功能，可以提升 Kotlin 代码的编译速度，加快开发周期。本文将结合实际例子，介绍利用 Gradle 加速 Kotlin 代码编译的原理、配置示例以及在 IDE 中的使用方法。 原理 构建缓存的工作原理是在缓存中存储编译过的类、测试结果和其它构建工序，同时记录所有的任务输入，包括输入文件内容、相关...
换掉 Maven，我用它！！！
芋艿V
 17
点击上方“芋道源码”，选择“设为星标”管她前浪，还是后浪？能浪的浪，才是好浪！每天 8:55 更新文章，每天掉亿点点头发...源码精品专栏原创 | Java 2020 超神之路，很肝~中...
用完Gradle之后，我开始嫌弃Maven了！
最新发布
weixin_44421461的博客
 14
点击上方“Java基基”，选择“设为星标”做积极的人，而不是积极废人！每天14:00更新文章，每天掉亿点点头发...源码精品专栏原创 | Java 2021超神之路，很肝~中文详细注释的开源项目RPC 框架 Dubbo 源码解析网络应用框架 Netty 源码解析消息中间件 RocketMQ 源码解析数据库中间件 Sharding-JDBC 和 MyCAT 源码解析作业调度中间件 Elast...
用完Gradle后，贼快！开始嫌弃Maven了...
weixin_44421461的博客
 64
点击上方“Java基基”，选择“设为星标”做积极的人，而不是积极废人！源码精品专栏原创 | Java 2020超神之路，很肝~中文详细注释的开源项目RPC 框架 Dubbo 源码解析...
gradle 最全的配置选项 构建最佳实践
成都-春哥的博客
 2083
2016-04-28 figo Android程序员 今天推荐给各位的是 figo 同学几周前的一篇旧文，虽是旧文，我也是才看到，感觉非常不错，可能还有一些同学同样错过，仍然推荐给各位。figo 同学是一位经验非常丰富的开发者，喜欢分享，其博客 figotan.org 上文章质量都很高，推荐各位关注。 随着谷歌对Eclipse的无情抛弃和对Android S
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 93);
INSERT INTO public.article_content VALUES (92, '2022-08-27 06:02:47.474', false, '2022-10-20 00:18:31.426', '<p>md</p>
', 'md', 'md
', 91);
INSERT INTO public.article_content VALUES (102, '2022-08-27 06:19:45.149', false, '2022-09-15 10:41:12.561', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', '制作Docker镜像，用来下载OpenJDK11源码

程序员欣宸

于 2018-12-03 19:50:38 发布

2661
 收藏 1
分类专栏： Docker实战 文章标签： docker OpenJDK11
版权

Docker实战
同时被 2 个专栏收录
109 篇文章55 订阅
订阅专栏

Dock实战系列
69 篇文章40 订阅
订阅专栏
在《极简，利用Docker仅两行命令就能下载和编译OpenJDK11》一文中，我们用以下命令实现了OpenJDK11源码的下载：

docker run \
--rm \
-it \
-v /usr/local/work/openjdksrc:/output \
bolingcavalry/openjdksrc11:0.0.2
1
2
3
4
5
今天我们就来看下Docker镜像bolingcavalry/openjdksrc11:0.0.2的制作过程，看看它做了哪些事情来简化下载过程；

环境信息
操作系统：Ubuntu 16.04.5 LTS；
Docker：18.06.1-ce；
准备材料
本次镜像用到了以下材料：

Dockerfile：制作Docker镜像的脚本文件；
cmd.sh：容器启动后执行的命令脚本；
OpenJDK11源码压缩包（参考《Ubuntu环境下载OpenJDK11源码》）；
您可以选择直接从GitHub下载上述所有内容，地址和链接信息如下表所示：

名称	链接	备注
项目主页	https://github.com/zq2599/openjdksrc11	该项目在GitHub上的主页
git仓库地址(https)	https://github.com/zq2599/openjdksrc11.git	该项目源码的仓库地址，https协议
git仓库地址(ssh)	git@github.com:zq2599/openjdksrc11.git	该项目源码的仓库地址，ssh协议
要注意的问题
制作镜像前有两个问题先考虑好：

基础镜像尽量小，由于容器启动后要执行一些shell命令，所以选用仅含bash工具的bash:5.0-rc；
OpenJDK11源码包不小（超过1G），因此做成的镜像也很大，用户下载镜像时，一旦网络问题下载失败，docker会自动重试，此时是重新下载，这意味着之前的下载都白做了，为了缓解这个问题，可以把整个源码压缩包分割成多个小文件，这样虽然整体大小不变，但是失败时重新下载的文件是很小的，在linux环境执行以下命令，将整个OpenJDK11源码压缩包分割成多个最大10兆的文件：
split -b 10m jdk11.tar.gz jdk11-
1
编写Dockerfile
Dockerfile内容如下，可见大部分内容是复制文件的操作，其余部分已有详细的注释，就不多说了：

# Docker image of source for OpenJDK
# VERSION 0.0.2
# Author: bolingcavalry

#基础镜像使用bash:5.0-rc，特点是体积小
FROM bash:5.0-rc

#作者
MAINTAINER BolingCavalry <zq2599@gmail.com>

#定义源码存放目录
ENV SRC_PATH /src

#定义OpenJDK源码文件夹名称
ENV OPENJDK_SRC_PACKAGE_NAME jdk11

#创建目录
RUN mkdir $SRC_PATH

#把分割过的源码复制到工作目录，这么写可以保证每个文件layer都不大，这样下载镜像时如果中途失败，就不用重新下载一个巨大的layer
COPY ./$OPENJDK_SRC_PACKAGE_NAME-af $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-an $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-av $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bd $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bl $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bt $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cb $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cj $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cr $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cz $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dh $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dp $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dx $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ef $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ag $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ao $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-aw $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-be $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bm $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bu $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cc $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ck $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cs $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-da $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-di $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dq $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dy $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-eg $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ah $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ap $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ax $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bf $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bn $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bv $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cd $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cl $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ct $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-db $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dj $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dr $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dz $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-eh $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-aa $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ai $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-aq $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ay $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bg $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bo $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bw $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ce $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cm $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cu $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dc $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dk $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ds $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ea $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ei $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ab $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-aj $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ar $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-az $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bh $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bp $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bx $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cf $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cn $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cv $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dd $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dl $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dt $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-eb $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ej $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ac $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ak $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-as $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ba $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bi $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bq $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-by $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cg $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-co $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cw $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-de $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dm $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-du $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ec $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ek $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ad $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-al $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-at $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bb $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bj $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-br $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bz $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ch $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cp $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cx $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-df $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dn $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dv $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ed $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-el $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ae $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-am $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-au $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bc $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bk $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bs $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ca $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ci $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cq $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cy $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dg $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-do $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dw $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ee $SRC_PATH/

#命令行文件复制到工作目录
COPY ./cmd.sh /

RUN chmod a+x /cmd.sh

CMD ["bash", "/cmd.sh"]
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
看到这里您一定会有疑问：这么多行COPY命令，为什么不用OPENJDK_SRC_PACKAGE_NAME-*，这样岂不是一行命令就够了？
您可以在镜像build成功后，用docker history命令看看文件的layer数量，用多个COPY命令逐个执行，每个命令都对应一个小的layer，这样用户下载镜像时就是在下载多个小文件了；

cmd.sh文件
cmd.sh的内容如下，可见当容器启动后，先将分割后的多个小文件通过cat命令恢复成完整的jdk11.tar.gz文件，再解压，然后删除jdk11.tar.gz文件：

echo "start build gz file"
cat $SRC_PATH/$OPENJDK_SRC_PACKAGE_NAME-* > /output/$OPENJDK_SRC_PACKAGE_NAME.tar.gz
echo "gz file build success, start unzip"
tar -zxvf /output/$OPENJDK_SRC_PACKAGE_NAME.tar.gz -C /output
echo "unzip success, start remove gz file"
rm /output/$OPENJDK_SRC_PACKAGE_NAME.tar.gz
echo "download openjdk11 source successful!"
1
2
3
4
5
6
7
构建镜像
在Dockerfile文件所在目录执行以下命令即可构建好镜像文件：

docker build -t bolingcavalry/openjdksrc11:0.0.2 .
1
至此，镜像制作完毕，可以通过Docker来下载完整的OepnJDK11源码了，如果电脑空间紧张，docker run命令执行完毕后，记得用docker rmi bolingcavalry/openjdksrc11:0.0.2删除镜像；

欢迎关注我的公众号：程序员欣宸



程序员欣宸
已关注

3


1


0

专栏目录
制作Docker镜像，用来编译OpenJDK11源码
程序员欣宸的博客
 2497
实战Docker镜像文件的制作过程，这个镜像用来编译OpenJDK11源码
OpenJDK11:OpenJDK 11 的镜像。-开源
06-28
OpenJDK 11.0.2 的镜像。 原件可以在 https://jdk.java.net/archive/ 找到。
docker使用dockerfile方式运行java程序_ltgsoldier1的...
7-24
4,创建dockerfile文件 vim dockerfile 1 # 基础镜像FROM openjdk:8u302-jdk# 作者信息MAINTAINER liutiangang# 容器目录分配数据卷# VOLUME /tmp# 设置时区RUNln-sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime RUNecho''Asia...
Dockerfile命令详解 语法解析 & JAVA的Dockerfile模版...
6-22
Dockerfile各命令详解。 Dockerfile命令解析 FROM用于指定基准镜像,为后续的指令运行于基准镜像提供的运行环境。必须为Dockerfile文件开篇的第一个非注释行。 语法: FROM [:] FROM @ # :指定作为base image的名称,digest指定hash码 ...
docker-openjdk：OpenJDK docker映像
02-10
快速参考 维护者： 在哪里获得帮助： 支持的标签和相应的Dockerfile链接 快速参考（续） 在哪里提出问题： 支持的体系结构： 图片更新： （） 该描述的来源： （） OpenJDK的 OpenJDK的定制构建。 默认语言环境：ko-KR.UTF-8 默认时区：亚洲/首尔 有关更多详细信息，请参见
docker-openjdk:带有Openjdk的小型Java Docker容器
05-19
docker-openjdk 该项目为OpenJDK 1.8.0_40-b25创建OpenJDK 1.8.0_40-b25映像。 每个“紧凑配置文件”都有一个图像（请参阅 ）： compact1 ， compact2 ， compact3和jre （=完整SE） 这些JRE非常小，因为它们是为嵌入式系统制作的。 支持的标签和相应的Dockerfile链接 每个“紧凑的个人资料”都有一个标记的图像： 细节 这些是什么？ tl; dr：Busybox + libc 64位+ libc 32位+嵌入式JRE =小型Java容器 所有映像均基于具有32位（和64位）库的Busybox（请参阅和 ）。 JRE之上的开销约为8 MB。 JVM不是静态链接的，因此您仍然可以在容器内导航或使用一些Shell脚本。 JRE始终安装在/usr/lib/jvm并链接到/usr/lib/jvm/jr
Dockerfile编写以及打包 java 程序为镜像_玖涯的博客-C...
5-14
一、Dockerfile FROM FROM<image>FROM<image>:<tag>FROM<image>:<digest> 定制的镜像是基于FROM的镜像,这里的openjdk就是定制需要的基础镜像。后续的操作都是基于openjdk。 FROM openjdk:8-jdk-alpine ...
Docker - Dockerfile（alpine + openjdk8 ）
Daopin Blog
 3210
一直找不到合适的带有jdk的docker镜像，要不就是动辄500M左右的基础镜像，要不就是100M左右，但是里面缺失依赖包，后来找到一个制作好之后只有105M的基础镜像，而且跑大型的java程序也是没有问题的。 FROM alpine:3.9 MAINTAINER docker-build ENV LANG=C.UTF-8 \ JAVA_HOME=/usr/lib/jvm/ja...
基于 AdoptOpenjdk 官方 Dockerfile 制作 jre8 镜像（修改字符集和时区）
叨叨软件测试
 623
背景 由于 Oarcle JDK 开始商业收费（个人和测试仍然免费），故打算新项目直接使用 Openjdk。 PS: Oracle JDK 8u211 和 8u212 两个版本是最后的免费版本。 AdoptOpenjdk 镜像制作（alpine） Docker Hub 地址：https://registry.hub.docker.com/r/jlh21/jre8 AdoptOpenjdk-alpine-jre-hotspot-8u292-b10 基于 AdoptOpenJDK 官方修改 https://g
利用Docker极速下载OpenJDK11源码
程序员欣宸的博客
 2364
常规下载方式的不足 常用的下载OpenJDK11源码方式来自官方推荐，如下命令： hg clone http://hg.openjdk.java.net/jdk/jdk11 这种下载方式要装pip，再用pip装mercurial，并且下载源码过程中也容易超时失败； 利用Docker，一行命令完成下载 如果您安装了Docker，通过以下一行命令即可下载OpenJDK11源码： docker run...
RocketMQ-docker镜像的制作与部署
张维鹏的博客
 1009
本文主要介绍下 RocketMQ-docker 镜像的制作与部署，方便在不同环境快速启动RocketMQ，核心操作分为三个：NameServer 镜像的制作与部署、Broker 镜像的制作与部署、console 镜像的制作与部署。
jdk17运行环境docker镜像制作
最新发布
gfdgdshhg的博客
 503
jdk17运行环境docker镜像制作，运行稳定且体积比官方的小一倍
分布式事务seate-server的docker镜像的制作与部署
张维鹏的博客
 834
Seata 是一款开源的分布式事务解决方案，致力于提供高性能与简单易用的分布式事务服务。在 Seata 中主要有以下三种角色，其中 TM 和 RM 是作为 Seata 的客户端与业务系统集成在一起，TC 作为 Seata 的 Server 端（下文简称 seata-server）独立部署。而 seata-server 的部署模式支持多种：直接部署，使用 Docker、Docker-Compose、Kubernetes、Helm 等，本文主要介绍如何使用 docker 部署 seata-server
docker中使用OpenJDK引发的错误
与李的博客
 2903
错误代码： Caused by: java.lang.NullPointerException: null at sun.awt.FontConfiguration.getVersion(FontConfiguration.java:1264) at sun.awt.FontConfiguration.readFontConfigFile(FontConfiguration.java:219) at sun.awt.FontConfiguration.init(FontConfiguration.ja
Docker制作含字体库的OpenJdk镜像
小葫芦的博客
 2329
最近项目上测试环境，测试测一个导出模板的功能时，发现模板导出出来，于是我在本地试了一下，结果正常导出，同一份代码部署到测试怎么就不一样了呢，无奈只能查看服务器日志，发下如下错误： java.lang.IllegalArgumentException: The workbook already contains a sheet named 结果百度了一下午，没有解决方案，偶然看到一个资源下载，说是Docker缺少字体库原因，我突然想到之前处理过一个问题，也是Docker部署项目，然后图形验证
docker镜像基于openjdk构建的坑
dengdengwoa的博客
 6306
背景: win10, docker, 网上找的基于openjdk的Jenkins最新镜像 win电脑上用docker跑Jenkins服务,会有时间错误的问题, 原因就是镜像是基于openjdk构建的, openjdk的时间有问题, 网上的方法都是解决linux的, win上我没有找到特别好的解决方案, 我的想法是 修改dockerfile, 改成from java:8, 再打成镜像, 应该就可以...
Dockerfile openjdk8&alpine底包
 908
FROM openjdk:8-alpine RUN sed -i ''s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g'' /etc/apk/repositories RUN apk update \ && apk add ttf-dejavu libuuid tzdata \ && cp -r -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \ &...
极简，利用Docker仅两行命令就能下载和编译OpenJDK11
程序员欣宸的博客
 3544
利用Docker两行命令就能下载和编译OpenJDK11虚拟机
ARM架构下的Docker环境，OpenJDK官方没有8版本镜像，如何完美解决
m0_63174811的博客
 1560
Oracle提供了ARM版本的JDKD安装包，以此包来做Docker镜像； 用OpenJDK的11版本，但是11和8的差异要自行处理； 对于第一种方式，自己编译8版本的OpenJDK，难度太大(对我自己而言)，因为编译OpenJDK需要低版本的OpenJDK作为编译工具，也就是说我要找到ARM版本的OpenJDK7，才能编译ARM版本的OpenJDK8，因此我觉得这样做的难度太大… 今天要讨论的是第二种和第三种， 环境信息 硬件：树莓派4B 操作系统：openfans的64为Debian..
Docker制作数据库中间件Mycat源码镜像
纸上得来终觉浅，绝知此事要躬行
 3834
经过修改的Mycat已经比较符合使用了，为了在使用过程中尽量减少不必要的错误操作，我们打算将其制作成docker镜像。制作docker需要一个稳定的基础环境，这里以boot2docker为基础镜像使用Dokcerfile的方式进行构建。注意：docker依赖的基础镜像需要斟酌，毕竟boot2docker构建后的镜像太过于庞大，可以试试直接根据centos或者linux基础镜像进行构建。
使用docker手把手教你编译OpenJDK1.8源代码
qq115396092的专栏
 245
从哪搞到OpenJDK的源代码？官方提供一些打包好的源代码zip： wget https://download.java.net/openjdk/jdk8u41/ri/openjdk-8u41-src-b04-14_jan_2020.zip 或者通过OpenJDK Mercurial Repositories进行下载，我选择的使用官网进行下载 下载的1.8OpenJDK源代码结构 openjdk —— corba：多语言、分布式通讯接口 —— hotspot：Java 虚拟机 —— jaxp
使用Docker编译OpenJDK8
张伯毅的专栏
 7319
简介 本文主要介绍如何用docker编译openjdk8. 步骤 1.前置环境 必须安装dokcer环境,然后才能执行下面的操作. 镜像地址: https://github.com/BoYiZhang/compile-openjdk8-in-docker.git 2.获取资源文件 git clone https://github.com/BoYiZhang/compile-openjdk8-in-docker.git 3.进入目录: ubuntu1404_openjdk8 打开项目目录com
体验SpringBoot(2.3)应用制作Docker镜像(官方方案)
程序员欣宸的博客
 8541
2.3版本的SpringBoot，推荐了新的docker镜像构建方案，一起来实践吧
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', '制作Docker镜像，用来下载OpenJDK11源码

程序员欣宸

于 2018-12-03 19:50:38 发布

2661
 收藏 1
分类专栏： Docker实战 文章标签： docker OpenJDK11
版权

Docker实战
同时被 2 个专栏收录
109 篇文章55 订阅
订阅专栏

Dock实战系列
69 篇文章40 订阅
订阅专栏
在《极简，利用Docker仅两行命令就能下载和编译OpenJDK11》一文中，我们用以下命令实现了OpenJDK11源码的下载：

docker run \
--rm \
-it \
-v /usr/local/work/openjdksrc:/output \
bolingcavalry/openjdksrc11:0.0.2
1
2
3
4
5
今天我们就来看下Docker镜像bolingcavalry/openjdksrc11:0.0.2的制作过程，看看它做了哪些事情来简化下载过程；

环境信息
操作系统：Ubuntu 16.04.5 LTS；
Docker：18.06.1-ce；
准备材料
本次镜像用到了以下材料：

Dockerfile：制作Docker镜像的脚本文件；
cmd.sh：容器启动后执行的命令脚本；
OpenJDK11源码压缩包（参考《Ubuntu环境下载OpenJDK11源码》）；
您可以选择直接从GitHub下载上述所有内容，地址和链接信息如下表所示：

名称	链接	备注
项目主页	https://github.com/zq2599/openjdksrc11	该项目在GitHub上的主页
git仓库地址(https)	https://github.com/zq2599/openjdksrc11.git	该项目源码的仓库地址，https协议
git仓库地址(ssh)	git@github.com:zq2599/openjdksrc11.git	该项目源码的仓库地址，ssh协议
要注意的问题
制作镜像前有两个问题先考虑好：

基础镜像尽量小，由于容器启动后要执行一些shell命令，所以选用仅含bash工具的bash:5.0-rc；
OpenJDK11源码包不小（超过1G），因此做成的镜像也很大，用户下载镜像时，一旦网络问题下载失败，docker会自动重试，此时是重新下载，这意味着之前的下载都白做了，为了缓解这个问题，可以把整个源码压缩包分割成多个小文件，这样虽然整体大小不变，但是失败时重新下载的文件是很小的，在linux环境执行以下命令，将整个OpenJDK11源码压缩包分割成多个最大10兆的文件：
split -b 10m jdk11.tar.gz jdk11-
1
编写Dockerfile
Dockerfile内容如下，可见大部分内容是复制文件的操作，其余部分已有详细的注释，就不多说了：

# Docker image of source for OpenJDK
# VERSION 0.0.2
# Author: bolingcavalry

#基础镜像使用bash:5.0-rc，特点是体积小
FROM bash:5.0-rc

#作者
MAINTAINER BolingCavalry <zq2599@gmail.com>

#定义源码存放目录
ENV SRC_PATH /src

#定义OpenJDK源码文件夹名称
ENV OPENJDK_SRC_PACKAGE_NAME jdk11

#创建目录
RUN mkdir $SRC_PATH

#把分割过的源码复制到工作目录，这么写可以保证每个文件layer都不大，这样下载镜像时如果中途失败，就不用重新下载一个巨大的layer
COPY ./$OPENJDK_SRC_PACKAGE_NAME-af $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-an $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-av $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bd $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bl $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bt $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cb $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cj $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cr $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cz $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dh $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dp $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dx $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ef $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ag $SRC_PATH/ 
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ao $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-aw $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-be $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bm $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bu $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cc $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ck $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cs $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-da $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-di $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dq $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dy $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-eg $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ah $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ap $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ax $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bf $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bn $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bv $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cd $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cl $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ct $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-db $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dj $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dr $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dz $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-eh $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-aa $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ai $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-aq $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ay $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bg $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bo $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bw $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ce $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cm $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cu $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dc $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dk $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ds $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ea $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ei $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ab $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-aj $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ar $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-az $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bh $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bp $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bx $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cf $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cn $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cv $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dd $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dl $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dt $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-eb $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ej $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ac $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ak $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-as $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ba $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bi $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bq $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-by $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cg $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-co $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cw $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-de $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dm $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-du $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ec $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ek $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ad $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-al $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-at $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bb $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bj $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-br $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bz $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ch $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cp $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cx $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-df $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dn $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dv $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ed $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-el $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ae $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-am $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-au $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bc $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bk $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-bs $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ca $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ci $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cq $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-cy $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dg $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-do $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-dw $SRC_PATH/
COPY ./$OPENJDK_SRC_PACKAGE_NAME-ee $SRC_PATH/

#命令行文件复制到工作目录
COPY ./cmd.sh /

RUN chmod a+x /cmd.sh

CMD ["bash", "/cmd.sh"]
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
看到这里您一定会有疑问：这么多行COPY命令，为什么不用OPENJDK_SRC_PACKAGE_NAME-*，这样岂不是一行命令就够了？
您可以在镜像build成功后，用docker history命令看看文件的layer数量，用多个COPY命令逐个执行，每个命令都对应一个小的layer，这样用户下载镜像时就是在下载多个小文件了；

cmd.sh文件
cmd.sh的内容如下，可见当容器启动后，先将分割后的多个小文件通过cat命令恢复成完整的jdk11.tar.gz文件，再解压，然后删除jdk11.tar.gz文件：

echo "start build gz file"
cat $SRC_PATH/$OPENJDK_SRC_PACKAGE_NAME-* > /output/$OPENJDK_SRC_PACKAGE_NAME.tar.gz
echo "gz file build success, start unzip"
tar -zxvf /output/$OPENJDK_SRC_PACKAGE_NAME.tar.gz -C /output
echo "unzip success, start remove gz file"
rm /output/$OPENJDK_SRC_PACKAGE_NAME.tar.gz
echo "download openjdk11 source successful!"
1
2
3
4
5
6
7
构建镜像
在Dockerfile文件所在目录执行以下命令即可构建好镜像文件：

docker build -t bolingcavalry/openjdksrc11:0.0.2 .
1
至此，镜像制作完毕，可以通过Docker来下载完整的OepnJDK11源码了，如果电脑空间紧张，docker run命令执行完毕后，记得用docker rmi bolingcavalry/openjdksrc11:0.0.2删除镜像；

欢迎关注我的公众号：程序员欣宸



程序员欣宸
已关注

3


1


0

专栏目录
制作Docker镜像，用来编译OpenJDK11源码
程序员欣宸的博客
 2497
实战Docker镜像文件的制作过程，这个镜像用来编译OpenJDK11源码
OpenJDK11:OpenJDK 11 的镜像。-开源
06-28
OpenJDK 11.0.2 的镜像。 原件可以在 https://jdk.java.net/archive/ 找到。
docker使用dockerfile方式运行java程序_ltgsoldier1的...
7-24
4,创建dockerfile文件 vim dockerfile 1 # 基础镜像FROM openjdk:8u302-jdk# 作者信息MAINTAINER liutiangang# 容器目录分配数据卷# VOLUME /tmp# 设置时区RUNln-sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime RUNecho''Asia...
Dockerfile命令详解 语法解析 & JAVA的Dockerfile模版...
6-22
Dockerfile各命令详解。 Dockerfile命令解析 FROM用于指定基准镜像,为后续的指令运行于基准镜像提供的运行环境。必须为Dockerfile文件开篇的第一个非注释行。 语法: FROM [:] FROM @ # :指定作为base image的名称,digest指定hash码 ...
docker-openjdk：OpenJDK docker映像
02-10
快速参考 维护者： 在哪里获得帮助： 支持的标签和相应的Dockerfile链接 快速参考（续） 在哪里提出问题： 支持的体系结构： 图片更新： （） 该描述的来源： （） OpenJDK的 OpenJDK的定制构建。 默认语言环境：ko-KR.UTF-8 默认时区：亚洲/首尔 有关更多详细信息，请参见
docker-openjdk:带有Openjdk的小型Java Docker容器
05-19
docker-openjdk 该项目为OpenJDK 1.8.0_40-b25创建OpenJDK 1.8.0_40-b25映像。 每个“紧凑配置文件”都有一个图像（请参阅 ）： compact1 ， compact2 ， compact3和jre （=完整SE） 这些JRE非常小，因为它们是为嵌入式系统制作的。 支持的标签和相应的Dockerfile链接 每个“紧凑的个人资料”都有一个标记的图像： 细节 这些是什么？ tl; dr：Busybox + libc 64位+ libc 32位+嵌入式JRE =小型Java容器 所有映像均基于具有32位（和64位）库的Busybox（请参阅和 ）。 JRE之上的开销约为8 MB。 JVM不是静态链接的，因此您仍然可以在容器内导航或使用一些Shell脚本。 JRE始终安装在/usr/lib/jvm并链接到/usr/lib/jvm/jr
Dockerfile编写以及打包 java 程序为镜像_玖涯的博客-C...
5-14
一、Dockerfile FROM FROM<image>FROM<image>:<tag>FROM<image>:<digest> 定制的镜像是基于FROM的镜像,这里的openjdk就是定制需要的基础镜像。后续的操作都是基于openjdk。 FROM openjdk:8-jdk-alpine ...
Docker - Dockerfile（alpine + openjdk8 ）
Daopin Blog
 3210
一直找不到合适的带有jdk的docker镜像，要不就是动辄500M左右的基础镜像，要不就是100M左右，但是里面缺失依赖包，后来找到一个制作好之后只有105M的基础镜像，而且跑大型的java程序也是没有问题的。 FROM alpine:3.9 MAINTAINER docker-build ENV LANG=C.UTF-8 \ JAVA_HOME=/usr/lib/jvm/ja...
基于 AdoptOpenjdk 官方 Dockerfile 制作 jre8 镜像（修改字符集和时区）
叨叨软件测试
 623
背景 由于 Oarcle JDK 开始商业收费（个人和测试仍然免费），故打算新项目直接使用 Openjdk。 PS: Oracle JDK 8u211 和 8u212 两个版本是最后的免费版本。 AdoptOpenjdk 镜像制作（alpine） Docker Hub 地址：https://registry.hub.docker.com/r/jlh21/jre8 AdoptOpenjdk-alpine-jre-hotspot-8u292-b10 基于 AdoptOpenJDK 官方修改 https://g
利用Docker极速下载OpenJDK11源码
程序员欣宸的博客
 2364
常规下载方式的不足 常用的下载OpenJDK11源码方式来自官方推荐，如下命令： hg clone http://hg.openjdk.java.net/jdk/jdk11 这种下载方式要装pip，再用pip装mercurial，并且下载源码过程中也容易超时失败； 利用Docker，一行命令完成下载 如果您安装了Docker，通过以下一行命令即可下载OpenJDK11源码： docker run...
RocketMQ-docker镜像的制作与部署
张维鹏的博客
 1009
本文主要介绍下 RocketMQ-docker 镜像的制作与部署，方便在不同环境快速启动RocketMQ，核心操作分为三个：NameServer 镜像的制作与部署、Broker 镜像的制作与部署、console 镜像的制作与部署。
jdk17运行环境docker镜像制作
最新发布
gfdgdshhg的博客
 503
jdk17运行环境docker镜像制作，运行稳定且体积比官方的小一倍
分布式事务seate-server的docker镜像的制作与部署
张维鹏的博客
 834
Seata 是一款开源的分布式事务解决方案，致力于提供高性能与简单易用的分布式事务服务。在 Seata 中主要有以下三种角色，其中 TM 和 RM 是作为 Seata 的客户端与业务系统集成在一起，TC 作为 Seata 的 Server 端（下文简称 seata-server）独立部署。而 seata-server 的部署模式支持多种：直接部署，使用 Docker、Docker-Compose、Kubernetes、Helm 等，本文主要介绍如何使用 docker 部署 seata-server
docker中使用OpenJDK引发的错误
与李的博客
 2903
错误代码： Caused by: java.lang.NullPointerException: null at sun.awt.FontConfiguration.getVersion(FontConfiguration.java:1264) at sun.awt.FontConfiguration.readFontConfigFile(FontConfiguration.java:219) at sun.awt.FontConfiguration.init(FontConfiguration.ja
Docker制作含字体库的OpenJdk镜像
小葫芦的博客
 2329
最近项目上测试环境，测试测一个导出模板的功能时，发现模板导出出来，于是我在本地试了一下，结果正常导出，同一份代码部署到测试怎么就不一样了呢，无奈只能查看服务器日志，发下如下错误： java.lang.IllegalArgumentException: The workbook already contains a sheet named 结果百度了一下午，没有解决方案，偶然看到一个资源下载，说是Docker缺少字体库原因，我突然想到之前处理过一个问题，也是Docker部署项目，然后图形验证
docker镜像基于openjdk构建的坑
dengdengwoa的博客
 6306
背景: win10, docker, 网上找的基于openjdk的Jenkins最新镜像 win电脑上用docker跑Jenkins服务,会有时间错误的问题, 原因就是镜像是基于openjdk构建的, openjdk的时间有问题, 网上的方法都是解决linux的, win上我没有找到特别好的解决方案, 我的想法是 修改dockerfile, 改成from java:8, 再打成镜像, 应该就可以...
Dockerfile openjdk8&alpine底包
 908
FROM openjdk:8-alpine RUN sed -i ''s/dl-cdn.alpinelinux.org/mirrors.aliyun.com/g'' /etc/apk/repositories RUN apk update \ && apk add ttf-dejavu libuuid tzdata \ && cp -r -f /usr/share/zoneinfo/Asia/Shanghai /etc/localtime \ &...
极简，利用Docker仅两行命令就能下载和编译OpenJDK11
程序员欣宸的博客
 3544
利用Docker两行命令就能下载和编译OpenJDK11虚拟机
ARM架构下的Docker环境，OpenJDK官方没有8版本镜像，如何完美解决
m0_63174811的博客
 1560
Oracle提供了ARM版本的JDKD安装包，以此包来做Docker镜像； 用OpenJDK的11版本，但是11和8的差异要自行处理； 对于第一种方式，自己编译8版本的OpenJDK，难度太大(对我自己而言)，因为编译OpenJDK需要低版本的OpenJDK作为编译工具，也就是说我要找到ARM版本的OpenJDK7，才能编译ARM版本的OpenJDK8，因此我觉得这样做的难度太大… 今天要讨论的是第二种和第三种， 环境信息 硬件：树莓派4B 操作系统：openfans的64为Debian..
Docker制作数据库中间件Mycat源码镜像
纸上得来终觉浅，绝知此事要躬行
 3834
经过修改的Mycat已经比较符合使用了，为了在使用过程中尽量减少不必要的错误操作，我们打算将其制作成docker镜像。制作docker需要一个稳定的基础环境，这里以boot2docker为基础镜像使用Dokcerfile的方式进行构建。注意：docker依赖的基础镜像需要斟酌，毕竟boot2docker构建后的镜像太过于庞大，可以试试直接根据centos或者linux基础镜像进行构建。
使用docker手把手教你编译OpenJDK1.8源代码
qq115396092的专栏
 245
从哪搞到OpenJDK的源代码？官方提供一些打包好的源代码zip： wget https://download.java.net/openjdk/jdk8u41/ri/openjdk-8u41-src-b04-14_jan_2020.zip 或者通过OpenJDK Mercurial Repositories进行下载，我选择的使用官网进行下载 下载的1.8OpenJDK源代码结构 openjdk —— corba：多语言、分布式通讯接口 —— hotspot：Java 虚拟机 —— jaxp
使用Docker编译OpenJDK8
张伯毅的专栏
 7319
简介 本文主要介绍如何用docker编译openjdk8. 步骤 1.前置环境 必须安装dokcer环境,然后才能执行下面的操作. 镜像地址: https://github.com/BoYiZhang/compile-openjdk8-in-docker.git 2.获取资源文件 git clone https://github.com/BoYiZhang/compile-openjdk8-in-docker.git 3.进入目录: ubuntu1404_openjdk8 打开项目目录com
体验SpringBoot(2.3)应用制作Docker镜像(官方方案)
程序员欣宸的博客
 8541
2.3版本的SpringBoot，推荐了新的docker镜像构建方案，一起来实践吧
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 101);
INSERT INTO public.article_content VALUES (11, '2022-08-27 12:19:11.732', false, '2022-09-15 10:41:12.558', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', 'quarkus实战之一：准备工作

程序员欣宸

于 2022-02-26 17:45:58 发布

1430
 收藏 4
分类专栏： kubernetes实战 java服务端 文章标签： java quarkus cloud native
版权

kubernetes实战
同时被 2 个专栏收录
73 篇文章114 订阅
订阅专栏

java服务端
175 篇文章46 订阅
订阅专栏
欢迎访问我的GitHub
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos

关于《quarkus实战》系列
《quarkus实战》系列是欣宸在2022年春季推出的又一个精品原创系列，作者将自己对java的热爱渗透到每段文字和每行代码中，全系列秉承欣宸一贯的知识+实战风格，既有知识普及、更有实际操作，在涉及基础知识之处更有深入分析，尽最大努力，将自己眼中云端的java的样子呈现出来
引子
作为一名Java程序员，如何适应目前的容器化趋势？将现有SpringBoot应用编译构建制作成docker镜像，然后运行在kubernetes环境，这是欣宸目前在实际项目中的做法，但也面临的诸多困扰：
启动慢：一个应用从启动到服务可用，一般是数秒，在对CPU核数和内存严格限制的情况下，花数十秒启动的情况也屡见不鲜，这样的问题无法适应需要快速重启或快速扩容的场景
内存消耗大：曾强行将内存限制在1G，结果FGC频率变大，还经常触发OMMKill导致pod重启，并且启动时间也会变长，相比之下，集群中golang应用大多配置128M内存限制，我只能羡慕了
另外还有诸多疑问也困扰着我：java技术栈内已有完整的注册发现、调用链追踪、指标监控、配置等技术实现，在kubernetes环境又该如何选择或适配
生在云上，长在云上的云原生时代，Java应用何去何从？用jib插件将SpingBoot应用转为docker镜像，在k8s上运行，仅此而已吗？
被以上问题困扰了很久，直到遇见 quarkus，当然了，它还没强大到解决上述所有问题，但它给了我方向和希望：java领域也有面向云原生的完整方案
关于quarkus
quarkus是为GraalVM 和HotSpot量身定制的Kubernetes原生Java框架，采用同类最佳的Java 库和标准制作而成，来自RedHat，是一个在Apache 许可证 2.0 版下获得许可的开源项目(来自官网)
quarkus官网：https://quarkus.io
quarkus的github仓库：https://github.com/quarkusio/quarkus
来看看quarkus的特点，官网用了超大字体描述，内容简洁：超音速、亚原子的JAVA

五大特点分别如下：
容器优先
命令式和响应式
社区和标准的支持
kubernetes原生
对开发者友好
来看看官网给出的对比数据，如下图，如果使用的是quarkus框架和GraalVM虚拟机，在内存方面对比传统框架有一个数量级的优势，而响应时间差距已不止一个数量级：

容器化的路上，选择quarkus是个不错的选择
本篇概览
作为《quarkus实战》系列的开篇，本文的目标是为后续文章和编码实战做好准备工作，由以下内容组成：
涉及软件的版本信息介绍
安装JDK-11
安装maven-3.8.4
安装docker
关于kubernetes的安装
新建maven工程，作为《quarkus实战》系列所有代码的父工程
以上就是今天的内容，先从环境信息开始吧
涉及软件的版本信息介绍
开始操作前，先将我这里的环境信息给出，这是能成功运行《quarkus实战》系列所有功能的环境，您可以用来作参考
先看开发环境：
操作系统：Ubuntu 16.04.7 LTS 桌面版（没错，写代码、本地运行调试、写文章都用这个Ubuntu电脑）
JDK：11.0.14
Maven：3.8.4
IDE：IDEA 2021.2.3（Ultimate Edition）
quarkus：2.7
docker：20.10.7
然后是运行环境，这是运行开发出的镜像的云环境：
操作系统：CentOS-7.9.2009
kubernetes：1.22.0（三台服务器，一台master，两台worker）
环境介绍完毕，开始动手
安装JDK
先看quarkus官方对JDK和maven版本的要求，如下所示，JDK最低11,maven最低3.8.1：

下载JDK11，地址是：https://www.oracle.com/java/technologies/downloads/#java11，按照自己的操作系统类型下载，如下图，我这里选的是linux版本：

將下载的压缩包在/usr/lib/jvm/解压，得到文件夹jdk-11.0.14
打开文件~/.bashrc，在尾部增加以下内容：
export JAVA_HOME=/usr/lib/jvm/jdk-11.0.14
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH
1
2
3
4
执行source ~/.bashrc，让配置生效
执行java -version验证JDK是否生效：
will@hp:~$ java -version
java version "11.0.14" 2022-01-18 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.14+8-LTS-263)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.14+8-LTS-263, mixed mode)
1
2
3
4
安装Maven
下载压缩包，地址：https://dlcdn.apache.org/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.zip
將下载的压缩包在/usr/local/解压，得到文件夹apache-maven-3.8.4
打开文件~/.bashrc，在尾部增加以下内容：
export MAVEN_HOME=/usr/local/apache-maven-3.8.4
export PATH=$MAVEN_HOME/bin:$PATH
1
2
执行source ~/.bashrc，让配置生效
执行mvn -version验证maven是否生效：
will@hp:~$ mvn -version
Apache Maven 3.8.4 (9b656c72d54e5bacbed989b64718c159fe39b537)
Maven home: /usr/local/apache-maven-3.8.4
Java version: 11.0.14, vendor: Oracle Corporation, runtime: /usr/lib/jvm/jdk-11.0.14
Default locale: zh_CN, platform encoding: UTF-8
OS name: "linux", version: "4.15.0-142-generic", arch: "amd64", family: "unix"
1
2
3
4
5
6
建议本地maven配置阿里云镜像，这样可以避免从中央仓库下载依赖失败的问题，在apache-maven-3.8.4/conf/settings.xml的mirrors节点下增加下面这个节点：
<mirror>
	<id>nexus-aliyun</id>
    <mirrorOf>*</mirrorOf>
    <name>Nexus aliyun</name>
    <url>http://maven.aliyun.com/nexus/content/groups/public</url>
</mirror>
1
2
3
4
5
6
安装docker
安装docker的命令与各操作系统有关，这里给出ubuntu下的安装命令作为参考：
curl -sSL https://get.docker.com | sh
1
如果您在ubuntu系统中用的不是root帐号，建议做参考下文做一些简单设置，这样操作docker的时候就无需每次都用sudo了：
《设置非root账号不用sudo直接执行docker命令》
关于kubernetes安装
可以参考《极速安装kubernetes-1.22.0（三台CentOS7服务器）》
新建maven工程
新建名为quarkus-tutorials的maven工程，目前这里面还是空的，将来会作为整个系列相关源码的父工程，将所有源码和依赖库版本统一管理起来
未完待续
至此，准备工作已完成，quarkus就像一副神秘的山水画卷，在欣宸原创的推动下徐徐展开，敬请期待

你不孤单，欣宸原创一路相伴
Java系列
Spring系列
Docker系列
kubernetes系列
数据库+中间件系列
DevOps系列

程序员欣宸
已关注

1


4


3

专栏目录
quarkus实战之二：应用的创建、构建、部署
程序员欣宸的博客
 1703
创建一个quarkus应用，修改功能代码，再编译构建，部署运行，今天一起把这些过程全部操作一遍
quarkus-grpc-web
05-03
如何在Quarkus中使用Grpc Web 该示例演示了如何在gRPC Web上使用quarkus-grpc扩展。 在此示例中，将grpcwebtext的Google变体与grpcwebtext （等同于plaintext gRPC）一起使用。 该示例演示了一元流和服务器端流。 在编写Google和Improbable时，gRPC Web变体都不支持客户端和双向流。 请注意，该示例使用Envoy代理将gRPC Web转换为本机gRPC。 我们计划在Quarkus中添加gRPC Web支持，但在撰写本文时尚未实现。 有意思的是 与服务器通信JavaScript代码位于ui/js/client.js 。 服务器实现可以在grpc-web/app/src/main/java/com/github/michalszynkiewicz/EchoService.java 。 该示例使用 。
评论3条写评论
_Schilings
热评
我太爱你了，期待您的博客！！！我从您的spring扩展实战系列的博客来的，您的每一篇文章都让我有新的收获！！我来给您催更！！
第一章: Vert.x 异步编程的基础知识
白石的专栏
 828
本书这部分的章节将通过使用Vert.x工具包教你异步编程的基本概念。使用Vert.x思考异步操作绝对是可行的(而且很有趣!)，我们将探讨Vert.x应用程序的主要构建块。
21-状态模式Quarkus实现
rengang66的博客
 90
摘要：本文用一个实例场景描述Gof 23设计模式中的状态（State）模式，并用Quarkus框架代码给予实现，同时也给出实现代码的UML模型。 关键字：Gof 23 设计模式 状态模式 Quarkus 1 基础知识 1.1 标准定义 状态（State）模式标准定义：允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。 1.2 分析和说明 状态（State）模式属于对象行为型模式。状态模式允许一个对象在其内部状态改变的时候改变行为。这个对象看上去象是改变了它的类一样。可理解为在不同的上下
Java Lambda表达式详解和实例
09-04
主要介绍了Java Lambda表达式详细介绍，从简单的到复杂的实例讲解,需要的朋友可以参考下
quarkus实战之五：细说maven插件
程序员欣宸的博客
 665
quarkus的maven插件非常重要，管理和构建工程时都离不开，本篇就来一起了解和掌握它
quarkus实战之三：开发模式(Development mode)
程序员欣宸的博客
 533
熟悉开发模式，这是quarkus应用在开发阶段的实用工具
quarkus数据库篇之四：本地缓存
程序员欣宸的博客
 142
如何将数据库查询结果缓存在当前进程中，提升下一次查询的速度？
quarkus数据库篇之三：单应用同时操作多个数据库
程序员欣宸的博客
 269
单个应用同时对多个数据库做增删改查，这是基本操作，quarkus也轻松支持，来随本篇一同操作吧
Quarkus框架入门之一：Quarkus框架介绍及简单示例
z69183787的专栏
 1243
开篇 最近几年，Spring全家桶横扫其它Java框架，已然成为事实标准，单体应用使用Spring Framework+Spring Boot，服务治理Spring Cloud，生态完善，各种组件层出不穷。曾经还玩过JFinal和Nutz等国内的开发框架，但是仅仅是私下玩玩，实际工作过程中，还是Spring的天下，很少会选择其它小众的框架（谁知道会不会有填不完的大坑）。 最近在社区闲逛的时候，发现一个Red Hat开源的Java框架Quarkus，定位为GraalVM和OpenJDK HotSpot量身定
quarkus数据库篇之一：比官方demo更简单的基础操作
程序员欣宸的博客
 674
《quarkus数据库篇》系列的开篇，编码实战最基础的数据库增删改查，数据库用的是PostgreSQL，在官方demo基础上进一步精简，极速入门quarkus数据库操作
一个简单的Quarkus CRUD入门
未完成的空间
 2113
Quarkus是一个由Red Hat开源的 Java 微服务框架，根据2020年8月18日发布的《 2020 年微服务领域开源数字化报告》，Quarkus 作为云原生微服务框架，在微服务框架中活跃度排名第一，全球 GitHub 开源项目活跃度中排名 40，也具有着巨大的影响力。 前面已经简单尝试过web服务构建，现在来试试实现CRUD数据操作。
20190401每周精品之编程
huawangxin
 238
mysql执行过程 一 MySQL 基础架构分析 1.1 MySQL 基本架构概览 下图是 MySQL 的一个简要架构图，从下图你可以很清晰的看到用户的 SQL 语句在 MySQL 内部是如何执行的。 先简单介绍一下下图涉及的一些组件的基本作用帮助大家理解这幅图，在 1.2 节中会详细介绍到这些组件的作用。 •连接器：身份认证和权限相关(登录 MySQL 的时候)。•查询缓存:...
Quarkus实战学习一
码小辫的博客
 125
Quarkus概述 Quarkus专为kubernetes而优化的Java解决方案 Quarkus是什么? 是一个集成了kubernetes的开源云原生框架,用于创建适配GraalVM和openjdk的kubernetes原生应用, 基于一系列流行库和技术构建. Quarkus的优点: 可以与docker和kubernetes轻松集成,启动速度快,内存消耗低,可提高开发者生产力等 官网:https://quarkus.io/ 知乎对于Quarkus 使用体验的讨论文章: https://www.
Quarkus初体验--2.9.0.Final版本（Windows10系统 64位）
lizhou828的专栏
 359
环境准备： 安装 graalvm 下载 官网URL：https://www.graalvm.org/downloads/ 有两个版本，分别以java8/java11 进行构建,本教程选择java11版本进行构建 java11:https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.3.0/graalvm-ce-java11-windows-amd64-20.3.0.zip 解压配置环境变量（同JDK配置
Quarkus云原生应用初体验
Hello World ^—^
 2076
文章目录前言为什么要构建Native Image怎么解决?什么是云原生（Cloud Native）总结Quarkus 前言 上一篇：GraalVM学习笔记 上一节简单介绍了GraalVM，提到了它的Native Image的构建，这一节将使用Quarkus框架来实战一个CRUD应用，并将其构建为Native Image来感受这技术的魅力 为什么要构建Native Image 小伙伴们可能遇到过这种场景，每次开发的接口刚上线的时候，可能会有一小部分请求超时，虽然大部分情况下不影响，但是看着心里还是有点不爽。。
SpringCloudAlibaba分布式流量控制组件Sentinel实战与源码分析（上）
最新发布
itxiaoshen博客
 75
Sentinel是面向分布式服务架构的高可用防护组件，本篇从基础入门，了解其特性、设计理念、工作流程，结合三步骤的代码和注解的示例实现流量控制、熔断降级基础功能，以最新源码打包部署sentinel控制台。...
java架构师进阶之路
henhenha的博客
 846
包含了计算机基础、算法和数据结构、常用工具、java核心知识、性能优化、基础框架、数据库、消息队列、缓存中间件、搜索引擎、大数据、RPC、网关、容器、面试等知识
程序改变世界！1024程序员节，给猿媛们的专属购书福利
somenzz的博客
 532
又是一年的1024程序员节！我提前先说下福利吧，免得你没有看完就滑走了，当当已经打5 折，这里可叠加 50，80 满减券，自营的所有书都可以，很多经典书籍可以买起来了，算下来差不多 3....
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司
脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
90%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 'quarkus实战之一：准备工作

程序员欣宸

于 2022-02-26 17:45:58 发布

1430
 收藏 4
分类专栏： kubernetes实战 java服务端 文章标签： java quarkus cloud native
版权

kubernetes实战
同时被 2 个专栏收录
73 篇文章114 订阅
订阅专栏

java服务端
175 篇文章46 订阅
订阅专栏
欢迎访问我的GitHub
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos

关于《quarkus实战》系列
《quarkus实战》系列是欣宸在2022年春季推出的又一个精品原创系列，作者将自己对java的热爱渗透到每段文字和每行代码中，全系列秉承欣宸一贯的知识+实战风格，既有知识普及、更有实际操作，在涉及基础知识之处更有深入分析，尽最大努力，将自己眼中云端的java的样子呈现出来
引子
作为一名Java程序员，如何适应目前的容器化趋势？将现有SpringBoot应用编译构建制作成docker镜像，然后运行在kubernetes环境，这是欣宸目前在实际项目中的做法，但也面临的诸多困扰：
启动慢：一个应用从启动到服务可用，一般是数秒，在对CPU核数和内存严格限制的情况下，花数十秒启动的情况也屡见不鲜，这样的问题无法适应需要快速重启或快速扩容的场景
内存消耗大：曾强行将内存限制在1G，结果FGC频率变大，还经常触发OMMKill导致pod重启，并且启动时间也会变长，相比之下，集群中golang应用大多配置128M内存限制，我只能羡慕了
另外还有诸多疑问也困扰着我：java技术栈内已有完整的注册发现、调用链追踪、指标监控、配置等技术实现，在kubernetes环境又该如何选择或适配
生在云上，长在云上的云原生时代，Java应用何去何从？用jib插件将SpingBoot应用转为docker镜像，在k8s上运行，仅此而已吗？
被以上问题困扰了很久，直到遇见 quarkus，当然了，它还没强大到解决上述所有问题，但它给了我方向和希望：java领域也有面向云原生的完整方案
关于quarkus
quarkus是为GraalVM 和HotSpot量身定制的Kubernetes原生Java框架，采用同类最佳的Java 库和标准制作而成，来自RedHat，是一个在Apache 许可证 2.0 版下获得许可的开源项目(来自官网)
quarkus官网：https://quarkus.io
quarkus的github仓库：https://github.com/quarkusio/quarkus
来看看quarkus的特点，官网用了超大字体描述，内容简洁：超音速、亚原子的JAVA

五大特点分别如下：
容器优先
命令式和响应式
社区和标准的支持
kubernetes原生
对开发者友好
来看看官网给出的对比数据，如下图，如果使用的是quarkus框架和GraalVM虚拟机，在内存方面对比传统框架有一个数量级的优势，而响应时间差距已不止一个数量级：

容器化的路上，选择quarkus是个不错的选择
本篇概览
作为《quarkus实战》系列的开篇，本文的目标是为后续文章和编码实战做好准备工作，由以下内容组成：
涉及软件的版本信息介绍
安装JDK-11
安装maven-3.8.4
安装docker
关于kubernetes的安装
新建maven工程，作为《quarkus实战》系列所有代码的父工程
以上就是今天的内容，先从环境信息开始吧
涉及软件的版本信息介绍
开始操作前，先将我这里的环境信息给出，这是能成功运行《quarkus实战》系列所有功能的环境，您可以用来作参考
先看开发环境：
操作系统：Ubuntu 16.04.7 LTS 桌面版（没错，写代码、本地运行调试、写文章都用这个Ubuntu电脑）
JDK：11.0.14
Maven：3.8.4
IDE：IDEA 2021.2.3（Ultimate Edition）
quarkus：2.7
docker：20.10.7
然后是运行环境，这是运行开发出的镜像的云环境：
操作系统：CentOS-7.9.2009
kubernetes：1.22.0（三台服务器，一台master，两台worker）
环境介绍完毕，开始动手
安装JDK
先看quarkus官方对JDK和maven版本的要求，如下所示，JDK最低11,maven最低3.8.1：

下载JDK11，地址是：https://www.oracle.com/java/technologies/downloads/#java11，按照自己的操作系统类型下载，如下图，我这里选的是linux版本：

將下载的压缩包在/usr/lib/jvm/解压，得到文件夹jdk-11.0.14
打开文件~/.bashrc，在尾部增加以下内容：
export JAVA_HOME=/usr/lib/jvm/jdk-11.0.14
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:${JAVA_HOME}/lib:${JRE_HOME}/lib
export PATH=${JAVA_HOME}/bin:$PATH
1
2
3
4
执行source ~/.bashrc，让配置生效
执行java -version验证JDK是否生效：
will@hp:~$ java -version
java version "11.0.14" 2022-01-18 LTS
Java(TM) SE Runtime Environment 18.9 (build 11.0.14+8-LTS-263)
Java HotSpot(TM) 64-Bit Server VM 18.9 (build 11.0.14+8-LTS-263, mixed mode)
1
2
3
4
安装Maven
下载压缩包，地址：https://dlcdn.apache.org/maven/maven-3/3.8.4/binaries/apache-maven-3.8.4-bin.zip
將下载的压缩包在/usr/local/解压，得到文件夹apache-maven-3.8.4
打开文件~/.bashrc，在尾部增加以下内容：
export MAVEN_HOME=/usr/local/apache-maven-3.8.4
export PATH=$MAVEN_HOME/bin:$PATH
1
2
执行source ~/.bashrc，让配置生效
执行mvn -version验证maven是否生效：
will@hp:~$ mvn -version
Apache Maven 3.8.4 (9b656c72d54e5bacbed989b64718c159fe39b537)
Maven home: /usr/local/apache-maven-3.8.4
Java version: 11.0.14, vendor: Oracle Corporation, runtime: /usr/lib/jvm/jdk-11.0.14
Default locale: zh_CN, platform encoding: UTF-8
OS name: "linux", version: "4.15.0-142-generic", arch: "amd64", family: "unix"
1
2
3
4
5
6
建议本地maven配置阿里云镜像，这样可以避免从中央仓库下载依赖失败的问题，在apache-maven-3.8.4/conf/settings.xml的mirrors节点下增加下面这个节点：
<mirror>
	<id>nexus-aliyun</id>
    <mirrorOf>*</mirrorOf>
    <name>Nexus aliyun</name>
    <url>http://maven.aliyun.com/nexus/content/groups/public</url>
</mirror>
1
2
3
4
5
6
安装docker
安装docker的命令与各操作系统有关，这里给出ubuntu下的安装命令作为参考：
curl -sSL https://get.docker.com | sh
1
如果您在ubuntu系统中用的不是root帐号，建议做参考下文做一些简单设置，这样操作docker的时候就无需每次都用sudo了：
《设置非root账号不用sudo直接执行docker命令》
关于kubernetes安装
可以参考《极速安装kubernetes-1.22.0（三台CentOS7服务器）》
新建maven工程
新建名为quarkus-tutorials的maven工程，目前这里面还是空的，将来会作为整个系列相关源码的父工程，将所有源码和依赖库版本统一管理起来
未完待续
至此，准备工作已完成，quarkus就像一副神秘的山水画卷，在欣宸原创的推动下徐徐展开，敬请期待

你不孤单，欣宸原创一路相伴
Java系列
Spring系列
Docker系列
kubernetes系列
数据库+中间件系列
DevOps系列

程序员欣宸
已关注

1


4


3

专栏目录
quarkus实战之二：应用的创建、构建、部署
程序员欣宸的博客
 1703
创建一个quarkus应用，修改功能代码，再编译构建，部署运行，今天一起把这些过程全部操作一遍
quarkus-grpc-web
05-03
如何在Quarkus中使用Grpc Web 该示例演示了如何在gRPC Web上使用quarkus-grpc扩展。 在此示例中，将grpcwebtext的Google变体与grpcwebtext （等同于plaintext gRPC）一起使用。 该示例演示了一元流和服务器端流。 在编写Google和Improbable时，gRPC Web变体都不支持客户端和双向流。 请注意，该示例使用Envoy代理将gRPC Web转换为本机gRPC。 我们计划在Quarkus中添加gRPC Web支持，但在撰写本文时尚未实现。 有意思的是 与服务器通信JavaScript代码位于ui/js/client.js 。 服务器实现可以在grpc-web/app/src/main/java/com/github/michalszynkiewicz/EchoService.java 。 该示例使用 。
评论3条写评论
_Schilings
热评
我太爱你了，期待您的博客！！！我从您的spring扩展实战系列的博客来的，您的每一篇文章都让我有新的收获！！我来给您催更！！
第一章: Vert.x 异步编程的基础知识
白石的专栏
 828
本书这部分的章节将通过使用Vert.x工具包教你异步编程的基本概念。使用Vert.x思考异步操作绝对是可行的(而且很有趣!)，我们将探讨Vert.x应用程序的主要构建块。
21-状态模式Quarkus实现
rengang66的博客
 90
摘要：本文用一个实例场景描述Gof 23设计模式中的状态（State）模式，并用Quarkus框架代码给予实现，同时也给出实现代码的UML模型。 关键字：Gof 23 设计模式 状态模式 Quarkus 1 基础知识 1.1 标准定义 状态（State）模式标准定义：允许一个对象在其内部状态改变时改变它的行为。对象看起来似乎修改了它的类。 1.2 分析和说明 状态（State）模式属于对象行为型模式。状态模式允许一个对象在其内部状态改变的时候改变行为。这个对象看上去象是改变了它的类一样。可理解为在不同的上下
Java Lambda表达式详解和实例
09-04
主要介绍了Java Lambda表达式详细介绍，从简单的到复杂的实例讲解,需要的朋友可以参考下
quarkus实战之五：细说maven插件
程序员欣宸的博客
 665
quarkus的maven插件非常重要，管理和构建工程时都离不开，本篇就来一起了解和掌握它
quarkus实战之三：开发模式(Development mode)
程序员欣宸的博客
 533
熟悉开发模式，这是quarkus应用在开发阶段的实用工具
quarkus数据库篇之四：本地缓存
程序员欣宸的博客
 142
如何将数据库查询结果缓存在当前进程中，提升下一次查询的速度？
quarkus数据库篇之三：单应用同时操作多个数据库
程序员欣宸的博客
 269
单个应用同时对多个数据库做增删改查，这是基本操作，quarkus也轻松支持，来随本篇一同操作吧
Quarkus框架入门之一：Quarkus框架介绍及简单示例
z69183787的专栏
 1243
开篇 最近几年，Spring全家桶横扫其它Java框架，已然成为事实标准，单体应用使用Spring Framework+Spring Boot，服务治理Spring Cloud，生态完善，各种组件层出不穷。曾经还玩过JFinal和Nutz等国内的开发框架，但是仅仅是私下玩玩，实际工作过程中，还是Spring的天下，很少会选择其它小众的框架（谁知道会不会有填不完的大坑）。 最近在社区闲逛的时候，发现一个Red Hat开源的Java框架Quarkus，定位为GraalVM和OpenJDK HotSpot量身定
quarkus数据库篇之一：比官方demo更简单的基础操作
程序员欣宸的博客
 674
《quarkus数据库篇》系列的开篇，编码实战最基础的数据库增删改查，数据库用的是PostgreSQL，在官方demo基础上进一步精简，极速入门quarkus数据库操作
一个简单的Quarkus CRUD入门
未完成的空间
 2113
Quarkus是一个由Red Hat开源的 Java 微服务框架，根据2020年8月18日发布的《 2020 年微服务领域开源数字化报告》，Quarkus 作为云原生微服务框架，在微服务框架中活跃度排名第一，全球 GitHub 开源项目活跃度中排名 40，也具有着巨大的影响力。 前面已经简单尝试过web服务构建，现在来试试实现CRUD数据操作。
20190401每周精品之编程
huawangxin
 238
mysql执行过程 一 MySQL 基础架构分析 1.1 MySQL 基本架构概览 下图是 MySQL 的一个简要架构图，从下图你可以很清晰的看到用户的 SQL 语句在 MySQL 内部是如何执行的。 先简单介绍一下下图涉及的一些组件的基本作用帮助大家理解这幅图，在 1.2 节中会详细介绍到这些组件的作用。 •连接器：身份认证和权限相关(登录 MySQL 的时候)。•查询缓存:...
Quarkus实战学习一
码小辫的博客
 125
Quarkus概述 Quarkus专为kubernetes而优化的Java解决方案 Quarkus是什么? 是一个集成了kubernetes的开源云原生框架,用于创建适配GraalVM和openjdk的kubernetes原生应用, 基于一系列流行库和技术构建. Quarkus的优点: 可以与docker和kubernetes轻松集成,启动速度快,内存消耗低,可提高开发者生产力等 官网:https://quarkus.io/ 知乎对于Quarkus 使用体验的讨论文章: https://www.
Quarkus初体验--2.9.0.Final版本（Windows10系统 64位）
lizhou828的专栏
 359
环境准备： 安装 graalvm 下载 官网URL：https://www.graalvm.org/downloads/ 有两个版本，分别以java8/java11 进行构建,本教程选择java11版本进行构建 java11:https://github.com/graalvm/graalvm-ce-builds/releases/download/vm-20.3.0/graalvm-ce-java11-windows-amd64-20.3.0.zip 解压配置环境变量（同JDK配置
Quarkus云原生应用初体验
Hello World ^—^
 2076
文章目录前言为什么要构建Native Image怎么解决?什么是云原生（Cloud Native）总结Quarkus 前言 上一篇：GraalVM学习笔记 上一节简单介绍了GraalVM，提到了它的Native Image的构建，这一节将使用Quarkus框架来实战一个CRUD应用，并将其构建为Native Image来感受这技术的魅力 为什么要构建Native Image 小伙伴们可能遇到过这种场景，每次开发的接口刚上线的时候，可能会有一小部分请求超时，虽然大部分情况下不影响，但是看着心里还是有点不爽。。
SpringCloudAlibaba分布式流量控制组件Sentinel实战与源码分析（上）
最新发布
itxiaoshen博客
 75
Sentinel是面向分布式服务架构的高可用防护组件，本篇从基础入门，了解其特性、设计理念、工作流程，结合三步骤的代码和注解的示例实现流量控制、熔断降级基础功能，以最新源码打包部署sentinel控制台。...
java架构师进阶之路
henhenha的博客
 846
包含了计算机基础、算法和数据结构、常用工具、java核心知识、性能优化、基础框架、数据库、消息队列、缓存中间件、搜索引擎、大数据、RPC、网关、容器、面试等知识
程序改变世界！1024程序员节，给猿媛们的专属购书福利
somenzz的博客
 532
又是一年的1024程序员节！我提前先说下福利吧，免得你没有看完就滑走了，当当已经打5 折，这里可叠加 50，80 满减券，自营的所有书都可以，很多经典书籍可以买起来了，算下来差不多 3....
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司
脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
90%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 18);
INSERT INTO public.article_content VALUES (1598254235307212801, '2022-12-01 17:54:38.482', false, '2022-12-01 17:54:38.482', '<p>保存草稿测试 保存草稿测试 132</p>
', '保存草稿测试 保存草稿测试 132', '保存草稿测试 保存草稿测试 132
', 1598254235307212800);
INSERT INTO public.article_content VALUES (1598254332015280129, '2022-12-01 17:55:01.539', false, '2022-12-01 17:55:01.539', '<p>保存草稿测试 保存草稿测试 132</p>
', '保存草稿测试 保存草稿测试 132', '保存草稿测试 保存草稿测试 132
', 1598254332015280128);
INSERT INTO public.article_content VALUES (1649248024364318720, '2023-04-21 11:05:45.214', false, '2023-04-21 11:07:47.297', '<h1 id="测试一下"><a href="#测试一下" id="测试一下">测试一下</a></h1>
<pre><code class="language-javascript">console.log(&quot;haha&quot;)
</code></pre>
<h2 id="不同颜色BlockTipQuote测试"><a href="#不同颜色blocktipquote测试" id="不同颜色blocktipquote测试">不同颜色BlockTipQuote测试</a></h2>
<p><code>Form Handsome</code></p>
<p><em>Markdown语法前缀</em></p>
<pre><code class="language-java">String[] badPrefix = {&quot;> x&quot;, &quot;> X&quot;, &quot;> x:&quot;, &quot;> X:&quot;, &quot;> bad:&quot;, &quot;> no:&quot;, &quot;> error:&quot;};

String[] goodPrefix = {&quot;> √&quot;, &quot;> good:&quot;, &quot;> ok:&quot;, &quot;> yes:&quot;, &quot;> right:&quot;};

String[] infoPrefix = {&quot;> i&quot;, &quot;> I&quot;, &quot;> i:&quot;, &quot;> I:&quot;, &quot;> tip:&quot;};

String[] warnPrefix = {&quot;> !&quot;, &quot;> ！&quot;, &quot;> !:&quot;, &quot;> ！:&quot;, &quot;> warn:&quot;, &quot;> warning:&quot;};

String[] sharePrefix = {&quot;> @&quot;, &quot;> @:&quot;, &quot;> at:&quot;};;
</code></pre>
<p><code>Test</code></p>
<h3 id="单行测试"><a href="#单行测试" id="单行测试">单行测试</a></h3>
<blockquote>
<p>0正常的 正常的 正常的 正常的 正常的 <code>test</code></p>
</blockquote>
<p><blockquote class="d-tip d-tip-share"><p class="mdi mdi-at">1这是灰色的短代码框，常用来引用资料什么的 <a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a><br />
</p></blockquote></p>
<p><blockquote class="d-tip d-tip-warning"><p class="mdi mdi-exclamation-thick">2这是黄色的短代码框，常用来做提示，引起读者注意。 <code>test</code><br />
</p></blockquote></p>
<p><blockquote class="d-tip d-tip-error"><p class="mdi mdi-close">3这是红色的短代码框，用于严重警告什么的。 <code>test</code><br />
</p></blockquote></p>
<p><blockquote class="d-tip d-tip-info"><p class="mdi mdi-information-variant">4这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code><br />
</p></blockquote></p>
<p><blockquote class="d-tip d-tip-success"><p class="mdi mdi-check">5这是绿色的短代码框，显示一些推荐信息。 <code>test</code><br />
</p></blockquote></p>
<h3 id="多行测试"><a href="#多行测试" id="多行测试">多行测试</a></h3>
<p><blockquote class="d-tip d-tip-share"><p class="mdi mdi-at">1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a></p>
<p>1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a></p>
<p>1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a></p>
<p>1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a></p>
<p>1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a><br />
</p></blockquote></p>
<hr />
<p><blockquote class="d-tip d-tip-warning"><p class="mdi mdi-exclamation-thick">2这是黄色的短代码框，常用来做提示，引起读者注意。 <code>test</code></p>
<p>2这是黄色的短代码框，常用来做提示，引起读者注意。 <code>test</code></p>
<p>2这是黄色的短代码框，常用来做提示，引起读者注意。 <code>test</code><br />
</p></blockquote></p>
<hr />
<p><blockquote class="d-tip d-tip-error"><p class="mdi mdi-close">这是红色的短代码框，用于严重警告什么的。 <code>test</code></p>
<p>x3这是红色的短代码框，用于严重警告什么的。 <code>test</code></p>
<p>这是红色的短代码框，用于严重警告什么的。 <code>test</code></p>
<p>3这是红色的短代码框，用于严重警告什么的。 <code>test</code><br />
</p></blockquote></p>
<hr />
<p><blockquote class="d-tip d-tip-info"><p class="mdi mdi-information-variant">这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code></p>
<p>这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code></p>
<p>这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code></p>
<p>这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code><br />
</p></blockquote></p>
<hr />
<p><blockquote class="d-tip d-tip-success"><p class="mdi mdi-check">5这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p>
<p>这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p>
<p>这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p>
<p>5这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p></blockquote></p>
', '# 测试一下

```javascript
console.log("haha")
```
## 不同颜色BlockTipQuote测试

`Form Handsome`

*Markdown语法前缀*
```java
String[] badPrefix = {"> x", "> X", "> x:", "> X:", "> bad:", "> no:", "> error:"};

String[] goodPrefix = {"> √", "> good:", "> ok:", "> yes:", "> right:"};

String[] infoPrefix = {"> i", "> I", "> i:", "> I:", "> tip:"};

String[] warnPrefix = {"> !", "> ！", "> !:", "> ！:", "> warn:", "> warning:"};

String[] sharePrefix = {"> @", "> @:", "> at:"};;
```

`Test`


### 单行测试

> 0正常的 正常的 正常的 正常的 正常的 `test`

> @1这是灰色的短代码框，常用来引用资料什么的 http://nuxt.localhost/article/editor/draft?id=16

> !2这是黄色的短代码框，常用来做提示，引起读者注意。 `test`

> x3这是红色的短代码框，用于严重警告什么的。 `test`

> i4这是浅蓝色的短代码框，用于显示一些信息。 `test`

> √5这是绿色的短代码框，显示一些推荐信息。 `test`



### 多行测试




> @1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
> at:1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
> @1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
> at:1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
> @1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16

---
> !2这是黄色的短代码框，常用来做提示，引起读者注意。 `test`
> warn:2这是黄色的短代码框，常用来做提示，引起读者注意。 `test`
> warning:2这是黄色的短代码框，常用来做提示，引起读者注意。 `test`

---

> no:这是红色的短代码框，用于严重警告什么的。 `test`
> no:x3这是红色的短代码框，用于严重警告什么的。 `test`
> bad:这是红色的短代码框，用于严重警告什么的。 `test`
> x3这是红色的短代码框，用于严重警告什么的。 `test`

----

> i:这是浅蓝色的短代码框，用于显示一些信息。 `test`
> i这是浅蓝色的短代码框，用于显示一些信息。 `test`
> i:这是浅蓝色的短代码框，用于显示一些信息。 `test`
> i:这是浅蓝色的短代码框，用于显示一些信息。 `test`

-----

> √5这是绿色的短代码框，显示一些推荐信息。 `test`
> good:这是绿色的短代码框，显示一些推荐信息。 `test`
> yes:这是绿色的短代码框，显示一些推荐信息。 `test`
> right:5这是绿色的短代码框，显示一些推荐信息。 `test`', '测试一下
console.log("haha")

不同颜色BlockTipQuote测试
Form Handsome
Markdown语法前缀
String[] badPrefix = {"> x", "> X", "> x:", "> X:", "> bad:", "> no:", "> error:"};

String[] goodPrefix = {"> √", "> good:", "> ok:", "> yes:", "> right:"};

String[] infoPrefix = {"> i", "> I", "> i:", "> I:", "> tip:"};

String[] warnPrefix = {"> !", "> ！", "> !:", "> ！:", "> warn:", "> warning:"};

String[] sharePrefix = {"> @", "> @:", "> at:"};;

Test
单行测试

0正常的 正常的 正常的 正常的 正常的 test

1这是灰色的短代码框，常用来引用资料什么的 http://nuxt.localhost/article/editor/draft?id=16

2这是黄色的短代码框，常用来做提示，引起读者注意。 test

3这是红色的短代码框，用于严重警告什么的。 test

4这是浅蓝色的短代码框，用于显示一些信息。 test

5这是绿色的短代码框，显示一些推荐信息。 test

多行测试
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16


2这是黄色的短代码框，常用来做提示，引起读者注意。 test
2这是黄色的短代码框，常用来做提示，引起读者注意。 test
2这是黄色的短代码框，常用来做提示，引起读者注意。 test


这是红色的短代码框，用于严重警告什么的。 test
x3这是红色的短代码框，用于严重警告什么的。 test
这是红色的短代码框，用于严重警告什么的。 test
3这是红色的短代码框，用于严重警告什么的。 test


这是浅蓝色的短代码框，用于显示一些信息。 test
这是浅蓝色的短代码框，用于显示一些信息。 test
这是浅蓝色的短代码框，用于显示一些信息。 test
这是浅蓝色的短代码框，用于显示一些信息。 test


5这是绿色的短代码框，显示一些推荐信息。 test
这是绿色的短代码框，显示一些推荐信息。 test
这是绿色的短代码框，显示一些推荐信息。 test
5这是绿色的短代码框，显示一些推荐信息。 test
', 1649248024339152896);
INSERT INTO public.article_content VALUES (15, '2022-09-10 12:44:15.387', false, '2022-09-15 10:41:12.565', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', 'mdmdmdmdmdmdmdmdmdmdmdv', 'pure', 22);
INSERT INTO public.article_content VALUES (113, '2022-08-27 12:12:46.304', false, '2022-09-15 10:41:12.545', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', '利用Docker极速下载OpenJDK11源码

程序员欣宸

于 2018-10-21 22:05:07 发布

2363
 收藏
分类专栏： Docker实战 文章标签： docker openjdk
版权

Docker实战
109 篇文章55 订阅
订阅专栏

Dock实战系列
69 篇文章40 订阅
订阅专栏
常规下载方式的不足
常用的下载OpenJDK11源码方式来自官方推荐，如下命令：

hg clone http://hg.openjdk.java.net/jdk/jdk11
1
这种下载方式要装pip，再用pip装mercurial，并且下载源码过程中也容易超时失败；

利用Docker，一行命令完成下载
如果您安装了Docker，通过以下一行命令即可下载OpenJDK11源码：

docker run --rm -it -v /usr/local/work/openjdksrc:/output bolingcavalry/openjdksrc11:0.0.1
1
上述命令中，/usr/local/work/openjdksrc是您的本地目录，请确保已经创建好，命令执行完毕后在此目录下可见到文件jdk11.tar.gz，这就是OpenJDK11的源码了，大小已超过1G；

注意：

我这里的操作系统是Ubuntu16，但是该命令在各个操作系统的Docker环境下都可以运行，您只要将命令中您的本地文件夹指定正确即可；
由于OpenJDK11源码包大小已超过1G，因此镜像本身也很大，强烈推荐使用镜像加速器（例如阿里云或者DaoCloud的）；
欢迎关注我的公众号：程序员欣宸



程序员欣宸
已关注

3


0


0

专栏目录
Ubuntu环境编辑OpenJDK11源码
程序员欣宸的博客
 1656
准备工作 Ubuntu版本是16.04.5 LTS； 确认OpenJDK11源码已经下载到本地，下载方式可以参考文章《Ubuntu环境下载OpenJDK11源码》、《利用Docker极速下载OpenJDK11源码》； 安装OpenJDK10作为boot JDK，安装过程可以参考文章《Ubuntu下安装OpenJDK10》； 重要文件夹的位置 OpenJDK11源码解压后是个名为jdk11的文...
极速体验编译openjdk8（docker环境）
程序员欣宸的博客
 7640
在docker环境下，用最少的步骤把openjdk8源码编译构建成jdk
制作JavaCV应用依赖的基础Docker镜像(CentOS7+JDK8+OpenCV4)
程序员欣宸的博客
 656
做一个集成了JDK8和OpenCV4的镜像，JavaCV相关的应用以此作为基础镜像，可以省去环境配置和依赖库的工作了
Java应用在docker环境配置容器健康检查
程序员欣宸的博客
 2170
运行在docker环境的java应用，给其增加健康检查的能力，以便观察和监控容器的健康状态。
程序员欣宸文章汇总(Docker篇)
程序员欣宸的博客
 5564
本文是做的的Docker文章汇总，如果出现对您有参考价值的内容，我将不胜荣幸。
Docker下Nacos配置应用开发
程序员欣宸的博客
 2387
细说springboot应用如何使用nacos配置中心的服务
程序员欣宸的文章分类汇总
程序员欣宸的博客
 1917
程序员欣宸的所有文章的分类汇总都在此，希望能对您有用
Java版人脸检测详解上篇：运行环境的Docker镜像(CentOS+JDK+OpenCV)
程序员欣宸的博客
 3035
Java版人脸检测的应用依赖JDK和OpenCV(3.4.3版本)，这些依赖项如果做成基础docker镜像，就可以给更多的业务应用使用了
docker学习笔记
轻描淡写
 112
清理 # 按顺序执行 # 1、删除悬空的容器 docker container prune -f # 2、删除悬空的镜像 docker image prune -a -f 镜像 查看镜像 docker images 拉取镜像 # docker pull 镜像名:[镜像标签] docker pull nginx 打标签 # docker tag 原镜像名 新镜像名 docker tag nginx:latest nginx:old 删除镜像 # 删除指定镜像 dcoker rmi -f 镜像名 do
Docker下Prometheus和Grafana三部曲之三：自定义监控项开发和配置
程序员欣宸的博客
 1951
本文详细讲述了业务系统如何将自定义的监控项上报到prometheus，并且在Grafana上配置监控项展示上报的自定义数据
Java版人脸检测详解下篇：开发java应用并做成docker镜像
javadada1197的博客
 133
本篇概览 如果您看过《Java版人脸检测上篇》一文，甚至动手实际操作过，那么你应该会对背后的技术细节感兴趣，开发这样一个应用，咱们总共要做以下三件事： 1.准备好docker基础镜像 2.开发java应用 3.将java应用打包成package文件，集成到基础镜像中，得到最终的java应用镜像 对于准备好docker基础镜像这项工作，咱们在前文《Java版人脸检测详解上篇：运行环境的Docker...
Java的wait()、notify()学习三部曲之二：修改JVM源码看参数
程序员欣宸的博客
 2156
线程同步相关的JVM源码分析系列之二，修改源码查看运行时的虚拟机参数。
Java的wait()、notify()学习三部曲之三：修改JVM源码控制抢锁顺序
程序员欣宸的博客
 2726
修改JVM源码，控制抢占锁的线程的优先级
Java版人脸检测详解上篇：运行环境的Docker镜像(CentOS+JDK
m0_64867047的博客
 92
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos 本篇概览 如果您看过《三分钟极速体验：Java版人脸检测》一文，甚至动手实际操作过，您应该会对背后的技术细节感兴趣，接下来就请随欣宸一起动手实战，从无到有将这个应用开发出来； 首先确定咱们的目标： 开发出java版的人脸检测应用 将此应用制作成docker镜像 在docker环境运行这个应用 基于上述目标，我们可以确定以下操作步骤： 准备好docke.
Jaeger开发入门(java版)
程序员欣宸的博客
 1217
Spring Cloud应用接入和使用Jaeger的基本操作
Java版人脸检测详解下篇：编码
程序员欣宸的博客
 513
看过《三分钟极速体验：Java版人脸检测》一文后，您可能想知道这是如何实现的，本文咱们一起来开发完整的代码
程序员欣宸文章汇总(Java篇)
程序员欣宸的博客
 6064
本文保存了作者所有Java相关文章的地址，并做了轻量级分类，希望您能从中找到有参考价值的内容，那将是我的荣幸；
Docker理论— 什么是虚拟化
最新发布
测试-八戒
 46
虚拟计算机系统称为“虚拟机”(VM)，它是一种严密隔离且内含操作系统和应用的软件容器。每个自包含虚拟机都是完全独立的。通过将多台虚拟机放置在一台计算机上，可仅在一台物理服务器或“主机”上运行多个操作系统和应用。hypervisor软件层可将虚拟机与主机分离开来，并根据需要为每个虚拟机动态分配计算资源。
微服务轰炸中：RPC+Dubbo+SpirngBoot+SpringCloud Alibaba+Docker+K8s！
weixin_66896902的博客
 55
不过全是用的xmind软件来绘画所有的导图，不能直接上传在文章里，但都有以截图的形式进行展示。SpringCloud微服务架构笔记（一）（PDF）SpringCloud微服务架构笔记（二）（PDF）SpringCloud微服务架构笔记（三）（PDF）SpringCloud微服务架构笔记（四）（PDF）Spring Cloud-知识体系（xmind）Spring Boot搭建实际项目开发中的架构。
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', '利用Docker极速下载OpenJDK11源码

程序员欣宸

于 2018-10-21 22:05:07 发布

2363
 收藏
分类专栏： Docker实战 文章标签： docker openjdk
版权

Docker实战
109 篇文章55 订阅
订阅专栏

Dock实战系列
69 篇文章40 订阅
订阅专栏
常规下载方式的不足
常用的下载OpenJDK11源码方式来自官方推荐，如下命令：

hg clone http://hg.openjdk.java.net/jdk/jdk11
1
这种下载方式要装pip，再用pip装mercurial，并且下载源码过程中也容易超时失败；

利用Docker，一行命令完成下载
如果您安装了Docker，通过以下一行命令即可下载OpenJDK11源码：

docker run --rm -it -v /usr/local/work/openjdksrc:/output bolingcavalry/openjdksrc11:0.0.1
1
上述命令中，/usr/local/work/openjdksrc是您的本地目录，请确保已经创建好，命令执行完毕后在此目录下可见到文件jdk11.tar.gz，这就是OpenJDK11的源码了，大小已超过1G；

注意：

我这里的操作系统是Ubuntu16，但是该命令在各个操作系统的Docker环境下都可以运行，您只要将命令中您的本地文件夹指定正确即可；
由于OpenJDK11源码包大小已超过1G，因此镜像本身也很大，强烈推荐使用镜像加速器（例如阿里云或者DaoCloud的）；
欢迎关注我的公众号：程序员欣宸



程序员欣宸
已关注

3


0


0

专栏目录
Ubuntu环境编辑OpenJDK11源码
程序员欣宸的博客
 1656
准备工作 Ubuntu版本是16.04.5 LTS； 确认OpenJDK11源码已经下载到本地，下载方式可以参考文章《Ubuntu环境下载OpenJDK11源码》、《利用Docker极速下载OpenJDK11源码》； 安装OpenJDK10作为boot JDK，安装过程可以参考文章《Ubuntu下安装OpenJDK10》； 重要文件夹的位置 OpenJDK11源码解压后是个名为jdk11的文...
极速体验编译openjdk8（docker环境）
程序员欣宸的博客
 7640
在docker环境下，用最少的步骤把openjdk8源码编译构建成jdk
制作JavaCV应用依赖的基础Docker镜像(CentOS7+JDK8+OpenCV4)
程序员欣宸的博客
 656
做一个集成了JDK8和OpenCV4的镜像，JavaCV相关的应用以此作为基础镜像，可以省去环境配置和依赖库的工作了
Java应用在docker环境配置容器健康检查
程序员欣宸的博客
 2170
运行在docker环境的java应用，给其增加健康检查的能力，以便观察和监控容器的健康状态。
程序员欣宸文章汇总(Docker篇)
程序员欣宸的博客
 5564
本文是做的的Docker文章汇总，如果出现对您有参考价值的内容，我将不胜荣幸。
Docker下Nacos配置应用开发
程序员欣宸的博客
 2387
细说springboot应用如何使用nacos配置中心的服务
程序员欣宸的文章分类汇总
程序员欣宸的博客
 1917
程序员欣宸的所有文章的分类汇总都在此，希望能对您有用
Java版人脸检测详解上篇：运行环境的Docker镜像(CentOS+JDK+OpenCV)
程序员欣宸的博客
 3035
Java版人脸检测的应用依赖JDK和OpenCV(3.4.3版本)，这些依赖项如果做成基础docker镜像，就可以给更多的业务应用使用了
docker学习笔记
轻描淡写
 112
清理 # 按顺序执行 # 1、删除悬空的容器 docker container prune -f # 2、删除悬空的镜像 docker image prune -a -f 镜像 查看镜像 docker images 拉取镜像 # docker pull 镜像名:[镜像标签] docker pull nginx 打标签 # docker tag 原镜像名 新镜像名 docker tag nginx:latest nginx:old 删除镜像 # 删除指定镜像 dcoker rmi -f 镜像名 do
Docker下Prometheus和Grafana三部曲之三：自定义监控项开发和配置
程序员欣宸的博客
 1951
本文详细讲述了业务系统如何将自定义的监控项上报到prometheus，并且在Grafana上配置监控项展示上报的自定义数据
Java版人脸检测详解下篇：开发java应用并做成docker镜像
javadada1197的博客
 133
本篇概览 如果您看过《Java版人脸检测上篇》一文，甚至动手实际操作过，那么你应该会对背后的技术细节感兴趣，开发这样一个应用，咱们总共要做以下三件事： 1.准备好docker基础镜像 2.开发java应用 3.将java应用打包成package文件，集成到基础镜像中，得到最终的java应用镜像 对于准备好docker基础镜像这项工作，咱们在前文《Java版人脸检测详解上篇：运行环境的Docker...
Java的wait()、notify()学习三部曲之二：修改JVM源码看参数
程序员欣宸的博客
 2156
线程同步相关的JVM源码分析系列之二，修改源码查看运行时的虚拟机参数。
Java的wait()、notify()学习三部曲之三：修改JVM源码控制抢锁顺序
程序员欣宸的博客
 2726
修改JVM源码，控制抢占锁的线程的优先级
Java版人脸检测详解上篇：运行环境的Docker镜像(CentOS+JDK
m0_64867047的博客
 92
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos 本篇概览 如果您看过《三分钟极速体验：Java版人脸检测》一文，甚至动手实际操作过，您应该会对背后的技术细节感兴趣，接下来就请随欣宸一起动手实战，从无到有将这个应用开发出来； 首先确定咱们的目标： 开发出java版的人脸检测应用 将此应用制作成docker镜像 在docker环境运行这个应用 基于上述目标，我们可以确定以下操作步骤： 准备好docke.
Jaeger开发入门(java版)
程序员欣宸的博客
 1217
Spring Cloud应用接入和使用Jaeger的基本操作
Java版人脸检测详解下篇：编码
程序员欣宸的博客
 513
看过《三分钟极速体验：Java版人脸检测》一文后，您可能想知道这是如何实现的，本文咱们一起来开发完整的代码
程序员欣宸文章汇总(Java篇)
程序员欣宸的博客
 6064
本文保存了作者所有Java相关文章的地址，并做了轻量级分类，希望您能从中找到有参考价值的内容，那将是我的荣幸；
Docker理论— 什么是虚拟化
最新发布
测试-八戒
 46
虚拟计算机系统称为“虚拟机”(VM)，它是一种严密隔离且内含操作系统和应用的软件容器。每个自包含虚拟机都是完全独立的。通过将多台虚拟机放置在一台计算机上，可仅在一台物理服务器或“主机”上运行多个操作系统和应用。hypervisor软件层可将虚拟机与主机分离开来，并根据需要为每个虚拟机动态分配计算资源。
微服务轰炸中：RPC+Dubbo+SpirngBoot+SpringCloud Alibaba+Docker+K8s！
weixin_66896902的博客
 55
不过全是用的xmind软件来绘画所有的导图，不能直接上传在文章里，但都有以截图的形式进行展示。SpringCloud微服务架构笔记（一）（PDF）SpringCloud微服务架构笔记（二）（PDF）SpringCloud微服务架构笔记（三）（PDF）SpringCloud微服务架构笔记（四）（PDF）Spring Cloud-知识体系（xmind）Spring Boot搭建实际项目开发中的架构。
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 112);
INSERT INTO public.article_content VALUES (1598255716760551425, '2022-12-01 18:00:31.688', false, '2022-12-01 18:00:31.688', '<p>123</p>
', '123', '123
', 1598255716760551424);
INSERT INTO public.article_content VALUES (107, '2022-08-27 12:01:36.905', false, '2022-09-15 10:41:12.56', '<h1 class="atx" id="nuxt-3-minimal-starter">Nuxt 3 Minimal Starter</h1>
<p>Look at the <a href="https://v3.nuxtjs.org">nuxt 3 documentation</a> to learn more.</p>
<h2 class="atx" id="setup">Setup</h2>
<p>Make sure to install the dependencies:</p>
<pre><code class="fenced-code-block language-bash"># yarn  
yarn install  

# npm  
npm install  

# pnpm  
pnpm install --shamefully-hoist  </code></pre>
<h2 class="atx" id="development-server">Development Server</h2>


<pre><code class="fenced-code-block language-bash">npm run dev  </code></pre>
<h2 class="atx" id="production">Production</h2>
<p>Build the application for production:</p>
<pre><code class="fenced-code-block language-bash">npm run build  </code></pre>
<p>Locally preview production build:</p>
<pre><code class="fenced-code-block language-bash">npm run preview  </code></pre>
<p>Checkout the <a href="https://v3.nuxtjs.org/guide/deploy/presets">deployment documentation</a> for more information.</p>
', 'md', 'disruptor笔记之三：环形队列的基础操作(不用Disruptor类)

程序员欣宸

于 2021-05-30 00:01:26 发布

882
 收藏 1
分类专栏： java服务端 文章标签： java 队列 disruptor
版权

java服务端
专栏收录该内容
175 篇文章46 订阅
订阅专栏
欢迎访问我的GitHub
这里分类和汇总了欣宸的全部原创(含配套源码)：https://github.com/zq2599/blog_demos

《disruptor笔记》系列链接
快速入门
Disruptor类分析
环形队列的基础操作(不用Disruptor类)
事件消费知识点小结
事件消费实战
常见场景
等待策略
知识点补充(终篇)
本篇概览
本文是《disruptor笔记》系列的第三篇，主要任务是编码实现消息生产和消费，与《disruptor笔记之一：快速入门》不同的是，本次开发不使用Disruptor类，和Ring Buffer(环形队列)相关的操作都是自己写代码实现；
这种脱离Disruptor类操作Ring Buffer的做法，不适合用在生产环境，但在学习Disruptor的过程中，这是种高效的学习手段，经过本篇实战后，在今后使用Disruptor时，您在开发、调试、优化等各种场景下都能更加得心应手；
简单的消息生产消费已不能满足咱们的学习热情，今天的实战要挑战以下三个场景：
100个事件，单个消费者消费；
100个事件，三个消费者，每个都独自消费这个100个事件；
100个事件，三个消费者共同消费这个100个事件；
前文回顾
为了完成本篇的实战，前文《disruptor笔记之二：Disruptor类分析》已做了充分的研究分析，建议观看，这里简单回顾以下Disruptor类的几个核心功能，这也是咱们编码时要实现的：

创建环形队列（RingBuffer对象）
创建SequenceBarrier对象，用于接收ringBuffer中的可消费事件
创建BatchEventProcessor，负责消费事件
绑定BatchEventProcessor对象的异常处理类
调用ringBuffer.addGatingSequences，将消费者的Sequence传给ringBuffer
启动独立线程，用来执行消费事件的业务逻辑
理论分析已经完成，接下来开始编码；
源码下载
本篇实战中的完整源码可在GitHub下载到，地址和链接信息如下表所示(https://github.com/zq2599/blog_demos)：
名称	链接	备注
项目主页	https://github.com/zq2599/blog_demos	该项目在GitHub上的主页
git仓库地址(https)	https://github.com/zq2599/blog_demos.git	该项目源码的仓库地址，https协议
git仓库地址(ssh)	git@github.com:zq2599/blog_demos.git	该项目源码的仓库地址，ssh协议
这个git项目中有多个文件夹，本次实战的源码在disruptor-tutorials文件夹下，如下图红框所示：

disruptor-tutorials是个父工程，里面有多个module，本篇实战的module是low-level-operate，如下图红框所示：

开发
进入编码阶段，今天的任务是挑战以下三个场景：
100个事件，单个消费者消费；
100个事件，三个消费者，每个都独自消费这个100个事件；
100个事件，三个消费者共同消费这个100个事件；
咱们先把工程建好，然后编写公共代码，例如事件定义、事件工厂等，最后才是每个场景的开发；
在父工程disruptor-tutorials新增名为low-level-operate的module，其build.gradle如下：
plugins {
    id ''org.springframework.boot''
}

dependencies {
    implementation ''org.projectlombok:lombok''
    implementation ''org.springframework.boot:spring-boot-starter''
    implementation ''org.springframework.boot:spring-boot-starter-web''
    implementation ''com.lmax:disruptor''

    testImplementation(''org.springframework.boot:spring-boot-starter-test'')
}
1
2
3
4
5
6
7
8
9
10
11
12
然后是springboot启动类：
package com.bolingcavalry;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class LowLevelOperateApplication {
	public static void main(String[] args) {
		SpringApplication.run(LowLevelOperateApplication.class, args);
	}
}
1
2
3
4
5
6
7
8
9
10
11
事件类，这是事件的定义：
package com.bolingcavalry.service;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;

@Data
@ToString
@NoArgsConstructor
public class StringEvent {
    private String value;
}
1
2
3
4
5
6
7
8
9
10
11
12
事件工厂，定义如何在内存中创建事件对象：
package com.bolingcavalry.service;

import com.lmax.disruptor.EventFactory;

public class StringEventFactory implements EventFactory<StringEvent> {
    @Override
    public StringEvent newInstance() {
        return new StringEvent();
    }
}
1
2
3
4
5
6
7
8
9
10
事件生产类，定义如何将业务逻辑的事件转为disruptor事件发布到环形队列，用于消费：
package com.bolingcavalry.service;

import com.lmax.disruptor.RingBuffer;

public class StringEventProducer {

    // 存储数据的环形队列
    private final RingBuffer<StringEvent> ringBuffer;

    public StringEventProducer(RingBuffer<StringEvent> ringBuffer) {
        this.ringBuffer = ringBuffer;
    }

    public void onData(String content) {

        // ringBuffer是个队列，其next方法返回的是下最后一条记录之后的位置，这是个可用位置
        long sequence = ringBuffer.next();

        try {
            // sequence位置取出的事件是空事件
            StringEvent stringEvent = ringBuffer.get(sequence);
            // 空事件添加业务信息
            stringEvent.setValue(content);
        } finally {
            // 发布
            ringBuffer.publish(sequence);
        }
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
事件处理类，收到事件后具体的业务处理逻辑：
package com.bolingcavalry.service;

import com.lmax.disruptor.EventHandler;
import lombok.Setter;
import lombok.extern.slf4j.Slf4j;
import java.util.function.Consumer;

@Slf4j
public class StringEventHandler implements EventHandler<StringEvent> {

    public StringEventHandler(Consumer<?> consumer) {
        this.consumer = consumer;
    }

    // 外部可以传入Consumer实现类，每处理一条消息的时候，consumer的accept方法就会被执行一次
    private Consumer<?> consumer;

    @Override
    public void onEvent(StringEvent event, long sequence, boolean endOfBatch) throws Exception {
        log.info("sequence [{}], endOfBatch [{}], event : {}", sequence, endOfBatch, event);

        // 这里延时100ms，模拟消费事件的逻辑的耗时
        Thread.sleep(100);

        // 如果外部传入了consumer，就要执行一次accept方法
        if (null!=consumer) {
            consumer.accept(null);
        }
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
定义一个接口，外部通过调用接口的方法来生产消息，再放几个常量在里面后面会用到：
package com.bolingcavalry.service;

public interface LowLevelOperateService {
    /**
     * 消费者数量
     */
    int CONSUMER_NUM = 3;

    /**
     * 环形缓冲区大小
     */
    int BUFFER_SIZE = 16;

    /**
     * 发布一个事件
     * @param value
     * @return
     */
    void publish(String value);

    /**
     * 返回已经处理的任务总数
     * @return
     */
    long eventCount();
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
以上就是公共代码了，接下来逐个实现之前规划的三个场景；
100个事件，单个消费者消费
这是最简单的功能了，实现发布消息和单个消费者消费的功能，代码如下，有几处要注意的地方稍后提到：
package com.bolingcavalry.service.impl;

import com.bolingcavalry.service.*;
import com.lmax.disruptor.BatchEventProcessor;
import com.lmax.disruptor.RingBuffer;
import com.lmax.disruptor.SequenceBarrier;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Consumer;

@Service("oneConsumer")
@Slf4j
public class OneConsumerServiceImpl implements LowLevelOperateService {

    private RingBuffer<StringEvent> ringBuffer;

    private StringEventProducer producer;

    /**
     * 统计消息总数
     */
    private final AtomicLong eventCount = new AtomicLong();

    private ExecutorService executors;

    @PostConstruct
    private void init() {
        // 准备一个匿名类，传给disruptor的事件处理类，
        // 这样每次处理事件时，都会将已经处理事件的总数打印出来
        Consumer<?> eventCountPrinter = new Consumer<Object>() {
            @Override
            public void accept(Object o) {
                long count = eventCount.incrementAndGet();
                log.info("receive [{}] event", count);
            }
        };

        // 创建环形队列实例
        ringBuffer = RingBuffer.createSingleProducer(new StringEventFactory(), BUFFER_SIZE);

        // 准备线程池
        executors = Executors.newFixedThreadPool(1);

        //创建SequenceBarrier
        SequenceBarrier sequenceBarrier = ringBuffer.newBarrier();

        // 创建事件处理的工作类，里面执行StringEventHandler处理事件
        BatchEventProcessor<StringEvent> batchEventProcessor = new BatchEventProcessor<>(
                ringBuffer,
                sequenceBarrier,
                new StringEventHandler(eventCountPrinter));

        // 将消费者的sequence传给环形队列
        ringBuffer.addGatingSequences(batchEventProcessor.getSequence());

        // 在一个独立线程中取事件并消费
        executors.submit(batchEventProcessor);

        // 生产者
        producer = new StringEventProducer(ringBuffer);
    }

    @Override
    public void publish(String value) {
        producer.onData(value);
    }

    @Override
    public long eventCount() {
        return eventCount.get();
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
上述代码有以下几处需要注意：
自己创建环形队列RingBuffer实例
自己准备线程池，里面的线程用来获取和消费消息
自己动手创建BatchEventProcessor实例，并把事件处理类传入
通过ringBuffer创建sequenceBarrier，传给BatchEventProcessor实例使用
将BatchEventProcessor的sequence传给ringBuffer，确保ringBuffer的生产和消费不会出现混乱
启动线程池，意味着BatchEventProcessor实例在一个独立线程中不断的从ringBuffer中获取事件并消费；
为了验证上述代码能否正常工作，我这里写了个单元测试类，如下所示，逻辑很简单，调用OneConsumerServiceImpl.publish方法一百次，产生一百个事件，再检查OneConsumerServiceImpl记录的消费事件总数是不是等于一百：
package com.bolingcavalry.service.impl;

import com.bolingcavalry.service.LowLevelOperateService;
import lombok.extern.slf4j.Slf4j;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;
import static org.junit.Assert.assertEquals;

@RunWith(SpringRunner.class)
@SpringBootTest
@Slf4j
public class LowLeverOperateServiceImplTest {

    @Autowired
    @Qualifier("oneConsumer")
    LowLevelOperateService oneConsumer;

    private static final int EVENT_COUNT = 100;

    private void testLowLevelOperateService(LowLevelOperateService service, int eventCount, int expectEventCount) throws InterruptedException {
        for(int i=0;i<eventCount;i++) {
            log.info("publich {}", i);
            service.publish(String.valueOf(i));
        }

        // 异步消费，因此需要延时等待
        Thread.sleep(10000);

        // 消费的事件总数应该等于发布的事件数
        assertEquals(expectEventCount, service.eventCount());
    }

    @Test
    public void testOneConsumer() throws InterruptedException {
        log.info("start testOneConsumerService");
        testLowLevelOperateService(oneConsumer, EVENT_COUNT, EVENT_COUNT);
    }
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
注意，如果您是直接在IDEA上点击图标来执行单元测试，记得勾选下图红框中选项，否则可能出现编译失败：

执行上述单元测试类，结果如下图所示，消息的生产和消费都符合预期，并且消费逻辑是在独立线程中执行的：

继续挑战下一个场景；
100个事件，三个消费者，每个都独自消费这个100个事件
这个场景在kafka中也有，就是三个消费者的group不同，这样每一条消息，这两个消费者各自消费一次；
因此，100个事件，3个消费者每人都会独立消费这100个事件，一共消费300次；
代码如下，有几处要注意的地方稍后提到：
package com.bolingcavalry.service.impl;

import com.bolingcavalry.service.*;
import com.lmax.disruptor.BatchEventProcessor;
import com.lmax.disruptor.RingBuffer;
import com.lmax.disruptor.SequenceBarrier;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import javax.annotation.PostConstruct;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Consumer;

@Service("multiConsumer")
@Slf4j
public class MultiConsumerServiceImpl implements LowLevelOperateService {

    private RingBuffer<StringEvent> ringBuffer;

    private StringEventProducer producer;

    /**
     * 统计消息总数
     */
    private final AtomicLong eventCount = new AtomicLong();

    /**
     * 生产一个BatchEventProcessor实例，并且启动独立线程开始获取和消费消息
     * @param executorService
     */
    private void addProcessor(ExecutorService executorService) {
        // 准备一个匿名类，传给disruptor的事件处理类，
        // 这样每次处理事件时，都会将已经处理事件的总数打印出来
        Consumer<?> eventCountPrinter = new Consumer<Object>() {
            @Override
            public void accept(Object o) {
                long count = eventCount.incrementAndGet();
                log.info("receive [{}] event", count);
            }
        };

        BatchEventProcessor<StringEvent> batchEventProcessor = new BatchEventProcessor<>(
                ringBuffer,
                ringBuffer.newBarrier(),
                new StringEventHandler(eventCountPrinter));

        // 将当前消费者的sequence实例传给ringBuffer
        ringBuffer.addGatingSequences(batchEventProcessor.getSequence());

        // 启动独立线程获取和消费事件
        executorService.submit(batchEventProcessor);
    }

    @PostConstruct
    private void init() {
        ringBuffer = RingBuffer.createSingleProducer(new StringEventFactory(), BUFFER_SIZE);

        ExecutorService executorService = Executors.newFixedThreadPool(CONSUMER_NUM);

        // 创建多个消费者，并在独立线程中获取和消费事件
        for (int i=0;i<CONSUMER_NUM;i++) {
            addProcessor(executorService);
        }

        // 生产者
        producer = new StringEventProducer(ringBuffer);
    }

    @Override
    public void publish(String value) {
        producer.onData(value);
    }

    @Override
    public long eventCount() {
        return eventCount.get();
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
上述代码和前面的OneConsumerServiceImpl相比差别不大，主要是创建了多个BatchEventProcessor实例，然后分别在线程池中提交；
验证方法依旧是单元测试，在刚才的LowLeverOperateServiceImplTest.java中增加代码即可，注意testLowLevelOperateService的第三个参数是EVENT_COUNT * LowLevelOperateService.CONSUMER_NUM，表示预期的被消费消息数为300：
 	@Autowired
    @Qualifier("multiConsumer")
    LowLevelOperateService multiConsumer;

    @Test
    public void testMultiConsumer() throws InterruptedException {
        log.info("start testMultiConsumer");
        testLowLevelOperateService(multiConsumer, EVENT_COUNT, EVENT_COUNT * LowLevelOperateService.CONSUMER_NUM);
    }
1
2
3
4
5
6
7
8
9
执行单元测试，如下图所示，一共消费了300个事件，并且三个消费者在不动线程：

100个事件，三个消费者共同消费这个100个事件
本篇的最后一个实战是发布100个事件，然后让三个消费者共同消费100个（例如A消费33个，B消费33个，C消费34个）；
前面用到的BatchEventProcessor是用来独立消费的，不适合多个消费者共同消费，这种多个消费共同消费的场景需要借助WorkerPool来完成，这个名字还是很形象的：一个池子里面有很多个工作者，把任务放入这个池子，工作者们每人处理一部分，大家合力将任务完成；
传入WorkerPool的消费者需要实现WorkHandler接口，于是新增一个实现类：
package com.bolingcavalry.service;

import com.lmax.disruptor.WorkHandler;
import lombok.extern.slf4j.Slf4j;
import java.util.function.Consumer;

@Slf4j
public class StringWorkHandler implements WorkHandler<StringEvent> {

    public StringWorkHandler(Consumer<?> consumer) {
        this.consumer = consumer;
    }

    // 外部可以传入Consumer实现类，每处理一条消息的时候，consumer的accept方法就会被执行一次
    private Consumer<?> consumer;

    @Override
    public void onEvent(StringEvent event) throws Exception {
        log.info("work handler event : {}", event);

        // 这里延时100ms，模拟消费事件的逻辑的耗时
        Thread.sleep(100);

        // 如果外部传入了consumer，就要执行一次accept方法
        if (null!=consumer) {
            consumer.accept(null);
        }
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
新增服务类，实现共同消费的逻辑，有几处要注意的地方稍后会提到：
package com.bolingcavalry.service.impl;

import com.bolingcavalry.service.*;
import com.lmax.disruptor.*;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import javax.annotation.PostConstruct;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicLong;
import java.util.function.Consumer;

@Service("workerPoolConsumer")
@Slf4j
public class WorkerPoolConsumerServiceImpl implements LowLevelOperateService {

    private RingBuffer<StringEvent> ringBuffer;

    private StringEventProducer producer;

    /**
     * 统计消息总数
     */
    private final AtomicLong eventCount = new AtomicLong();

    @PostConstruct
    private void init() {
        ringBuffer = RingBuffer.createSingleProducer(new StringEventFactory(), BUFFER_SIZE);

        ExecutorService executorService = Executors.newFixedThreadPool(CONSUMER_NUM);

        StringWorkHandler[] handlers = new StringWorkHandler[CONSUMER_NUM];

        // 创建多个StringWorkHandler实例，放入一个数组中
        for (int i=0;i < CONSUMER_NUM;i++) {
            handlers[i] = new StringWorkHandler(o -> {
                long count = eventCount.incrementAndGet();
                log.info("receive [{}] event", count);
            });
        }

        // 创建WorkerPool实例，将StringWorkHandler实例的数组传进去，代表共同消费者的数量
        WorkerPool<StringEvent> workerPool = new WorkerPool<>(ringBuffer, ringBuffer.newBarrier(), new IgnoreExceptionHandler(), handlers);

        // 这一句很重要，去掉就会出现重复消费同一个事件的问题
        ringBuffer.addGatingSequences(workerPool.getWorkerSequences());

        workerPool.start(executorService);

        // 生产者
        producer = new StringEventProducer(ringBuffer);
    }

    @Override
    public void publish(String value) {
        producer.onData(value);
    }

    @Override
    public long eventCount() {
        return eventCount.get();
    }
}
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
上述代码中，要注意的有以下两处：
StringWorkHandler数组传入给WorkerPool后，每个StringWorkHandler实例都放入一个新的WorkProcessor实例，WorkProcessor实现了Runnable接口，在执行workerPool.start时，会将WorkProcessor提交到线程池中；
和前面的独立消费相比，共同消费最大的特点在于只调用了一次ringBuffer.addGatingSequences方法，也就是说三个消费者共用一个sequence实例；
验证方法依旧是单元测试，在刚才的LowLeverOperateServiceImplTest.java中增加代码即可，注意testWorkerPoolConsumer的第三个参数是EVENT_COUNT，表示预期的被消费消息数为100：
 	@Autowired
    @Qualifier("workerPoolConsumer")
    LowLevelOperateService workerPoolConsumer;
    
    @Test
    public void testWorkerPoolConsumer() throws InterruptedException {
        log.info("start testWorkerPoolConsumer");
        testLowLevelOperateService(workerPoolConsumer, EVENT_COUNT, EVENT_COUNT);
    }
1
2
3
4
5
6
7
8
9
执行单元测试如下图所示，三个消费者一共消费100个事件，且三个消费者在不同线程：

至此，咱们在不用Disruptor类的前提下完成了三种常见场景的消息生产消费，相信您对Disruptor的底层实现也有了深刻认识，今后不论是使用还是优化Disruptor，一定可以更加得心应手；
你不孤单，欣宸原创一路相伴
Java系列
Spring系列
Docker系列
kubernetes系列
数据库+中间件系列
DevOps系列
文章知识点与官方知识档案匹配，可进一步学习相关知识
Java技能树深入研究容器队列57995 人正在系统学习中

程序员欣宸
已关注

2


1


9

专栏目录
无锁环形队列框架Disruptor不同策略说明
Brucelwl的博客
 1460
* &lt;pre&gt; * BlockingWaitStrategy: 这是默认的策略,使用BlockingWaitStrategy和使用BlockingQueue是非常类似的, * 他们都使用锁和条件Condition进行数据的监控和线程的唤醒,因为涉及到线程的切换,BlockingWaitStrategy策略 * 是最节省cpu,但是高并发情况下性能表现最差的等待策略. * Sle...
disruptor高性能环形队列
choulu6980的博客
 666
简介 说到Disruptor，首先需要谈谈LMAX。它是欧洲第一家也是唯一一家采用多边交易设施Multilateral Trading Facility（MTF）拥有交易所牌照和经纪商牌照的欧洲顶级金融公司。它们所构建的金融交易平台，建立在JVM平台上, 能够以很低的延迟(latency)...
评论9条写评论
Leon纳豆
热评
学到啦
高性能队列——Disruptor_唐伯虎点蚊香dw的博客
6-14
Disruptor是英国外汇交易公司LMAX开发的一个高性能队列,研发的初衷是解决内存队列的延迟问题(在性能测试中发现竟然与I/O操作处于同样的数量级)。基于Disruptor开发的系统单线程能支撑每秒600万订单,2010年在QCon演讲后,获得了业界关注。2011...
高性能并发队列Disruptor使用详解,详细解析Disruptor框...
5-26
Disruptor是一个高性能的异步处理框架,是一个轻量的Java消息服务JMS,能够在无锁的情况下实现队列的并发操作 Disruptor使用环形数组实现了类似队列的功能,并且是一个有界队列.通常应用于生产者-消费者的场景 ...
C语言环形队列线程池,【AQS】队列和【Disruptor】环形队列
weixin_29923451的博客
 144
1：使用场景我们在编码的过程中，经常会碰到这样一种场景：需要使用多线程的任务这个任务需要同步，不能并发我们想要这些线程一个个乖乖的排队去执行，别串来串去贼烦这个时候，你可以使用synchronized关键字加锁，当然我们也可以使用jdk1.5之后的juc的各种工具，当然这些juc的工具其实都是基于我们的aqs队列。2：aqs队列很多好用的juc的工具，我们这里就不写了，我们这里就来分析aqs队列我...
编程语言disruptor笔记之三：环形队列的基础操作(不用Disruptor类)
 51
编程语言disruptor笔记之三：环形队列的基础操作(不用Disruptor类) 欢迎访问我的GitHub https://github.com/zq2599/blog_demos 内容：所有原创文章分类汇总及配套源码，涉及Java、Docker、Kubernetes、DevOPS等； 《disruptor笔记》系列链接 快速入门 Disruptor类分析 环形队列的基础操作(不用Disruptor类) 事件消费知识点小结 事件消费实战 常见场景 等待策略 知识点补充(
disruptor笔记之一:快速入门_程序员欣宸的博客
8-3
在disruptor-tutorials下面新建名为basic-event的module,这是个springboot应用,作用是使用disruptor的基本功能:一个线程发布事件,另一个线程消费事件,也就是对环形队列最基本的操作,如下图: 用disruptor实现消息的发布和消费的套路 ...
Disruptor(一)简介_kingspider-sh的博客_disruptor
7-29
图1 Disruptor基于环形队列的处理机制 核心概念 Ring Buffer 负责存储和更新在Disruptor中移动通过的数据(Events)。 Sequence Disruptor使用Sequence作为一种标识手段,表示一个特定的组件到达了,每个消费者(EventProcessor)和Disruptor自己一样,...
构建高性能服务（三）Java高性能缓冲设计 vs Disruptor(无锁环形队列） vs LinkedBlockingQueue
 312
构建高性能服务（三）Java高性能缓冲设计 vs Disruptor vs LinkedBlockingQueue 博客分类： 技术 架构 一个仅仅部署在4台服务器上的服务，每秒向Database写入数据超过100万行数据，每分钟产生超过1G的数据。而每台服务器（8核12G）上CPU占用不到100%，load不超过5。这是怎么做到呢？下面将给你描述这个架构，它的核心是一个
高性能队列disruptor为什么这么快？
weixin_30726161的博客
 78
背景 Disruptor是LMAX开发的一个高性能队列，研发的初衷是解决内存队列的延迟问题（在性能测试中发现竟然与I/O操作处于同样的数量级）。基于Disruptor开发的系统单线程能支撑每秒600万订单，2010年在QCon演讲后，获得了业界关注。2011年，企业应用软件专家Martin Fowler专门撰写长文介绍。同年它还获得了Oracle官方的Duke大奖。 目前，包括Apache S...
java队列处理高并发_处理高并发高性能队列-Disruptor详...
8-8
Disruptor是LMAX开发的一个高性能队列,研发的初衷是解决内存队列的延迟问题(在性能测试中发现竟然与I/O操作处于同样的数量级)。基于Disruptor开发的系统单线程能支撑每秒600万订单,2010年在QCon演讲后,获得了业界关注。2011年,企业应用软件...
高性能队列--Disruptor
weixin_46549536的博客
 201
背景 Disruptor是英国外汇交易公司LMAX开发的一个高性能队列。基于Disruptor开发的系统单线程可以支撑每秒600万的订单。 那么，这种高性能的内存队列是如何实现的呢？ JAVA内置的队列 下面是CPU与缓存的示意图，查询效率是L1>L2>L3>主存 下面是CPU访问不通层级缓存数据的时间概念 缓存行概念 cache是由多个cache line组成的，每个cache line 通常是64个字节，并且它有效地引用内存中的一块地址。cpu每次从主存中拉取数据时，都会将相邻的
Disruptor原理浅析
pentiumchen的专栏
 2393
Disruptor是一个高吞吐量的异步处理框架，LMAX号称用它可以1秒钟处理600万订单，从一个简单的例子来分析Disruptor，下面的代码是基于2.10.4版本，不同的版本API有些变化，代码仅供参考。private static void testDisruptor() { RingBuffer ringBuffer = new RingBuffer( new EventFacto
Java环形队列
小风架构师博客
 105
package com.design.java; import java.util.Arrays; /** * @author Lxz * @Data 2019/1/29 * @description CicularQueue Easy Implementation */ public class MyCircularQueue { private int head; ...
一种高效无锁内存队列的实现
foxox
 546
Disruptor是LMAX公司开源的一个高效的内存无锁队列。这两天看了一下相关的设计文档和博客，下面尝试进行一下总结。 第一部分。引子 谈到并发程序设计，有几个概念是避免不了的。 1.锁：锁是用来做并发最简单的方式，当然其代价也是最高的。内核态的锁的时候需要操作系统进行一次上下文切换，等待锁的线程会被挂起直至锁释放。在上下文切换的时候，cpu之前缓存的指令和数据都将失效，对...
Disruptor 一种高效、无锁的队列
championzgj的博客
 74
http://ifeve.com/disruptor/
提升--20---Disruptor-----号称最快的消息队列
最新发布
高高的博客
 389
文章目录Disruptor Disruptor
Disruptor入门实践
WANGANG
 621
经大佬提醒发现的一个无锁环形队列的处理高并发的一个框架Disruptor,据不完整统计 单线程一秒可以有六百万的吞吐量,都得益于RungBuffer,打破了jvm的 内存屏障 调用cpu来执行的， 这里贴上参考网站：[并发网站](http://ifeve.com/disruptor/) [github官网](http://lmax-exchange.github.io/disruptor/
Disruptor原理剖析
varyall的专栏
 994
Disruptor是LMAX公司开源的一个高效的内存无锁队列。这两天看了一下相关的设计文档和博客，下面尝试进行一下总结。 第一部分。引子 谈到并发程序设计，有几个概念是避免不了的。 1.锁：锁是用来做并发最简单的方式，当然其代价也是最高的。内核态的锁的时候需要操作系统进行一次上下文切换，等待锁的线程会被挂起直至锁释放。在上下文切换的时候，cpu之前缓存的指令和数据都将失效，对
在美团呆了7年的架构师带你解读Disruptor系列并发框架
QLCZ0809的博客
 1379
前言 理解Disruptor的最佳方式是，将其与一些容易理解和目的相似的东西比较。这里的参照物就是java里的阻塞队列（BlockingQueue）。 与BlockingQueue的异同： 同：目的相同，都是为了在同一进程的线程间传输数据。 异：对消费者多播事件；预分配事件内存；可选无锁。 核心概念 Ring Buffer : 曾经的核心。自从3.0以上，环形缓冲器只作为Disruptor存储和更新数据（事件）的容器。对于一些高级用法，可以完全替换为用户提供的容器。 Sequence：Dis
Storm、Log4j2高性能之—Disruptor队列
AIzone的博客
 863
Storm、Log4j2高性能之—Disruptor队列 1. Disruptor简介 Disruptor(https://github.com/LMAX-Exchange/disruptor)是英国外汇交易公司LMAX开发的一个高性能队列，研发的初衷是解决内存队列的延迟问题（在性能测试中发现竟然与I/O操作处于同样的数量级）。基于Disruptor开发的系统单线程能支撑每秒600万订单，20...
Disruptor
u013806787的专栏
 72
高性能内存队列-Disruptor Disruptor是基于环形数组的内存消息队列，相比JDK提供的阻塞队列 效率更高 应用场景更多，除基本的发布订阅/点对点模式外，还可实现消费者间依赖，实现更复杂业务 一、为什么高效 无锁化，普通阻塞队列ArrayBlockingQueue（为了防止生产者速度过快导致内存溢出，只能选择有界队列，同时为提高读取效率，JDK内只有它适合做队列），使用的是重量级锁Lock，生产者消费者put/take间是互斥关系，头尾指针竞争激烈，竞争将导致线程经常挂起，效率很低。D
强如 Disruptor 也发生内存溢出？
weixin_30307267的博客
 98
前言 OutOfMemoryError 问题相信很多朋友都遇到过，相对于常见的业务异常（数组越界、空指针等）来说这类问题是很难定位和解决的。 本文以最近碰到的一次线上内存溢出的定位、解决问题的方式展开；希望能对碰到类似问题的同学带来思路和帮助。 主要从表现-->排查-->定位-->解决 四个步骤来分析和解决问题。 表象 最近我们生产上的一个应用不断的爆出内存溢出，并且...
高性能无锁环形队列 Disruptor
fengzhaoyang的专栏
 1979
https://juejin.im/post/5b744557518825612a228111
disruptor_环形缓冲区– Disruptor背后的数据结构
danpu0978的博客
 282
disruptor 环形缓冲区– Disruptor背后的数据结构 Disruptor是一个高性能的库，用于在线程之间传递消息，该库由LMAX Exchange公司于几年前开发和开源。 他们创建了此软件来处理其零售金融交易平台中的巨大流量（超过600万TPS）。 在2010年，他们惊讶于每个人通过在单个线程上执行所有业务逻辑，他们的系统能达到多快的速度。 尽管在解决方案中一个线程是一个重要概念...
关于我们
招贤纳士
商务合作
寻求报道

400-660-0108

kefu@csdn.net

在线客服
工作时间 8:30-22:00
公安备案号11010502030143
京ICP备19004658号
京网文〔2020〕1039-165号
经营性网站备案信息
北京互联网违法和不良信息举报中心
家长监护
网络110报警服务
中国互联网举报中心
Chrome商店下载
账号管理规范
版权与免责声明
版权申诉
出版物许可证
营业执照
©1999-2022北京创新乐知网络技术有限公司

脚本设置

当前背景图:
rgb(255, 255, 255)
刷新背景图片
背景图片类目范围(点选):
热门
冒险岛2
守望先锋
魔兽世界
炉石传说
风暴英雄
暗黑破坏神Ⅲ
星际争霸II
冷兔
阿狸
炮炮兵
林心如
郑爽
戚薇
佟丽娅
Angelababy
唐嫣
李冰冰
高圆圆
孙俪
姚晨
杨幂
刘诗诗
胡歌
邓紫棋
赵丽颖
马天宇
陈晓
陈伟霆
柳岩
吴奇隆
风景
简约
小清新
自定义背景图片链接(固定使用此链接):
您可以选择上传百度首页自定义背景图片, 然后将链接填入
清除
保存
使用当前图片
文章宽度:
宽度基于源码中的 .container 的宽度, 详见 #4
100%
Very Speed
纯色背景(优先使用):
优先级高于自定义图片, 选择纯色背景将覆盖已添加的背景图片链接 清除

H

S

L

R

G

B

HEX

+
是否显示 原文链接:
原文链接从顶部文章信息或原文中提取, 若作者直接文中写入原文链接(未在文章信息中标注), 有可能会匹配错误
 隐藏
 显示
是否隐藏 设置(小齿轮)按钮:
隐藏之后设置(小齿轮)按钮会与回到顶部按钮同步显示和隐藏
 隐藏
 显示
是否隐藏所有 推荐文章:
隐藏之后将不会显示底部的推荐文章列表
 隐藏
 显示
是否隐藏最底部 csdn版权信息:
隐藏之后将不会显示页面最底部的 footer
 隐藏
 显示
是否显示目录栏:
开启之后会显示文章目录(若存在)
 隐藏
 显示
联系作者:
源码:
Github
反馈:
greasyfork page', 106);
INSERT INTO public.article_content VALUES (1598256303719841792, '2022-12-01 18:02:51.632', false, '2022-12-01 18:02:51.632', '<p>123</p>
', '123', '123
', 1598256303619178496);
INSERT INTO public.article_content VALUES (1598952212040515585, '2022-12-03 16:08:09.103', false, '2022-12-04 23:39:09.966', '<p>分享阿里大淘宝技术工程师的数据库存储思考。 工作中总是遇到数据存储相关的Bug工单，新需求开发设计中也多多少少会有数据模型设计和存储相关的问题。经过几次存储方案设计选型和讨论后发现需要有更全面的思考框架。 日常开发中常用的存储方案选型很多都是“拿来主义”的，凭借着经验、习惯选用，但对它们的细节特性或约束少有研究。 除了手边会用的存储方案，也应该关注市面上更合适的存储方案。 一定的技术预研和储备能够帮助未来更好的技术方案设计。 故写了这篇文章，抛出我的总结和思考，希望日后可以将一些更先进 (合适) 的技术引入业务开发中，助力业务发展。</p>
', '分享阿里大淘宝技术工程师的数据库存储思考。 工作中总是遇到数据存储相关的Bug工单，新需求开发设计中也多多少少会有数据模型设计和存储相关的问题。经过几次存储方案设计选型和讨论后发现需要有更全面的思考框架。 日常开发中常用的存储方案选型很多都是“拿来主义”的，凭借着经验、习惯选用，但对它们的细节特性或约束少有研究。 除了手边会用的存储方案，也应该关注市面上更合适的存储方案。 一定的技术预研和储备能够帮助未来更好的技术方案设计。 故写了这篇文章，抛出我的总结和思考，希望日后可以将一些更先进 (合适) 的技术引入业务开发中，助力业务发展。', '分享阿里大淘宝技术工程师的数据库存储思考。 工作中总是遇到数据存储相关的Bug工单，新需求开发设计中也多多少少会有数据模型设计和存储相关的问题。经过几次存储方案设计选型和讨论后发现需要有更全面的思考框架。 日常开发中常用的存储方案选型很多都是“拿来主义”的，凭借着经验、习惯选用，但对它们的细节特性或约束少有研究。 除了手边会用的存储方案，也应该关注市面上更合适的存储方案。 一定的技术预研和储备能够帮助未来更好的技术方案设计。 故写了这篇文章，抛出我的总结和思考，希望日后可以将一些更先进 (合适) 的技术引入业务开发中，助力业务发展。
', 1598952212040515584);
INSERT INTO public.article_content VALUES (9, '2022-08-27 05:44:24.928', true, '2022-11-14 23:04:34.872', '<h1 id="历史版本测试1。"><a href="#历史版本测试1" id="历史版本测试1">历史版本测试1。</a></h1>
<h2 id="不同颜色BlockTipQuote测试"><a href="#不同颜色blocktipquote测试" id="不同颜色blocktipquote测试">不同颜色BlockTipQuote测试</a></h2>
<p><code>Form Handsome</code></p>
<p><em>Markdown语法前缀</em></p>
<pre><code class="language-java">String[] badPrefix = {&quot;> x&quot;, &quot;> X&quot;, &quot;> x:&quot;, &quot;> X:&quot;, &quot;> bad:&quot;, &quot;> no:&quot;, &quot;> error:&quot;};

String[] goodPrefix = {&quot;> √&quot;, &quot;> good:&quot;, &quot;> ok:&quot;, &quot;> yes:&quot;, &quot;> right:&quot;};

String[] infoPrefix = {&quot;> i&quot;, &quot;> I&quot;, &quot;> i:&quot;, &quot;> I:&quot;, &quot;> tip:&quot;};

String[] warnPrefix = {&quot;> !&quot;, &quot;> ！&quot;, &quot;> !:&quot;, &quot;> ！:&quot;, &quot;> warn:&quot;, &quot;> warning:&quot;};

String[] sharePrefix = {&quot;> @&quot;, &quot;> @:&quot;, &quot;> at:&quot;};;
</code></pre>
<p><code>Test</code></p>
<h3 id="单行测试"><a href="#单行测试" id="单行测试">单行测试</a></h3>
<blockquote>
<p>0正常的 正常的 正常的 正常的 正常的 <code>test</code></p>
</blockquote>
<p><blockquote class="d-tip d-tip-share"><p class="mdi mdi-at">1这是灰色的短代码框，常用来引用资料什么的 <a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a><br />
</p></blockquote></p>
<p><blockquote class="d-tip d-tip-warning"><p class="mdi mdi-exclamation-thick">2这是黄色的短代码框，常用来做提示，引起读者注意。 <code>test</code><br />
</p></blockquote></p>
<p><blockquote class="d-tip d-tip-error"><p class="mdi mdi-close">3这是红色的短代码框，用于严重警告什么的。 <code>test</code><br />
</p></blockquote></p>
<p><blockquote class="d-tip d-tip-info"><p class="mdi mdi-information-variant">4这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code><br />
</p></blockquote></p>
<p><blockquote class="d-tip d-tip-success"><p class="mdi mdi-check">5这是绿色的短代码框，显示一些推荐信息。 <code>test</code><br />
</p></blockquote></p>
<h3 id="多行测试"><a href="#多行测试" id="多行测试">多行测试</a></h3>
<p><blockquote class="d-tip d-tip-share"><p class="mdi mdi-at">1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a></p>
<p>1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a></p>
<p>1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a></p>
<p>1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a></p>
<p>1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a><br />
</p></blockquote></p>
<hr />
<p><blockquote class="d-tip d-tip-warning"><p class="mdi mdi-exclamation-thick">2这是黄色的短代码框，常用来做提示，引起读者注意。 <code>test</code></p>
<p>2这是黄色的短代码框，常用来做提示，引起读者注意。 <code>test</code></p>
<p>2这是黄色的短代码框，常用来做提示，引起读者注意。 <code>test</code><br />
</p></blockquote></p>
<hr />
<p><blockquote class="d-tip d-tip-error"><p class="mdi mdi-close">这是红色的短代码框，用于严重警告什么的。 <code>test</code></p>
<p>x3这是红色的短代码框，用于严重警告什么的。 <code>test</code></p>
<p>这是红色的短代码框，用于严重警告什么的。 <code>test</code></p>
<p>3这是红色的短代码框，用于严重警告什么的。 <code>test</code><br />
</p></blockquote></p>
<hr />
<p><blockquote class="d-tip d-tip-info"><p class="mdi mdi-information-variant">这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code></p>
<p>这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code></p>
<p>这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code></p>
<p>这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code><br />
</p></blockquote></p>
<hr />
<p><blockquote class="d-tip d-tip-success"><p class="mdi mdi-check">5这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p>
<p>这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p>
<p>这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p>
<p>5这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p></blockquote></p>
', '# 历史版本测试1。
## 不同颜色BlockTipQuote测试

`Form Handsome`

*Markdown语法前缀*
```java
String[] badPrefix = {"> x", "> X", "> x:", "> X:", "> bad:", "> no:", "> error:"};

String[] goodPrefix = {"> √", "> good:", "> ok:", "> yes:", "> right:"};

String[] infoPrefix = {"> i", "> I", "> i:", "> I:", "> tip:"};

String[] warnPrefix = {"> !", "> ！", "> !:", "> ！:", "> warn:", "> warning:"};

String[] sharePrefix = {"> @", "> @:", "> at:"};;
```

`Test`


### 单行测试

> 0正常的 正常的 正常的 正常的 正常的 `test`

> @1这是灰色的短代码框，常用来引用资料什么的 http://nuxt.localhost/article/editor/draft?id=16

> !2这是黄色的短代码框，常用来做提示，引起读者注意。 `test`

> x3这是红色的短代码框，用于严重警告什么的。 `test`

> i4这是浅蓝色的短代码框，用于显示一些信息。 `test`

> √5这是绿色的短代码框，显示一些推荐信息。 `test`



### 多行测试




> @1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
> at:1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
> @1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
> at:1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
> @1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16

---
> !2这是黄色的短代码框，常用来做提示，引起读者注意。 `test`
> warn:2这是黄色的短代码框，常用来做提示，引起读者注意。 `test`
> warning:2这是黄色的短代码框，常用来做提示，引起读者注意。 `test`

---

> no:这是红色的短代码框，用于严重警告什么的。 `test`
> no:x3这是红色的短代码框，用于严重警告什么的。 `test`
> bad:这是红色的短代码框，用于严重警告什么的。 `test`
> x3这是红色的短代码框，用于严重警告什么的。 `test`

----

> i:这是浅蓝色的短代码框，用于显示一些信息。 `test`
> i这是浅蓝色的短代码框，用于显示一些信息。 `test`
> i:这是浅蓝色的短代码框，用于显示一些信息。 `test`
> i:这是浅蓝色的短代码框，用于显示一些信息。 `test`

-----

> √5这是绿色的短代码框，显示一些推荐信息。 `test`
> good:这是绿色的短代码框，显示一些推荐信息。 `test`
> yes:这是绿色的短代码框，显示一些推荐信息。 `test`
> right:5这是绿色的短代码框，显示一些推荐信息。 `test`





', '历史版本测试1。
不同颜色BlockTipQuote测试
Form Handsome
Markdown语法前缀
String[] badPrefix = {"> x", "> X", "> x:", "> X:", "> bad:", "> no:", "> error:"};

String[] goodPrefix = {"> √", "> good:", "> ok:", "> yes:", "> right:"};

String[] infoPrefix = {"> i", "> I", "> i:", "> I:", "> tip:"};

String[] warnPrefix = {"> !", "> ！", "> !:", "> ！:", "> warn:", "> warning:"};

String[] sharePrefix = {"> @", "> @:", "> at:"};;

Test
单行测试

0正常的 正常的 正常的 正常的 正常的 test

1这是灰色的短代码框，常用来引用资料什么的 http://nuxt.localhost/article/editor/draft?id=16

2这是黄色的短代码框，常用来做提示，引起读者注意。 test

3这是红色的短代码框，用于严重警告什么的。 test

4这是浅蓝色的短代码框，用于显示一些信息。 test

5这是绿色的短代码框，显示一些推荐信息。 test

多行测试
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16


2这是黄色的短代码框，常用来做提示，引起读者注意。 test
2这是黄色的短代码框，常用来做提示，引起读者注意。 test
2这是黄色的短代码框，常用来做提示，引起读者注意。 test


这是红色的短代码框，用于严重警告什么的。 test
x3这是红色的短代码框，用于严重警告什么的。 test
这是红色的短代码框，用于严重警告什么的。 test
3这是红色的短代码框，用于严重警告什么的。 test


这是浅蓝色的短代码框，用于显示一些信息。 test
这是浅蓝色的短代码框，用于显示一些信息。 test
这是浅蓝色的短代码框，用于显示一些信息。 test
这是浅蓝色的短代码框，用于显示一些信息。 test


5这是绿色的短代码框，显示一些推荐信息。 test
这是绿色的短代码框，显示一些推荐信息。 test
这是绿色的短代码框，显示一些推荐信息。 test
5这是绿色的短代码框，显示一些推荐信息。 test
', 16);


--
-- Data for Name: article_daily_data; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.article_daily_data VALUES (15, 13, 0, 2, '2022-12-09', 2, 333, '[4, 1580212312441094145]', 0, 22, 3, 2);
INSERT INTO public.article_daily_data VALUES (9, 13, 0, 2, '2022-12-03', 0, 2, '[4, 1580212312441094145]', 5, 22, 3, 2);
INSERT INTO public.article_daily_data VALUES (13, 13, 2, 2, '2022-12-07', 7, 23, '[4, 1580212312441094145]', 0, 33, 3, 2);
INSERT INTO public.article_daily_data VALUES (4, 9, 2, 2, '2022-12-06', 1, 2, '[4, 1580212312441094145]', 3, 10, 3, 1);
INSERT INTO public.article_daily_data VALUES (2, 9, 2, 0, '2022-12-04', 1, 2, '[4, 1580212312441094145]', 3, 2, 3, 1);
INSERT INTO public.article_daily_data VALUES (16, 1599743283574079488, 0, 2, '2022-12-10', 0, 123, '[4, 1580212312441094145]', 2, 2, 3, 2);
INSERT INTO public.article_daily_data VALUES (3, 9, 0, 2, '2022-12-05', 1, 11, '[4, 1580212312441094145]', 0, 10, 3, 1);
INSERT INTO public.article_daily_data VALUES (12, 13, 2, 2, '2022-12-06', 1, 2, '[4, 1580212312441094145]', 5, 2, 3, 2);
INSERT INTO public.article_daily_data VALUES (7, 9, 0, 0, '2022-12-09', 5, 999, '[4, 1580212312441094145]', 23, 10, 3, 1);
INSERT INTO public.article_daily_data VALUES (14, 13, 2, 2, '2022-12-08', 1, 2, '[4, 1580212312441094145]', 5, 22, 3, 2);
INSERT INTO public.article_daily_data VALUES (6, 9, 3, 4, '2022-12-08', 0, 111, '[4, 1580212312441094145]', 3, 2, 3, 1);
INSERT INTO public.article_daily_data VALUES (17, 15, 0, 2, '2022-12-10', 2, 100, '[4, 1580212312441094145]', 2, 22, 3, 2);
INSERT INTO public.article_daily_data VALUES (11, 13, 22, 2, '2022-12-05', 0, 23, '[4, 1580212312441094145]', 5, 22, 3, 2);
INSERT INTO public.article_daily_data VALUES (10, 13, 2, 2, '2022-12-04', 1, 2, '[4, 1580212312441094145]', 0, 2, 3, 2);
INSERT INTO public.article_daily_data VALUES (5, 9, 3, 4, '2022-12-07', 0, 4, '[4, 1580212312441094145]', 0, 1, 3, 1);
INSERT INTO public.article_daily_data VALUES (1601539248811409408, 16, 0, 0, '2022-12-10', 2, 231, '[4, 1580212312441094145]', 0, 2, 3, 2);
INSERT INTO public.article_daily_data VALUES (1, 9, 2, 0, '2022-12-03', 0, 222, '[4, 1580212312441094145]', 2, 11, 3, 1);
INSERT INTO public.article_daily_data VALUES (1603636810724933632, 1599743283574079488, 0, 0, '2022-12-16', 0, 4, '[1580212312109744128]', 0, 4, 3, 2);
INSERT INTO public.article_daily_data VALUES (1603636810989174784, 1599428443726938112, 0, 0, '2022-12-16', 0, 2, '[5]', 0, 2, 3, 2);
INSERT INTO public.article_daily_data VALUES (1603636810993369088, 1599374122381475840, 0, 0, '2022-12-16', 0, 2, '[1580212312046829570, 1580212312042635265]', 0, 2, 3, 2);
INSERT INTO public.article_daily_data VALUES (1603636810997563392, 1598952212040515584, 0, 0, '2022-12-16', 0, 1, '[2]', 0, 1, 3, 2);
INSERT INTO public.article_daily_data VALUES (1604869414610534400, 1599743283574079488, 0, 0, '2022-12-20', 1, 79, '[1580212312109744128]', 1, 79, 3, 2);
INSERT INTO public.article_daily_data VALUES (1604869414736363520, 11, 0, 4, '2022-12-20', 0, 21, '[3, 2, 1]', 0, 1, 3, 2);
INSERT INTO public.article_daily_data VALUES (1604869414740557824, 9, 0, 0, '2022-12-20', 0, 4, '[4, 1580212312441094145]', 0, 4, 3, 1);
INSERT INTO public.article_daily_data VALUES (1604869414740557825, 1599428443726938112, 0, 0, '2022-12-20', 0, 3, '[5]', 0, 3, 3, 2);
INSERT INTO public.article_daily_data VALUES (1604869414740557826, 1599374122381475840, 0, 0, '2022-12-20', 0, 2, '[1580212312046829570, 1580212312042635265]', 0, 2, 3, 2);
INSERT INTO public.article_daily_data VALUES (1604869414740557827, 15, 0, 1, '2022-12-20', 3, 2, '[1, 2, 3]', -1, 5, 3, 1);
INSERT INTO public.article_daily_data VALUES (1604869414740557828, 95, 0, 0, '2022-12-20', 0, 1, '[3, 1, 2]', 0, 1, 3, 1);
INSERT INTO public.article_daily_data VALUES (1604869414744752128, 1598952212040515584, 0, 0, '2022-12-20', 0, 1, '[2]', 0, 1, 3, 2);
INSERT INTO public.article_daily_data VALUES (1604869414744752129, 1580605648092004352, 0, 0, '2022-12-20', 0, 1, '[4, 3, 2]', 0, 1, 20, 1);
INSERT INTO public.article_daily_data VALUES (1604869414744752130, 112, 0, 0, '2022-12-20', 0, 1, '[1, 2, 3]', 0, 1, 3, 1);
INSERT INTO public.article_daily_data VALUES (1604869414744752131, 110, 0, 0, '2022-12-20', 0, 1, '[2, 3, 1]', 0, 1, 3, 1);
INSERT INTO public.article_daily_data VALUES (1604869414744752132, 10, 0, 0, '2022-12-20', 0, 1, '[1, 3, 4]', 0, 1, 4, 2);


--
-- Data for Name: article_field; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.article_field VALUES (11, '2022-08-26 23:39:05.899', false, '2022-10-24 16:17:41.3', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go817vkbb4j30vl0jencd.jpg', 0, 'JUnit5学习之六：参数化测试(Parameterized Tests)基础
程序员欣宸
于 2020-10-08 10:03:29 发布
2175
收藏 5
分类专栏： java服务端 文章标签： java 单元测试 junit
版权
java服务端
专栏收录该内容
175 篇文章46 订阅
订', 'title', 58, 2, 3, 4, 0, 1, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 4, -1);
INSERT INTO public.article_field VALUES (1599374122381475840, '2022-12-04 20:04:40.367', false, '2023-04-09 09:14:02.042', true, 1, 'https://qiniu.dwsy.link/ddl/6d832beab71c4eabb58c3d63ea43dc6f.png?imageslim', 0, '背景
让网页变为黑白配色，是个常见的诉求。而且往往是突如其来的诉求，是无法预知的。当发生这样的需求时，我们需要迅速完成变更发布。
2022年12月1日，掘金首页已经变成了黑白配色。
我的小网站首页 game.hullqin.cn 也变成了黑白配色。
一行代码
这一行代码是个CSS代码：
filter: grayscale(1)
复制代码
为了使整个网页生效，你可以把它放在  标签的样式里。直接写到', '一行代码，让网页变为黑白配色', 26, 2, 3, 1599374122385670144, 0, 0, 1, 'https://juejin.cn/post/7172039729603412004', 'xcode', 'vGreen', 'xcode', 'geekBlackDark', 2, 0);
INSERT INTO public.article_field VALUES (12, '2022-08-26 23:39:05.915', false, '2022-10-23 16:00:30.309', true, 1, 'https://qiniu.dwsy.link/ddl/e486ed827a4c4fed92eaf449941af6f9.png?imageslim', 0, '缓冲区(Buffer):本质上是一个数组，用于临时保存、写入以及读取数据。在Java NIO中，该内存块包含在NIO Buffer对象当中，NIO Buffer对象还提供了一组接口来访问该内存块。  
根据数据类型的不同，Java为除了boolean类型之外的其余7种基本类型提', 'JavaNIO.Buffer', 51, 1, 3, 5, 1, 0, 0, NULL, 'nnfxLight', 'lark', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (1598951510023077888, '2022-12-03 16:05:21.742', false, '2022-12-03 16:05:21.742', true, 1, 'https://qiniu.dwsy.link/ddl/4d033750600f4986bd1601996aa7476e.png?imageslim', 0, '！！！
', '   sendInfinity: test', 1, 2, 3, 1598951510111158272, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'xcode', 'ayuMirage', 0, -1);
INSERT INTO public.article_field VALUES (91, '2022-08-27 06:02:47.451', false, '2022-10-20 00:23:11.158', true, 1, 'https://qiniu.dwsy.link/ddl/04c5192fdb664e73bf104f35ed6a13bb.png?imageslim', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 9, 1, 3, 92, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (1599743283574079488, '2022-12-05 20:31:35.27', false, '2023-03-05 12:10:37.848', true, 1, 'https://image.baidu.com/search/down?url=https://tva2.sinaimg.cn/large/005NWBIgly1h99me3drocj31sw0wgadq.jpg', 0, '"README
该文件用来测试和展示书写README的各种markdown语法。GitHub的markdown语法在标准的markdown语法基础上做了扩充，称之为GitHub Flavored Markdown。简称GFM，GFM在GitHub上有广泛应用，除了README文件外，issues和wiki均支持markdown语法。
横线
***、—、___可以显示横线效果
标题
一级标题
二级标', '"Markdown语法介绍"', 233, 2, 3, 1599743283666354176, 0, 3, 1, 'https://raw.githubusercontent.com/guodongxiaren/README/master/README.md', 'xcode', 'arknights', 'xcode', 'gotham', 10, 2);
INSERT INTO public.article_field VALUES (97, '2022-08-27 06:16:12.407', false, '2022-08-27 06:16:12.489', true, 0, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go817vkbb4j30vl0jencd.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 1, 1, 3, 98, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (1598253892754210816, '2022-12-01 17:53:16.814', false, '2022-12-01 17:53:42.526', true, 0, 'https://image.baidu.com/search/down?url=https://tva3.sinaimg.cn/large/005NWBIgly1gseoy4gzxqj31hc0u04qp.jpg', 0, '保存草稿测试', '保存草稿测试', 2, 2, 20, 1598253892775182336, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'xcode', 'ayuMirage', 0, 0);
INSERT INTO public.article_field VALUES (1599428443726938112, '2022-12-04 23:40:31.585', false, '2022-12-04 23:40:31.585', true, 1, 'https://qiniu.dwsy.link/ddl/6d832beab71c4eabb58c3d63ea43dc6f.png?imageslim', 1, '

Rem
誕生日	2月2日
年齢	17歳
身長	154cm
体重	53kg
名前の由来	Left
特技	料理・洗濯・掃除・裁縫
趣味	演劇鑑賞・詩文
CV	水瀬いのり
エミリアの暮らすロズワール邸でメイド頭を任される水色髪ショートが特徴の鬼族の少女。
一人称は「レム」。
姉のラムとは対照的に右目に前髪が掛かっている。
ラムと二人、広大な屋敷を維持する有能メイド。雑務全般を一手に担っており、屋敷の', 'Rem', 21, 2, 3, 1599428443735326720, 1, 0, 0, NULL, 'xcode', 'cyanosis', 'xcode', 'ayuMirage', 0, -1);
INSERT INTO public.article_field VALUES (18, '2022-08-27 12:19:11.707', false, '2023-03-31 17:22:02.026', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go8137lfsdj30rx0rw0up.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 0, 1, 3, 11, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (1598952212040515584, '2022-12-03 16:08:09.103', false, '2022-12-04 23:39:09.978', true, 1, 'https://image.baidu.com/search/down?url=https://tva3.sinaimg.cn/large/005NWBIgly1gseoy4gzxqj31hc0u04qp.jpg', 0, '企业里大数据都是用什么数据库存储？', '企业里大数据都是用什么数据库存储？', 16, 2, 3, 1598952212040515585, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'xcode', 'ayuMirage', 5, 0);
INSERT INTO public.article_field VALUES (15, '2022-08-27 05:34:16.183', false, '2022-10-20 01:01:02.183', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go8137lfsdj30rx0rw0up.jpg', 0, '<p>使用 <kbd>Ctrl</kbd>+<kbd>Alt</kbd>+<kbd>Del</kbd> 重启电脑</p>', 'title', 11, 1, 3, 8, 1, 0, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 1, -1);
INSERT INTO public.article_field VALUES (17, '2022-08-27 05:44:24.906', false, '2023-03-31 17:26:01.263', true, 1, 'https://qiniu.dwsy.link/ddl/7b726f1d1ea14e8ab14e3b0ff5cae24e.jpg?imageslim', 2, 'TestTestTest', 'TestTestTestTest', 3, 2, 20, 1580798166561718272, 0, 11, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (1598254332015280128, '2022-12-01 17:55:01.539', false, '2022-12-01 18:38:38.791', true, 0, 'https://image.baidu.com/search/down?url=https://tva3.sinaimg.cn/large/005NWBIgly1gseoy4gzxqj31hc0u04qp.jpg', 0, '123', '保存草稿测试 保存草稿测试 123', 1, 2, 20, 1598254332015280129, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'xcode', 'ayuMirage', 0, 1);
INSERT INTO public.article_field VALUES (22, '2022-09-10 12:44:15.36', false, '2022-09-10 12:44:15.36', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go8137lfsdj30rx0rw0up.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', '123321123312', 1, 1, 3, 15, 0, 1, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (21, '2022-09-08 21:25:10.793', false, '2022-09-08 21:25:10.793', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go8137mdujj30k70k70x2.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', '123321123312', 4, 1, 3, 14, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (112, '2022-08-27 12:12:46.282', false, '2022-08-27 12:12:46.282', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go8137lfsdj30rx0rw0up.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 5, 1, 3, 113, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (1598254235307212800, '2022-12-01 17:54:38.482', false, '2022-12-01 18:37:11.399', true, 0, 'https://image.baidu.com/search/down?url=https://tva3.sinaimg.cn/large/005NWBIgly1gseoy4gzxqj31hc0u04qp.jpg', 0, '123', '保存草稿测试 保存草稿测试 123', 2, 2, 20, 1598254235307212801, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'xcode', 'ayuMirage', 0, 1);
INSERT INTO public.article_field VALUES (16, '2022-08-27 05:44:24.906', false, '2022-10-21 16:02:40.153', true, 1, 'https://qiniu.dwsy.link/ddl/6d0442ed3e2041d49d3c2502f62c9968.png?imageslim', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', '不同颜色BlockTipQuote测试', 157, 1, 3, 9, 0, 1, 0, NULL, 'arduinoLight', 'channingCyan', 'monokai', 'dracula', 0, -1);
INSERT INTO public.article_field VALUES (1580788796385918976, '2022-10-14 13:13:13.367', false, '2022-12-01 16:55:30.173', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go8137lfsdj30rx0rw0up.jpg', 0, 'Test', '删除文章测试', 5, 2, 20, 1580788796473999360, 0, 1, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, 0);
INSERT INTO public.article_field VALUES (20, '2022-08-27 12:19:11.939', false, '2022-08-27 12:19:11.939', true, 0, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go8137lfsdj30rx0rw0up.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 0, 1, 3, 13, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (10, '2022-08-26 23:39:05.801', false, '2022-08-26 23:39:05.801', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go817vkbb4j30vl0jencd.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 93, 2, 4, 3, 0, 2, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 2, -1);
INSERT INTO public.article_field VALUES (110, '2022-08-27 12:06:32.492', false, '2022-08-27 12:06:32.492', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go8137joftj30pc0oe75u.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 3, 1, 3, 111, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (106, '2022-08-27 12:00:45.467', false, '2024-01-07 23:27:07.396', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go8137mdujj30k70k70x2.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 1, 1, 3, 107, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (19, '2022-08-27 12:19:11.915', false, '2022-08-27 12:19:11.915', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go8137lfsdj30rx0rw0up.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 7, 1, 3, 12, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (1580605959804289024, '2022-10-14 01:06:41.713', false, '2022-12-01 17:33:09.104', true, 0, 'https://qiniu.dwsy.link/ddl/6d832beab71c4eabb58c3d63ea43dc6f.png?imageslim', 1, 'Nuxt3 DDL', '草稿测试', 9, 2, 20, 1580605959804289025, 0, 1, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, 7);
INSERT INTO public.article_field VALUES (1598255716760551424, '2022-12-01 18:00:31.688', false, '2022-12-01 18:00:31.688', true, 0, 'https://image.baidu.com/search/down?url=https://tva3.sinaimg.cn/large/005NWBIgly1gseoy4gzxqj31hc0u04qp.jpg', 0, '1231233333333333333333333333331111111111123333', '123', 0, 2, 20, 1598255716760551425, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'xcode', 'ayuMirage', 0, -1);
INSERT INTO public.article_field VALUES (101, '2022-08-27 06:19:45.116', false, '2022-08-27 06:19:45.195', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1gomphp0l22j31hc0u0wiq.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 7, 1, 20, 102, 0, 1, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (1580605648092004352, '2022-10-14 01:05:27.411', false, '2022-10-14 01:05:27.411', true, 1, 'https://qiniu.dwsy.link/ddl/7b726f1d1ea14e8ab14e3b0ff5cae24e.jpg?imageslim', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 9, 1, 20, 1580605648180084736, 0, 2, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (14, '2022-08-27 05:29:03.926', false, '2022-10-21 00:57:50.808', true, 2, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go8137mdujj30k70k70x2.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'www', 3, 1, 3, 7, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (1582307902671028224, '2022-10-18 17:49:36.521', false, '2022-10-18 17:49:36.521', true, 1, 'https://qiniu.dwsy.link/ddl/6be832b9949a4622973ebcdc996aa22c.png?imageslim', 0, 'test', 'test', 2, 2, 3, 1582307902738137088, 0, 0, NULL, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (1583860253252911104, '2022-10-23 00:38:05.733', false, '2022-10-23 00:38:05.733', true, 1, 'https://image.baidu.com/search/down?url=https://tva3.sinaimg.cn/large/005NWBIgly1gseoy4gzxqj31hc0u04qp.jpg', 0, ' @RabbitListener(queues = ArticleSearchConstants.QUEUE_DDL_ARTICLE_SEARCH_UPDATE_SCORE)
 ', 'TTT', 14, 2, 3, 1583860253257105408, 0, 0, NULL, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (99, '2022-08-27 06:18:10.618', false, '2022-10-20 15:45:20.531', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go8137joftj30pc0oe75u.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 1, 1, 3, 100, 0, 0, 0, NULL, 'xcode', 'nico', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (13, '2022-08-27 05:12:34.36', false, '2022-10-20 00:47:45.77', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go817vkbb4j30vl0jencd.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'EMT', 11, 1, 3, 6, 0, 1, 0, NULL, 'xcode', 'duotoneHeat', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (108, '2022-08-27 12:03:24.513', false, '2023-03-31 17:22:01.095', true, 4, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go8137mdujj30k70k70x2.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 1, 1, 3, 109, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (1598256303619178496, '2022-12-01 18:02:51.624', false, '2022-12-01 18:02:51.624', true, 0, 'https://image.baidu.com/search/down?url=https://tva3.sinaimg.cn/large/005NWBIgly1gseoy4gzxqj31hc0u04qp.jpg', 0, '123
', '123', 0, 2, 20, 1598256303719841792, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'xcode', 'ayuMirage', 0, -1);
INSERT INTO public.article_field VALUES (114, '2022-08-27 12:17:45.024', false, '2022-08-27 12:17:45.024', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1gomphp0l22j31hc0u0wiq.jpg', 1, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 18, 1, 20, 115, 0, 1, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (1582308065313554432, '2022-10-18 17:50:15.29', false, '2022-10-19 03:20:44.089', true, 1, 'https://qiniu.dwsy.link/ddl/6be832b9949a4622973ebcdc996aa22c.png?imageslim', 0, 'testtest', 'Rem', 14, 2, 3, 1582308065313554433, 0, 0, 1, 'https://qiniu.dwsy.link/ddl/6be832b9949a4622973ebcdc996aa22c.png?imageslim', 'xcode', 'contrast', 'monokai', 'geekBlackDark', 3, -1);
INSERT INTO public.article_field VALUES (95, '2022-08-27 06:11:53.623', false, '2022-08-27 06:11:53.703', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1gomphp0l22j31hc0u0wiq.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 3, 1, 3, 96, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 0, -1);
INSERT INTO public.article_field VALUES (1598576125758406656, '2022-12-02 15:13:43.15', false, '2022-12-02 15:13:43.15', true, 1, 'https://image.baidu.com/search/down?url=https://tva3.sinaimg.cn/large/005NWBIgly1gseoy4gzxqj31hc0u04qp.jpg', 0, '注销测试', '注销测试', 10, 2, 1597170473374842881, 1598576125783572480, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'xcode', 'ayuMirage', 0, -1);
INSERT INTO public.article_field VALUES (1649248024339152896, '2023-04-21 11:05:45.21', false, '2023-04-21 11:08:02.04', true, 1, '', 0, 'hahh', '测试文章', 17, 2, 4, 1649248024364318720, 0, 0, 0, NULL, 'xcode', 'larkBoldColor', 'xcode', 'ayuMirage', 0, 2);
INSERT INTO public.article_field VALUES (93, '2022-08-27 06:06:45.001', false, '2022-08-27 06:06:45.081', true, 1, 'https://image.baidu.com/search/down?url=https://tva1.sinaimg.cn/large/005NWBIgly1go817vkbb4j30vl0jencd.jpg', 0, '文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试文章摘要测试summary:文章摘要测试', 'title', 31, 1, 3, 94, 0, 0, 0, NULL, 'xcode', 'cyanosis', 'monokai', 'geekBlackDark', 9, -1);
INSERT INTO public.article_field VALUES (9, '2022-08-26 21:35:06.119', false, '2022-12-04 19:51:03.685', true, 1, 'https://qiniu.dwsy.link/ddl/6d0442ed3e2041d49d3c2502f62c9968.png?imageslim', 31, '这是一个 Go 语言的参考手册，你也可以访问golang.org获取更多信息和其他文档。

Go 是在设计时考虑了系统编程的通用型编程语言。它是强类型，有垃圾回收机制并原生支持并发编程。Go 程序由一个或多个 package 组成，这样可以高效的管理依赖。

Go 的语法简洁且有规则，这让自动化工具可以很容易的分析代码，例如：集成开发环境。

', 'Go 语言的参考手册 ', 1447, 1, 3, 2, 1, 7, 0, 'https://github.com/0voice/Introduction-to-Golang/blob/main/Go%20%E8%AF%AD%E8%A8%80%E5%8F%82%E8%80%83%E6%89%8B%E5%86%8C.md', 'base16unikittyDark', 'orange', 'monokai', 'lighthouse', 9, 0);


--
-- Data for Name: article_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.article_group VALUES (2, '2022-08-26 20:38:03', false, '2022-08-26 20:38:09', '{}', '前端', 2);
INSERT INTO public.article_group VALUES (1, '2022-08-26 20:38:03', false, '2022-09-09 20:59:58.803346', '{}', '后端', 2);


--
-- Data for Name: article_tag; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.article_tag VALUES (1580212312462065668, '2022-10-12 23:02:28.873', false, '2022-10-12 23:02:28.873', 0, '轻服务', '轻服务', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312462065672, '2022-10-12 23:02:28.873', false, '2022-12-15 16:27:11.8', 0, 'kerberos', '{1}', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312462065669, '2022-10-12 23:02:28.873', false, '2022-10-12 23:02:28.873', 0, 'Fes.js', 'Fes.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312449482753, '2022-10-12 23:02:28.87', false, '2022-10-12 23:02:28.87', 0, 'HTM', 'HTM', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312453677058, '2022-10-12 23:02:28.871', false, '2022-10-12 23:02:28.871', 0, 'Svelte', 'Svelte', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312453677059, '2022-10-12 23:02:28.871', false, '2022-10-12 23:02:28.871', 0, 'CMake', 'CMake', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312453677056, '2022-10-12 23:02:28.871', false, '2022-10-12 23:02:28.871', 0, 'mPaaS', 'mPaaS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312453677057, '2022-10-12 23:02:28.871', false, '2022-10-12 23:02:28.871', 0, 'NuGet', 'NuGet', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312453677062, '2022-10-12 23:02:28.871', false, '2022-10-12 23:02:28.871', 0, 'NEO', 'NEO', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312453677063, '2022-10-12 23:02:28.871', false, '2022-10-12 23:02:28.871', 0, '京东小程序', '京东小程序', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312453677060, '2022-10-12 23:02:28.871', false, '2022-10-12 23:02:28.871', 0, '笔记测评', '笔记测评', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312453677061, '2022-10-12 23:02:28.871', false, '2022-10-12 23:02:28.871', 0, 'Godot', 'Godot', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312453677066, '2022-10-12 23:02:28.872', false, '2022-10-12 23:02:28.872', 0, 'Chameleon', 'Chameleon', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312453677064, '2022-10-12 23:02:28.871', false, '2022-10-12 23:02:28.871', 0, 'AMA', 'AMA', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312453677065, '2022-10-12 23:02:28.871', false, '2022-10-12 23:02:28.871', 0, 'GWT', 'GWT', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312420122630, '2022-10-12 23:02:28.863', false, '2022-10-12 23:02:28.863', 0, 'Natural Language Toolkit', 'Natural Language Toolkit', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312420122625, '2022-10-12 23:02:28.863', false, '2022-10-12 23:02:28.863', 0, 'Unix', 'Unix', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312462065666, '2022-10-12 23:02:28.873', false, '2022-10-12 23:02:28.873', 0, 'Modern.js', 'Modern.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312420122626, '2022-10-12 23:02:28.863', false, '2022-10-12 23:02:28.863', 0, 'ORMLite', 'ORMLite', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312420122627, '2022-10-12 23:02:28.863', false, '2022-10-12 23:02:28.863', 0, 'Android Things', 'Android Things', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312449482754, '2022-10-12 23:02:28.87', false, '2022-10-12 23:02:28.87', 0, 'PyCon', 'PyCon', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312449482755, '2022-10-12 23:02:28.87', false, '2022-10-12 23:02:28.87', 0, 'GAN', 'GAN', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312449482752, '2022-10-12 23:02:28.87', false, '2022-10-12 23:02:28.87', 0, 'Microsoft Edge', 'Microsoft Edge', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312420122631, '2022-10-12 23:02:28.863', false, '2022-10-12 23:02:28.863', 0, 'IndexedDB', 'IndexedDB', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312420122628, '2022-10-12 23:02:28.863', false, '2022-10-12 23:02:28.863', 0, 'Jasmine', 'Jasmine', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312420122629, '2022-10-12 23:02:28.863', false, '2022-10-12 23:02:28.863', 0, 'FMDB', 'FMDB', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312449482756, '2022-10-12 23:02:28.87', false, '2022-10-12 23:02:28.87', 0, 'RTC', 'RTC', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312449482757, '2022-10-12 23:02:28.87', false, '2022-10-12 23:02:28.87', 0, 'Mozilla', 'Mozilla', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312420122632, '2022-10-12 23:02:28.863', false, '2022-10-12 23:02:28.863', 0, 'ThinkJS', 'ThinkJS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312449482760, '2022-10-12 23:02:28.87', false, '2022-10-12 23:02:28.87', 0, 'iPadOS', 'iPadOS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312462065670, '2022-10-12 23:02:28.873', false, '2022-10-12 23:02:28.873', 0, '青训营', '青训营', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312462065667, '2022-10-12 23:02:28.873', false, '2022-10-12 23:02:28.873', 0, 'Semi Design', 'Semi Design', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312428511234, '2022-10-12 23:02:28.865', false, '2022-10-12 23:02:28.865', 0, 'Mongoose', 'Mongoose', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312428511235, '2022-10-12 23:02:28.865', false, '2022-10-12 23:02:28.865', 0, 'Monolog', 'Monolog', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312428511232, '2022-10-12 23:02:28.865', false, '2022-10-12 23:02:28.865', 0, 'Fuchsia', 'Fuchsia', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312428511233, '2022-10-12 23:02:28.865', false, '2022-10-12 23:02:28.865', 0, 'fastlane', 'fastlane', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312428511238, '2022-10-12 23:02:28.865', false, '2022-10-12 23:02:28.865', 0, 'Nvidia', 'Nvidia', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312428511239, '2022-10-12 23:02:28.865', false, '2022-10-12 23:02:28.865', 0, 'Jupyter', 'Jupyter', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312428511236, '2022-10-12 23:02:28.865', false, '2022-10-12 23:02:28.865', 0, 'SnapKit', 'SnapKit', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312428511237, '2022-10-12 23:02:28.865', false, '2022-10-12 23:02:28.865', 0, 'IGListKit', 'IGListKit', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312428511240, '2022-10-12 23:02:28.865', false, '2022-10-12 23:02:28.865', 0, 'Perfect', 'Perfect', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312428511241, '2022-10-12 23:02:28.865', false, '2022-10-12 23:02:28.865', 0, 'Chrome OS', 'Chrome OS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312436899842, '2022-10-12 23:02:28.867', false, '2022-10-12 23:02:28.867', 0, 'libGDX', 'libGDX', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312436899843, '2022-10-12 23:02:28.867', false, '2022-10-12 23:02:28.867', 0, 'Feathers', 'Feathers', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312436899840, '2022-10-12 23:02:28.867', false, '2022-10-12 23:02:28.867', 0, 'Vapor', 'Vapor', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312436899841, '2022-10-12 23:02:28.867', false, '2022-10-12 23:02:28.867', 0, 'Polycode', 'Polycode', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312436899846, '2022-10-12 23:02:28.867', false, '2022-10-12 23:02:28.867', 0, 'DroidMVP', 'DroidMVP', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312436899847, '2022-10-12 23:02:28.867', false, '2022-10-12 23:02:28.867', 0, 'Espresso', 'Espresso', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312436899844, '2022-10-12 23:02:28.867', false, '2022-10-12 23:02:28.867', 0, 'ARCore', 'ARCore', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312436899845, '2022-10-12 23:02:28.867', false, '2022-10-12 23:02:28.867', 0, 'mlpack', 'mlpack', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312436899848, '2022-10-12 23:02:28.867', false, '2022-10-12 23:02:28.867', 0, 'AIOps', 'AIOps', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312415928322, '2022-10-12 23:02:28.862', false, '2022-10-12 23:02:28.862', 0, 'Jekyll', 'Jekyll', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312415928323, '2022-10-12 23:02:28.862', false, '2022-10-12 23:02:28.862', 0, 'Puppeteer', 'Puppeteer', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312415928320, '2022-10-12 23:02:28.862', false, '2022-10-12 23:02:28.862', 0, 'Symfony', 'Symfony', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312415928321, '2022-10-12 23:02:28.862', false, '2022-10-12 23:02:28.862', 0, '低代码', '低代码', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312415928326, '2022-10-12 23:02:28.862', false, '2022-10-12 23:02:28.862', 0, '计算机组成原理', '计算机组成原理', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312415928327, '2022-10-12 23:02:28.863', false, '2022-10-12 23:02:28.863', 0, 'QUnit', 'QUnit', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312415928324, '2022-10-12 23:02:28.862', false, '2022-10-12 23:02:28.862', 0, 'Agera ', 'Agera ', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312415928325, '2022-10-12 23:02:28.862', false, '2022-10-12 23:02:28.862', 0, 'CasperJS', 'CasperJS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312457871362, '2022-10-12 23:02:28.872', false, '2022-10-12 23:02:28.872', 0, 'Ramda', 'Ramda', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312457871363, '2022-10-12 23:02:28.872', false, '2022-10-12 23:02:28.872', 0, 'Libra', 'Libra', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312457871360, '2022-10-12 23:02:28.872', false, '2022-10-12 23:02:28.872', 0, 'tvOS', 'tvOS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (4, '2022-08-26 20:34:15.387', false, '2022-08-26 20:34:15.387', 0, 'Go', 'info', 1, 1, true);
INSERT INTO public.article_tag VALUES (1580212312080384003, '2022-10-12 23:02:28.783', false, '2022-10-12 23:02:28.783', 0, 'Angular.js', 'Angular.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312080384002, '2022-10-12 23:02:28.782', false, '2022-10-12 23:02:28.782', 0, 'Android Studio', 'Android Studio', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312059412482, '2022-10-12 23:02:28.777', false, '2022-10-12 23:02:28.777', 0, '设计', '设计', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312071995393, '2022-10-12 23:02:28.78', false, '2022-10-12 23:02:28.78', 0, 'Docker', 'Docker', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312076189698, '2022-10-12 23:02:28.781', false, '2022-10-12 23:02:28.781', 0, 'APP', 'APP', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312076189699, '2022-10-12 23:02:28.781', false, '2022-10-12 23:02:28.781', 0, '命令行', '命令行', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312076189697, '2022-10-12 23:02:28.781', false, '2022-10-12 23:02:28.781', 0, '编程语言', '编程语言', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312076189700, '2022-10-12 23:02:28.781', false, '2022-10-12 23:02:28.781', 0, '创业', '创业', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312092966916, '2022-10-12 23:02:28.786', false, '2022-10-12 23:02:28.786', 0, '数据挖掘', '数据挖掘', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312067801090, '2022-10-12 23:02:28.779', false, '2022-10-12 23:02:28.779', 0, '正则表达式', '正则表达式', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312457871361, '2022-10-12 23:02:28.872', false, '2022-10-12 23:02:28.872', 0, '视频编码', '视频编码', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312457871366, '2022-10-12 23:02:28.872', false, '2022-10-12 23:02:28.872', 0, 'Debezium', 'Debezium', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312457871367, '2022-10-12 23:02:28.872', false, '2022-10-12 23:02:28.872', 0, 'greenplum', 'greenplum', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312457871364, '2022-10-12 23:02:28.872', false, '2022-10-12 23:02:28.872', 0, 'TLA+', 'TLA+', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312457871365, '2022-10-12 23:02:28.872', false, '2022-10-12 23:02:28.872', 0, 'D', 'D', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312457871368, '2022-10-12 23:02:28.872', false, '2022-10-12 23:02:28.872', 0, 'SQL Server', 'SQL Server', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312457871369, '2022-10-12 23:02:28.873', false, '2022-10-12 23:02:28.873', 0, 'Visual Studio', 'Visual Studio', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312424316930, '2022-10-12 23:02:28.864', false, '2022-10-12 23:02:28.864', 0, 'MJRefresh', 'MJRefresh', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312424316931, '2022-10-12 23:02:28.864', false, '2022-10-12 23:02:28.864', 0, 'SaltStack', 'SaltStack', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312424316928, '2022-10-12 23:02:28.864', false, '2022-10-12 23:02:28.864', 0, 'DeepStack', 'DeepStack', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312424316929, '2022-10-12 23:02:28.864', false, '2022-10-12 23:02:28.864', 0, 'Alamofire', 'Alamofire', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312424316934, '2022-10-12 23:02:28.864', false, '2022-10-12 23:02:28.864', 0, 'Traefik', 'Traefik', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312424316935, '2022-10-12 23:02:28.864', false, '2022-10-12 23:02:28.864', 0, 'marked', 'marked', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312424316932, '2022-10-12 23:02:28.864', false, '2022-10-12 23:02:28.864', 0, 'ReactOS', 'ReactOS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312424316933, '2022-10-12 23:02:28.864', false, '2022-10-12 23:02:28.864', 0, 'AsyncDisplayKit', 'AsyncDisplayKit', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312449482759, '2022-10-12 23:02:28.87', false, '2022-10-12 23:02:28.87', 0, 'FoundationDB', 'FoundationDB', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312449482758, '2022-10-12 23:02:28.87', false, '2022-10-12 23:02:28.87', 0, 'Smartisan OS', 'Smartisan OS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312420122624, '2022-10-12 23:02:28.863', false, '2022-10-12 23:02:28.863', 0, 'reCAPTCHA', 'reCAPTCHA', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312432705538, '2022-10-12 23:02:28.866', false, '2022-10-12 23:02:28.866', 0, 'Anko', 'Anko', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312432705539, '2022-10-12 23:02:28.866', false, '2022-10-12 23:02:28.866', 0, 'Caddy', 'Caddy', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312432705536, '2022-10-12 23:02:28.866', false, '2022-10-12 23:02:28.866', 0, 'Bulma', 'Bulma', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312432705537, '2022-10-12 23:02:28.866', false, '2022-10-12 23:02:28.866', 0, 'GIS', 'GIS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312432705542, '2022-10-12 23:02:28.866', false, '2022-10-12 23:02:28.866', 0, 'Julia', 'Julia', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312432705543, '2022-10-12 23:02:28.866', false, '2022-10-12 23:02:28.866', 0, 'StatsD', 'StatsD', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312432705540, '2022-10-12 23:02:28.866', false, '2022-10-12 23:02:28.866', 0, 'Knockout', 'Knockout', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312432705541, '2022-10-12 23:02:28.866', false, '2022-10-12 23:02:28.866', 0, 'AChartEngine', 'AChartEngine', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312432705544, '2022-10-12 23:02:28.866', false, '2022-10-12 23:02:28.866', 0, 'Parcel', 'Parcel', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312432705545, '2022-10-12 23:02:28.867', false, '2022-10-12 23:02:28.867', 0, 'Theano', 'Theano', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312441094146, '2022-10-12 23:02:28.868', false, '2022-10-12 23:02:28.868', 0, 'Classyshark', 'Classyshark', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312441094147, '2022-10-12 23:02:28.868', false, '2022-10-12 23:02:28.868', 0, 'Carthage', 'Carthage', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312441094144, '2022-10-12 23:02:28.868', false, '2022-10-12 23:02:28.868', 0, 'Phabricator', 'Phabricator', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312441094145, '2022-10-12 23:02:28.868', false, '2022-10-12 23:02:28.868', 0, 'Gin', 'Gin', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312441094150, '2022-10-12 23:02:28.868', false, '2022-10-12 23:02:28.868', 0, 'Vuforia', 'Vuforia', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312441094151, '2022-10-12 23:02:28.868', false, '2022-10-12 23:02:28.868', 0, 'RoboSpice', 'RoboSpice', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312441094148, '2022-10-12 23:02:28.868', false, '2022-10-12 23:02:28.868', 0, 'AVA', 'AVA', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312441094149, '2022-10-12 23:02:28.868', false, '2022-10-12 23:02:28.868', 0, 'JitPack', 'JitPack', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312441094152, '2022-10-12 23:02:28.868', false, '2022-10-12 23:02:28.868', 0, 'Stetho', 'Stetho', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312441094153, '2022-10-12 23:02:28.868', false, '2022-10-12 23:02:28.868', 0, 'FlatBuffers', 'FlatBuffers', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312449482761, '2022-10-12 23:02:28.87', false, '2022-10-12 23:02:28.87', 0, '掘金·日新计划', '掘金·日新计划', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312445288450, '2022-10-12 23:02:28.869', false, '2022-10-12 23:02:28.869', 0, 'MessagePack', 'MessagePack', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312445288451, '2022-10-12 23:02:28.869', false, '2022-10-12 23:02:28.869', 0, 'Buck', 'Buck', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312445288448, '2022-10-12 23:02:28.869', false, '2022-10-12 23:02:28.869', 0, 'Solidity', 'Solidity', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312445288449, '2022-10-12 23:02:28.869', false, '2022-10-12 23:02:28.869', 0, '推广', '推广', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312445288454, '2022-10-12 23:02:28.869', false, '2022-10-12 23:02:28.869', 0, 'EazeGraph', 'EazeGraph', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312445288455, '2022-10-12 23:02:28.869', false, '2022-10-12 23:02:28.869', 0, 'DbInspector', 'DbInspector', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312445288452, '2022-10-12 23:02:28.869', false, '2022-10-12 23:02:28.869', 0, 'Marko', 'Marko', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312445288453, '2022-10-12 23:02:28.869', false, '2022-10-12 23:02:28.869', 0, 'Libratus', 'Libratus', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312445288456, '2022-10-12 23:02:28.869', false, '2022-10-12 23:02:28.869', 0, 'RoboGuic', 'RoboGuic', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312445288457, '2022-10-12 23:02:28.87', false, '2022-10-12 23:02:28.87', 0, 'Fossil', 'Fossil', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312411734018, '2022-10-12 23:02:28.861', false, '2022-10-12 23:02:28.861', 0, 'NSQ', 'NSQ', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312411734019, '2022-10-12 23:02:28.861', false, '2022-10-12 23:02:28.861', 0, 'Twisted', 'Twisted', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312411734017, '2022-10-12 23:02:28.861', false, '2022-10-12 23:02:28.861', 0, 'Mockito', 'Mockito', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312411734022, '2022-10-12 23:02:28.861', false, '2022-10-12 23:02:28.861', 0, 'Istio', 'Istio', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312411734023, '2022-10-12 23:02:28.861', false, '2022-10-12 23:02:28.861', 0, 'Fluentd', 'Fluentd', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312411734020, '2022-10-12 23:02:28.861', false, '2022-10-12 23:02:28.861', 0, 'Brython', 'Brython', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312411734021, '2022-10-12 23:02:28.861', false, '2022-10-12 23:02:28.861', 0, 'Bintray', 'Bintray', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312462065664, '2022-10-12 23:02:28.873', false, '2022-10-12 23:02:28.873', 0, 'Cocos Creator', 'Cocos Creator', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312462065665, '2022-10-12 23:02:28.873', false, '2022-10-12 23:02:28.873', 0, 'arco design', 'arco design', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312411734024, '2022-10-12 23:02:28.861', false, '2022-10-12 23:02:28.861', 0, '芯片', '芯片', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312462065671, '2022-10-12 23:02:28.873', false, '2022-10-12 23:02:28.873', 0, '单片机', '单片机', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312042635267, '2022-10-12 23:02:28.773', false, '2022-10-12 23:02:28.773', 0, '数据库', '数据库', NULL, NULL, true);
INSERT INTO public.article_tag VALUES (1580212312042635268, '2022-10-12 23:02:28.773', false, '2022-10-12 23:02:28.773', 0, '程序员', '程序员', NULL, NULL, true);
INSERT INTO public.article_tag VALUES (1580212312042635264, '2022-10-12 23:02:28.773', false, '2022-10-12 23:02:28.773', 0, '代码规范', '代码规范', NULL, NULL, true);
INSERT INTO public.article_tag VALUES (1580212312038440961, '2022-10-12 23:02:28.772', false, '2022-10-12 23:02:28.772', 0, '面试', '面试', NULL, NULL, true);
INSERT INTO public.article_tag VALUES (1580212312038440962, '2022-10-12 23:02:28.772', false, '2022-10-12 23:02:28.772', 0, '架构', '架构', NULL, NULL, true);
INSERT INTO public.article_tag VALUES (1580212312038440963, '2022-10-12 23:02:28.772', false, '2022-10-12 23:02:28.772', 0, '算法', '算法', NULL, NULL, true);
INSERT INTO public.article_tag VALUES (3, '2022-08-26 20:34:15.386', false, '2022-08-26 20:34:15.386', 0, 'Rust', 'info', 1, 1, true);
INSERT INTO public.article_tag VALUES (1580212312046829570, '2022-10-12 23:02:28.774', false, '2022-10-12 23:02:28.774', 0, 'HTML', 'HTML', 2, 8, true);
INSERT INTO public.article_tag VALUES (5, '2022-08-30 17:47:22', false, '2022-08-30 17:47:28', 0, 'Vue.js', '{}', 2, 2, true);
INSERT INTO public.article_tag VALUES (1580212312046829569, '2022-10-12 23:02:28.774', false, '2022-10-12 23:02:28.774', 0, '设计模式', '设计模式', 1, 7, true);
INSERT INTO public.article_tag VALUES (1580212312034246657, '2022-10-12 23:02:28.771', false, '2022-10-12 23:02:28.771', 0, 'JavaScript', 'JavaScript', 1, 3, true);
INSERT INTO public.article_tag VALUES (1580212312051023873, '2022-10-12 23:02:28.775', false, '2022-10-12 23:02:28.775', 0, 'React.js', 'React.js', 2, 1, true);
INSERT INTO public.article_tag VALUES (1580212312055218176, '2022-10-12 23:02:28.776', false, '2022-10-12 23:02:28.776', 0, '微信小程序', '微信小程序', 2, 10, false);
INSERT INTO public.article_tag VALUES (1580212312046829568, '2022-10-12 23:02:28.774', false, '2022-10-12 23:02:28.774', 0, '前端框架', '前端框架', 2, 6, true);
INSERT INTO public.article_tag VALUES (1580212312051023872, '2022-10-12 23:02:28.775', false, '2022-10-12 23:02:28.775', 0, 'Android', 'Android', 2, 9, false);
INSERT INTO public.article_tag VALUES (1580212312042635265, '2022-10-12 23:02:28.773', false, '2022-10-12 23:02:28.773', 0, 'CSS', 'CSS', 2, 2, true);
INSERT INTO public.article_tag VALUES (1580212312042635266, '2022-10-12 23:02:28.773', false, '2022-10-12 23:02:28.773', 0, 'Node.js', 'Node.js', 2, 4, true);
INSERT INTO public.article_tag VALUES (1580212312038440960, '2022-10-12 23:02:28.772', false, '2022-10-12 23:02:28.772', 0, 'GitHub', 'GitHub', 1, 4, true);
INSERT INTO public.article_tag VALUES (1580212312403345409, '2022-10-12 23:02:28.859', false, '2022-10-12 23:02:28.859', 0, 'Gevent', 'Gevent', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312407539712, '2022-10-12 23:02:28.86', false, '2022-10-12 23:02:28.86', 0, 'Clojure', 'Clojure', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312407539718, '2022-10-12 23:02:28.86', false, '2022-10-12 23:02:28.86', 0, 'E2E', 'E2E', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312407539719, '2022-10-12 23:02:28.86', false, '2022-10-12 23:02:28.86', 0, 'AMP', 'AMP', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312407539716, '2022-10-12 23:02:28.86', false, '2022-10-12 23:02:28.86', 0, 'MPAndroidChart', 'MPAndroidChart', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312407539717, '2022-10-12 23:02:28.86', false, '2022-10-12 23:02:28.86', 0, 'Xposed', 'Xposed', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312403345410, '2022-10-12 23:02:28.859', false, '2022-10-12 23:02:28.859', 0, 'SonarQube', 'SonarQube', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312399151109, '2022-10-12 23:02:28.858', false, '2022-10-12 23:02:28.858', 0, 'Fresco', 'Fresco', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312399151108, '2022-10-12 23:02:28.858', false, '2022-10-12 23:02:28.858', 0, 'DevOps', 'DevOps', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312399151111, '2022-10-12 23:02:28.858', false, '2022-10-12 23:02:28.858', 0, 'Service Mesh', 'Service Mesh', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312399151110, '2022-10-12 23:02:28.858', false, '2022-10-12 23:02:28.858', 0, 'Apache Ant', 'Apache Ant', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312399151105, '2022-10-12 23:02:28.858', false, '2022-10-12 23:02:28.858', 0, 'GPU', 'GPU', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312394956802, '2022-10-12 23:02:28.857', false, '2022-10-12 23:02:28.857', 0, '掘金圆桌', '掘金圆桌', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312394956803, '2022-10-12 23:02:28.857', false, '2022-10-12 23:02:28.857', 0, '有赞', '有赞', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312403345414, '2022-10-12 23:02:28.859', false, '2022-10-12 23:02:28.859', 0, 'Browserify', 'Browserify', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312399151104, '2022-10-12 23:02:28.858', false, '2022-10-12 23:02:28.858', 0, 'LevelDB', 'LevelDB', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312394956805, '2022-10-12 23:02:28.857', false, '2022-10-12 23:02:28.857', 0, 'Daydream', 'Daydream', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312394956804, '2022-10-12 23:02:28.857', false, '2022-10-12 23:02:28.857', 0, '无人机', '无人机', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312394956807, '2022-10-12 23:02:28.857', false, '2022-10-12 23:02:28.857', 0, 'Preact', 'Preact', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312394956806, '2022-10-12 23:02:28.857', false, '2022-10-12 23:02:28.857', 0, 'Haskell', 'Haskell', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312399151106, '2022-10-12 23:02:28.858', false, '2022-10-12 23:02:28.858', 0, 'pyspider', 'pyspider', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312399151107, '2022-10-12 23:02:28.858', false, '2022-10-12 23:02:28.858', 0, '客户端', '客户端', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312403345411, '2022-10-12 23:02:28.859', false, '2022-10-12 23:02:28.859', 0, 'SymPy', 'SymPy', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312403345408, '2022-10-12 23:02:28.859', false, '2022-10-12 23:02:28.859', 0, 'Fedora', 'Fedora', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312403345415, '2022-10-12 23:02:28.859', false, '2022-10-12 23:02:28.859', 0, 'Gunicorn', 'Gunicorn', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312403345412, '2022-10-12 23:02:28.859', false, '2022-10-12 23:02:28.859', 0, 'Bluebird.js', 'Bluebird.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312403345413, '2022-10-12 23:02:28.859', false, '2022-10-12 23:02:28.859', 0, 'Raft', 'Raft', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312407539713, '2022-10-12 23:02:28.86', false, '2022-10-12 23:02:28.86', 0, 'uWSGI', 'uWSGI', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312407539715, '2022-10-12 23:02:28.86', false, '2022-10-12 23:02:28.86', 0, 'Snapchat', 'Snapchat', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312407539714, '2022-10-12 23:02:28.86', false, '2022-10-12 23:02:28.86', 0, 'Jieba', 'Jieba', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312411734016, '2022-10-12 23:02:28.861', false, '2022-10-12 23:02:28.861', 0, 'Omi', 'Omi', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1, '2022-08-26 20:34:15.337', false, '2022-09-09 20:49:13.411', 1, 'Java', '{1}', 1, 0, true);
INSERT INTO public.article_tag VALUES (1580212312118132737, '2022-10-12 23:02:28.791', false, '2022-10-12 23:02:28.791', 0, 'NPM', 'NPM', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312118132736, '2022-10-12 23:02:28.791', false, '2022-10-12 23:02:28.791', 0, 'Objective-C', 'Objective-C', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312118132739, '2022-10-12 23:02:28.791', false, '2022-10-12 23:02:28.791', 0, 'Flutter', 'Flutter', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312118132738, '2022-10-12 23:02:28.791', false, '2022-10-12 23:02:28.791', 0, '字体', '字体', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312143298562, '2022-10-12 23:02:28.797', false, '2022-10-12 23:02:28.797', 0, 'IntelliJ IDEA', 'IntelliJ IDEA', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312143298563, '2022-10-12 23:02:28.797', false, '2022-10-12 23:02:28.797', 0, '函数式编程', '函数式编程', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312143298560, '2022-10-12 23:02:28.797', false, '2022-10-12 23:02:28.797', 0, '数据分析', '数据分析', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312143298561, '2022-10-12 23:02:28.797', false, '2022-10-12 23:02:28.797', 0, '游戏', '游戏', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312143298564, '2022-10-12 23:02:28.797', false, '2022-10-12 23:02:28.797', 0, 'vue-router', 'vue-router', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312109744128, '2022-10-12 23:02:28.789', false, '2022-10-12 23:02:28.789', 0, 'Markdown', 'Markdown', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312109744129, '2022-10-12 23:02:28.789', false, '2022-10-12 23:02:28.789', 0, '敏捷开发', '敏捷开发', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312109744132, '2022-10-12 23:02:28.789', false, '2022-10-12 23:02:28.789', 0, '物联网', '物联网', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312155881475, '2022-10-12 23:02:28.8', false, '2022-10-12 23:02:28.8', 0, '神经网络', '神经网络', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312285904897, '2022-10-12 23:02:28.831', false, '2022-10-12 23:02:28.831', 0, 'WeUI', 'WeUI', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312239767557, '2022-10-12 23:02:28.82', false, '2022-10-12 23:02:28.82', 0, 'C#', 'C#', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312239767556, '2022-10-12 23:02:28.82', false, '2022-10-12 23:02:28.82', 0, 'Retrofit', 'Retrofit', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312239767553, '2022-10-12 23:02:28.82', false, '2022-10-12 23:02:28.82', 0, '小程序·云开发', '小程序·云开发', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312218796036, '2022-10-12 23:02:28.815', false, '2022-10-12 23:02:28.815', 0, 'macOS', 'macOS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312239767555, '2022-10-12 23:02:28.82', false, '2022-10-12 23:02:28.82', 0, '视觉设计', '视觉设计', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312357208064, '2022-10-12 23:02:28.848', false, '2022-10-12 23:02:28.848', 0, 'RSS', 'RSS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312369790977, '2022-10-12 23:02:28.851', false, '2022-10-12 23:02:28.851', 0, 'Kaggle', 'Kaggle', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312197824513, '2022-10-12 23:02:28.81', false, '2022-10-12 23:02:28.81', 0, '连续集成', '连续集成', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312197824512, '2022-10-12 23:02:28.81', false, '2022-10-12 23:02:28.81', 0, 'flexbox', 'flexbox', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312168464388, '2022-10-12 23:02:28.803', false, '2022-10-12 23:02:28.803', 0, '单元测试', '单元测试', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312382373889, '2022-10-12 23:02:28.854', false, '2022-10-12 23:02:28.854', 0, 'Erlang', 'Erlang', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312369790984, '2022-10-12 23:02:28.852', false, '2022-10-12 23:02:28.852', 0, 'Keras', 'Keras', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312168464387, '2022-10-12 23:02:28.803', false, '2022-10-12 23:02:28.803', 0, 'TensorFlow', 'TensorFlow', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312168464386, '2022-10-12 23:02:28.803', false, '2022-10-12 23:02:28.803', 0, 'Gulp', 'Gulp', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312256544774, '2022-10-12 23:02:28.824', false, '2022-10-12 23:02:28.824', 0, 'Meteor.js', 'Meteor.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312256544769, '2022-10-12 23:02:28.824', false, '2022-10-12 23:02:28.824', 0, 'DNodeJS', 'DNodeJS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312327847939, '2022-10-12 23:02:28.841', false, '2022-10-12 23:02:28.841', 0, 'Cocos2d-x', 'Cocos2d-x', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312394956800, '2022-10-12 23:02:28.857', false, '2022-10-12 23:02:28.857', 0, 'Lisp', 'Lisp', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312386568192, '2022-10-12 23:02:28.855', false, '2022-10-12 23:02:28.855', 0, 'AFNetworking', 'AFNetworking', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312344625154, '2022-10-12 23:02:28.845', false, '2022-10-12 23:02:28.845', 0, 'Kibana', 'Kibana', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312344625152, '2022-10-12 23:02:28.845', false, '2022-10-12 23:02:28.845', 0, '领域驱动设计', '领域驱动设计', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312294293505, '2022-10-12 23:02:28.833', false, '2022-10-12 23:02:28.833', 0, 'CTO', 'CTO', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312294293510, '2022-10-12 23:02:28.833', false, '2022-10-12 23:02:28.833', 0, '图像识别', '图像识别', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312311070726, '2022-10-12 23:02:28.838', false, '2022-10-12 23:02:28.838', 0, 'HDFS', 'HDFS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312172658688, '2022-10-12 23:02:28.804', false, '2022-10-12 23:02:28.804', 0, '计算机视觉', '计算机视觉', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312294293509, '2022-10-12 23:02:28.833', false, '2022-10-12 23:02:28.833', 0, '资讯', '资讯', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312311070725, '2022-10-12 23:02:28.837', false, '2022-10-12 23:02:28.837', 0, '图形学', '图形学', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312336236544, '2022-10-12 23:02:28.843', false, '2022-10-12 23:02:28.843', 0, '计算机图形学', '计算机图形学', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312172658691, '2022-10-12 23:02:28.804', false, '2022-10-12 23:02:28.804', 0, 'SQLite', 'SQLite', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312344625158, '2022-10-12 23:02:28.845', false, '2022-10-12 23:02:28.845', 0, 'protobuf', 'protobuf', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312344625153, '2022-10-12 23:02:28.845', false, '2022-10-12 23:02:28.845', 0, 'AWS', 'AWS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312260739074, '2022-10-12 23:02:28.825', false, '2022-10-12 23:02:28.825', 0, 'Keynote', 'Keynote', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312260739075, '2022-10-12 23:02:28.825', false, '2022-10-12 23:02:28.825', 0, '汇编语言', '汇编语言', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312260739072, '2022-10-12 23:02:28.825', false, '2022-10-12 23:02:28.825', 0, 'Excel', 'Excel', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312260739073, '2022-10-12 23:02:28.825', false, '2022-10-12 23:02:28.825', 0, 'WebAssembly', 'WebAssembly', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312193630210, '2022-10-12 23:02:28.809', false, '2022-10-12 23:02:28.809', 0, 'ZooKeeper', 'ZooKeeper', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312193630211, '2022-10-12 23:02:28.809', false, '2022-10-12 23:02:28.809', 0, 'Electron', 'Electron', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312193630208, '2022-10-12 23:02:28.809', false, '2022-10-12 23:02:28.809', 0, 'RabbitMQ', 'RabbitMQ', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (2, '2022-08-26 20:34:15.385', false, '2022-08-26 20:34:15.385', 0, 'C++', 'info', 1, 0, true);
INSERT INTO public.article_tag VALUES (1580212312193630209, '2022-10-12 23:02:28.809', false, '2022-10-12 23:02:28.809', 0, 'Shell', 'Shell', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312227184640, '2022-10-12 23:02:28.817', false, '2022-10-12 23:02:28.817', 0, 'SVN', 'SVN', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312227184641, '2022-10-12 23:02:28.817', false, '2022-10-12 23:02:28.817', 0, '直播', '直播', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312235573252, '2022-10-12 23:02:28.819', false, '2022-10-12 23:02:28.819', 0, '沸点', '沸点', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312210407428, '2022-10-12 23:02:28.813', false, '2022-10-12 23:02:28.813', 0, 'Wireshark', 'Wireshark', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312160075776, '2022-10-12 23:02:28.801', false, '2022-10-12 23:02:28.801', 0, 'Spring Cloud', 'Spring Cloud', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312160075777, '2022-10-12 23:02:28.801', false, '2022-10-12 23:02:28.801', 0, 'Unity3D', 'Unity3D', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312243961861, '2022-10-12 23:02:28.821', false, '2022-10-12 23:02:28.821', 0, 'PyCharm', 'PyCharm', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312327847937, '2022-10-12 23:02:28.841', false, '2022-10-12 23:02:28.841', 0, 'CircleCI', 'CircleCI', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312160075780, '2022-10-12 23:02:28.801', false, '2022-10-12 23:02:28.801', 0, 'TCP/IP', 'TCP/IP', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312176852996, '2022-10-12 23:02:28.805', false, '2022-10-12 23:02:28.805', 0, 'Firefox', 'Firefox', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312298487808, '2022-10-12 23:02:28.834', false, '2022-10-12 23:02:28.834', 0, 'DaoCloud', 'DaoCloud', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312235573253, '2022-10-12 23:02:28.819', false, '2022-10-12 23:02:28.819', 0, 'Lua', 'Lua', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312243961857, '2022-10-12 23:02:28.821', false, '2022-10-12 23:02:28.821', 0, '树莓派', '树莓派', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312361402373, '2022-10-12 23:02:28.849', false, '2022-10-12 23:02:28.849', 0, 'rollup.js', 'rollup.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312348819456, '2022-10-12 23:02:28.846', false, '2022-10-12 23:02:28.846', 0, 'Cordova', 'Cordova', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312390762504, '2022-10-12 23:02:28.856', false, '2022-10-12 23:02:28.856', 0, 'WebStorm', 'WebStorm', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312273321989, '2022-10-12 23:02:28.828', false, '2022-10-12 23:02:28.828', 0, 'Flink', 'Flink', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312315265029, '2022-10-12 23:02:28.838', false, '2022-10-12 23:02:28.838', 0, 'WordPress', 'WordPress', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312315265028, '2022-10-12 23:02:28.838', false, '2022-10-12 23:02:28.838', 0, '团队管理', '团队管理', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312097161218, '2022-10-12 23:02:28.786', false, '2022-10-12 23:02:28.786', 0, 'Sublime Text', 'Sublime Text', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312273321985, '2022-10-12 23:02:28.828', false, '2022-10-12 23:02:28.828', 0, '自动化运维', '自动化运维', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312390762502, '2022-10-12 23:02:28.856', false, '2022-10-12 23:02:28.856', 0, 'deno', 'deno', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312390762497, '2022-10-12 23:02:28.856', false, '2022-10-12 23:02:28.856', 0, 'Tinker', 'Tinker', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312210407429, '2022-10-12 23:02:28.813', false, '2022-10-12 23:02:28.813', 0, 'PostgreSQL', 'PostgreSQL', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312092966912, '2022-10-12 23:02:28.785', false, '2022-10-12 23:02:28.785', 0, '图片资源', '图片资源', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312092966915, '2022-10-12 23:02:28.785', false, '2022-10-12 23:02:28.785', 0, 'TypeScript', 'TypeScript', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312092966914, '2022-10-12 23:02:28.785', false, '2022-10-12 23:02:28.785', 0, '阿里巴巴', '阿里巴巴', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312113938433, '2022-10-12 23:02:28.79', false, '2022-10-12 23:02:28.79', 0, 'Spring Boot', 'Spring Boot', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312113938432, '2022-10-12 23:02:28.79', false, '2022-10-12 23:02:28.79', 0, 'RxJava', 'RxJava', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312113938435, '2022-10-12 23:02:28.79', false, '2022-10-12 23:02:28.79', 0, '动效', '动效', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312302682115, '2022-10-12 23:02:28.835', false, '2022-10-12 23:02:28.835', 0, 'Apache Hive', 'Apache Hive', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312260739077, '2022-10-12 23:02:28.825', false, '2022-10-12 23:02:28.825', 0, 'WebRTC', 'WebRTC', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312256544768, '2022-10-12 23:02:28.824', false, '2022-10-12 23:02:28.824', 0, 'V8', 'V8', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312277516293, '2022-10-12 23:02:28.829', false, '2022-10-12 23:02:28.829', 0, '蓝牙', '蓝牙', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312285904901, '2022-10-12 23:02:28.831', false, '2022-10-12 23:02:28.831', 0, 'ReactiveCocoa', 'ReactiveCocoa', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312281710597, '2022-10-12 23:02:28.83', false, '2022-10-12 23:02:28.83', 0, 'RequireJS', 'RequireJS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312281710596, '2022-10-12 23:02:28.83', false, '2022-10-12 23:02:28.83', 0, 'IPython', 'IPython', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312281710593, '2022-10-12 23:02:28.83', false, '2022-10-12 23:02:28.83', 0, 'Dart', 'Dart', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312281710592, '2022-10-12 23:02:28.83', false, '2022-10-12 23:02:28.83', 0, 'JUnit', 'JUnit', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312281710595, '2022-10-12 23:02:28.83', false, '2022-10-12 23:02:28.83', 0, 'fir.im', 'fir.im', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312101355522, '2022-10-12 23:02:28.787', false, '2022-10-12 23:02:28.787', 0, 'Canvas', 'Canvas', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312285904896, '2022-10-12 23:02:28.831', false, '2022-10-12 23:02:28.831', 0, 'PhpStorm', 'PhpStorm', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312227184643, '2022-10-12 23:02:28.817', false, '2022-10-12 23:02:28.817', 0, 'Hacker News', 'Hacker News', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312273321988, '2022-10-12 23:02:28.828', false, '2022-10-12 23:02:28.828', 0, '掘金社区', '掘金社区', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312227184642, '2022-10-12 23:02:28.817', false, '2022-10-12 23:02:28.817', 0, 'Flask', 'Flask', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312155881476, '2022-10-12 23:02:28.8', false, '2022-10-12 23:02:28.8', 0, 'Kubernetes', 'Kubernetes', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312264933379, '2022-10-12 23:02:28.826', false, '2022-10-12 23:02:28.826', 0, '游戏开发', '游戏开发', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312273321987, '2022-10-12 23:02:28.828', false, '2022-10-12 23:02:28.828', 0, 'LLVM', 'LLVM', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312273321986, '2022-10-12 23:02:28.828', false, '2022-10-12 23:02:28.828', 0, 'Zepto.js', 'Zepto.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312155881473, '2022-10-12 23:02:28.8', false, '2022-10-12 23:02:28.8', 0, '稀土', '稀土', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312155881474, '2022-10-12 23:02:28.8', false, '2022-10-12 23:02:28.8', 0, 'SEO', 'SEO', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312105549826, '2022-10-12 23:02:28.788', false, '2022-10-12 23:02:28.788', 0, 'Swift', 'Swift', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312105549827, '2022-10-12 23:02:28.788', false, '2022-10-12 23:02:28.788', 0, '源码', '源码', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312105549824, '2022-10-12 23:02:28.788', false, '2022-10-12 23:02:28.788', 0, 'MVVM', 'MVVM', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312088772610, '2022-10-12 23:02:28.784', false, '2022-10-12 23:02:28.784', 0, 'Photoshop', 'Photoshop', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312088772611, '2022-10-12 23:02:28.784', false, '2022-10-12 23:02:28.784', 0, '操作系统', '操作系统', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312088772608, '2022-10-12 23:02:28.784', false, '2022-10-12 23:02:28.784', 0, '数据可视化', '数据可视化', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312088772609, '2022-10-12 23:02:28.784', false, '2022-10-12 23:02:28.784', 0, 'PHP', 'PHP', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312122327040, '2022-10-12 23:02:28.792', false, '2022-10-12 23:02:28.792', 0, 'Ajax', 'Ajax', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312122327041, '2022-10-12 23:02:28.792', false, '2022-10-12 23:02:28.792', 0, 'Icon', 'Icon', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312088772612, '2022-10-12 23:02:28.784', false, '2022-10-12 23:02:28.784', 0, 'API', 'API', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312231378946, '2022-10-12 23:02:28.818', false, '2022-10-12 23:02:28.818', 0, '云原生', '云原生', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312122327044, '2022-10-12 23:02:28.793', false, '2022-10-12 23:02:28.793', 0, '虚拟现实', '虚拟现实', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312071995396, '2022-10-12 23:02:28.78', false, '2022-10-12 23:02:28.78', 0, 'Chrome', 'Chrome', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312202018816, '2022-10-12 23:02:28.811', false, '2022-10-12 23:02:28.811', 0, 'd3.js', 'd3.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312202018819, '2022-10-12 23:02:28.811', false, '2022-10-12 23:02:28.811', 0, 'UI Kit', 'UI Kit', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312361402372, '2022-10-12 23:02:28.849', false, '2022-10-12 23:02:28.849', 0, 'Highlight.js', 'Highlight.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312298487809, '2022-10-12 23:02:28.834', false, '2022-10-12 23:02:28.834', 0, 'PWA', 'PWA', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312164270085, '2022-10-12 23:02:28.802', false, '2022-10-12 23:02:28.802', 0, '增强现实', '增强现实', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312160075779, '2022-10-12 23:02:28.801', false, '2022-10-12 23:02:28.801', 0, 'Kafka', 'Kafka', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312315265024, '2022-10-12 23:02:28.838', false, '2022-10-12 23:02:28.838', 0, 'NumPy', 'NumPy', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312181047296, '2022-10-12 23:02:28.806', false, '2022-10-12 23:02:28.806', 0, '求职', '求职', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312353013764, '2022-10-12 23:02:28.847', false, '2022-10-12 23:02:28.847', 0, '智能小程序', '智能小程序', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312076189696, '2022-10-12 23:02:28.781', false, '2022-10-12 23:02:28.781', 0, '响应式设计', '响应式设计', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312353013766, '2022-10-12 23:02:28.847', false, '2022-10-12 23:02:28.847', 0, 'Swoole', 'Swoole', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312353013761, '2022-10-12 23:02:28.847', false, '2022-10-12 23:02:28.847', 0, 'Vant', 'Vant', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312353013760, '2022-10-12 23:02:28.847', false, '2022-10-12 23:02:28.847', 0, 'Groovy', 'Groovy', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312353013763, '2022-10-12 23:02:28.847', false, '2022-10-12 23:02:28.847', 0, 'etcd', 'etcd', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312273321984, '2022-10-12 23:02:28.828', false, '2022-10-12 23:02:28.828', 0, '年终总结', '年终总结', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312256544771, '2022-10-12 23:02:28.824', false, '2022-10-12 23:02:28.824', 0, 'Cocoa', 'Cocoa', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312101355520, '2022-10-12 23:02:28.787', false, '2022-10-12 23:02:28.787', 0, 'gradle', 'gradle', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312306876419, '2022-10-12 23:02:28.836', false, '2022-10-12 23:02:28.836', 0, 'Apache ActiveMQ', 'Apache ActiveMQ', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312306876418, '2022-10-12 23:02:28.836', false, '2022-10-12 23:02:28.836', 0, '数学', '数学', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312055218178, '2022-10-12 23:02:28.776', false, '2022-10-12 23:02:28.776', 0, 'Python', 'Python', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312055218179, '2022-10-12 23:02:28.776', false, '2022-10-12 23:02:28.776', 0, 'Webpack', 'Webpack', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312055218177, '2022-10-12 23:02:28.776', false, '2022-10-12 23:02:28.776', 0, 'Git', 'Git', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312378179590, '2022-10-12 23:02:28.853', false, '2022-10-12 23:02:28.853', 0, 'Mocha', 'Mocha', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312378179585, '2022-10-12 23:02:28.853', false, '2022-10-12 23:02:28.853', 0, 'Akka', 'Akka', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312055218180, '2022-10-12 23:02:28.776', false, '2022-10-12 23:02:28.776', 0, '开源', '开源', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312210407425, '2022-10-12 23:02:28.813', false, '2022-10-12 23:02:28.813', 0, 'Netty', 'Netty', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312357208068, '2022-10-12 23:02:28.848', false, '2022-10-12 23:02:28.848', 0, 'web.py', 'web.py', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312210407424, '2022-10-12 23:02:28.813', false, '2022-10-12 23:02:28.813', 0, 'Twitter', 'Twitter', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312122327042, '2022-10-12 23:02:28.792', false, '2022-10-12 23:02:28.792', 0, '测试', '测试', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312210407426, '2022-10-12 23:02:28.813', false, '2022-10-12 23:02:28.813', 0, 'ORM', 'ORM', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312311070721, '2022-10-12 23:02:28.837', false, '2022-10-12 23:02:28.837', 0, '自动驾驶', '自动驾驶', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312168464384, '2022-10-12 23:02:28.803', false, '2022-10-12 23:02:28.803', 0, '分布式', '分布式', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312311070722, '2022-10-12 23:02:28.837', false, '2022-10-12 23:02:28.837', 0, 'MariaDB', 'MariaDB', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312323653632, '2022-10-12 23:02:28.84', false, '2022-10-12 23:02:28.84', 0, 'Fiddler', 'Fiddler', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312323653633, '2022-10-12 23:02:28.84', false, '2022-10-12 23:02:28.84', 0, 'Polymer', 'Polymer', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312323653638, '2022-10-12 23:02:28.84', false, '2022-10-12 23:02:28.84', 0, 'Serverless', 'Serverless', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312306876417, '2022-10-12 23:02:28.836', false, '2022-10-12 23:02:28.836', 0, '监控', '监控', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312151687173, '2022-10-12 23:02:28.8', false, '2022-10-12 23:02:28.8', 0, '支付宝', '支付宝', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312151687172, '2022-10-12 23:02:28.799', false, '2022-10-12 23:02:28.799', 0, 'Facebook', 'Facebook', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312340430855, '2022-10-12 23:02:28.845', false, '2022-10-12 23:02:28.845', 0, 'Lucene', 'Lucene', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312365596675, '2022-10-12 23:02:28.85', false, '2022-10-12 23:02:28.85', 0, 'TiDB', 'TiDB', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312105549828, '2022-10-12 23:02:28.788', false, '2022-10-12 23:02:28.788', 0, '云计算', '云计算', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312336236546, '2022-10-12 23:02:28.843', false, '2022-10-12 23:02:28.843', 0, 'Charles', 'Charles', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312290099202, '2022-10-12 23:02:28.832', false, '2022-10-12 23:02:28.832', 0, 'WWDC', 'WWDC', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312239767554, '2022-10-12 23:02:28.82', false, '2022-10-12 23:02:28.82', 0, 'MVP', 'MVP', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312248156161, '2022-10-12 23:02:28.822', false, '2022-10-12 23:02:28.822', 0, 'ECMAScript 8', 'ECMAScript 8', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312239767552, '2022-10-12 23:02:28.82', false, '2022-10-12 23:02:28.82', 0, 'Flux', 'Flux', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312222990338, '2022-10-12 23:02:28.816', false, '2022-10-12 23:02:28.816', 0, 'NLP', 'NLP', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312222990339, '2022-10-12 23:02:28.816', false, '2022-10-12 23:02:28.816', 0, '搜索引擎', '搜索引擎', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312222990336, '2022-10-12 23:02:28.816', false, '2022-10-12 23:02:28.816', 0, 'koa', 'koa', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312248156160, '2022-10-12 23:02:28.822', false, '2022-10-12 23:02:28.822', 0, 'GraphQL', 'GraphQL', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312206213123, '2022-10-12 23:02:28.812', false, '2022-10-12 23:02:28.812', 0, '交互设计', '交互设计', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312206213120, '2022-10-12 23:02:28.812', false, '2022-10-12 23:02:28.812', 0, 'Safari', 'Safari', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312206213121, '2022-10-12 23:02:28.812', false, '2022-10-12 23:02:28.812', 0, 'Dubbo', 'Dubbo', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312189435907, '2022-10-12 23:02:28.808', false, '2022-10-12 23:02:28.808', 0, '百度', '百度', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312189435904, '2022-10-12 23:02:28.808', false, '2022-10-12 23:02:28.808', 0, 'Atom', 'Atom', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312206213124, '2022-10-12 23:02:28.812', false, '2022-10-12 23:02:28.812', 0, 'Laravel', 'Laravel', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312206213125, '2022-10-12 23:02:28.812', false, '2022-10-12 23:02:28.812', 0, 'Weex', 'Weex', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312306876416, '2022-10-12 23:02:28.836', false, '2022-10-12 23:02:28.836', 0, 'Y Combinator', 'Y Combinator', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312189435908, '2022-10-12 23:02:28.808', false, '2022-10-12 23:02:28.808', 0, '科幻', '科幻', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312340430848, '2022-10-12 23:02:28.844', false, '2022-10-12 23:02:28.844', 0, 'Emacs', 'Emacs', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312340430849, '2022-10-12 23:02:28.844', false, '2022-10-12 23:02:28.844', 0, 'Taro', 'Taro', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312306876420, '2022-10-12 23:02:28.836', false, '2022-10-12 23:02:28.836', 0, '编译原理', '编译原理', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312306876421, '2022-10-12 23:02:28.836', false, '2022-10-12 23:02:28.836', 0, 'Amazon', 'Amazon', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312340430852, '2022-10-12 23:02:28.844', false, '2022-10-12 23:02:28.844', 0, 'Unicode', 'Unicode', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312340430853, '2022-10-12 23:02:28.844', false, '2022-10-12 23:02:28.844', 0, 'Yii', 'Yii', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312373985280, '2022-10-12 23:02:28.852', false, '2022-10-12 23:02:28.852', 0, 'Ansible', 'Ansible', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312290099200, '2022-10-12 23:02:28.832', false, '2022-10-12 23:02:28.832', 0, 'Nuxt.js', 'Nuxt.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312122327043, '2022-10-12 23:02:28.792', false, '2022-10-12 23:02:28.792', 0, 'JVM', 'JVM', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312382373891, '2022-10-12 23:02:28.854', false, '2022-10-12 23:02:28.854', 0, 'Karma', 'Karma', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312210407427, '2022-10-12 23:02:28.813', false, '2022-10-12 23:02:28.813', 0, 'SSH', 'SSH', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312378179589, '2022-10-12 23:02:28.853', false, '2022-10-12 23:02:28.853', 0, 'Apache Kylin', 'Apache Kylin', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312298487813, '2022-10-12 23:02:28.834', false, '2022-10-12 23:02:28.834', 0, 'PyQt', 'PyQt', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312365596678, '2022-10-12 23:02:28.85', false, '2022-10-12 23:02:28.85', 0, 'greenDAO', 'greenDAO', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312378179591, '2022-10-12 23:02:28.853', false, '2022-10-12 23:02:28.853', 0, 'C语言', 'C语言', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312294293504, '2022-10-12 23:02:28.833', false, '2022-10-12 23:02:28.833', 0, 'LaTex', 'LaTex', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312386568194, '2022-10-12 23:02:28.855', false, '2022-10-12 23:02:28.855', 0, 'RPC', 'RPC', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312139104258, '2022-10-12 23:02:28.796', false, '2022-10-12 23:02:28.796', 0, 'Promise', 'Promise', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312378179587, '2022-10-12 23:02:28.853', false, '2022-10-12 23:02:28.853', 0, 'ZXing', 'ZXing', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312290099205, '2022-10-12 23:02:28.832', false, '2022-10-12 23:02:28.832', 0, '以太坊', '以太坊', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312290099204, '2022-10-12 23:02:28.832', false, '2022-10-12 23:02:28.832', 0, 'OpenGL', 'OpenGL', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312285904900, '2022-10-12 23:02:28.831', false, '2022-10-12 23:02:28.831', 0, 'Shiro', 'Shiro', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312290099201, '2022-10-12 23:02:28.832', false, '2022-10-12 23:02:28.832', 0, 'SAMSUNG', 'SAMSUNG', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312290099203, '2022-10-12 23:02:28.832', false, '2022-10-12 23:02:28.832', 0, 'Trello', 'Trello', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312285904902, '2022-10-12 23:02:28.831', false, '2022-10-12 23:02:28.831', 0, 'Surge', 'Surge', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312189435905, '2022-10-12 23:02:28.808', false, '2022-10-12 23:02:28.808', 0, 'MVC', 'MVC', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312327847936, '2022-10-12 23:02:28.841', false, '2022-10-12 23:02:28.841', 0, 'RESTful', 'RESTful', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312390762500, '2022-10-12 23:02:28.856', false, '2022-10-12 23:02:28.856', 0, 'LeakCanary', 'LeakCanary', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312348819462, '2022-10-12 23:02:28.846', false, '2022-10-12 23:02:28.846', 0, 'R', 'R', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312218796037, '2022-10-12 23:02:28.815', false, '2022-10-12 23:02:28.815', 0, 'Grunt', 'Grunt', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312285904899, '2022-10-12 23:02:28.831', false, '2022-10-12 23:02:28.831', 0, 'Rails', 'Rails', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312197824516, '2022-10-12 23:02:28.81', false, '2022-10-12 23:02:28.81', 0, 'Spark', 'Spark', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312231378945, '2022-10-12 23:02:28.818', false, '2022-10-12 23:02:28.818', 0, 'Babel', 'Babel', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312243961860, '2022-10-12 23:02:28.821', false, '2022-10-12 23:02:28.821', 0, '笔记', '笔记', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312231378944, '2022-10-12 23:02:28.818', false, '2022-10-12 23:02:28.818', 0, '容器', '容器', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312231378947, '2022-10-12 23:02:28.818', false, '2022-10-12 23:02:28.818', 0, 'PostCSS', 'PostCSS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312243961859, '2022-10-12 23:02:28.821', false, '2022-10-12 23:02:28.821', 0, 'CMS', 'CMS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312243961858, '2022-10-12 23:02:28.821', false, '2022-10-12 23:02:28.821', 0, 'OKHttp', 'OKHttp', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312369790981, '2022-10-12 23:02:28.851', false, '2022-10-12 23:02:28.851', 0, 'Elixir', 'Elixir', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312369790980, '2022-10-12 23:02:28.851', false, '2022-10-12 23:02:28.851', 0, 'ZeroMQ', 'ZeroMQ', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312369790983, '2022-10-12 23:02:28.851', false, '2022-10-12 23:02:28.851', 0, 'Apache Thrift', 'Apache Thrift', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312369790982, '2022-10-12 23:02:28.851', false, '2022-10-12 23:02:28.851', 0, 'scikit-learn', 'scikit-learn', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312113938434, '2022-10-12 23:02:28.79', false, '2022-10-12 23:02:28.79', 0, '腾讯', '腾讯', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312369790979, '2022-10-12 23:02:28.851', false, '2022-10-12 23:02:28.851', 0, 'FreeMarker', 'FreeMarker', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312369790978, '2022-10-12 23:02:28.851', false, '2022-10-12 23:02:28.851', 0, 'Apache Flume', 'Apache Flume', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312227184644, '2022-10-12 23:02:28.817', false, '2022-10-12 23:02:28.817', 0, '增长黑客', '增长黑客', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312327847941, '2022-10-12 23:02:28.841', false, '2022-10-12 23:02:28.841', 0, 'OpenStack', 'OpenStack', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312327847940, '2022-10-12 23:02:28.841', false, '2022-10-12 23:02:28.841', 0, '5G', '5G', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312189435906, '2022-10-12 23:02:28.808', false, '2022-10-12 23:02:28.808', 0, 'uni-app', 'uni-app', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312151687170, '2022-10-12 23:02:28.799', false, '2022-10-12 23:02:28.799', 0, '性能优化', '性能优化', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312151687171, '2022-10-12 23:02:28.799', false, '2022-10-12 23:02:28.799', 0, 'Windows', 'Windows', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312151687168, '2022-10-12 23:02:28.799', false, '2022-10-12 23:02:28.799', 0, 'VIM', 'VIM', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312134909954, '2022-10-12 23:02:28.795', false, '2022-10-12 23:02:28.795', 0, 'SCSS', 'SCSS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312101355521, '2022-10-12 23:02:28.787', false, '2022-10-12 23:02:28.787', 0, '微服务', '微服务', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312134909952, '2022-10-12 23:02:28.795', false, '2022-10-12 23:02:28.795', 0, 'LeetCode', 'LeetCode', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312134909953, '2022-10-12 23:02:28.795', false, '2022-10-12 23:02:28.795', 0, '数据结构', '数据结构', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312101355524, '2022-10-12 23:02:28.787', false, '2022-10-12 23:02:28.787', 0, '爬虫', '爬虫', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312134909956, '2022-10-12 23:02:28.795', false, '2022-10-12 23:02:28.795', 0, 'MyBatis', 'MyBatis', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312067801089, '2022-10-12 23:02:28.779', false, '2022-10-12 23:02:28.779', 0, 'Nginx', 'Nginx', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312118132740, '2022-10-12 23:02:28.791', false, '2022-10-12 23:02:28.791', 0, '运营', '运营', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312118132741, '2022-10-12 23:02:28.792', false, '2022-10-12 23:02:28.792', 0, 'JSON', 'JSON', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312340430854, '2022-10-12 23:02:28.844', false, '2022-10-12 23:02:28.844', 0, 'Qt', 'Qt', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312206213122, '2022-10-12 23:02:28.812', false, '2022-10-12 23:02:28.812', 0, '.NET', '.NET', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312340430851, '2022-10-12 23:02:28.844', false, '2022-10-12 23:02:28.844', 0, 'Google I/O', 'Google I/O', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312382373893, '2022-10-12 23:02:28.854', false, '2022-10-12 23:02:28.854', 0, 'NestJS', 'NestJS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312382373892, '2022-10-12 23:02:28.854', false, '2022-10-12 23:02:28.854', 0, 'CocoaPods', 'CocoaPods', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312126521348, '2022-10-12 23:02:28.793', false, '2022-10-12 23:02:28.793', 0, '浏览器', '浏览器', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312390762499, '2022-10-12 23:02:28.856', false, '2022-10-12 23:02:28.856', 0, 'Yeoman', 'Yeoman', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312172658689, '2022-10-12 23:02:28.804', false, '2022-10-12 23:02:28.804', 0, 'ECharts', 'ECharts', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312126521345, '2022-10-12 23:02:28.793', false, '2022-10-12 23:02:28.793', 0, 'Debug', 'Debug', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312126521344, '2022-10-12 23:02:28.793', false, '2022-10-12 23:02:28.793', 0, 'DOM', 'DOM', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312126521347, '2022-10-12 23:02:28.793', false, '2022-10-12 23:02:28.793', 0, 'Redux', 'Redux', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312298487812, '2022-10-12 23:02:28.834', false, '2022-10-12 23:02:28.834', 0, 'VirtualBox', 'VirtualBox', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312369790976, '2022-10-12 23:02:28.851', false, '2022-10-12 23:02:28.851', 0, 'Stylus', 'Stylus', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312147492865, '2022-10-12 23:02:28.798', false, '2022-10-12 23:02:28.798', 0, '区块链', '区块链', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312172658690, '2022-10-12 23:02:28.804', false, '2022-10-12 23:02:28.804', 0, 'Hadoop', 'Hadoop', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312319459334, '2022-10-12 23:02:28.839', false, '2022-10-12 23:02:28.839', 0, 'Workflow', 'Workflow', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312063606784, '2022-10-12 23:02:28.778', false, '2022-10-12 23:02:28.778', 0, 'ECMAScript 6', 'ECMAScript 6', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312139104260, '2022-10-12 23:02:28.796', false, '2022-10-12 23:02:28.796', 0, 'C', 'C', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312139104257, '2022-10-12 23:02:28.796', false, '2022-10-12 23:02:28.796', 0, 'Kotlin', 'Kotlin', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312139104256, '2022-10-12 23:02:28.796', false, '2022-10-12 23:02:28.796', 0, '配色', '配色', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312139104259, '2022-10-12 23:02:28.796', false, '2022-10-12 23:02:28.796', 0, 'Sketch', 'Sketch', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312344625155, '2022-10-12 23:02:28.845', false, '2022-10-12 23:02:28.845', 0, 'Apache Storm', 'Apache Storm', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312344625157, '2022-10-12 23:02:28.845', false, '2022-10-12 23:02:28.845', 0, 'PM2', 'PM2', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312336236547, '2022-10-12 23:02:28.843', false, '2022-10-12 23:02:28.843', 0, 'HotFix', 'HotFix', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312344625156, '2022-10-12 23:02:28.845', false, '2022-10-12 23:02:28.845', 0, 'Selenium', 'Selenium', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312181047299, '2022-10-12 23:02:28.806', false, '2022-10-12 23:02:28.806', 0, 'WebGL', 'WebGL', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312319459330, '2022-10-12 23:02:28.839', false, '2022-10-12 23:02:28.839', 0, 'Vonic', 'Vonic', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312319459331, '2022-10-12 23:02:28.839', false, '2022-10-12 23:02:28.839', 0, '360', '360', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312319459328, '2022-10-12 23:02:28.839', false, '2022-10-12 23:02:28.839', 0, 'Dagger', 'Dagger', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312319459329, '2022-10-12 23:02:28.839', false, '2022-10-12 23:02:28.839', 0, 'JMeter', 'JMeter', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312097161219, '2022-10-12 23:02:28.786', false, '2022-10-12 23:02:28.786', 0, '运维', '运维', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312202018817, '2022-10-12 23:02:28.811', false, '2022-10-12 23:02:28.811', 0, 'GitLab', 'GitLab', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312319459332, '2022-10-12 23:02:28.839', false, '2022-10-12 23:02:28.839', 0, 'gRPC', 'gRPC', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312319459333, '2022-10-12 23:02:28.839', false, '2022-10-12 23:02:28.839', 0, 'Gson', 'Gson', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312067801088, '2022-10-12 23:02:28.779', false, '2022-10-12 23:02:28.779', 0, '微信', '微信', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312067801091, '2022-10-12 23:02:28.779', false, '2022-10-12 23:02:28.779', 0, 'Google', 'Google', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312336236550, '2022-10-12 23:02:28.843', false, '2022-10-12 23:02:28.843', 0, 'Picasso', 'Picasso', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312373985285, '2022-10-12 23:02:28.852', false, '2022-10-12 23:02:28.852', 0, 'Composer', 'Composer', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312285904898, '2022-10-12 23:02:28.831', false, '2022-10-12 23:02:28.831', 0, 'Chart.js', 'Chart.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312235573250, '2022-10-12 23:02:28.819', false, '2022-10-12 23:02:28.819', 0, 'Backbone.js', 'Backbone.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312235573251, '2022-10-12 23:02:28.819', false, '2022-10-12 23:02:28.819', 0, '消息队列', '消息队列', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312235573248, '2022-10-12 23:02:28.819', false, '2022-10-12 23:02:28.819', 0, 'DNS', 'DNS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312218796034, '2022-10-12 23:02:28.815', false, '2022-10-12 23:02:28.815', 0, '如何当个好爸爸', '如何当个好爸爸', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312218796035, '2022-10-12 23:02:28.815', false, '2022-10-12 23:02:28.815', 0, '状态机', '状态机', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312218796032, '2022-10-12 23:02:28.815', false, '2022-10-12 23:02:28.815', 0, 'JetBrains', 'JetBrains', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312218796033, '2022-10-12 23:02:28.815', false, '2022-10-12 23:02:28.815', 0, 'ionic', 'ionic', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312168464385, '2022-10-12 23:02:28.803', false, '2022-10-12 23:02:28.803', 0, '大数据', '大数据', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312252350465, '2022-10-12 23:02:28.823', false, '2022-10-12 23:02:28.823', 0, 'ReactiveX', 'ReactiveX', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312185241602, '2022-10-12 23:02:28.807', false, '2022-10-12 23:02:28.807', 0, '比特币', '比特币', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312185241603, '2022-10-12 23:02:28.807', false, '2022-10-12 23:02:28.807', 0, 'NoSQL', 'NoSQL', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312185241600, '2022-10-12 23:02:28.807', false, '2022-10-12 23:02:28.807', 0, 'Webkit', 'Webkit', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312202018820, '2022-10-12 23:02:28.811', false, '2022-10-12 23:02:28.811', 0, 'Less', 'Less', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312202018821, '2022-10-12 23:02:28.811', false, '2022-10-12 23:02:28.811', 0, '掘金日报', '掘金日报', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312235573249, '2022-10-12 23:02:28.819', false, '2022-10-12 23:02:28.819', 0, 'Scala', 'Scala', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312185241604, '2022-10-12 23:02:28.808', false, '2022-10-12 23:02:28.808', 0, '编译器', '编译器', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312071995394, '2022-10-12 23:02:28.78', false, '2022-10-12 23:02:28.78', 0, '黑客', '黑客', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312336236545, '2022-10-12 23:02:28.843', false, '2022-10-12 23:02:28.843', 0, 'HTTP3', 'HTTP3', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312302682116, '2022-10-12 23:02:28.835', false, '2022-10-12 23:02:28.835', 0, 'Arduino', 'Arduino', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312302682117, '2022-10-12 23:02:28.835', false, '2022-10-12 23:02:28.835', 0, 'iTerm', 'iTerm', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312051023874, '2022-10-12 23:02:28.775', false, '2022-10-12 23:02:28.775', 0, 'Linux', 'Linux', 1, 2, false);
INSERT INTO public.article_tag VALUES (1580212312336236548, '2022-10-12 23:02:28.843', false, '2022-10-12 23:02:28.843', 0, 'Apache Log4j', 'Apache Log4j', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312315265027, '2022-10-12 23:02:28.838', false, '2022-10-12 23:02:28.838', 0, 'ARKit', 'ARKit', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312373985283, '2022-10-12 23:02:28.852', false, '2022-10-12 23:02:28.852', 0, 'Caffe', 'Caffe', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312197824515, '2022-10-12 23:02:28.81', false, '2022-10-12 23:02:28.81', 0, 'V2EX', 'V2EX', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312373985282, '2022-10-12 23:02:28.852', false, '2022-10-12 23:02:28.852', 0, 'Volley', 'Volley', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312214601733, '2022-10-12 23:02:28.815', false, '2022-10-12 23:02:28.815', 0, 'RocketMQ', 'RocketMQ', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312373985281, '2022-10-12 23:02:28.852', false, '2022-10-12 23:02:28.852', 0, 'Jest', 'Jest', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312390762496, '2022-10-12 23:02:28.856', false, '2022-10-12 23:02:28.856', 0, 'JSPatch', 'JSPatch', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312264933382, '2022-10-12 23:02:28.827', false, '2022-10-12 23:02:28.827', 0, '七牛云', '七牛云', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312147492864, '2022-10-12 23:02:28.798', false, '2022-10-12 23:02:28.798', 0, 'SVG', 'SVG', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312252350469, '2022-10-12 23:02:28.823', false, '2022-10-12 23:02:28.823', 0, 'Apple Watch', 'Apple Watch', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312252350468, '2022-10-12 23:02:28.823', false, '2022-10-12 23:02:28.823', 0, 'Underscore.js', 'Underscore.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312260739076, '2022-10-12 23:02:28.825', false, '2022-10-12 23:02:28.825', 0, 'Android Wear', 'Android Wear', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312252350464, '2022-10-12 23:02:28.823', false, '2022-10-12 23:02:28.823', 0, '逆向', '逆向', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312252350467, '2022-10-12 23:02:28.823', false, '2022-10-12 23:02:28.823', 0, '排序算法', '排序算法', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312252350466, '2022-10-12 23:02:28.823', false, '2022-10-12 23:02:28.823', 0, '音视频开发', '音视频开发', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312361402371, '2022-10-12 23:02:28.849', false, '2022-10-12 23:02:28.849', 0, 'Debian', 'Debian', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312357208067, '2022-10-12 23:02:28.848', false, '2022-10-12 23:02:28.848', 0, 'Firebase', 'Firebase', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312164270084, '2022-10-12 23:02:28.802', false, '2022-10-12 23:02:28.802', 0, 'Microsoft', 'Microsoft', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312164270081, '2022-10-12 23:02:28.802', false, '2022-10-12 23:02:28.802', 0, 'Express', 'Express', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312164270080, '2022-10-12 23:02:28.802', false, '2022-10-12 23:02:28.802', 0, 'Elasticsearch', 'Elasticsearch', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312164270083, '2022-10-12 23:02:28.802', false, '2022-10-12 23:02:28.802', 0, '响应式编程', '响应式编程', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312164270082, '2022-10-12 23:02:28.802', false, '2022-10-12 23:02:28.802', 0, 'Java EE', 'Java EE', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312327847938, '2022-10-12 23:02:28.841', false, '2022-10-12 23:02:28.841', 0, 'Curl', 'Curl', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312357208069, '2022-10-12 23:02:28.848', false, '2022-10-12 23:02:28.848', 0, 'DBA', 'DBA', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312357208071, '2022-10-12 23:02:28.848', false, '2022-10-12 23:02:28.848', 0, 'KVM', 'KVM', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312357208070, '2022-10-12 23:02:28.848', false, '2022-10-12 23:02:28.848', 0, 'OpenAI', 'OpenAI', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312357208065, '2022-10-12 23:02:28.848', false, '2022-10-12 23:02:28.848', 0, 'Logstash', 'Logstash', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312386568199, '2022-10-12 23:02:28.855', false, '2022-10-12 23:02:28.855', 0, 'Apache Mesos', 'Apache Mesos', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312160075778, '2022-10-12 23:02:28.801', false, '2022-10-12 23:02:28.801', 0, 'axios', 'axios', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312357208066, '2022-10-12 23:02:28.848', false, '2022-10-12 23:02:28.848', 0, 'Touch bar', 'Touch bar', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312390762503, '2022-10-12 23:02:28.856', false, '2022-10-12 23:02:28.856', 0, 'Swarm', 'Swarm', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312361402369, '2022-10-12 23:02:28.849', false, '2022-10-12 23:02:28.849', 0, 'Grafana', 'Grafana', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312361402368, '2022-10-12 23:02:28.849', false, '2022-10-12 23:02:28.849', 0, '边缘计算', '边缘计算', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312311070720, '2022-10-12 23:02:28.837', false, '2022-10-12 23:02:28.837', 0, 'Glide', 'Glide', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312361402370, '2022-10-12 23:02:28.849', false, '2022-10-12 23:02:28.849', 0, 'AndroidAnnotations', 'AndroidAnnotations', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312378179586, '2022-10-12 23:02:28.853', false, '2022-10-12 23:02:28.853', 0, 'ButterKnife', 'ButterKnife', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312365596676, '2022-10-12 23:02:28.85', false, '2022-10-12 23:02:28.85', 0, 'PyPy', 'PyPy', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312181047298, '2022-10-12 23:02:28.806', false, '2022-10-12 23:02:28.806', 0, '服务器', '服务器', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312382373890, '2022-10-12 23:02:28.854', false, '2022-10-12 23:02:28.854', 0, 'JCenter', 'JCenter', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312294293508, '2022-10-12 23:02:28.833', false, '2022-10-12 23:02:28.833', 0, 'Travis CI', 'Travis CI', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312348819459, '2022-10-12 23:02:28.846', false, '2022-10-12 23:02:28.846', 0, 'Tornado', 'Tornado', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312365596673, '2022-10-12 23:02:28.85', false, '2022-10-12 23:02:28.85', 0, '量子计算', '量子计算', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312269127680, '2022-10-12 23:02:28.827', false, '2022-10-12 23:02:28.827', 0, 'ThinkPHP', 'ThinkPHP', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312294293507, '2022-10-12 23:02:28.833', false, '2022-10-12 23:02:28.833', 0, 'Hibernate', 'Hibernate', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312294293506, '2022-10-12 23:02:28.833', false, '2022-10-12 23:02:28.833', 0, 'RxSwift', 'RxSwift', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312315265025, '2022-10-12 23:02:28.838', false, '2022-10-12 23:02:28.838', 0, 'HarmonyOS', 'HarmonyOS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312071995392, '2022-10-12 23:02:28.78', false, '2022-10-12 23:02:28.78', 0, '机器学习', '机器学习', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312264933381, '2022-10-12 23:02:28.826', false, '2022-10-12 23:02:28.826', 0, 'SaaS', 'SaaS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312315265026, '2022-10-12 23:02:28.838', false, '2022-10-12 23:02:28.838', 0, 'MATLAB', 'MATLAB', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312071995395, '2022-10-12 23:02:28.78', false, '2022-10-12 23:02:28.78', 0, 'jQuery', 'jQuery', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312264933380, '2022-10-12 23:02:28.826', false, '2022-10-12 23:02:28.826', 0, 'iView', 'iView', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312130715650, '2022-10-12 23:02:28.794', false, '2022-10-12 23:02:28.794', 0, 'SQL', 'SQL', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312130715651, '2022-10-12 23:02:28.794', false, '2022-10-12 23:02:28.794', 0, '掘金翻译计划', '掘金翻译计划', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312130715648, '2022-10-12 23:02:28.794', false, '2022-10-12 23:02:28.794', 0, 'Ubuntu', 'Ubuntu', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312130715649, '2022-10-12 23:02:28.794', false, '2022-10-12 23:02:28.794', 0, 'Eclipse', 'Eclipse', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312063606786, '2022-10-12 23:02:28.778', false, '2022-10-12 23:02:28.778', 0, '全栈', '全栈', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312063606787, '2022-10-12 23:02:28.778', false, '2022-10-12 23:02:28.778', 0, 'Redis', 'Redis', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312130715652, '2022-10-12 23:02:28.794', false, '2022-10-12 23:02:28.794', 0, '负载均衡', '负载均衡', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312063606785, '2022-10-12 23:02:28.778', false, '2022-10-12 23:02:28.778', 0, 'iOS', 'iOS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312097161216, '2022-10-12 23:02:28.786', false, '2022-10-12 23:02:28.786', 0, '深度学习', '深度学习', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312097161217, '2022-10-12 23:02:28.786', false, '2022-10-12 23:02:28.786', 0, '安全', '安全', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312155881472, '2022-10-12 23:02:28.8', false, '2022-10-12 23:02:28.8', 0, 'Element', 'Element', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312097161220, '2022-10-12 23:02:28.786', false, '2022-10-12 23:02:28.786', 0, '设计师', '设计师', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312113938436, '2022-10-12 23:02:28.79', false, '2022-10-12 23:02:28.79', 0, 'HTTPS', 'HTTPS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312302682112, '2022-10-12 23:02:28.835', false, '2022-10-12 23:02:28.835', 0, 'FFmpeg', 'FFmpeg', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312084578308, '2022-10-12 23:02:28.783', false, '2022-10-12 23:02:28.783', 0, 'Apple', 'Apple', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312092966913, '2022-10-12 23:02:28.785', false, '2022-10-12 23:02:28.785', 0, 'MongoDB', 'MongoDB', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312126521346, '2022-10-12 23:02:28.793', false, '2022-10-12 23:02:28.793', 0, '电子书', '电子书', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312084578305, '2022-10-12 23:02:28.783', false, '2022-10-12 23:02:28.783', 0, '产品经理', '产品经理', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312084578304, '2022-10-12 23:02:28.783', false, '2022-10-12 23:02:28.783', 0, 'Mac', 'Mac', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312084578307, '2022-10-12 23:02:28.783', false, '2022-10-12 23:02:28.783', 0, 'Vuex', 'Vuex', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312084578306, '2022-10-12 23:02:28.783', false, '2022-10-12 23:02:28.783', 0, 'Bootstrap', 'Bootstrap', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312353013767, '2022-10-12 23:02:28.847', false, '2022-10-12 23:02:28.847', 0, '华为', '华为', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312243961856, '2022-10-12 23:02:28.821', false, '2022-10-12 23:02:28.821', 0, 'Ant Design', 'Ant Design', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312109744131, '2022-10-12 23:02:28.789', false, '2022-10-12 23:02:28.789', 0, 'Xcode', 'Xcode', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312311070724, '2022-10-12 23:02:28.837', false, '2022-10-12 23:02:28.837', 0, 'Core ML', 'Core ML', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312378179584, '2022-10-12 23:02:28.853', false, '2022-10-12 23:02:28.853', 0, 'Immutable.js', 'Immutable.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312382373888, '2022-10-12 23:02:28.854', false, '2022-10-12 23:02:28.854', 0, 'Unreal Engine', 'Unreal Engine', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312105549825, '2022-10-12 23:02:28.788', false, '2022-10-12 23:02:28.788', 0, 'Material Design', 'Material Design', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312348819460, '2022-10-12 23:02:28.846', false, '2022-10-12 23:02:28.846', 0, '智能合约', '智能合约', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312277516292, '2022-10-12 23:02:28.829', false, '2022-10-12 23:02:28.829', 0, 'mpvue', 'mpvue', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312348819457, '2022-10-12 23:02:28.846', false, '2022-10-12 23:02:28.846', 0, 'Realm', 'Realm', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312277516289, '2022-10-12 23:02:28.829', false, '2022-10-12 23:02:28.829', 0, 'Android Jetpack', 'Android Jetpack', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312277516291, '2022-10-12 23:02:28.829', false, '2022-10-12 23:02:28.829', 0, 'XSS', 'XSS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312277516290, '2022-10-12 23:02:28.829', false, '2022-10-12 23:02:28.829', 0, 'AB测试', 'AB测试', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312348819458, '2022-10-12 23:02:28.846', false, '2022-10-12 23:02:28.846', 0, 'bpython', 'bpython', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312386568198, '2022-10-12 23:02:28.855', false, '2022-10-12 23:02:28.855', 0, 'PhoneGap', 'PhoneGap', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312298487810, '2022-10-12 23:02:28.834', false, '2022-10-12 23:02:28.834', 0, '强化学习', '强化学习', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312298487811, '2022-10-12 23:02:28.834', false, '2022-10-12 23:02:28.834', 0, 'Slack', 'Slack', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312269127685, '2022-10-12 23:02:28.827', false, '2022-10-12 23:02:28.827', 0, 'OpenCV', 'OpenCV', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312134909955, '2022-10-12 23:02:28.795', false, '2022-10-12 23:02:28.795', 0, 'maven', 'maven', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312298487814, '2022-10-12 23:02:28.834', false, '2022-10-12 23:02:28.834', 0, 'EventBus', 'EventBus', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312315265030, '2022-10-12 23:02:28.838', false, '2022-10-12 23:02:28.838', 0, '莆田', '莆田', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312269127681, '2022-10-12 23:02:28.827', false, '2022-10-12 23:02:28.827', 0, 'Ember.js', 'Ember.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312222990341, '2022-10-12 23:02:28.816', false, '2022-10-12 23:02:28.816', 0, '掘金技术征文', '掘金技术征文', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312222990340, '2022-10-12 23:02:28.816', false, '2022-10-12 23:02:28.816', 0, 'Oracle', 'Oracle', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312269127682, '2022-10-12 23:02:28.827', false, '2022-10-12 23:02:28.827', 0, 'Bower', 'Bower', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312336236549, '2022-10-12 23:02:28.843', false, '2022-10-12 23:02:28.843', 0, 'Elm', 'Elm', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312222990337, '2022-10-12 23:02:28.816', false, '2022-10-12 23:02:28.816', 0, '线下活动', '线下活动', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312373985284, '2022-10-12 23:02:28.852', false, '2022-10-12 23:02:28.852', 0, 'SciPy', 'SciPy', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312264933378, '2022-10-12 23:02:28.826', false, '2022-10-12 23:02:28.826', 0, 'CoffeeScript', 'CoffeeScript', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312185241601, '2022-10-12 23:02:28.807', false, '2022-10-12 23:02:28.807', 0, '投资', '投资', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312264933376, '2022-10-12 23:02:28.826', false, '2022-10-12 23:02:28.826', 0, 'Uber', 'Uber', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312264933377, '2022-10-12 23:02:28.826', false, '2022-10-12 23:02:28.826', 0, 'RxJS', 'RxJS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312197824514, '2022-10-12 23:02:28.81', false, '2022-10-12 23:02:28.81', 0, 'CentOS', 'CentOS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312214601730, '2022-10-12 23:02:28.814', false, '2022-10-12 23:02:28.814', 0, 'Ruby', 'Ruby', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312214601731, '2022-10-12 23:02:28.814', false, '2022-10-12 23:02:28.814', 0, 'Sea.js', 'Sea.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312214601728, '2022-10-12 23:02:28.814', false, '2022-10-12 23:02:28.814', 0, '网络协议', '网络协议', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312214601729, '2022-10-12 23:02:28.814', false, '2022-10-12 23:02:28.814', 0, 'Jenkins', 'Jenkins', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312248156163, '2022-10-12 23:02:28.822', false, '2022-10-12 23:02:28.822', 0, 'Medium', 'Medium', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312248156162, '2022-10-12 23:02:28.822', false, '2022-10-12 23:02:28.822', 0, 'Yarn', 'Yarn', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312214601732, '2022-10-12 23:02:28.814', false, '2022-10-12 23:02:28.814', 0, 'UML', 'UML', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312231378948, '2022-10-12 23:02:28.818', false, '2022-10-12 23:02:28.818', 0, 'ESLint', 'ESLint', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312231378949, '2022-10-12 23:02:28.818', false, '2022-10-12 23:02:28.818', 0, 'CDN', 'CDN', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312181047297, '2022-10-12 23:02:28.806', false, '2022-10-12 23:02:28.806', 0, 'APK', 'APK', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312332042241, '2022-10-12 23:02:28.842', false, '2022-10-12 23:02:28.842', 0, 'Axure', 'Axure', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312193630212, '2022-10-12 23:02:28.809', false, '2022-10-12 23:02:28.809', 0, 'three.js', 'three.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312181047300, '2022-10-12 23:02:28.806', false, '2022-10-12 23:02:28.806', 0, '机器人', '机器人', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312181047301, '2022-10-12 23:02:28.806', false, '2022-10-12 23:02:28.806', 0, 'Django', 'Django', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312332042245, '2022-10-12 23:02:28.842', false, '2022-10-12 23:02:28.842', 0, 'PhantomJS', 'PhantomJS', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312348819461, '2022-10-12 23:02:28.846', false, '2022-10-12 23:02:28.846', 0, '快应用', '快应用', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312365596677, '2022-10-12 23:02:28.85', false, '2022-10-12 23:02:28.85', 0, 'NativeScript', 'NativeScript', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312176852993, '2022-10-12 23:02:28.805', false, '2022-10-12 23:02:28.805', 0, 'Vite', 'Vite', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312176852992, '2022-10-12 23:02:28.805', false, '2022-10-12 23:02:28.805', 0, 'Tomcat', 'Tomcat', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312176852995, '2022-10-12 23:02:28.805', false, '2022-10-12 23:02:28.805', 0, '嵌入式', '嵌入式', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312176852994, '2022-10-12 23:02:28.805', false, '2022-10-12 23:02:28.805', 0, 'WebSocket', 'WebSocket', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312256544773, '2022-10-12 23:02:28.824', false, '2022-10-12 23:02:28.824', 0, 'Instagram', 'Instagram', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312256544772, '2022-10-12 23:02:28.824', false, '2022-10-12 23:02:28.824', 0, 'Web Components', 'Web Components', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312332042246, '2022-10-12 23:02:28.843', false, '2022-10-12 23:02:28.843', 0, 'SwiftUI', 'SwiftUI', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312109744130, '2022-10-12 23:02:28.789', false, '2022-10-12 23:02:28.789', 0, 'Visual Studio Code', 'Visual Studio Code', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312332042240, '2022-10-12 23:02:28.842', false, '2022-10-12 23:02:28.842', 0, 'Cython', 'Cython', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312332042243, '2022-10-12 23:02:28.842', false, '2022-10-12 23:02:28.842', 0, 'Fastjson', 'Fastjson', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312332042242, '2022-10-12 23:02:28.842', false, '2022-10-12 23:02:28.842', 0, 'Pixate', 'Pixate', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312394956801, '2022-10-12 23:02:28.857', false, '2022-10-12 23:02:28.857', 0, 'SDWebImage', 'SDWebImage', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312302682113, '2022-10-12 23:02:28.835', false, '2022-10-12 23:02:28.835', 0, 'Hexo', 'Hexo', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312390762501, '2022-10-12 23:02:28.856', false, '2022-10-12 23:02:28.856', 0, 'WebView', 'WebView', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312172658692, '2022-10-12 23:02:28.804', false, '2022-10-12 23:02:28.804', 0, '远程工作', '远程工作', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312302682114, '2022-10-12 23:02:28.835', false, '2022-10-12 23:02:28.835', 0, 'Solr', 'Solr', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312256544770, '2022-10-12 23:02:28.824', false, '2022-10-12 23:02:28.824', 0, '午夜话题', '午夜话题', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312281710594, '2022-10-12 23:02:28.83', false, '2022-10-12 23:02:28.83', 0, 'PyTorch', 'PyTorch', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312273321990, '2022-10-12 23:02:28.828', false, '2022-10-12 23:02:28.828', 0, 'Egg.js', 'Egg.js', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312390762498, '2022-10-12 23:02:28.856', false, '2022-10-12 23:02:28.856', 0, 'WebVR', 'WebVR', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312323653637, '2022-10-12 23:02:28.84', false, '2022-10-12 23:02:28.84', 0, '王者荣耀', '王者荣耀', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312323653636, '2022-10-12 23:02:28.84', false, '2022-10-12 23:02:28.84', 0, '播客', '播客', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312151687169, '2022-10-12 23:02:28.799', false, '2022-10-12 23:02:28.799', 0, 'Apache', 'Apache', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312323653635, '2022-10-12 23:02:28.84', false, '2022-10-12 23:02:28.84', 0, '数字货币', '数字货币', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312323653634, '2022-10-12 23:02:28.84', false, '2022-10-12 23:02:28.84', 0, 'Scrapy', 'Scrapy', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312378179588, '2022-10-12 23:02:28.853', false, '2022-10-12 23:02:28.853', 0, 'Project Lombok', 'Project Lombok', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312332042244, '2022-10-12 23:02:28.842', false, '2022-10-12 23:02:28.842', 0, 'pandas', 'pandas', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312386568197, '2022-10-12 23:02:28.855', false, '2022-10-12 23:02:28.855', 0, 'Apache Cassandra', 'Apache Cassandra', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312202018818, '2022-10-12 23:02:28.811', false, '2022-10-12 23:02:28.811', 0, 'Postman', 'Postman', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312386568196, '2022-10-12 23:02:28.855', false, '2022-10-12 23:02:28.855', 0, 'Vagrant', 'Vagrant', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312269127684, '2022-10-12 23:02:28.827', false, '2022-10-12 23:02:28.827', 0, 'WebP', 'WebP', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312353013765, '2022-10-12 23:02:28.847', false, '2022-10-12 23:02:28.847', 0, 'Linkedin', 'Linkedin', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312340430850, '2022-10-12 23:02:28.844', false, '2022-10-12 23:02:28.844', 0, 'CI/CD', 'CI/CD', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312386568193, '2022-10-12 23:02:28.855', false, '2022-10-12 23:02:28.855', 0, 'VisualVM', 'VisualVM', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312101355523, '2022-10-12 23:02:28.787', false, '2022-10-12 23:02:28.787', 0, '招聘', '招聘', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312311070723, '2022-10-12 23:02:28.837', false, '2022-10-12 23:02:28.837', 0, 'Memcached', 'Memcached', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312386568195, '2022-10-12 23:02:28.855', false, '2022-10-12 23:02:28.855', 0, 'Perl', 'Perl', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312365596672, '2022-10-12 23:02:28.85', false, '2022-10-12 23:02:28.85', 0, 'VuePress', 'VuePress', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312269127683, '2022-10-12 23:02:28.827', false, '2022-10-12 23:02:28.827', 0, 'Swagger', 'Swagger', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312059412484, '2022-10-12 23:02:28.778', false, '2022-10-12 23:02:28.778', 0, 'HTTP', 'HTTP', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312277516288, '2022-10-12 23:02:28.829', false, '2022-10-12 23:02:28.829', 0, 'HBase', 'HBase', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312059412481, '2022-10-12 23:02:28.777', false, '2022-10-12 23:02:28.777', 0, '人工智能', '人工智能', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312059412480, '2022-10-12 23:02:28.777', false, '2022-10-12 23:02:28.777', 0, 'MySQL', 'MySQL', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312059412483, '2022-10-12 23:02:28.777', false, '2022-10-12 23:02:28.777', 0, '产品', '产品', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312365596674, '2022-10-12 23:02:28.85', false, '2022-10-12 23:02:28.85', 0, 'Airbnb', 'Airbnb', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312353013762, '2022-10-12 23:02:28.847', false, '2022-10-12 23:02:28.847', 0, 'MobX', 'MobX', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312080384001, '2022-10-12 23:02:28.782', false, '2022-10-12 23:02:28.782', 0, 'React Native', 'React Native', NULL, NULL, false);
INSERT INTO public.article_tag VALUES (1580212312080384000, '2022-10-12 23:02:28.782', false, '2022-10-12 23:02:28.782', 0, 'Spring', 'Spring', NULL, NULL, false);


--
-- Data for Name: article_tag_ref; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.article_tag_ref VALUES (1598254235307212800, 2);
INSERT INTO public.article_tag_ref VALUES (1598254332015280128, 2);
INSERT INTO public.article_tag_ref VALUES (1598576125758406656, 1);
INSERT INTO public.article_tag_ref VALUES (1598951510023077888, 1);
INSERT INTO public.article_tag_ref VALUES (10, 1);
INSERT INTO public.article_tag_ref VALUES (10, 3);
INSERT INTO public.article_tag_ref VALUES (9, 4);
INSERT INTO public.article_tag_ref VALUES (9, 1580212312441094145);
INSERT INTO public.article_tag_ref VALUES (1598952212040515584, 2);
INSERT INTO public.article_tag_ref VALUES (1599428443726938112, 5);
INSERT INTO public.article_tag_ref VALUES (11, 3);
INSERT INTO public.article_tag_ref VALUES (11, 2);
INSERT INTO public.article_tag_ref VALUES (11, 1);
INSERT INTO public.article_tag_ref VALUES (15, 1);
INSERT INTO public.article_tag_ref VALUES (15, 2);
INSERT INTO public.article_tag_ref VALUES (15, 3);
INSERT INTO public.article_tag_ref VALUES (1599743283574079488, 1580212312109744128);
INSERT INTO public.article_tag_ref VALUES (1599374122381475840, 1580212312046829570);
INSERT INTO public.article_tag_ref VALUES (1599374122381475840, 1580212312042635265);
INSERT INTO public.article_tag_ref VALUES (91, 2);
INSERT INTO public.article_tag_ref VALUES (91, 3);
INSERT INTO public.article_tag_ref VALUES (93, 2);
INSERT INTO public.article_tag_ref VALUES (93, 3);
INSERT INTO public.article_tag_ref VALUES (93, 1);
INSERT INTO public.article_tag_ref VALUES (95, 3);
INSERT INTO public.article_tag_ref VALUES (95, 1);
INSERT INTO public.article_tag_ref VALUES (95, 2);
INSERT INTO public.article_tag_ref VALUES (97, 2);
INSERT INTO public.article_tag_ref VALUES (97, 3);
INSERT INTO public.article_tag_ref VALUES (97, 1);
INSERT INTO public.article_tag_ref VALUES (99, 3);
INSERT INTO public.article_tag_ref VALUES (99, 1);
INSERT INTO public.article_tag_ref VALUES (99, 2);
INSERT INTO public.article_tag_ref VALUES (1649248024339152896, 1580212312034246657);
INSERT INTO public.article_tag_ref VALUES (101, 1);
INSERT INTO public.article_tag_ref VALUES (101, 2);
INSERT INTO public.article_tag_ref VALUES (106, 1);
INSERT INTO public.article_tag_ref VALUES (106, 3);
INSERT INTO public.article_tag_ref VALUES (106, 2);
INSERT INTO public.article_tag_ref VALUES (108, 1);
INSERT INTO public.article_tag_ref VALUES (108, 2);
INSERT INTO public.article_tag_ref VALUES (108, 3);
INSERT INTO public.article_tag_ref VALUES (110, 2);
INSERT INTO public.article_tag_ref VALUES (110, 3);
INSERT INTO public.article_tag_ref VALUES (110, 1);
INSERT INTO public.article_tag_ref VALUES (112, 1);
INSERT INTO public.article_tag_ref VALUES (112, 2);
INSERT INTO public.article_tag_ref VALUES (112, 3);
INSERT INTO public.article_tag_ref VALUES (114, 1);
INSERT INTO public.article_tag_ref VALUES (114, 3);
INSERT INTO public.article_tag_ref VALUES (114, 2);
INSERT INTO public.article_tag_ref VALUES (18, 1);
INSERT INTO public.article_tag_ref VALUES (18, 2);
INSERT INTO public.article_tag_ref VALUES (18, 3);
INSERT INTO public.article_tag_ref VALUES (19, 1);
INSERT INTO public.article_tag_ref VALUES (19, 2);
INSERT INTO public.article_tag_ref VALUES (19, 3);
INSERT INTO public.article_tag_ref VALUES (20, 2);
INSERT INTO public.article_tag_ref VALUES (20, 1);
INSERT INTO public.article_tag_ref VALUES (21, 1);
INSERT INTO public.article_tag_ref VALUES (21, 2);
INSERT INTO public.article_tag_ref VALUES (22, 1);
INSERT INTO public.article_tag_ref VALUES (22, 2);
INSERT INTO public.article_tag_ref VALUES (22, 3);
INSERT INTO public.article_tag_ref VALUES (101, 4);
INSERT INTO public.article_tag_ref VALUES (21, 4);
INSERT INTO public.article_tag_ref VALUES (20, 4);
INSERT INTO public.article_tag_ref VALUES (91, 5);
INSERT INTO public.article_tag_ref VALUES (10, 4);
INSERT INTO public.article_tag_ref VALUES (1580605648092004352, 4);
INSERT INTO public.article_tag_ref VALUES (1580605648092004352, 3);
INSERT INTO public.article_tag_ref VALUES (1580605648092004352, 2);
INSERT INTO public.article_tag_ref VALUES (17, 1580212312034246657);
INSERT INTO public.article_tag_ref VALUES (17, 1580212312290099200);
INSERT INTO public.article_tag_ref VALUES (17, 5);
INSERT INTO public.article_tag_ref VALUES (1582307902671028224, 2);
INSERT INTO public.article_tag_ref VALUES (1582308065313554432, 2);
INSERT INTO public.article_tag_ref VALUES (13, 1580212312046829570);
INSERT INTO public.article_tag_ref VALUES (13, 1580212312046829569);
INSERT INTO public.article_tag_ref VALUES (13, 1580212312046829568);
INSERT INTO public.article_tag_ref VALUES (14, 3);
INSERT INTO public.article_tag_ref VALUES (14, 5);
INSERT INTO public.article_tag_ref VALUES (14, 2);
INSERT INTO public.article_tag_ref VALUES (1583860253252911104, 1);
INSERT INTO public.article_tag_ref VALUES (12, 1);
INSERT INTO public.article_tag_ref VALUES (12, 1580212312113938433);
INSERT INTO public.article_tag_ref VALUES (16, 3);
INSERT INTO public.article_tag_ref VALUES (16, 2);
INSERT INTO public.article_tag_ref VALUES (16, 1);
INSERT INTO public.article_tag_ref VALUES (1580788796385918976, 5);
INSERT INTO public.article_tag_ref VALUES (1580605959804289024, 5);
INSERT INTO public.article_tag_ref VALUES (1580605959804289024, 1580212312290099200);
INSERT INTO public.article_tag_ref VALUES (1580605959804289024, 1580212312176852993);
INSERT INTO public.article_tag_ref VALUES (1598253892754210816, 2);
INSERT INTO public.article_tag_ref VALUES (1598255716760551424, 1580212312051023873);
INSERT INTO public.article_tag_ref VALUES (1598256303619178496, 1580212312051023873);


--
-- Data for Name: channel; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.channel VALUES (1, '2022-09-02 21:55:56.903', false, '2022-09-02 21:55:56.903', 'http://www.itcast.cn/files/image/201912/20191231102611263.jpg', 'Java xxx', true, false, 'Java', 0, 3);
INSERT INTO public.channel VALUES (2, '2022-09-02 21:55:56.945', false, '2022-09-02 21:55:56.945', 'https://picx.zhimg.com/v2-839798432500b3aec901cba0efb93bf7_1440w.jpg?source=172ae18b', 'Rust xxx', true, false, 'Rust', 0, 3);
INSERT INTO public.channel VALUES (6, '2022-09-02 22:01:58.21', false, '2022-09-02 22:01:58.21', 'https://picx.zhimg.com/v2-839798432500b3aec901cba0efb93bf7_1440w.jpg?source=172ae18b', 'Rust xxx', true, false, 'Rust', 0, 6);
INSERT INTO public.channel VALUES (3, '2022-09-02 21:57:17.342', false, '2022-09-02 21:57:17.342', 'http://www.itcast.cn/files/image/201912/20191231102611263.jpg', 'Java xxx', true, false, 'go', 0, 4);
INSERT INTO public.channel VALUES (4, '2022-09-02 21:57:17.382', false, '2022-09-02 21:57:17.382', 'https://picx.zhimg.com/v2-839798432500b3aec901cba0efb93bf7_1440w.jpg?source=172ae18b', 'Rust xxx', true, false, 'js', 0, 3);
INSERT INTO public.channel VALUES (5, '2022-09-02 22:01:58.167', false, '2022-09-02 22:01:58.167', 'http://www.itcast.cn/files/image/201912/20191231102611263.jpg', 'Java xxx', true, false, 'Java', 0, 5);


--
-- Data for Name: channel_message; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.channel_message VALUES (1, '2022-09-05 18:38:36.427', false, '2022-09-05 18:38:36.427', 4, '123312', 0, 3);
INSERT INTO public.channel_message VALUES (2, '2022-09-05 18:43:04.264', false, '2022-09-05 18:43:04.264', 4, '123312', 0, 3);
INSERT INTO public.channel_message VALUES (3, '2022-09-05 18:43:23.793', false, '2022-09-05 18:43:23.793', 4, '123123312', 0, 3);
INSERT INTO public.channel_message VALUES (4, '2022-09-05 18:43:59.165', false, '2022-09-05 18:43:59.165', 4, '123123312', 0, 3);
INSERT INTO public.channel_message VALUES (5, '2022-09-05 18:44:37.141', false, '2022-09-05 18:44:37.141', 4, '123123312', 0, 3);
INSERT INTO public.channel_message VALUES (6, '2022-09-05 18:44:41.835', false, '2022-09-05 18:44:41.835', 4, '123123312', 0, 3);
INSERT INTO public.channel_message VALUES (7, '2022-09-05 18:45:17.761', false, '2022-09-05 18:45:17.761', 4, '123123312', 0, 3);
INSERT INTO public.channel_message VALUES (8, '2022-09-05 19:01:49.868', false, '2022-09-05 19:01:49.868', 4, '123123312', 0, 3);
INSERT INTO public.channel_message VALUES (9, '2022-09-05 19:02:57.122', false, '2022-09-05 19:02:57.122', 4, '123123312', 0, 3);
INSERT INTO public.channel_message VALUES (10, '2022-09-05 19:05:57.895', false, '2022-09-05 19:05:57.895', 4, '123123312', 0, 3);
INSERT INTO public.channel_message VALUES (11, '2022-09-05 19:06:52.419', false, '2022-09-05 19:06:52.419', 4, '123123312', 0, 3);
INSERT INTO public.channel_message VALUES (12, '2022-09-05 19:07:24.638', false, '2022-09-05 19:07:24.638', 4, '123123312', 0, 3);
INSERT INTO public.channel_message VALUES (13, '2022-09-05 19:07:45.497', false, '2022-09-05 19:07:45.497', 4, '123123312', 0, 3);
INSERT INTO public.channel_message VALUES (14, '2022-09-05 19:08:48.386', false, '2022-09-05 19:08:48.386', 4, 'a', 0, 3);
INSERT INTO public.channel_message VALUES (15, '2022-09-05 19:20:56.423', false, '2022-09-05 19:20:56.423', 4, 'a', 0, 3);


--
-- Data for Name: channel_user_ref; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.channel_user_ref VALUES (1, 3);
INSERT INTO public.channel_user_ref VALUES (1, 4);
INSERT INTO public.channel_user_ref VALUES (1, 5);
INSERT INTO public.channel_user_ref VALUES (2, 3);
INSERT INTO public.channel_user_ref VALUES (2, 4);
INSERT INTO public.channel_user_ref VALUES (3, 3);
INSERT INTO public.channel_user_ref VALUES (1, 6);


--
-- Data for Name: infinity; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.infinity VALUES (1602174038916988928, '2022-12-12 13:30:32.489', false, '2022-12-12 13:30:32.489', 0, 'Test3
Test1
', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1602174038854074368, 0, NULL, 4, 0, 3, NULL, NULL, 2);
INSERT INTO public.infinity VALUES (1602933571352264704, '2022-12-14 15:48:39.149', false, '2022-12-14 15:48:39.149', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1602338399681773568, NULL, NULL, 0, NULL, 1, 0, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1603313760120864768, '2022-12-15 16:59:23.217', false, '2022-12-15 16:59:23.217', 0, '1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1602338399681773568, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1598952212388642816, '2022-12-03 16:08:09.204', false, '2022-12-03 16:08:09.204', 0, '企业里大数据都是用什么数据库存储？
分享阿里大淘宝技术工程师的数据库存储思考。

工作中总是遇到数据存储相关的Bug工单，新需求开发设计中也多多少少会有数据模型设计和存储相关的问题。经过几次存储方案设计选型和讨论后发现需要有更全面的思考框架。

日常开发中常用的存储方案选型很多都是“拿来主义”的，凭借着经验、习惯选用，但对它们的细节特性或约束少有研究。
除了手边会用的存储方案，也应该关注市面上更合适的存储方案。
一定的技术预研和储备能够帮助未来更好的技术方案设计。
故写了这篇文章，抛出我的总结和思考，希望日后可以将一些更先进 (合适) 的技术引入业务开发中，助力业务发展。

', 'https://tva3.sinaimg.cn/large/005NWBIgly1gseoy4gzxqj31hc0u04qp.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1598952212040515584, 0, NULL, 3, 1, 3, NULL, NULL, 1);
INSERT INTO public.infinity VALUES (1602331714808446976, '2022-12-12 23:57:05.359', false, '2022-12-12 23:57:05.359', 0, 'test', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 2);
INSERT INTO public.infinity VALUES (1644869740616744960, '2023-04-09 09:08:01.04', false, '2023-04-09 09:08:01.04', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1632224773444468736, NULL, NULL, 0, NULL, 1, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1632222360327159808, '2023-03-05 11:31:50.623', false, '2023-03-05 11:31:50.623', 0, '免费使用GPT3.5-turbo 大家快来试试吧 https://freegpt.one/', 'http://qiniu.dwsy.link/ddl/7854851065f9407a9ce552f0a0b1dd23.png?imageMogr2', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.0.0', NULL, 15);
INSERT INTO public.infinity VALUES (1744016821310193664, '2024-01-07 23:23:07.123', false, '2024-01-07 23:23:07.123', 0, 'hahhaqweqwe', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1702.3', NULL, 1);
INSERT INTO public.infinity VALUES (1649246664621293568, '2023-04-21 11:00:21.051', false, '2023-04-21 11:00:21.051', 0, '123', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1632222360327159808, NULL, NULL, 0, NULL, 2, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1744016804520394752, '2024-01-07 23:23:03.141', false, '2024-01-07 23:23:03.141', 0, 'hahha', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1702.3', NULL, 0);
INSERT INTO public.infinity VALUES (1744016812632178688, '2024-01-07 23:23:05.054', false, '2024-01-07 23:23:05.054', 0, 'hahhaqweqwe', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1702.3', NULL, 0);
INSERT INTO public.infinity VALUES (1597530050087878656, '2022-11-29 17:56:59.271', false, '2022-11-29 17:56:59.271', 0, '```', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596089069811531776, 1597170473374842880, NULL, 0, 1597530022984286208, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1595711275726274560, '2022-11-24 17:29:49.673', false, '2022-11-24 17:29:49.673', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1595478107379204096, NULL, NULL, 0, NULL, 1, 0, 20, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 1595370887371030528, 0);
INSERT INTO public.infinity VALUES (1597505319750074368, '2022-11-29 16:18:43.099', false, '2022-11-29 16:18:43.099', 0, '123', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, 1597170473374842880, NULL, 0, 1597497663878594560, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597460468597784576, '2022-11-29 13:20:29.77', false, '2022-11-29 13:20:29.77', 0, 'test', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 3, NULL, 0, 1596524168273199104, 2, 1, 20, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1596427940109746176, '2022-11-26 16:57:35.776', false, '2022-11-26 16:57:35.776', 0, 'reply reply reply5', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597521197371752448, '2022-11-29 17:21:48.634', false, '2022-11-29 17:21:48.634', 0, 'xxx', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 3, NULL, 0, 1596524128330842112, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1598217557255389184, '2022-12-01 15:28:53.753', false, '2022-12-01 15:28:53.753', 0, 'refId🌅', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 6, 1598217499797618688, 0, 1596523889112907776, 2, 0, 6, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597521244926771200, '2022-11-29 17:21:59.957', false, '2022-11-29 17:21:59.957', 0, 'xxx', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 3, NULL, 0, 1596524128330842112, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1598217499797618688, '2022-12-01 15:28:40.069', false, '2022-12-01 15:28:40.069', 0, 'refIDtest🤣', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 3, NULL, 0, 1596523889112907776, 2, 0, 6, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1599414606428635136, '2022-12-04 22:45:32.536', false, '2022-12-04 22:45:32.536', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1599374122737991680, NULL, NULL, 0, NULL, 1, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1632224773444468736, '2023-03-05 11:41:25.916', false, '2023-03-05 11:41:25.916', 0, '每1k个token的价格为0.002美元，比现有的GPT-3.5模型便宜10倍！', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1632222360327159808, NULL, NULL, 0, NULL, 2, 1, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1596428034582249472, '2022-11-26 16:57:58.3', false, '2022-11-26 16:57:58.3', 0, 'reply reply reply12', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1603316787187810304, '2022-12-15 17:11:24.908', false, '2022-12-15 17:11:24.908', 0, '123', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1602338399681773568, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1599428444045705216, '2022-12-04 23:40:31.686', false, '2022-12-04 23:40:31.686', 0, 'Rem


Rem
誕生日	2月2日
年齢	17歳
身長	154cm
体重	53kg
名前の由来	Left
特技	料理・洗濯・掃除・裁縫
趣味	演劇鑑賞・詩文
CV	水瀬いのり
エミリアの暮らすロズワール邸でメイド頭を任される水色髪ショートが特徴の鬼族の少女。
一人称は「レム」。
姉のラムとは対照的に右目に前髪が掛かっている。
ラムと二人、広大な屋敷を維持する有能メイド。雑務全般を一手に担っており、屋敷の', 'http://qiniu.dwsy.link/ddl/45e6449f341a4f9fa49a882b9aa473a8.webp?imageslim', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1599428443726938112, 0, NULL, 3, 2, 3, NULL, NULL, 4);
INSERT INTO public.infinity VALUES (1596088461134135296, '2022-11-25 18:28:37.681', false, '2022-11-25 18:28:37.681', 0, 'web test3', 'http://qiniu.dwsy.link/ddl/68e105f23703457ea21693c03733ed2a.jpg?imageMogr2', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1595370887371030528, 1);
INSERT INTO public.infinity VALUES (1602933644597395456, '2022-12-14 15:48:56.596', false, '2022-12-14 15:48:56.596', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1602214729864970240, NULL, NULL, 0, NULL, 1, 0, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1602338399681773568, '2022-12-13 00:23:39.157', false, '2022-12-13 00:23:39.157', 0, '🤗', 'http://qiniu.dwsy.link/ddl/66da9447c99243f78f0b5fb482afb1d6.png?imageMogr2', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 2, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 69);
INSERT INTO public.infinity VALUES (1596427793640456192, '2022-11-26 16:57:00.855', false, '2022-11-26 16:57:00.855', 0, 'reply reply reply4', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1595478116006887424, NULL, NULL, 0, NULL, 2, 1, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597447597860061184, '2022-11-29 12:29:21.128', false, '2022-11-29 12:29:21.128', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597193142560358400, NULL, NULL, 0, NULL, 1, 0, 20, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1596427768214585344, '2022-11-26 16:56:54.793', false, '2022-11-26 16:56:54.793', 0, 'reply reply reply2', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1595478116006887424, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597514944608206848, '2022-11-29 16:56:57.845', false, '2022-11-29 16:56:57.845', 0, '123', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597522070105751552, '2022-11-29 17:25:16.696', false, '2022-11-29 17:25:16.696', 0, 'xxx', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 3, NULL, 0, 1596524128330842112, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1603322050477293568, '2022-12-15 17:32:19.795', false, '2022-12-15 17:32:19.795', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1602338399681773568, NULL, NULL, 0, NULL, 1, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1603322078889508864, '2022-12-15 17:32:26.548', false, '2022-12-15 17:32:26.548', 0, '123', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1602338399681773568, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1602173971833290752, '2022-12-12 13:30:16.495', false, '2022-12-12 13:30:16.495', 0, 'Test2
Test1
', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1602173971736821760, 0, NULL, 4, 0, 3, NULL, NULL, 2);
INSERT INTO public.infinity VALUES (1602227642994524160, '2022-12-12 17:03:32.731', false, '2022-12-12 17:03:32.731', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1602214729864970240, NULL, NULL, 0, NULL, 1, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1596524128330842112, '2022-11-26 23:19:48.835', false, '2022-11-26 23:19:48.835', 0, 'rreeppllyy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1632225194653253632, '2023-03-05 11:43:06.34', false, '2023-03-05 11:43:06.34', 0, '感谢分享。', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1632222360327159808, 3, NULL, 0, 1632224773444468736, 2, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597530168639881216, '2022-11-29 17:57:27.537', false, '2022-11-29 17:57:27.537', 0, '```', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596089069811531776, 1597170473374842880, NULL, 0, 1597529759732989952, 2, 0, 20, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597496641990950912, '2022-11-29 15:44:14.161', false, '2022-11-29 15:44:14.161', 0, '22', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597193136390537216, '2022-11-28 19:38:12.786', false, '2022-11-28 19:38:12.786', 0, 'reply user test😄', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 3, NULL, 0, 1596524168273199104, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1602173903021539328, '2022-12-12 13:30:00.11', false, '2022-12-12 13:30:00.11', 0, 'Test1
Test1
', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1602173902400782336, 0, NULL, 4, 0, 3, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597185232979623936, '2022-11-28 19:06:48.466', false, '2022-11-28 19:06:48.466', 0, 'replyl🤗', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596527206857703424, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597503206693273600, '2022-11-29 16:10:19.307', false, '2022-11-29 16:10:19.307', 0, '~~~', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, 20, NULL, 0, 1597435220368293888, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597522759192150016, '2022-11-29 17:28:00.986', false, '2022-11-29 17:28:00.986', 0, 'aaa', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 3, NULL, 0, 1596524128330842112, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597522941816340480, '2022-11-29 17:28:44.527', false, '2022-11-29 17:28:44.527', 0, '8', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 3, NULL, 0, 1596427983092973568, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1600105716696219648, '2022-12-06 20:31:46.044', false, '2022-12-06 20:31:46.044', 0, 'notify test2', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1599743284450689024, 4, NULL, 0, 1600105554603147264, 2, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597185096794767360, '2022-11-28 19:06:15.997', false, '2022-11-28 19:06:15.997', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596090564271407104, NULL, NULL, 0, NULL, 1, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597503183180005376, '2022-11-29 16:10:13.702', false, '2022-11-29 16:10:13.702', 0, '!!!', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, 20, NULL, 0, 1597435220368293888, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597530138277314560, '2022-11-29 17:57:20.297', false, '2022-11-29 17:57:20.297', 0, '```', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596089069811531776, 1597170473374842880, NULL, 0, 1597530022984286208, 2, 0, 20, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1596089069811531776, '2022-11-25 18:31:02.801', false, '2022-11-25 18:31:02.801', 0, 'tttt', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1ggg4o2sdjaj34j235dx6q.jpg', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 1);
INSERT INTO public.infinity VALUES (1597498310032097280, '2022-11-29 15:50:51.852', false, '2022-11-29 15:50:51.852', 0, 'aa', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, 20, NULL, 0, 1597435220368293888, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1595715208637054976, '2022-11-24 17:45:27.351', false, '2022-11-24 17:45:27.351', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1595478116006887424, NULL, NULL, 0, NULL, 1, 0, 20, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 1595370887371030528, 0);
INSERT INTO public.infinity VALUES (1600361709422247936, '2022-12-07 13:28:59.482', false, '2022-12-07 13:28:59.482', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1599743284450689024, NULL, NULL, 0, NULL, 1, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 4);
INSERT INTO public.infinity VALUES (1603323623056080896, '2022-12-15 17:38:34.707', false, '2022-12-15 17:38:34.707', 0, '1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1602338399681773568, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1596427755111579648, '2022-11-26 16:56:51.686', false, '2022-11-26 16:56:51.686', 0, 'reply reply reply1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1595478116006887424, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1596427903170510848, '2022-11-26 16:57:26.969', false, '2022-11-26 16:57:26.969', 0, 'reply reply reply3', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1600112055413637120, '2022-12-06 20:56:57.312', false, '2022-12-06 20:56:57.312', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1599743284450689024, NULL, NULL, 0, NULL, 1, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597185025919418368, '2022-11-28 19:05:59.113', false, '2022-11-28 19:05:59.113', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596428034582249472, NULL, NULL, 0, NULL, 1, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597508573707894784, '2022-11-29 16:31:38.903', false, '2022-11-29 16:31:38.903', 0, '🤗', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, 1597170473374842880, NULL, 0, 1597503206693273600, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597534673687281664, '2022-11-29 18:15:21.623', false, '2022-11-29 18:15:21.623', 0, '  <v-btn v-if="showLoadMore(tweet.id)"
         :loading="infinityStatusStore.commentDataList[index].loadMoreState"
         :disabled="infinityStatusStore.commentDataList[index].loadMoreState"
         @click="loadMoreComment(index)"
         class="ml-16"
  >
    加载更多...
  </v-btn>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 1597170473374842880, NULL, 0, 1596524128330842112, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597529190477856768, '2022-11-29 17:53:34.325', false, '2022-11-29 17:53:34.325', 0, 'qwe', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596089069811531776, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597529759732989952, '2022-11-29 17:55:50.045', false, '2022-11-29 17:55:50.045', 0, 'qwe', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596089069811531776, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1599423097969049600, '2022-12-04 23:19:17.075', false, '2022-12-04 23:19:17.075', 0, '', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4g7ceikwrj30hn0p0tb9.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1599374122737991680, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1599374122737991680, '2022-12-04 20:04:40.476', false, '2022-12-04 20:04:40.476', 0, '一行代码，让网页变为黑白配色
背景
让网页变为黑白配色，是个常见的诉求。而且往往是突如其来的诉求，是无法预知的。当发生这样的需求时，我们需要迅速完成变更发布。
2022年12月1日，掘金首页已经变成了黑白配色。
我的小网站首页 game.hullqin.cn 也变成了黑白配色。
一行代码
这一行代码是个CSS代码：
filter: grayscale(1)
复制代码
为了使整个网页生效，你可以把它放在  标签的样式里。直接写到', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1599374122381475840, 0, NULL, 3, 2, 3, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597494589432791040, '2022-11-29 15:36:04.792', false, '2022-11-29 15:36:04.792', 0, '11', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1596524168273199104, '2022-11-26 23:19:58.358', false, '2022-11-26 23:19:58.358', 0, 'rreeppllyy', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 1, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1600106831911321600, '2022-12-06 20:36:11.932', false, '2022-12-06 20:36:11.932', 0, 'test3', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1599743284450689024, 4, 1600105716696219648, 0, 1600105554603147264, 2, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1595706341769347072, '2022-11-24 17:10:13.426', false, '2022-11-24 17:10:13.426', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1595478116006887424, NULL, NULL, 0, NULL, 1, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', 1595370887371030528, 0);
INSERT INTO public.infinity VALUES (1602214729864970240, '2022-12-12 16:12:13.99', false, '2022-12-12 16:12:13.99', 0, 'test topic😂', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 24);
INSERT INTO public.infinity VALUES (1595485629309779968, '2022-11-24 02:33:11.393', false, '2022-11-24 02:33:11.393', 0, 'reply reply reply', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1595478116006887424, NULL, NULL, 0, NULL, 2, 1, 3, NULL, 1595370887371030528, 0);
INSERT INTO public.infinity VALUES (1600410018593636352, '2022-12-07 16:40:57.27', false, '2022-12-07 16:40:57.27', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597497687861624832, NULL, NULL, 0, NULL, 1, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1600410009294864384, '2022-12-07 16:40:55.053', false, '2022-12-07 16:40:55.053', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597435237271339008, NULL, NULL, 0, NULL, 1, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1600410002403622912, '2022-12-07 16:40:53.41', false, '2022-12-07 16:40:53.41', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597435220368293888, NULL, NULL, 0, NULL, 1, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597497977109217280, '2022-11-29 15:49:32.477', false, '2022-11-29 15:49:32.477', 0, '44', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, 20, NULL, 0, 1597435220368293888, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1595478120742256640, '2022-11-24 02:03:21.192', false, '2022-11-24 02:03:21.192', 0, '4Test content 1595370887371030528', 'https://tvax2.sinaimg.cn/large/005NWBIgly1ggg4o2sdjaj34j235dx6q.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h6ffm4ez6bj30fo0fogra.jpg', 'https://tva3.sinaimg.cn/large/005NWBIgly1h6muhj1s1yj30xc0rl4qp.jpg', 'https://tva2.sinaimg.cn/large/005NWBIgly1h520u4ty6kj31hc0u0nj1.jpg', 'https://tva2.sinaimg.cn/large/005NWBIgly1h520u4ty6kj31hc0u0nj1.jpg', 'https://tva2.sinaimg.cn/large/005NWBIgly1h520u4ty6kj31hc0u0nj1.jpg', 'https://tva2.sinaimg.cn/large/005NWBIgly1h520u4ty6kj31hc0u0nj1.jpg', NULL, NULL, NULL, 0, NULL, 0, 0, 3, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597514990640693248, '2022-11-29 16:57:08.819', false, '2022-11-29 16:57:08.819', 0, '222', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, 1597170473374842880, NULL, 0, 1597497663878594560, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1600397234908692480, '2022-12-07 15:50:09.402', false, '2022-12-07 15:50:09.402', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 1, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597523258851196928, '2022-11-29 17:30:00.115', false, '2022-11-29 17:30:00.115', 0, 'vvv', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 1597170473374842880, NULL, 0, 1596524128330842112, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1600409008756228096, '2022-12-07 16:36:56.506', false, '2022-12-07 16:36:56.506', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597435188462223360, NULL, NULL, 0, NULL, 1, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597185043166396416, '2022-11-28 19:06:03.211', false, '2022-11-28 19:06:03.211', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 1, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1595478107379204096, '2022-11-24 02:03:18.021', false, '2022-11-24 02:03:18.021', 0, '1Test content 1595370887371030528', 'https://tvax2.sinaimg.cn/large/005NWBIgly1ggg4o2sdjaj34j235dx6q.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 2, 3, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1596427954613649408, '2022-11-26 16:57:39.234', false, '2022-11-26 16:57:39.234', 0, 'reply reply reply6', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1596428010284646400, '2022-11-26 16:57:52.507', false, '2022-11-26 16:57:52.507', 0, 'reply reply reply10', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597447546148487168, '2022-11-29 12:29:08.799', false, '2022-11-29 12:29:08.799', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597187179388338176, NULL, NULL, 0, NULL, 1, 0, 20, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597497687861624832, '2022-11-29 15:48:23.515', false, '2022-11-29 15:48:23.515', 0, '22', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, 20, NULL, 0, 1597435220368293888, 2, 1, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1596523889112907776, '2022-11-26 23:18:51.801', false, '2022-11-26 23:18:51.801', 0, 're', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 1, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1600105554603147264, '2022-12-06 20:31:07.399', false, '2022-12-06 20:31:07.399', 0, 'notify test1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1599743284450689024, NULL, NULL, 0, NULL, 2, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1596427983092973568, '2022-11-26 16:57:46.024', false, '2022-11-26 16:57:46.024', 0, 'reply reply reply8', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597530022984286208, '2022-11-29 17:56:52.81', false, '2022-11-29 17:56:52.81', 0, '```', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596089069811531776, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597497168950722560, '2022-11-29 15:46:19.797', false, '2022-11-29 15:46:19.797', 0, '33', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1600410013040377856, '2022-12-07 16:40:55.946', false, '2022-12-07 16:40:55.946', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597494620642607104, NULL, NULL, 0, NULL, 1, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597547420802088960, '2022-11-29 19:06:00.773', false, '2022-11-29 19:06:00.773', 0, '101112', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597547342557347840, 1597170473374842880, NULL, 0, 1597547380503216128, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1603324676124180480, '2022-12-15 17:42:45.794', false, '2022-12-15 17:42:45.794', 0, '2', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1602338399681773568, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597434518057254912, '2022-11-29 11:37:22.677', false, '2022-11-29 11:37:22.677', 0, 'TransitionGroup test', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 2, 20, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 9);
INSERT INTO public.infinity VALUES (1595478125087555584, '2022-11-24 02:03:22.228', false, '2022-11-24 02:03:22.228', 0, '5Test content 1595370887371030528', 'https://tvax2.sinaimg.cn/large/005NWBIgly1ggg4o2sdjaj34j235dx6q.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h6ffm4ez6bj30fo0fogra.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 1, 3, NULL, NULL, 1);
INSERT INTO public.infinity VALUES (1603330006895820800, '2022-12-15 18:03:56.732', false, '2022-12-15 18:03:56.732', 0, '4', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1602338399681773568, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1603330152295563264, '2022-12-15 18:04:31.398', false, '2022-12-15 18:04:31.398', 0, '😅', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 5);
INSERT INTO public.infinity VALUES (1596086737266802688, '2022-11-25 18:21:46.679', false, '2022-11-25 18:21:46.679', 0, '  if (infinity != null) {
    infinityStore.InfinityDataList.unshift(infinity)
  }', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1ggg4o2sdjaj34j235dx6q.jpg', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1595370887371030528, 0);
INSERT INTO public.infinity VALUES (1597435220368293888, '2022-11-29 11:40:10.104', false, '2022-11-29 11:40:10.104', 0, 'TransitionGroup', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, NULL, NULL, 0, NULL, 2, 1, 20, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597524686156070912, '2022-11-29 17:35:40.41', false, '2022-11-29 17:35:40.41', 0, 'bb', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 1597170473374842880, NULL, 0, 1596524128330842112, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1595478118653493248, '2022-11-24 02:03:20.694', false, '2022-11-24 02:03:20.694', 0, '3Test content 1595370887371030528', 'https://tvax2.sinaimg.cn/large/005NWBIgly1ggg4o2sdjaj34j235dx6q.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h6ffm4ez6bj30fo0fogra.jpg', 'https://tva3.sinaimg.cn/large/005NWBIgly1h6muhj1s1yj30xc0rl4qp.jpg', 'https://tva2.sinaimg.cn/large/005NWBIgly1h520u4ty6kj31hc0u0nj1.jpg', 'https://tva2.sinaimg.cn/large/005NWBIgly1h520u4ty6kj31hc0u0nj1.jpg', 'https://tva2.sinaimg.cn/large/005NWBIgly1h520u4ty6kj31hc0u0nj1.jpg', 'https://tva2.sinaimg.cn/large/005NWBIgly1h520u4ty6kj31hc0u0nj1.jpg', NULL, NULL, NULL, 0, NULL, 0, 0, 3, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1600519050331422720, '2022-12-07 23:54:12.462', false, '2022-12-07 23:54:12.462', 0, '123
123
', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1600519049484173312, 0, NULL, 4, 0, 3, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1600395320649318400, '2022-12-07 15:42:33.007', false, '2022-12-07 15:42:33.007', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596527206857703424, NULL, NULL, 0, NULL, 1, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597187179388338176, '2022-11-28 19:14:32.526', false, '2022-11-28 19:14:32.526', 0, 'reply user test😄', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 3, NULL, 0, 1596524168273199104, 2, 1, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1600111597399834624, '2022-12-06 20:55:08.114', false, '2022-12-06 20:55:08.114', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1599428444045705216, NULL, NULL, 0, NULL, 1, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1600395317268709376, '2022-12-07 15:42:32.201', false, '2022-12-07 15:42:32.201', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, NULL, NULL, 0, NULL, 1, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597435188462223360, '2022-11-29 11:40:02.497', false, '2022-11-29 11:40:02.497', 0, 'TransitionGroup test', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, NULL, NULL, 0, NULL, 2, 1, 20, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597497663878594560, '2022-11-29 15:48:17.797', false, '2022-11-29 15:48:17.797', 0, '66', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597529569236090880, '2022-11-29 17:55:04.627', false, '2022-11-29 17:55:04.627', 0, 'asd', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596089069811531776, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597447688608022528, '2022-11-29 12:29:42.764', false, '2022-11-29 12:29:42.764', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 1, 0, 20, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1595713255127384064, '2022-11-24 17:37:41.598', false, '2022-11-24 17:37:41.598', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1595478125087555584, NULL, NULL, 0, NULL, 1, 0, 20, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 1595370887371030528, 0);
INSERT INTO public.infinity VALUES (1597547396953276416, '2022-11-29 19:05:55.086', false, '2022-11-29 19:05:55.086', 0, '789', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597547342557347840, 1597170473374842880, NULL, 0, 1597547380503216128, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1596427872086523904, '2022-11-26 16:57:19.558', false, '2022-11-26 16:57:19.558', 0, 'reply reply reply0', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597528113460281344, '2022-11-29 17:49:17.543', false, '2022-11-29 17:49:17.543', 0, '123', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596089069811531776, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1596463575201742848, '2022-11-26 19:19:11.859', false, '2022-11-26 19:19:11.859', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596428034582249472, NULL, NULL, 0, NULL, 1, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597193142560358400, '2022-11-28 19:38:14.257', false, '2022-11-28 19:38:14.257', 0, 'reply user test😄', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 3, NULL, 0, 1596524168273199104, 2, 1, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1596427881674702848, '2022-11-26 16:57:21.844', false, '2022-11-26 16:57:21.844', 0, 'reply reply reply1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597185038976286720, '2022-11-28 19:06:02.213', false, '2022-11-28 19:06:02.213', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596524168273199104, NULL, NULL, 0, NULL, 1, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1599743284450689024, '2022-12-05 20:31:35.487', false, '2022-12-05 20:31:35.487', 0, '"Markdown语法介绍"
"README
该文件用来测试和展示书写README的各种markdown语法。GitHub的markdown语法在标准的markdown语法基础上做了扩充，称之为GitHub Flavored Markdown。简称GFM，GFM在GitHub上有广泛应用，除了README文件外，issues和wiki均支持markdown语法。
横线
***、—、___可以显示横线效果
标题
一级标题
二级标', 'https://tva2.sinaimg.cn/large/005NWBIgly1h8u74pd5orj30rs0dwt8z.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1599743283574079488, 0, NULL, 3, 2, 3, NULL, NULL, 7);
INSERT INTO public.infinity VALUES (1596090564271407104, '2022-11-25 18:36:59.108', false, '2022-11-25 18:36:59.108', 0, 'send test xxx', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1ggg4o2sdjaj34j235dx6q.jpg', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 2);
INSERT INTO public.infinity VALUES (1602950872046764032, '2022-12-14 16:57:23.94', false, '2022-12-14 16:57:23.94', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1595485629309779968, NULL, NULL, 0, NULL, 1, 0, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597547342557347840, '2022-11-29 19:05:42.117', false, '2022-11-29 19:05:42.117', 0, '123', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1596527206857703424, '2022-11-26 23:32:02.813', false, '2022-11-26 23:32:02.813', 0, 'send 1', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 1, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597206001952489472, '2022-11-28 20:29:20.175', false, '2022-11-28 20:29:20.175', 0, 'reply reply reply0reply reply reply0reply reply reply0', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 3, NULL, 0, 1596427872086523904, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1602951152930914304, '2022-12-14 16:58:30.908', false, '2022-12-14 16:58:30.908', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1595478116006887424, NULL, NULL, 0, NULL, 1, 0, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1602951157842444288, '2022-12-14 16:58:32.08', false, '2022-12-14 16:58:32.08', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596427793640456192, NULL, NULL, 0, NULL, 1, 0, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597506229322645504, '2022-11-29 16:22:19.958', false, '2022-11-29 16:22:19.958', 0, '312', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597504203972935680, '2022-11-29 16:14:17.078', false, '2022-11-29 16:14:17.078', 0, 'bb', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, 1597170473374842880, NULL, 0, 1597498310032097280, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597530190181826560, '2022-11-29 17:57:32.672', false, '2022-11-29 17:57:32.672', 0, '```', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596089069811531776, 20, NULL, 0, 1597530022984286208, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597514762319560704, '2022-11-29 16:56:14.383', false, '2022-11-29 16:56:14.383', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, NULL, NULL, 0, NULL, 1, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1599415220025950208, '2022-12-04 22:47:58.835', false, '2022-12-04 22:47:58.835', 0, '🤣', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1599374122737991680, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597497575034847232, '2022-11-29 15:47:56.615', false, '2022-11-29 15:47:56.615', 0, '55', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1600086453906309120, '2022-12-06 19:15:13.453', false, '2022-12-06 19:15:13.453', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1599428444045705216, NULL, NULL, 0, NULL, 1, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1596427780629725184, '2022-11-26 16:56:57.753', false, '2022-11-26 16:56:57.753', 0, 'reply reply reply3', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1595478116006887424, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1596520720781803520, '2022-11-26 23:06:16.427', false, '2022-11-26 23:06:16.427', 0, 'reply reply reply10 reply reply reply10', 'http://qiniu.dwsy.link/ddl/4c48a35168ef41fd993ec57953797a97.png?imageMogr2', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 3, NULL, 0, 1596428010284646400, 2, 0, 3, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1596090494029398016, '2022-11-25 18:36:42.361', false, '2022-11-25 18:36:42.361', 0, 'tttt', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1ggg4o2sdjaj34j235dx6q.jpg', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597502954644963328, '2022-11-29 16:09:19.214', false, '2022-11-29 16:09:19.214', 0, '!!!', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, 1597170473374842880, NULL, 0, 1597498310032097280, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1598959827336298496, '2022-12-03 16:38:24.75', false, '2022-12-03 16:38:24.75', 0, '有哪些值得阅读学习、代码优雅的小型 Rust 项目？
有哪些值得阅读学习、代码优雅的小型 Rust 项目？
', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1598959826694569984, 0, NULL, 4, 1, 3, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597185031309099008, '2022-11-28 19:06:00.384', false, '2022-11-28 19:06:00.384', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596428020640382976, NULL, NULL, 0, NULL, 1, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597547380503216128, '2022-11-29 19:05:51.164', false, '2022-11-29 19:05:51.164', 0, '456', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597547342557347840, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1598217871995961344, '2022-12-01 15:30:08.794', false, '2022-12-01 15:30:08.794', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596523889112907776, NULL, NULL, 0, NULL, 1, 0, 6, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597469767923400704, '2022-11-29 13:57:26.883', false, '2022-11-29 13:57:26.883', 0, 'tt😂', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 20, NULL, 0, 1597460468597784576, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597498180751065088, '2022-11-29 15:50:21.029', false, '2022-11-29 15:50:21.029', 0, '33', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, 20, NULL, 0, 1597435220368293888, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597435237271339008, '2022-11-29 11:40:14.134', false, '2022-11-29 11:40:14.134', 0, 'TransitionGroup', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, 20, NULL, 0, 1597435220368293888, 2, 1, 20, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597494620642607104, '2022-11-29 15:36:12.233', false, '2022-11-29 15:36:12.233', 0, '11', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, 20, NULL, 0, 1597435220368293888, 2, 1, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1600396006862618624, '2022-12-07 15:45:16.613', false, '2022-12-07 15:45:16.613', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1598959827336298496, NULL, NULL, 0, NULL, 1, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1600395991347888128, '2022-12-07 15:45:12.914', false, '2022-12-07 15:45:12.914', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1599374122737991680, NULL, NULL, 0, NULL, 1, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597205999104557056, '2022-11-28 20:29:19.527', false, '2022-11-28 20:29:19.527', 0, 'reply reply reply0reply reply reply0reply reply reply0', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 3, NULL, 0, 1596427872086523904, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597466385544380416, '2022-11-29 13:44:00.517', false, '2022-11-29 13:44:00.517', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597460468597784576, NULL, NULL, 0, NULL, 1, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1596085373866344448, '2022-11-25 18:16:21.638', false, '2022-11-25 18:16:21.638', 0, 'web test1', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1ggg4o2sdjaj34j235dx6q.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1595370887371030528, 0);
INSERT INTO public.infinity VALUES (1600397241992871936, '2022-12-07 15:50:11.091', false, '2022-12-07 15:50:11.091', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596090564271407104, NULL, NULL, 0, NULL, 1, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597528204719947776, '2022-11-29 17:49:39.301', false, '2022-11-29 17:49:39.301', 0, '312', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596089069811531776, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1597534660995317760, '2022-11-29 18:15:18.597', false, '2022-11-29 18:15:18.597', 0, '  <v-btn v-if="showLoadMore(tweet.id)"
         :loading="infinityStatusStore.commentDataList[index].loadMoreState"
         :disabled="infinityStatusStore.commentDataList[index].loadMoreState"
         @click="loadMoreComment(index)"
         class="ml-16"
  >
    加载更多...
  </v-btn>', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 1597170473374842880, NULL, 0, 1596524128330842112, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597526411541741568, '2022-11-29 17:42:31.774', false, '2022-11-29 17:42:31.774', 0, 'bb', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 1597170473374842880, NULL, 0, 1596524128330842112, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1597504981588508672, '2022-11-29 16:17:22.475', false, '2022-11-29 16:17:22.475', 0, '~~~~', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, 1597170473374842880, NULL, 0, 1597503206693273600, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1600397198757986304, '2022-12-07 15:50:00.783', false, '2022-12-07 15:50:00.783', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1598952212388642816, NULL, NULL, 0, NULL, 1, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1602174123360911360, '2022-12-12 13:30:52.622', false, '2022-12-12 13:30:52.622', 0, 'Test4
Test4
', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1602174123243470848, 0, NULL, 4, 0, 3, NULL, NULL, 1);
INSERT INTO public.infinity VALUES (1595478116006887424, '2022-11-24 02:03:20.064', false, '2022-11-24 02:03:20.064', 0, '2Test content 1595370887371030528', 'https://tvax2.sinaimg.cn/large/005NWBIgly1ggg4o2sdjaj34j235dx6q.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', NULL, 'https://tvax2.sinaimg.cn/large/005NWBIgly1h6ffm4ez6bj30fo0fogra.jpg', 'https://tva3.sinaimg.cn/large/005NWBIgly1h6muhj1s1yj30xc0rl4qp.jpg', 'https://tva2.sinaimg.cn/large/005NWBIgly1h520u4ty6kj31hc0u0nj1.jpg', 'https://tva2.sinaimg.cn/large/005NWBIgly1h520u4ty6kj31hc0u0nj1.jpg', 'https://tva2.sinaimg.cn/large/005NWBIgly1h520u4ty6kj31hc0u0nj1.jpg', 'https://tva2.sinaimg.cn/large/005NWBIgly1h520u4ty6kj31hc0u0nj1.jpg', NULL, NULL, NULL, 0, NULL, 0, 3, 3, NULL, NULL, 7);
INSERT INTO public.infinity VALUES (1596086875150352384, '2022-11-25 18:22:19.553', false, '2022-11-25 18:22:19.553', 0, '123', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1ggg4o2sdjaj34j235dx6q.jpg', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1595370887371030528, 1);
INSERT INTO public.infinity VALUES (1596427997248749568, '2022-11-26 16:57:49.399', false, '2022-11-26 16:57:49.399', 0, 'reply reply reply9', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1596427914516103168, '2022-11-26 16:57:29.674', false, '2022-11-26 16:57:29.674', 0, 'reply reply reply4', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597526508711182336, '2022-11-29 17:42:54.941', false, '2022-11-29 17:42:54.941', 0, 'bb', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 1597170473374842880, NULL, 0, 1596524128330842112, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1596088948063469568, '2022-11-25 18:30:33.775', false, '2022-11-25 18:30:33.775', 0, '123', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1ggg4o2sdjaj34j235dx6q.jpg', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1595370887371030528, 0);
INSERT INTO public.infinity VALUES (1597497373662117888, '2022-11-29 15:47:08.604', false, '2022-11-29 15:47:08.604', 0, '44', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1597434518057254912, NULL, NULL, 0, NULL, 2, 0, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 0);
INSERT INTO public.infinity VALUES (1596428020640382976, '2022-11-26 16:57:54.976', false, '2022-11-26 16:57:54.976', 0, 'reply reply reply11', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 1, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1597534646776627200, '2022-11-29 18:15:15.207', false, '2022-11-29 18:15:15.207', 0, 'page test', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, 1597170473374842880, NULL, 0, 1596524128330842112, 2, 0, 1597170473374842880, NULL, NULL, 0);
INSERT INTO public.infinity VALUES (1596427892009467904, '2022-11-26 16:57:24.308', false, '2022-11-26 16:57:24.308', 0, 'reply reply reply2', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1596427970296152064, '2022-11-26 16:57:42.973', false, '2022-11-26 16:57:42.973', 0, 'reply reply reply7', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596265633027194880, NULL, NULL, 0, NULL, 2, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.1.0 Chrome/104.0.5112.124 Electron/20.3.4 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1602954025739747328, '2022-12-14 17:09:55.839', false, '2022-12-14 17:09:55.839', 0, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596088957441933312, NULL, NULL, 0, NULL, 1, 0, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1596265633027194880, '2022-11-26 06:12:38.771', false, '2022-11-26 06:12:38.771', 0, 'topic', 'https://tva3.sinaimg.cn/large/005NWBIgly1h4dul2zx6sj30sg0sgjst.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 3, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1595370887371030528, 2);
INSERT INTO public.infinity VALUES (1602954099223953408, '2022-12-14 17:10:13.359', false, '2022-12-14 17:10:13.359', 0, 'r', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 1596088957441933312, NULL, NULL, 0, NULL, 2, 0, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL, 0);
INSERT INTO public.infinity VALUES (1596088957441933312, '2022-11-25 18:30:36.011', false, '2022-11-25 18:30:36.011', 0, '123', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'https://tvax2.sinaimg.cn/large/005NWBIgly1ggg4o2sdjaj34j235dx6q.jpg', 'https://tvax1.sinaimg.cn/large/005NWBIgly1h4309fjc7qj31700uxdnz.jpg', NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 0, NULL, 0, 1, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL, 2);


--
-- Data for Name: infinity_club; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.infinity_club VALUES (1595370887371030528, '2022-11-23 18:57:14.777', false, '2022-11-23 18:57:14.777', 'htatps://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'Test description', 0, 0, 'Test name club', 'Test Notice', 0, 3);


--
-- Data for Name: infinity_club_daily_data; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.infinity_club_daily_data VALUES (1603420870821281792, 1595370887371030528, '2022-12-16', 0, 0, 0, 3, 3);
INSERT INTO public.infinity_club_daily_data VALUES (1603420870854836224, 1602338399681773568, '2022-12-16', 0, 0, 0, 2, 2);
INSERT INTO public.infinity_club_daily_data VALUES (1604870420786315264, 1595370887371030528, '2022-12-20', 0, 0, 0, 1, 1);


--
-- Data for Name: infinity_club_follow_ref; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.infinity_club_follow_ref VALUES (1595370887371030528, 3, '2022-11-23 18:59:06.874303');


--
-- Data for Name: infinity_topic; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.infinity_topic VALUES (1596243338556604416, '2022-11-26 04:44:03.352', false, '2022-11-26 04:44:03.352', 'htatps://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'Test description', 0, 0, 'Test name 1', 4, 'Test Notice', 3);
INSERT INTO public.infinity_topic VALUES (1596245337800966144, '2022-11-26 04:52:00.017', false, '2022-11-26 04:52:00.017', 'htatps://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'Test description', 0, 0, 'Test name 6', 9, 'Test Notice', 3);
INSERT INTO public.infinity_topic VALUES (1596243373931364352, '2022-11-26 04:44:11.77', false, '2022-11-26 04:44:11.77', 'htatps://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'Test description', 0, 0, 'Test name 3', 2, 'Test Notice', 3);
INSERT INTO public.infinity_topic VALUES (1596243397234917376, '2022-11-26 04:44:17.327', false, '2022-11-26 04:44:17.327', 'htatps://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'Test description', 0, 0, 'Test name 5', 3, 'Test Notice', 3);
INSERT INTO public.infinity_topic VALUES (1596243359423266816, '2022-11-26 04:44:08.311', false, '2022-11-26 04:44:08.311', 'htatps://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'Test description', 0, 0, 'Test name 2', 233, 'Test Notice', 3);
INSERT INTO public.infinity_topic VALUES (1596243384933023744, '2022-11-26 04:44:14.393', false, '2022-11-26 04:44:14.393', 'htatps://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'Test description', 0, 0, 'Test name 4', 23, 'Test Notice', 3);
INSERT INTO public.infinity_topic VALUES (1595362995460898816, '2022-11-23 18:25:53.202', false, '2022-11-23 18:25:53.202', 'https://tvax2.sinaimg.cn/large/005NWBIgly1h45agrlezij30bs0egads.jpg', 'Test description', 0, 0, 'Test name', 11, 'Test Notice', 3);
INSERT INTO public.infinity_topic VALUES (1595363616763150336, '2022-11-23 18:28:21.316', false, '2022-11-23 18:28:21.316', 'https://tvax2.sinaimg.cn/large/005NWBIgly1ggg4o2sdjaj34j235dx6q.jpg', 'Test description2', 0, 0, 'Test name2', 22, 'Test Notice2', 3);
INSERT INTO public.infinity_topic VALUES (1602195611245871104, '2022-12-12 14:56:15.775', false, '2022-12-12 14:56:15.775', NULL, NULL, 0, 0, 'GPT3', 0, NULL, 3);
INSERT INTO public.infinity_topic VALUES (1602201738075439104, '2022-12-12 15:20:36.483', false, '2022-12-12 15:20:36.483', NULL, NULL, 0, 0, 'ai', 0, NULL, 3);
INSERT INTO public.infinity_topic VALUES (1602295604807991296, '2022-12-12 21:33:36.074', false, '2022-12-12 21:33:36.074', NULL, NULL, 0, 0, 'test1', 0, NULL, 5);
INSERT INTO public.infinity_topic VALUES (1602308411083456512, '2022-12-12 22:24:29.31', false, '2022-12-12 22:24:29.31', NULL, 'wakuwaku～', 0, 0, 'waku waku', 0, NULL, 5);
INSERT INTO public.infinity_topic VALUES (1602331565189234688, '2022-12-12 23:56:29.695', false, '2022-12-12 23:56:29.695', NULL, '我的宝藏书籍', 0, 0, '我的宝藏书籍', 0, NULL, 5);
INSERT INTO public.infinity_topic VALUES (1602331597518929920, '2022-12-12 23:56:37.389', false, '2022-12-12 23:56:37.389', NULL, '一句话证明自己是程序员', 0, 0, '一句话证明自己是程序员', 0, NULL, 5);
INSERT INTO public.infinity_topic VALUES (1602331636953776128, '2022-12-12 23:56:46.789', false, '2022-12-12 23:56:46.789', NULL, 'PHP是世界上最好的语言', 0, 0, 'PHP是世界上最好的语言', 0, NULL, 5);
INSERT INTO public.infinity_topic VALUES (1602332271526805504, '2022-12-12 23:59:18.099', false, '2022-12-12 23:59:18.099', NULL, 'Test', 0, 0, 'Test', 0, NULL, 5);
INSERT INTO public.infinity_topic VALUES (1602333205736718336, '2022-12-13 00:03:00.834', false, '2022-12-13 00:03:00.834', NULL, '2022', 0, 0, '2022', 0, NULL, 5);
INSERT INTO public.infinity_topic VALUES (1602335947892981760, '2022-12-13 00:13:54.613', false, '2022-12-13 00:13:54.613', NULL, '买东西应该分期付款吗？买东西应该分期付款吗？', 0, 0, '买东西应该分期付款吗？', 0, NULL, 5);
INSERT INTO public.infinity_topic VALUES (1602336575222448128, '2022-12-13 00:16:24.165', false, '2022-12-13 00:16:24.165', NULL, 'Open-AIOpen-AI', 0, 0, 'Open-AI', 0, NULL, 5);


--
-- Data for Name: infinity_topic__ref; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.infinity_topic__ref VALUES (1596265633027194880, 1596243359423266816);
INSERT INTO public.infinity_topic__ref VALUES (1596265633027194880, 1596243384933023744);
INSERT INTO public.infinity_topic__ref VALUES (1596265633027194880, 1595363616763150336);
INSERT INTO public.infinity_topic__ref VALUES (1602214729864970240, 1602195611245871104);
INSERT INTO public.infinity_topic__ref VALUES (1602214729864970240, 1602201738075439104);
INSERT INTO public.infinity_topic__ref VALUES (1602331714808446976, 1602331565189234688);
INSERT INTO public.infinity_topic__ref VALUES (1602331714808446976, 1602331597518929920);
INSERT INTO public.infinity_topic__ref VALUES (1602331714808446976, 1602331636953776128);
INSERT INTO public.infinity_topic__ref VALUES (1602338399681773568, 1602195611245871104);
INSERT INTO public.infinity_topic__ref VALUES (1602338399681773568, 1602308411083456512);
INSERT INTO public.infinity_topic__ref VALUES (1602338399681773568, 1602336575222448128);
INSERT INTO public.infinity_topic__ref VALUES (1603330152295563264, 1602195611245871104);
INSERT INTO public.infinity_topic__ref VALUES (1632222360327159808, 1602195611245871104);
INSERT INTO public.infinity_topic__ref VALUES (1632222360327159808, 1602336575222448128);


--
-- Data for Name: infinity_topic_daily_data; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.infinity_topic_daily_data VALUES (1603631184451993600, 1602195611245871104, '2022-12-16', 0, 0, 0, 2, 2);
INSERT INTO public.infinity_topic_daily_data VALUES (1603631184485548032, 1602336575222448128, '2022-12-16', 0, 0, 0, 1, 1);
INSERT INTO public.infinity_topic_daily_data VALUES (1603631184489742336, 1602308411083456512, '2022-12-16', 0, 0, 0, 1, 1);
INSERT INTO public.infinity_topic_daily_data VALUES (1604869917432086528, 1602195611245871104, '2022-12-20', 0, 0, 0, 6, 6);
INSERT INTO public.infinity_topic_daily_data VALUES (1604869917444669440, 1602336575222448128, '2022-12-20', 0, 0, 0, 3, 3);
INSERT INTO public.infinity_topic_daily_data VALUES (1604869917444669441, 1602308411083456512, '2022-12-20', 0, 0, 0, 3, 3);
INSERT INTO public.infinity_topic_daily_data VALUES (1632220437062615040, 1602195611245871104, '2023-03-05', 0, 0, 0, 5, 5);
INSERT INTO public.infinity_topic_daily_data VALUES (1632220437184249856, 1602336575222448128, '2023-03-05', 0, 0, 0, 2, 2);
INSERT INTO public.infinity_topic_daily_data VALUES (1632220437184249857, 1602308411083456512, '2023-03-05', 0, 0, 0, 2, 2);
INSERT INTO public.infinity_topic_daily_data VALUES (1632220437184249858, 1602331636953776128, '2023-03-05', 0, 0, 0, 1, 1);
INSERT INTO public.infinity_topic_daily_data VALUES (1632220437184249859, 1602331597518929920, '2023-03-05', 0, 0, 0, 1, 1);
INSERT INTO public.infinity_topic_daily_data VALUES (1632220437184249860, 1602331565189234688, '2023-03-05', 0, 0, 0, 1, 1);


--
-- Data for Name: infinity_topic_follow_ref; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.infinity_topic_follow_ref VALUES (1595363616763150336, 3, '2022-11-23 18:33:38.171239');


--
-- Data for Name: oauth_user_ref; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.oauth_user_ref VALUES (1597170473525837824, '2022-11-28 18:08:09.54', false, '2022-11-28 18:08:09.54', 'https://avatars.githubusercontent.com/u/57082013?v=4', 57082013, NULL, 'MDQ6VXNlcjU3MDgyMDEz', 0, 1597170473374842880);


--
-- Data for Name: qa_answer; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.qa_answer VALUES (1590375371725864960, '2022-11-10 00:06:51.023', false, '2022-11-10 00:06:51.023', 0, 0, '<div class="mermaid">
graph TD
Start --&gt; Stop
</div>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.0.0', 0, 4, 3, 0, 0, '
```mermaid
graph TD
Start --> Stop
```', 0, 6, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597834176034242560, '2022-11-30 14:05:28.589', false, '2022-11-30 14:05:28.589', 0, 0, '回复@Dwsy_57082013：123 123', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 2, NULL, 1597826668313968640, 3, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587089337420349440, '2022-10-31 22:29:19.392', false, '2022-11-03 22:03:43.594', 0, 1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.0.3 Chrome/102.0.5005.167 Electron/19.0.11 Safari/537.36', 0, 4, 3, 3, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587089131513577472, '2022-10-31 22:28:30.32', false, '2022-11-07 11:44:24.761', 0, -1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.0.3 Chrome/102.0.5005.167 Electron/19.0.11 Safari/537.36', 0, 4, 3, 0, 6, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589904053851127808, '2022-11-08 16:54:00.084', false, '2022-11-08 16:54:00.084', 0, 0, '<p>page test</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, 'page test', 0, 22, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589904056078303232, '2022-11-08 16:54:00.615', false, '2022-11-08 16:54:00.615', 0, 0, '<p>page test</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, 'page test', 0, 23, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589904056527093760, '2022-11-08 16:54:00.722', false, '2022-11-08 16:54:00.722', 0, 0, '<p>page test</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, 'page test', 0, 24, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1591317703304413184, '2022-11-12 14:31:20.378', false, '2022-11-12 14:31:20.378', 0, 1591317651454427136, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 2, 4, 4, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (14, '2022-08-28 23:05:09.601', false, '2022-08-28 23:05:09.601', 0, 1, '回复<a class="reply">dwsy</a><b>回答 回答</b>', 'user-agent:喜马拉雅山', 0, 4, 4, 3, 0, '# test', 0, 3, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597822853795807232, '2022-11-30 13:20:29.132', false, '2022-11-30 13:20:29.132', 0, 0, 'reply', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 2, NULL, 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (13, '2022-08-28 22:54:07.092', false, '2022-08-28 22:54:07.092', 0, 1, '回复<a class="reply">null</a><b>回答 回答</b>', 'user-agent:喜马拉雅山', 0, 4, 4, 3, 0, '# test', 0, 2, NULL, NULL);
INSERT INTO public.qa_answer VALUES (12, '2022-08-28 22:54:07.01', false, '2022-08-28 22:54:07.01', 5, 1, '回复@Dwsy：xss <script>alert("123")</script>', 'user-agent:喜马拉雅山', -4, 4, 4, 3, 0, '# test', 3, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587089392374120448, '2022-10-31 22:29:32.495', false, '2022-10-31 22:33:07.448', 0, 12, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) uTools/3.0.3 Chrome/102.0.5005.167 Electron/19.0.11 Safari/537.36', 0, 4, 3, 4, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1591319540757692416, '2022-11-12 14:38:38.461', false, '2022-11-12 14:38:38.461', 0, 1591317651454427136, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 2, 3, 4, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1591527820457148416, '2022-11-13 04:26:16.225', false, '2022-11-13 04:26:16.225', 0, 0, '<p><blockquote class="d-tip d-tip-info"><p class="mdi mdi-information-variant">watch test<br />
</p></blockquote></p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 3, 3, 0, 0, '> iwatch test', 0, 1, true, '2022-11-13 04:31:31.714464');
INSERT INTO public.qa_answer VALUES (1587399207608647680, '2022-11-01 19:00:38.202', false, '2022-11-01 19:00:38.202', 0, 1587399114599956480, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 3, 3, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1591500325351587840, '2022-11-13 02:37:00.881', false, '2022-11-13 02:47:16.316', 0, -1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1, 4, 0, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1591317651454427136, '2022-11-12 14:31:08.03', false, '2022-11-12 14:31:08.03', 0, 0, '<p><code>采纳回答测试</code></p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 2, 2, 4, 0, 0, '`采纳回答测试`', 0, 1, true, '2022-11-12 16:09:38.367417');
INSERT INTO public.qa_answer VALUES (1591342961742839808, '2022-11-12 16:11:42.473', false, '2022-11-12 16:11:42.473', 0, 0, '<p><blockquote class="d-tip d-tip-share"><p class="mdi mdi-at">采纳回答通知测试<br />
</p></blockquote></p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 2, 20, 0, 0, '> @采纳回答通知测试', 0, 2, true, '2022-11-12 16:11:55.032633');
INSERT INTO public.qa_answer VALUES (1597835455678644224, '2022-11-30 14:10:33.638', false, '2022-11-30 14:10:33.638', 0, 0, '回复@Dwsy_57082013：123', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 2, NULL, 1597834176034242560, 4, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1591504761293635584, '2022-11-13 02:54:38.478', false, '2022-11-13 02:59:49.076', 0, -1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 3, 20, 0, 6, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597822902768500736, '2022-11-30 13:20:40.791', false, '2022-11-30 13:20:40.791', 0, 0, '<p>answer</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 0, 'answer', 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597824352575815680, '2022-11-30 13:26:26.47', false, '2022-11-30 13:26:26.47', 0, 0, '<p>aaa</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 1, 1597173739915575296, 1597170473374842880, 0, 0, 'aaa', 0, 2, true, '2022-11-30 13:28:46.556438');
INSERT INTO public.qa_answer VALUES (1597826285499842560, '2022-11-30 13:34:07.316', false, '2022-11-30 13:34:07.316', 0, 1597824352575815680, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597826668313968640, '2022-11-30 13:35:38.567', false, '2022-11-30 13:35:38.567', 0, 0, '123', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 2, NULL, 0, 2, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597835730044846080, '2022-11-30 14:11:39.052', false, '2022-11-30 14:11:39.052', 0, 0, '123', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 2, NULL, 0, 5, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597836227870982144, '2022-11-30 14:13:37.743', false, '2022-11-30 14:13:37.743', 0, 0, 'test', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 2, NULL, 0, 6, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597836592335028224, '2022-11-30 14:15:04.638', false, '2022-11-30 14:15:04.638', 0, 0, 'qwe', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 2, NULL, 0, 7, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587515987387744256, '2022-11-02 02:44:40.671', false, '2022-11-02 02:46:43.68', 0, 1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 20, 3, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587391369062645760, '2022-11-01 18:29:29.347', false, '2022-11-01 18:29:29.347', 0, 1, 'ssx', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 3, 4, 1, NULL, 1, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587394177719599104, '2022-11-01 18:40:38.983', false, '2022-11-01 18:40:38.983', 0, 1, '回复@Sumi：http://localhost:3000/question/4', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 3, 4, 1, NULL, 1, 2, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587395814488014848, '2022-11-01 18:47:09.233', false, '2022-11-01 18:47:09.233', 0, 0, '回复@Dwsy：@test123123123', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 3, 3, 2, NULL, 1587395175221559296, 9, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587398042233864192, '2022-11-01 18:56:00.368', false, '2022-11-01 18:56:00.368', 0, 1587354439092535296, 'sss', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 3, 3, 1, NULL, 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587398959335211008, '2022-11-01 18:59:39.025', false, '2022-11-01 18:59:39.025', 0, 1587354439092535296, '回复@Dwsy：www', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 3, 3, 1, NULL, 1587354439092535296, 2, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587399114599956480, '2022-11-01 19:00:16.027', false, '2022-11-01 19:00:16.027', 0, 0, '<pre><code class="language-java">    private long replyComment
            (QaAnswerRB qaAnswerRB, AnswerType answerType, long questionFieldId, User user, QaQuestionField qaQuestionField, int answerSerialNumber, long parentAnswerId, long replyUserId) {
        //todo
        if (replyUserId == 0) {
            replyUserId = qaAnswerRepository.findUserIdByAnswerId(parentAnswerId);
        }

        if (userRepository.findById(replyUserId).isEmpty()) {
            throw new CodeException(CustomerErrorCode.UserNotExist);
        }
        String mdText = qaAnswerRB.getMdText();
        QaAnswer qaAnswer = QaAnswer.builder()
                .user(user)
                .questionField(qaQuestionField)
                .textHtml(mdText)
                .textMd(null)
                .textPure(null)
                .parentAnswerId(qaAnswerRB.getParentAnswerId())
                .parentUserId(replyUserId)
                .answerType(answerType)
                .ua(userSupport.getUserAgent())
                .answerSerialNumber(answerSerialNumber)
                .build();
        QaAnswer save = qaAnswerRepository.save(qaAnswer);

        String content = mdText.substring(0, Math.min(100, mdText.length()));
        String parentText = HtmlHelper.toPure(qaAnswerRepository.getHtmlText(qaAnswerRB.getParentAnswerId()));
        sendActionMqMessage(user.getId(), questionFieldId, parentAnswerId,
                answerType, false, content, parentText, save.getId());
        return save.getId();
    }

</code></pre>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 1, 4, 3, 0, 0, '```java
    private long replyComment
            (QaAnswerRB qaAnswerRB, AnswerType answerType, long questionFieldId, User user, QaQuestionField qaQuestionField, int answerSerialNumber, long parentAnswerId, long replyUserId) {
        //todo
        if (replyUserId == 0) {
            replyUserId = qaAnswerRepository.findUserIdByAnswerId(parentAnswerId);
        }

        if (userRepository.findById(replyUserId).isEmpty()) {
            throw new CodeException(CustomerErrorCode.UserNotExist);
        }
        String mdText = qaAnswerRB.getMdText();
        QaAnswer qaAnswer = QaAnswer.builder()
                .user(user)
                .questionField(qaQuestionField)
                .textHtml(mdText)
                .textMd(null)
                .textPure(null)
                .parentAnswerId(qaAnswerRB.getParentAnswerId())
                .parentUserId(replyUserId)
                .answerType(answerType)
                .ua(userSupport.getUserAgent())
                .answerSerialNumber(answerSerialNumber)
                .build();
        QaAnswer save = qaAnswerRepository.save(qaAnswer);

        String content = mdText.substring(0, Math.min(100, mdText.length()));
        String parentText = HtmlHelper.toPure(qaAnswerRepository.getHtmlText(qaAnswerRB.getParentAnswerId()));
        sendActionMqMessage(user.getId(), questionFieldId, parentAnswerId,
                answerType, false, content, parentText, save.getId());
        return save.getId();
    }

```', 0, 3, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587514790761201664, '2022-11-02 02:39:55.374', false, '2022-11-02 02:39:55.374', 0, 1, '回复@Sumi：回复Sumi询问其他细节或提出修改意见', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.1438.1', 0, 4, 3, 4, 1, NULL, 1, 3, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587515465943482368, '2022-11-02 02:42:36.349', false, '2022-11-02 02:42:36.349', 0, 1, '回复@Sumi：notify test', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 20, 4, 1, NULL, 1, 4, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587536144256466944, '2022-11-02 04:04:46.443', false, '2022-11-02 04:04:46.443', 0, 0, '回复@Dwsy：4', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 20, 3, 2, NULL, 1587391206474645504, 13, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587515898434945024, '2022-11-02 02:44:19.463', false, '2022-11-02 02:44:19.463', 0, -1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 20, 0, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587799763347046400, '2022-11-02 21:32:18.149', false, '2022-11-02 21:32:18.149', 0, 1587354439092535296, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 0, 4, 3, 3, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589904049606492160, '2022-11-08 16:53:59.072', false, '2022-11-08 16:53:59.072', 0, 0, '<p>page test</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, 'page test', 0, 17, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587534587980939264, '2022-11-02 03:58:35.413', false, '2022-11-02 03:58:35.413', 0, 1587399114599956480, '回复@Dwsy：32123', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 20, 3, 1, NULL, 1587399114599956480, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587535426090958848, '2022-11-02 04:01:55.219', false, '2022-11-02 04:01:55.219', 0, 0, '1', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 20, 0, 2, NULL, 0, 10, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587535462203916288, '2022-11-02 04:02:03.83', false, '2022-11-02 04:02:03.83', 0, 0, '回复@EMT：2', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 20, 20, 2, NULL, 1587535426090958848, 11, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587536038450954240, '2022-11-02 04:04:21.217', false, '2022-11-02 04:04:21.217', 0, 0, '回复@EMT：3', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 20, 20, 2, NULL, 1587535462203916288, 12, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587538419087572992, '2022-11-02 04:13:48.82', false, '2022-11-02 04:13:48.82', 0, 1587354439092535296, 'eee', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 20, 3, 1, NULL, 0, 3, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587516534958325760, '2022-11-02 02:46:51.222', false, '2022-11-02 02:46:51.222', 0, 1587354439092535296, '123', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 20, 3, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587354439092535296, '2022-11-01 16:02:44.594', false, '2022-11-01 16:02:44.594', 0, 0, '<pre><code class="language-js">console.log(&quot;test&quot;)
</code></pre>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 2, 4, 3, 0, 0, '```js
console.log("test")
```', 0, 2, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589904050126585856, '2022-11-08 16:53:59.196', false, '2022-11-08 16:53:59.196', 0, 0, '<p>page test</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, 'page test', 0, 18, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589904050571182080, '2022-11-08 16:53:59.302', false, '2022-11-08 16:53:59.302', 0, 0, '<p>page test</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, 'page test', 0, 19, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589904051040944128, '2022-11-08 16:53:59.414', false, '2022-11-08 16:53:59.414', 0, 0, '<p>page test</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, 'page test', 0, 20, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1587824924989325312, '2022-11-02 23:12:17.135', false, '2022-11-02 23:12:17.135', 0, 0, '<h2 id="TEsT"><a href="#test" id="test">TEsT</a></h2>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 1, 4, 20, 0, 0, '## TEsT', 0, 4, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1588023074437988352, '2022-11-03 12:19:39.645', false, '2022-11-03 12:19:39.645', 0, 1588022587668037632, '测试', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 0, 4, 3, 3, 1, NULL, 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1588023352679727104, '2022-11-03 12:20:45.983', false, '2022-11-03 12:20:45.983', 0, 1588022587668037632, '测试', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 4, 4, 3, 1, NULL, 0, 2, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1588167917420150784, '2022-11-03 21:55:12.918', false, '2022-11-03 21:55:12.918', 0, 0, 'olakdujklasfilpa', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 0, 1588166867304841216, 3, 0, 2, NULL, 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1588208264145797120, '2022-11-04 00:35:32.312', false, '2022-11-04 00:35:32.312', 0, 0, '123', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.1438.1', 0, 1588166867304841216, 3, 0, 2, NULL, 0, 2, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1, '2022-08-28 20:34:52.125', false, '2022-08-28 20:34:52.125', 0, 0, '<div class="s-prose js-post-body" itemprop="text">
<p>You can use</p>
<pre class="lang-r s-code-block"><code class="hljs language-r"><span class="hljs-operator">&gt;</span> gsub<span class="hljs-punctuation">(</span><span class="hljs-string">"(.)(?=.)"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"\\1,"</span><span class="hljs-punctuation">,</span> x<span class="hljs-punctuation">,</span> perl<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span>
<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">"A,B,C,D"</span>
</code></pre>
<p>The <code>(.)(?=.)</code> regex matches any char capturing it into Group 1 (with <code>(.)</code>) that must be followed with any single char (<code>(?=.)</code>) is a positive lookahead that requires a char immediately to the right of the current location).</p>
<p>Vriations of the solution:</p>
<pre class="lang-r s-code-block"><code class="hljs language-r"><span class="hljs-operator">&gt;</span> gsub<span class="hljs-punctuation">(</span><span class="hljs-string">"(.)(?!$)"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"\\1,"</span><span class="hljs-punctuation">,</span> x<span class="hljs-punctuation">,</span> perl<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span>
<span class="hljs-comment">## Or with stringr:</span>
<span class="hljs-comment">## stringr::str_replace_all(x, "(.)(?!$)", "\\1,")</span>
<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">"A,B,C,D"</span>
</code></pre>
<p>Here, <code>(?!$)</code> fails the match if there is an end of string position.</p>
<p>See the <a href="https://ideone.com/Fe5iAN" rel="nofollow noreferrer">R demo online</a>:</p>
<pre class="lang-r s-code-block"><code class="hljs language-r">x <span class="hljs-operator">&lt;-</span> <span class="hljs-string">"ABCD"</span>
gsub<span class="hljs-punctuation">(</span><span class="hljs-string">"(.)(?=.)"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"\\1,"</span><span class="hljs-punctuation">,</span> x<span class="hljs-punctuation">,</span> perl<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span>
<span class="hljs-comment"># =&gt; [1] "A,B,C,D"</span>
gsub<span class="hljs-punctuation">(</span><span class="hljs-string">"(.)(?!$)"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"\\1,"</span><span class="hljs-punctuation">,</span> x<span class="hljs-punctuation">,</span> perl<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span>
<span class="hljs-comment"># =&gt; [1] "A,B,C,D"</span>
stringr<span class="hljs-operator">::</span>str_replace_all<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-string">"(.)(?!$)"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"\\1,"</span><span class="hljs-punctuation">)</span>
<span class="hljs-comment"># =&gt; [1] "A,B,C,D"</span>
</code></pre>
    </div>', 'user-agent:天河一百号', 2, 4, 3, 0, 0, 'You can use

```r
> gsub("(.)(?=.)", "\\1,", x, perl=TRUE)
[1] "A,B,C,D"
```

The `(.)(?=.)` regex matches any char capturing it into Group 1 (with `(.)`) that must be followed with any single char (`(?=.)`) is a positive lookahead that requires a char immediately to the right of the current location).

Vriations of the solution:

```r
> gsub("(.)(?!$)", "\\1,", x, perl=TRUE)
## Or with stringr:
## stringr::str_replace_all(x, "(.)(?!$)", "\\1,")
[1] "A,B,C,D"
```

Here, `(?!$)` fails the match if there is an end of string position.

See the [R demo online](https://ideone.com/Fe5iAN):

```r
x <- "ABCD"
gsub("(.)(?=.)", "\\1,", x, perl=TRUE)
# => [1] "A,B,C,D"
gsub("(.)(?!$)", "\\1,", x, perl=TRUE)
# => [1] "A,B,C,D"
stringr::str_replace_all(x, "(.)(?!$)", "\\1,")
# => [1] "A,B,C,D"
```', 0, 1, true, NULL);
INSERT INTO public.qa_answer VALUES (1588022587668037632, '2022-11-03 12:17:43.59', false, '2022-11-03 12:17:43.59', 0, 0, '<h1 id="test"><a href="#test" id="test">test</a></h1>
<p>You can use</p>
<pre><code class="language-r">&gt; gsub(&quot;(.)(?=.)&quot;, &quot;\\1,&quot;, x, perl=TRUE)
[1] &quot;A,B,C,D&quot;
</code></pre>
<p>The <code>(.)(?=.)</code> regex matches any char capturing it into Group 1 (with <code>(.)</code>) that must be followed with any single char (<code>(?=.)</code>) is a positive lookahead that requires a char immediately to the right of the current location).</p>
<p>Vriations of the solution:</p>
<pre><code class="language-r">&gt; gsub(&quot;(.)(?!$)&quot;, &quot;\\1,&quot;, x, perl=TRUE)
## Or with stringr:
## stringr::str_replace_all(x, &quot;(.)(?!$)&quot;, &quot;\\1,&quot;)
[1] &quot;A,B,C,D&quot;
</code></pre>
<p>Here, <code>(?!$)</code> fails the match if there is an end of string position.</p>
<p>See the <a href="https://ideone.com/Fe5iAN" rel="nofollow" target="_blank">R demo online</a>:</p>
<pre><code class="language-r">x &lt;- &quot;ABCD&quot;
gsub(&quot;(.)(?=.)&quot;, &quot;\\1,&quot;, x, perl=TRUE)
# =&gt; [1] &quot;A,B,C,D&quot;
gsub(&quot;(.)(?!$)&quot;, &quot;\\1,&quot;, x, perl=TRUE)
# =&gt; [1] &quot;A,B,C,D&quot;
stringr::str_replace_all(x, &quot;(.)(?!$)&quot;, &quot;\\1,&quot;)
# =&gt; [1] &quot;A,B,C,D&quot;
</code></pre>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36', 1, 4, 3, 0, 0, '# test
You can use

```r
> gsub("(.)(?=.)", "\\1,", x, perl=TRUE)
[1] "A,B,C,D"
```

The `(.)(?=.)` regex matches any char capturing it into Group 1 (with `(.)`) that must be followed with any single char (`(?=.)`) is a positive lookahead that requires a char immediately to the right of the current location).

Vriations of the solution:

```r
> gsub("(.)(?!$)", "\\1,", x, perl=TRUE)
## Or with stringr:
## stringr::str_replace_all(x, "(.)(?!$)", "\\1,")
[1] "A,B,C,D"
```

Here, `(?!$)` fails the match if there is an end of string position.

See the [R demo online](https://ideone.com/Fe5iAN):

```r
x <- "ABCD"
gsub("(.)(?=.)", "\\1,", x, perl=TRUE)
# => [1] "A,B,C,D"
gsub("(.)(?!$)", "\\1,", x, perl=TRUE)
# => [1] "A,B,C,D"
stringr::str_replace_all(x, "(.)(?!$)", "\\1,")
# => [1] "A,B,C,D"
```', 0, 5, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589464583175667712, '2022-11-07 11:47:42.111', false, '2022-11-07 11:47:42.111', 0, 1588022587668037632, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.0.0', 0, 4, 3, 3, 5, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589498692245651456, '2022-11-07 14:03:14.362', false, '2022-11-07 14:03:14.362', 0, 0, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.0.0', 0, 1588166867304841216, 3, 0, 0, '# 333', 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589498888702656512, '2022-11-07 14:04:01.2', false, '2022-11-07 14:04:01.2', 0, 0, '# 333', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.0.0', 0, 1588166867304841216, 3, 0, 0, '# 333', 0, 2, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589499080919220224, '2022-11-07 14:04:47.027', false, '2022-11-07 14:04:47.027', 0, 0, '<h1 id="test-86490551bf08acf3c7064d83c0ac"><a href="#test-86490551bf08acf3c7064d83c0ac" id="test-86490551bf08acf3c7064d83c0ac">test</a></h1>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.0.0', 0, 1588166867304841216, 3, 0, 0, '# test', 0, 3, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589864152631869440, '2022-11-08 14:15:26.909', false, '2022-11-08 14:15:26.909', 0, 0, '<h1 id="123-7ac1"><a href="#123-7ac1" id="123-7ac1">123</a></h1>
<pre><code>123123
</code></pre>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, '#123
```
123123
```', 0, 5, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589864161624457216, '2022-11-08 14:15:29.036', false, '2022-11-08 14:15:29.036', 0, 0, '<h1 id="123-db0c"><a href="#123-db0c" id="123-db0c">123</a></h1>
<pre><code>123123
</code></pre>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, '#123
```
123123
```', 0, 6, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589864163759357952, '2022-11-08 14:15:29.545', false, '2022-11-08 14:15:29.545', 0, 0, '<h1 id="123-194f"><a href="#123-194f" id="123-194f">123</a></h1>
<pre><code>123123
</code></pre>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, '#123
```
123123
```', 0, 7, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589864165902647296, '2022-11-08 14:15:30.056', false, '2022-11-08 14:15:30.056', 0, 0, '<h1 id="123-d93c"><a href="#123-d93c" id="123-d93c">123</a></h1>
<pre><code>123123
</code></pre>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, '#123
```
123123
```', 0, 8, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589904051464568832, '2022-11-08 16:53:59.516', false, '2022-11-08 16:53:59.516', 0, 0, '<p>page test</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, 'page test', 0, 21, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589864429388824576, '2022-11-08 14:16:32.876', false, '2022-11-08 14:16:32.876', 0, 0, '<h1 id="123213-c8a0"><a href="#123213-c8a0" id="123213-c8a0">123213</a></h1>
<pre><code class="language-java">    public boolean delDocById(long aid) {
        try {
            client.delete(req -&gt; req.index(INDEX).id(String.valueOf(aid)));
        } catch (IOException e) {
            log.info(&quot;删除失败 aId ：{}&quot;, aid);
            throw new RuntimeException(e);
        }
        return true;
    }
onId);
        }
    }
</code></pre>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, '#123213
```java
    public boolean delDocById(long aid) {
        try {
            client.delete(req -> req.index(INDEX).id(String.valueOf(aid)));
        } catch (IOException e) {
            log.info("删除失败 aId ：{}", aid);
            throw new RuntimeException(e);
        }
        return true;
    }
onId);
        }
    }
```', 0, 10, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589864461475250176, '2022-11-08 14:16:40.526', false, '2022-11-08 14:16:40.526', 0, 0, '<h1 id="123213-0e3f"><a href="#123213-0e3f" id="123213-0e3f">123213</a></h1>
<pre><code class="language-java">    public boolean delDocById(long aid) {
        try {
            client.delete(req -&gt; req.index(INDEX).id(String.valueOf(aid)));
        } catch (IOException e) {
            log.info(&quot;删除失败 aId ：{}&quot;, aid);
            throw new RuntimeException(e);
        }
        return true;
    }
onId);
        }
    }
</code></pre>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, '#123213
```java
    public boolean delDocById(long aid) {
        try {
            client.delete(req -> req.index(INDEX).id(String.valueOf(aid)));
        } catch (IOException e) {
            log.info("删除失败 aId ：{}", aid);
            throw new RuntimeException(e);
        }
        return true;
    }
onId);
        }
    }
```', 0, 11, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589864461986955264, '2022-11-08 14:16:40.648', false, '2022-11-08 14:16:40.648', 0, 0, '<h1 id="123213-94ce"><a href="#123213-94ce" id="123213-94ce">123213</a></h1>
<pre><code class="language-java">    public boolean delDocById(long aid) {
        try {
            client.delete(req -&gt; req.index(INDEX).id(String.valueOf(aid)));
        } catch (IOException e) {
            log.info(&quot;删除失败 aId ：{}&quot;, aid);
            throw new RuntimeException(e);
        }
        return true;
    }
onId);
        }
    }
</code></pre>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, '#123213
```java
    public boolean delDocById(long aid) {
        try {
            client.delete(req -> req.index(INDEX).id(String.valueOf(aid)));
        } catch (IOException e) {
            log.info("删除失败 aId ：{}", aid);
            throw new RuntimeException(e);
        }
        return true;
    }
onId);
        }
    }
```', 0, 12, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589864495927263232, '2022-11-08 14:16:48.74', false, '2022-11-08 14:16:48.74', 0, 0, '<h1 id="123213-3f00"><a href="#123213-3f00" id="123213-3f00">123213</a></h1>
<pre><code class="language-java">    private final String INDEX = QuestionSearchConstants.INDEX;
    @Resource
    ArticleFieldRepository articleFieldRepository;
    @Resource
    private QaQuestionFieldRepository qaQuestionFieldRepository;
    @Resource
    ArticleContentRepository articleContentRepository;
    @Resource
    QaContentRepository qaContentRepository;
    @Resource
    ElasticsearchClient client;
</code></pre>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, '#123213
```java
    private final String INDEX = QuestionSearchConstants.INDEX;
    @Resource
    ArticleFieldRepository articleFieldRepository;
    @Resource
    private QaQuestionFieldRepository qaQuestionFieldRepository;
    @Resource
    ArticleContentRepository articleContentRepository;
    @Resource
    QaContentRepository qaContentRepository;
    @Resource
    ElasticsearchClient client;
```', 0, 13, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589864496451551232, '2022-11-08 14:16:48.865', false, '2022-11-08 14:16:48.865', 0, 0, '<h1 id="123213-4650"><a href="#123213-4650" id="123213-4650">123213</a></h1>
<pre><code class="language-java">    private final String INDEX = QuestionSearchConstants.INDEX;
    @Resource
    ArticleFieldRepository articleFieldRepository;
    @Resource
    private QaQuestionFieldRepository qaQuestionFieldRepository;
    @Resource
    ArticleContentRepository articleContentRepository;
    @Resource
    QaContentRepository qaContentRepository;
    @Resource
    ElasticsearchClient client;
</code></pre>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, '#123213
```java
    private final String INDEX = QuestionSearchConstants.INDEX;
    @Resource
    ArticleFieldRepository articleFieldRepository;
    @Resource
    private QaQuestionFieldRepository qaQuestionFieldRepository;
    @Resource
    ArticleContentRepository articleContentRepository;
    @Resource
    QaContentRepository qaContentRepository;
    @Resource
    ElasticsearchClient client;
```', 0, 14, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589904046968274944, '2022-11-08 16:53:58.443', false, '2022-11-08 16:53:58.443', 0, 0, '<p>page test</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, 'page test', 0, 15, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589904048956375040, '2022-11-08 16:53:58.917', false, '2022-11-08 16:53:58.917', 0, 0, '<p>page test</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 20, 0, 0, 'page test', 0, 16, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1590375242876846080, '2022-11-10 00:06:20.32', false, '2022-11-10 00:06:20.32', 0, 1587824924989325312, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.0.0', 0, 4, 3, 20, 5, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597836709888786432, '2022-11-30 14:15:32.666', false, '2022-11-30 14:15:32.666', 0, 0, '回复@Dwsy_57082013：qwe qwe', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 2, NULL, 1597836592335028224, 8, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597839472152543232, '2022-11-30 14:26:31.24', false, '2022-11-30 14:26:31.24', 0, 0, '<p>test</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 0, 'test', 0, 3, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597840281011486720, '2022-11-30 14:29:44.087', false, '2022-11-30 14:29:44.087', 0, 1597839472152543232, 'commentAnswer', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 1, NULL, 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597842496535134208, '2022-11-30 14:38:32.309', false, '2022-11-30 14:38:32.309', 0, 0, '1', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 2, NULL, 0, 9, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597842884642471936, '2022-11-30 14:40:04.841', false, '2022-11-30 14:40:04.841', 0, 0, '2', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 2, NULL, 0, 10, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597842991932768256, '2022-11-30 14:40:30.421', false, '2022-11-30 14:40:30.421', 0, 0, '3', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 2, NULL, 0, 11, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597843042893561856, '2022-11-30 14:40:42.571', false, '2022-11-30 14:40:42.571', 0, 1597822902768500736, '1', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 1, NULL, 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597843061658877952, '2022-11-30 14:40:47.046', false, '2022-11-30 14:40:47.046', 0, 1597822902768500736, '回复@Dwsy_57082013：2', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 1, NULL, 1597822902768500736, 2, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597843502249541632, '2022-11-30 14:42:32.09', false, '2022-11-30 14:42:32.09', 0, 0, '<p>1</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 0, '1', 0, 4, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597843747922509824, '2022-11-30 14:43:30.663', false, '2022-11-30 14:43:30.663', 0, 0, '<p>123</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 0, '123', 0, 5, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597844114945081344, '2022-11-30 14:44:58.168', false, '2022-11-30 14:44:58.168', 0, 0, '<p>1</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 0, '1', 0, 6, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597844390556991488, '2022-11-30 14:46:03.879', false, '2022-11-30 14:46:03.879', 0, 0, '123', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 2, NULL, 0, 12, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597844505631916032, '2022-11-30 14:46:31.315', false, '2022-11-30 14:46:31.315', 0, 0, '<p>qweqweqw</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 0, 'qweqweqw', 0, 7, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597844846935015424, '2022-11-30 14:47:52.688', false, '2022-11-30 14:47:52.688', 0, 0, '<p>321</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 0, '321', 0, 8, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597845139496108032, '2022-11-30 14:49:02.441', false, '2022-11-30 14:49:02.441', 0, 1597822902768500736, '3', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 1, NULL, 0, 3, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597845234388041728, '2022-11-30 14:49:25.064', false, '2022-11-30 14:49:25.064', 0, 1597822902768500736, '回复@Dwsy_57082013：4', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 1, NULL, 1597822902768500736, 4, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597848101081579520, '2022-11-30 15:00:48.553', false, '2022-11-30 15:00:48.553', 0, 0, '<p><a href="http://localhost:3000/question/1597173739915575296" rel="nofollow" target="_blank">http://localhost:3000/question/1597173739915575296</a></p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 0, 'http://localhost:3000/question/1597173739915575296', 0, 9, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597848717044482048, '2022-11-30 15:03:15.394', false, '2022-11-30 15:03:15.394', 0, 0, '<p>childQaAnswersPagechildQaAnswersPage</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 0, 'childQaAnswersPagechildQaAnswersPage', 0, 10, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597848753761419264, '2022-11-30 15:03:24.148', false, '2022-11-30 15:03:24.148', 0, 0, '<h1 id="test"><a href="#test" id="test">test</a></h1>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 0, '# test', 0, 11, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597849314703441920, '2022-11-30 15:05:37.887', false, '2022-11-30 15:05:37.887', 0, 0, '123', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 2, NULL, 0, 13, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597849348777967616, '2022-11-30 15:05:46.011', false, '2022-11-30 15:05:46.011', 0, 0, '回复@Dwsy_57082013：456', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 2, NULL, 1597849314703441920, 14, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597849386090496000, '2022-11-30 15:05:54.907', false, '2022-11-30 15:05:54.907', 0, 1597824352575815680, 'bbb', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 1, NULL, 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597849405199745024, '2022-11-30 15:05:59.463', false, '2022-11-30 15:05:59.463', 0, 1597824352575815680, '回复@Dwsy_57082013：ccc', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 1, NULL, 1597824352575815680, 2, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597849648150609920, '2022-11-30 15:06:57.388', false, '2022-11-30 15:06:57.388', 0, 0, '回复@Dwsy_57082013：ddd', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 2, NULL, 1597849405199745024, 15, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597851989515960320, '2022-11-30 15:16:15.612', false, '2022-11-30 15:16:15.612', 0, 0, 't1', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 2, NULL, 0, 16, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597852003818536960, '2022-11-30 15:16:19.022', false, '2022-11-30 15:16:19.022', 0, 0, '回复@Dwsy_57082013：t2', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 2, NULL, 1597851989515960320, 17, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597852029663838208, '2022-11-30 15:16:25.184', false, '2022-11-30 15:16:25.184', 0, 0, '<p>t3</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 0, 't3', 0, 12, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597852050526306304, '2022-11-30 15:16:30.158', false, '2022-11-30 15:16:30.158', 0, 1597852029663838208, 't4', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 1, NULL, 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1646687866962575360, '2023-04-14 09:32:36.14', false, '2023-04-14 09:32:36.14', 0, -1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', 0, 1598959826694569984, 4, 0, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597852066938617856, '2022-11-30 15:16:34.071', false, '2022-11-30 15:16:34.071', 0, 1597852029663838208, '回复@Dwsy_57082013：t5', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 1597170473374842880, 1, NULL, 1597852029663838208, 2, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1597853912356880384, '2022-11-30 15:23:54.053', false, '2022-11-30 15:23:54.053', 0, 0, 'ok', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1597173739915575296, 1597170473374842880, 0, 2, NULL, 0, 18, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589499384725241856, '2022-11-07 14:05:59.471', false, '2022-11-07 14:05:59.471', 0, 0, '<h1 id="123-a79b"><a href="#123-a79b" id="123-a79b">123</a></h1>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.0.0', 1, 1588166867304841216, 3, 0, 0, '# 123', 0, 4, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1598314765522829312, '2022-12-01 21:55:10.028', false, '2022-12-01 21:55:15.198', 0, -1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1, 1597170473374842880, 0, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1598326631372423168, '2022-12-01 22:42:19.055', false, '2022-12-01 22:42:19.055', 0, 0, '<p>123</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1598325650412797952, 20, 0, 0, '123', 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1598327676999827456, '2022-12-01 22:46:28.354', false, '2022-12-01 22:46:28.354', 0, 0, '<p>123</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1598325650412797952, 20, 0, 0, '123', 0, 2, true, '2022-12-01 22:50:45.84785');
INSERT INTO public.qa_answer VALUES (1598576286727405568, '2022-12-02 15:14:21.529', false, '2022-12-02 15:14:21.529', 0, 0, '注销测试', 'Mozilla/5.0 (X11; Linux x86_64; rv:106.0) Gecko/20100101 Firefox/106.0', 0, 1598576245409316864, 1597170473374842881, 0, 2, NULL, 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1598576300161761280, '2022-12-02 15:14:24.727', false, '2022-12-02 15:14:24.727', 0, 0, '<p>注销测试</p>
', 'Mozilla/5.0 (X11; Linux x86_64; rv:106.0) Gecko/20100101 Firefox/106.0', 0, 1598576245409316864, 1597170473374842881, 0, 0, '注销测试', 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1598583973695455232, '2022-12-02 15:44:54.241', false, '2022-12-02 15:44:54.241', 0, 0, '注销测试', 'Mozilla/5.0 (X11; Linux x86_64; rv:106.0) Gecko/20100101 Firefox/106.0', 0, 1, 1597170473374842881, 0, 2, NULL, 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1598583992817287168, '2022-12-02 15:44:58.8', false, '2022-12-02 15:44:58.8', 0, -1, NULL, 'Mozilla/5.0 (X11; Linux x86_64; rv:106.0) Gecko/20100101 Firefox/106.0', 0, 1, 1597170473374842881, 0, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1601529624402067456, '2022-12-10 18:49:52.098', false, '2022-12-10 18:49:52.098', 0, 1589499384725241856, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1588166867304841216, 3, 3, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1598583997296803840, '2022-12-02 15:44:59.867', false, '2022-12-02 15:44:59.867', 0, 1598583941625806848, NULL, 'Mozilla/5.0 (X11; Linux x86_64; rv:106.0) Gecko/20100101 Firefox/106.0', 0, 1, 1597170473374842881, 1597170473374842881, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1599374904581423104, '2022-12-04 20:07:46.875', false, '2022-12-04 20:07:46.875', 0, -1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 2, 3, 0, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1598583941625806848, '2022-12-02 15:44:46.594', false, '2022-12-02 15:44:46.594', 0, 0, '<p>注销测试</p>
', 'Mozilla/5.0 (X11; Linux x86_64; rv:106.0) Gecko/20100101 Firefox/106.0', 2, 1, 1597170473374842881, 0, 0, '注销测试', 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1600372538767048704, '2022-12-07 14:12:01.4', false, '2022-12-07 14:12:01.4', 0, 1598583941625806848, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1, 3, 1597170473374842881, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1600380820055392256, '2022-12-07 14:44:55.812', false, '2022-12-07 14:44:55.812', 0, -1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1, 3, 0, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1600380906730684416, '2022-12-07 14:45:16.461', false, '2022-12-07 14:45:16.461', 0, -1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 3, 3, 0, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1600385153828388864, '2022-12-07 15:02:09.064', false, '2022-12-07 15:02:09.064', 0, -1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 4, 0, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1589864392655110144, '2022-11-08 14:16:24.118', false, '2022-11-08 14:16:24.118', 0, 0, '<h1 id="123213-7e0f"><a href="#123213-7e0f" id="123213-7e0f">123213</a></h1>
<pre><code class="language-java">    public void updateScoreDataById(long questionId) {
        ArticleField af = articleFieldRepository.findByIdAndDeletedIsFalseAndArticleState(questionId, ArticleState.published);
        if (af == null) {
            return;
        }
        QuestionEsDoc esDoc = QuestionEsDoc.builder()
                .upNum(af.getUpNum())
                .downNum(af.getDownNum())
                .collectNum(af.getCollectNum())
                .viewNum(af.getViewNum())
                .answerNum(af.getCommentNum())
                .build();
        try {
            client.update(req -&gt; req
                            .index(INDEX).id(String.valueOf(questionId))
                            .doc(esDoc).docAsUpsert(true)
                    , QuestionEsDoc.class);
        } catch (IOException e) {
            log.info(&quot;更新失败 questionId ：{}&quot;, questionId);
        }
    }
</code></pre>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 1, 1588166867304841216, 20, 0, 0, '#123213
```java
    public void updateScoreDataById(long questionId) {
        ArticleField af = articleFieldRepository.findByIdAndDeletedIsFalseAndArticleState(questionId, ArticleState.published);
        if (af == null) {
            return;
        }
        QuestionEsDoc esDoc = QuestionEsDoc.builder()
                .upNum(af.getUpNum())
                .downNum(af.getDownNum())
                .collectNum(af.getCollectNum())
                .viewNum(af.getViewNum())
                .answerNum(af.getCommentNum())
                .build();
        try {
            client.update(req -> req
                            .index(INDEX).id(String.valueOf(questionId))
                            .doc(esDoc).docAsUpsert(true)
                    , QuestionEsDoc.class);
        } catch (IOException e) {
            log.info("更新失败 questionId ：{}", questionId);
        }
    }
```', 0, 9, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1600385177182273536, '2022-12-07 15:02:14.616', false, '2022-12-07 15:02:14.616', 0, 1589864392655110144, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1588166867304841216, 4, 20, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1588208158877155328, '2022-11-04 00:35:07.215', false, '2022-12-10 18:49:42.546', 0, -1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36 Edg/108.0.1438.1', 0, 1588166867304841216, 3, 0, 5, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1601529695529074688, '2022-12-10 18:50:09.054', false, '2022-12-10 18:50:09.054', 0, 0, '<p>an</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1588166867304841216, 3, 0, 0, 'an', 0, 25, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1601529745466458112, '2022-12-10 18:50:20.961', false, '2022-12-10 18:50:20.961', 0, 0, 'co', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', 0, 1588166867304841216, 3, 0, 2, NULL, 0, 3, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1602954256728457216, '2022-12-14 17:10:50.927', false, '2022-12-14 17:10:50.927', 0, 0, 'xx', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1602174123243470848, 5, 0, 2, NULL, 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1602954285522354176, '2022-12-14 17:10:57.776', false, '2022-12-14 17:10:57.776', 0, 0, '<p>xx</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1602174123243470848, 5, 0, 0, 'xx', 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1602954310436519936, '2022-12-14 17:11:03.716', false, '2022-12-14 17:11:03.716', 0, -1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', 0, 1602174123243470848, 5, 0, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1646865348714037248, '2023-04-14 21:17:51.069', false, '2023-04-14 21:17:51.069', 0, 0, '<h1 id="测试下"><a href="#测试下" id="测试下">测试下</a></h1>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', 0, 4, 4, 0, 0, '# 测试下', 0, 7, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1649244075678760960, '2023-04-21 10:50:03.79', false, '2023-04-21 10:50:03.79', 0, 1646693219276161024, '123', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', 0, 1598959826694569984, 4, 3, 1, NULL, 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1646693219276161024, '2023-04-14 09:53:52.213', false, '2023-04-14 09:53:52.213', 0, 0, '<p>推荐一下陈天老师的极客时间课程的代码： <a href="https://github.com/tyrchen/geektime-rust" rel="nofollow" target="_blank">https://github.com/tyrchen/geektime-rust</a> 课程是需要花钱才能看的，但是代码是公开的。按照陈天老师的写法，这些代码都是基于开闭原则编写的，所有项目先根据业务要求实现 traits, 再写具体实现，并且完整的项目基本都带有测试用例以及 examples，代码中应用了很多 rust 中流行的第三方 crates,.</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', 1, 1598959826694569984, 3, 0, 0, '推荐一下陈天老师的极客时间课程的代码： https://github.com/tyrchen/geektime-rust 课程是需要花钱才能看的，但是代码是公开的。按照陈天老师的写法，这些代码都是基于开闭原则编写的，所有项目先根据业务要求实现 traits, 再写具体实现，并且完整的项目基本都带有测试用例以及 examples，代码中应用了很多 rust 中流行的第三方 crates,.', 0, 1, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1646857621749104640, '2023-04-14 20:47:08.835', false, '2023-04-14 20:47:08.835', 0, 1646693219276161024, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', 0, 1598959826694569984, 4, 3, 4, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1646693427196198912, '2023-04-14 09:54:41.785', false, '2023-04-14 09:54:41.785', 1, 0, '<p>推荐一下陈天老师的极客时间课程的代码： <a href="https://github.com/tyrchen/geektime-rust" rel="nofollow" target="_blank">https://github.com/tyrchen/geektime-rust</a> 课程是需要花钱才能看的，但是代码是公开的。按照陈天老师的写法，这些代码都是基于开闭原则编写的，所有项目先根据业务要求实现 traits, 再写具体实现，并且完整的项目基本都带有测试用例以及 examples，代码中应用了很多 rust 中流行的第三方 crates.</p>
', 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', 0, 1598959826694569984, 4, 0, 0, '推荐一下陈天老师的极客时间课程的代码： https://github.com/tyrchen/geektime-rust 课程是需要花钱才能看的，但是代码是公开的。按照陈天老师的写法，这些代码都是基于开闭原则编写的，所有项目先根据业务要求实现 traits, 再写具体实现，并且完整的项目基本都带有测试用例以及 examples，代码中应用了很多 rust 中流行的第三方 crates.', 0, 2, false, '2023-04-14 09:55:43.872033');
INSERT INTO public.qa_answer VALUES (1646857629005250560, '2023-04-14 20:47:10.548', false, '2023-04-14 20:47:10.548', 0, 1646693427196198912, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', 0, 1598959826694569984, 4, 4, 5, NULL, 0, 0, NULL, NULL);
INSERT INTO public.qa_answer VALUES (1649244794129481728, '2023-04-21 10:52:55.064', false, '2023-04-21 10:52:55.064', 0, -1, NULL, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', 0, 1602174123243470848, 3, 0, 4, NULL, 0, 0, NULL, NULL);


--
-- Data for Name: qa_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.qa_group VALUES (1, '2022-08-28 18:51:11.571', false, '2022-08-28 18:51:11.571', '{}', '前端', 0);
INSERT INTO public.qa_group VALUES (2, '2022-08-28 18:51:11.608', false, '2022-08-28 18:51:11.608', '{}', '中端', 0);
INSERT INTO public.qa_group VALUES (3, '2022-08-28 18:51:11.609', false, '2022-08-28 18:51:11.609', '{}', '后端', 0);


--
-- Data for Name: qa_question_content; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.qa_question_content VALUES (2, '2022-08-28 19:35:34.3', false, '2022-08-28 19:35:34.3', 2, '<h1>QA_TEST<h1>', '# MDTEST', 'PURE');
INSERT INTO public.qa_question_content VALUES (3, '2022-08-28 19:36:42.306', false, '2022-08-28 19:36:42.306', 3, '<h1>QA_TEST<h1>', '# MDTEST', 'PURE');
INSERT INTO public.qa_question_content VALUES (1, '2022-08-28 19:29:52.148', false, '2022-08-28 19:29:52.148', 1, '<span class="RichText ztext CopyrightRichText-richText css-4em6pe" options="[object Object]" itemprop="text"><p data-first-child="" data-pid="6ebSRPoE">之前总结的，分享一下。</p><div class="RichText-LinkCardContainer"><a target="_blank" href="https://zhuanlan.zhihu.com/p/278028242" data-draft-node="block" data-draft-type="link-card" data-text="windliang：WebAssembly入门" class="LinkCard new css-1wr1m8" data-image="https://pic2.zhimg.com/v2-a2911e992cb675e6c1682cea79ea3401_180x120.jpg" data-image-width="1920" data-image-height="1277" data-za-detail-view-id="172"><span class="LinkCard-contents"><span class="LinkCard-title two-line">windliang：WebAssembly入门</span><span class="LinkCard-desc">43 赞同 · 5 评论<span class="LinkCard-tag">文章</span></span></span><span class="LinkCard-image" style="height: 60px;"><img src="https://pic2.zhimg.com/v2-a2911e992cb675e6c1682cea79ea3401_180x120.jpg" alt="" class="hide" style="display: none;"></span></a></div><h2>引言</h2><p data-pid="GZ1kmkpm">先看下 <a href="https://webassembly.org/" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">官网</a> 给的定义。</p><blockquote data-pid="DjmRC3uV">WebAssembly (abbreviated <i>Wasm</i>) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.</blockquote><p data-pid="uFEl_j7r"><code>WebAssembly</code> 是基于<span><a data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E6%A0%88%E5%BC%8F%E8%99%9A%E6%8B%9F%E6%9C%BA&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1961085507%7D" target="_blank" class="css-pgtd2j">栈式虚拟机<svg width="10px" height="10px" viewBox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"></path></svg></a></span>的二进制指令集，可以作为编程语言的编译目标，能够部署在 <code>web</code> 客户端和服务端的应用中。</p><p data-pid="cv4EBOti">第一次看到这个定义的时候是一头雾水，翻了一些资料渐渐有了点轮廓，下边分享下我目前的理解。</p><p data-pid="Bi1_xwzG">首先 <code>WebAssembly</code> 是由 <code>Web</code> 和 <code>Assembly</code> 两个词构成，其中 <code>Web</code> 表明它一定和前端有关。<code>Assembly</code> 的意思是汇编，汇编对应机器码，而机器码和 <code>CPU</code> 的指令集有关，接下来补一下相关的知识。</p><h2>相关概念</h2><p data-pid="71rZG_aZ">其中指令集、操作系统相关的知识，之前总结过几篇文章，<a href="https://windliang.wang/2019/11/06/到底学哪一门编程语言/" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">到底学哪一门编程语言</a>、<a href="https://windliang.wang/2020/03/11/x86-x64-x86-64-amd64-arm指令集架构之间的关系/" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">x86,x64,x86-64,amd64,arm指令集架构之间的关系</a>、<a href="https://windliang.wang/2019/05/21/linux和Android的关系/" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">linux和Android的关系</a>，可以先过去看一下，这里的话抽主要的部分回顾一下。</p><p class="ztext-empty-paragraph"><br></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/50/v2-953036585bc2a93917804f7391d0ed73_720w.jpg?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="1230" data-rawheight="494" class="origin_image zh-lightbox-thumb" width="1230" data-original="https://pic1.zhimg.com/v2-953036585bc2a93917804f7391d0ed73_r.jpg?source=1940ef5c"/></noscript><div><img src="https://pic1.zhimg.com/80/v2-953036585bc2a93917804f7391d0ed73_720w.webp?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="1230" data-rawheight="494" class="origin_image zh-lightbox-thumb lazy hide" width="1230" data-original="https://pic1.zhimg.com/v2-953036585bc2a93917804f7391d0ed73_r.jpg?source=1940ef5c" data-actualsrc="https://pic1.zhimg.com/50/v2-953036585bc2a93917804f7391d0ed73_720w.jpg?source=1940ef5c" style="display: none;" height="494" data-lazy-status="ok"></div></figure><p class="ztext-empty-paragraph"><br></p><p data-pid="r9qVvur6">参考上图，计算机的主要架构如上。最底层是 <code>CPU</code> 的指令集，主要分为复杂指令集和<span><a data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E7%AE%80%E5%8D%95%E6%8C%87%E4%BB%A4%E9%9B%86&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1961085507%7D" target="_blank" class="css-pgtd2j">简单指令集<svg width="10px" height="10px" viewBox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"></path></svg></a></span>。</p><p data-pid="ySLzkBnU">复杂指令集是 <code>x86</code>、<code>x64(也叫 x86-64, amd64)</code> 两种架构，专利在 <code>Intel</code> 和 <code>AMD</code> 两家公司手里， 该架构 <code>CPU</code> 主要是 <code>Intel</code> 和 <code>AMD</code> 两家公司，这种 <code>CPU</code> 常用在 <code>PC</code> 机上，包括 <code>Windows</code>，<code>macOS</code> 和 <code>Linux</code>。</p><p data-pid="r3_fGrem">简单指令集是 <code>arm</code> 一种架构，专利在 <code>ARM</code> 公司手里，该架构 <code>CPU</code> 主要有高通、三星、苹果、华为海思、联发科等公司。这种 <code>CPU</code> 常用在手机上，包括安卓和苹果。</p><p data-pid="Nj-lpYQH">指令集是什么呢？直接把阮一峰的老师的一个 <a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">例子</a> 粘过来，大家可以看一下。</p><p data-pid="uoXoXyAE"><code>c</code> 语言的源程序。</p><div class="highlight"><pre><code class="language-text">int add_a_and_b(int a, int b) {
   return a + b;
}

int main() {
   return add_a_and_b(2, 3);
}</code></pre></div><p data-pid="zpNrnty0">所对应的汇编就是下边的样子。</p><div class="highlight"><pre><code class="language-text">_add_a_and_b:
   push   %ebx
   mov    %eax, [%esp+8] 
   mov    %ebx, [%esp+12]
   add    %eax, %ebx 
   pop    %ebx 
   ret  

_main:
   push   3
   push   2
   call   _add_a_and_b 
   add    %esp, 8
   ret</code></pre></div><p data-pid="RJyJhUG3">这里的 <code>push</code> 、<code>mov</code> 每一条指令就是指令集规定的内容，规定了操作码、操作数以及具体的功能。当然这里是用汇编表示的，主要是为了我们人类来读写，最终还会转成 <code>0,1</code> 序列。上边每个单词都会有一个数字相对应，比如 <code>add</code> 指令对应 <code>00000011</code> 。</p><p data-pid="KZErYOCm">通过规定的指令集（加法的指令，压栈指令等），编写相关程序，然后 <code>CPU</code> 就会一条一条的执行，最终实现相应的功能。</p><p data-pid="4h572YTK">而 <code>WebAssembly</code> 就规定了一套指令集，更准确的来说是<span><a data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E8%99%9A%E6%8B%9F%E6%8C%87%E4%BB%A4%E9%9B%86&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1961085507%7D" target="_blank" class="css-pgtd2j">虚拟指令集<svg width="10px" height="10px" viewBox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"></path></svg></a></span>，因为这套指令集是跑在虚拟机上的，而不是直接由硬件运行。</p><h2>历史</h2><p data-pid="xiTFvf76">上边我们知道了 <code>WebAssembly</code> 的 <code>Assembly</code> ，即汇编，也就是指令集。下边在回顾下 <code>Web</code>，即 <code>WebAssembly</code>诞生的原因。</p><p data-pid="tIiUmzVw">这里就得谈到 <code>javaScript</code> 了，众所周知， <code>javaScript</code> 是一门动态类型的语言，编写程序时无需考虑变量类型，而且还可以运行时改变类型。对于我们开发者，确实很方便，但对于运行它的引擎就很有问题了。参考 <a href="https://time.geekbang.org/column/intro/100048001?code=IpXg2Hdg-kigonWwbirm/ZC4p5C39fJxsiLckpyppIk=" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">这里</a> 的一张图，看一下 <code>V8</code> 引擎从 <code>js</code> 源码到执行的一个过程。</p><p class="ztext-empty-paragraph"><br></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/50/v2-8a34ae8c1a7a0f87e19b1384a025e354_720w.jpg?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="1142" data-rawheight="604" class="origin_image zh-lightbox-thumb" width="1142" data-original="https://pic2.zhimg.com/v2-8a34ae8c1a7a0f87e19b1384a025e354_r.jpg?source=1940ef5c"/></noscript><div><img src="data:image/svg+xml;utf8,<svg xmlns=''http://www.w3.org/2000/svg'' width=''1142'' height=''604''></svg>" data-caption="" data-size="normal" data-rawwidth="1142" data-rawheight="604" class="origin_image zh-lightbox-thumb lazy hide" width="1142" data-original="https://pic2.zhimg.com/v2-8a34ae8c1a7a0f87e19b1384a025e354_r.jpg?source=1940ef5c" data-actualsrc="https://pic1.zhimg.com/50/v2-8a34ae8c1a7a0f87e19b1384a025e354_720w.jpg?source=1940ef5c" style="display: none;"></div></figure><p class="ztext-empty-paragraph"><br></p><p data-pid="_ioj4rjo">由于 <code>js</code> 的动态类型，解释器在执行代码的时候会在类型判断上带来一定的性能消耗，降低执行速度。所以 <code>V8</code> 引擎采用了 <code>JIT</code>（即时编译技术） 技术，监控一些经常执行的代码，将其编译成 <code>CPU</code> 直接执行的机器码，提高执行速度。但由于 <code>js</code> 动态类型，在某些情况下还得反优化，回到字节码进行执行。</p><p data-pid="vxdTvJtt">随着前端的不断发展，项目的大小和复杂度不断增大，对于某些场景，性能上可能已经无法满足，浏览器厂商们也一直在探索性能优化的方法。</p><h2>NaCl/PNaCl</h2><p data-pid="TO4EKhV8"><code>2011</code> 年 <code>Google</code> 在 <code>Chrome</code> 中使用了 <code>NaCl</code> 技术，可以使得 <code>C</code> 语言编写的程序运行到浏览器中，下边是<a href="https://zh.wikipedia.org/wiki/Native_Client" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">维基百科</a> 的定义。</p><blockquote data-pid="QRdol3_7"><b>Google Native Client</b>（缩写为<b>NaCl</b>），是一个由<a href="https://zh.wikipedia.org/wiki/谷歌" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">谷歌</a>所发起的<a href="https://zh.wikipedia.org/wiki/開放原始碼" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">开放源代码</a>计划，采用<a href="https://zh.wikipedia.org/wiki/BSD许可证" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">BSD许可证</a>。它采用<a href="https://zh.wikipedia.org/wiki/沙盒_(計算機安全)" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">沙盒</a>技术，让<a href="https://zh.wikipedia.org/wiki/Intel_x86" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Intel x86</a>、<a href="https://zh.wikipedia.org/wiki/ARM" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">ARM</a>或<a href="https://zh.wikipedia.org/wiki/MIPS" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">MIPS</a>子集的<a href="https://zh.wikipedia.org/wiki/機器碼" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">机器代码</a>直接在沙盒上运行。它能够从<a href="https://zh.wikipedia.org/wiki/瀏覽器" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">浏览器</a>直接运行程序机器代码，独立于用户的操作系统之外，使<a href="https://zh.wikipedia.org/wiki/Web应用程序" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Web应用程序</a>可以用接近于机器代码运作的速度来运行，同时兼顾安全性。其功能类似于<a href="https://zh.wikipedia.org/wiki/微軟" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">微软</a>的 <a href="https://zh.wikipedia.org/wiki/ActiveX" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">ActiveX</a>，但是ActiveX只支持视窗系统。</blockquote><p data-pid="lOJ5cITf">但一个完整的 <code>NaCl</code> 应用，在分发时需要提供支持多个架构平台（X86 / X64 / ARM 等）的模块文件，后来谷歌又推出了与底层架构无关的 <code>PNaCl</code> 技术。但由于其开发难度、兼容性等问题最终没有普及开来。在 <code>2017</code> 年 <code>Google</code> 宣布放弃 <code>PNaCl</code> 转向 <code>WebAssembly</code>。</p><h2>ASM.js</h2><p data-pid="wk3-wCN3"><code>ASM.js</code> 是 <code>Mozilla</code> 在 <code>2013</code> 年推出的，是 <code>javaScript</code> 的一个严格子集，可以作为 <code>C/C++</code> 编译的目标语言，从而使得 <code>js</code> 引擎可以采用 <code>AOT(Ahead Of Time)</code> 的编译策略，也就是在运行前直接编译成机器码，因此运行速度会有一定的提升。</p><p data-pid="UYezOD8b"><code>ASM.js</code> 通常不直接编写，而是作为一种通过编译器生成的中间语言，该编译器获取 <code>C++</code> 或其他语言的源代码，然后输出 <code>ASM.js</code>。</p><p data-pid="KjlKuV0f">例如下边的 <code>C</code> 语言代码。</p><div class="highlight"><pre><code class="language-text">int f(int i) {
  return i + 1;
}</code></pre></div><p data-pid="QgXLLcWz">经过编译器编译会生成下边的 <code>js</code> 代码。</p><div class="highlight"><pre><code class="language-text">function f(i) {
  i = i|0;
  return (i + 1)|0;
}</code></pre></div><p data-pid="gcr6Oy1q">注意这里的<code>|0</code> 在 <code>js</code> 中相当于和 <code>0</code> 进行了或操作，所以不影响原本的逻辑。在 <code>asm.js</code> 中起到了类型标记的作用，这样 <code>js</code> 引擎执行的时候就知道 <code>i</code> 是一个整型，返回值是一个整型。除了或操作这种，<code>ASM.js</code> 标准中还规定了很多类似的标记规则，用于告诉 <code>js</code> 引擎变量的类型，便于进行 <code>AOT</code> 优化。</p><p data-pid="lOIhasq4">这看起来和 <code>TypeScript</code> 很像，但其实不是一种东西。<code>TypeScript</code> 是 <code>js</code> 的一个超集，浏览器并不能直接执行 <code>ts</code>，还需要转换为 <code>js</code> 去执行。<code>ts</code> 主要是帮助我们开发人员去看的，增加了代码的可读性，也可以让编辑器提前发现一些错误。而 <code>asm.js</code> 是用于引擎的编译优化。</p><h2>WebAssembly</h2><p data-pid="I6imLWqx">接下来看一下 <code>WebAssembly</code> 的历史。</p><blockquote data-pid="tNnjkcM4">2015 年 4 月，WebAssembly Community Group 成立；<br>2015 年 6 月，WebAssembly 第一次以 WCG 的官方名义向外界公布；<br>2016 年 8 月，WebAssembly 开始进入了漫长的 “Browser Preview” 阶段；<br>2017 年 2 月，WebAssembly 官方 LOGO 在 Github 上的众多讨论中被最终确定；同年同月，一个历史性的阶段，四大浏览器（FireFox、Chrome、Edge、WebKit）在 WebAssembly 的 MVP（最小可用版本）标准实现上达成共识，这意味着 WebAssembly 在其 MVP 标准上的 “Brower Preview” 阶段已经结束；<br>2017 年 8 月，W3C WebAssembly Working Group 成立，意味着 WebAssembly 正式成为 W3C 众多技术标准中的一员。</blockquote><p data-pid="V9BlJ98M"><code>WebAssembly</code> 于 <code>2019</code> 年 <code>12</code> 月 <code>5</code> 日成为万维网联盟（<code>W3C</code>）的推荐标准，与 <code>HTML</code>，<code>CSS</code> 和 <code>JavaScript</code> 一起成为 <code>Web</code> 的第四种语言。</p><p data-pid="_C4h-Fry">可以看一下目前浏览器的支持程度，已经算比较高了。</p><p class="ztext-empty-paragraph"><br></p><figure data-size="normal"><noscript><img src="https://pic2.zhimg.com/50/v2-62c512d5a8cb3b63c585721c223afeb5_720w.jpg?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="2726" data-rawheight="912" class="origin_image zh-lightbox-thumb" width="2726" data-original="https://pic1.zhimg.com/v2-62c512d5a8cb3b63c585721c223afeb5_r.jpg?source=1940ef5c"/></noscript><div><img src="data:image/svg+xml;utf8,<svg xmlns=''http://www.w3.org/2000/svg'' width=''2726'' height=''912''></svg>" data-caption="" data-size="normal" data-rawwidth="2726" data-rawheight="912" class="origin_image zh-lightbox-thumb lazy hide" width="2726" data-original="https://pic1.zhimg.com/v2-62c512d5a8cb3b63c585721c223afeb5_r.jpg?source=1940ef5c" data-actualsrc="https://pic2.zhimg.com/50/v2-62c512d5a8cb3b63c585721c223afeb5_720w.jpg?source=1940ef5c" style="display: none;"></div></figure><p class="ztext-empty-paragraph"><br></p><h2>初体验</h2><h2>内部结构</h2><p data-pid="gK363Ohz">目前已经有了将 <code>C/C++</code> 、<code>Rust</code>、<code>ts</code>、<code>C#</code>、<code>Go</code>、<code>Kotlin</code>、<code>Swift</code> 等语言转换为 <code>WebAssembly(wasm)</code> 的工具，下边我们体验一下 <code>C++</code> 转换的过程。</p><p data-pid="OunBxXZ_">首先编写一个 <code>C++</code> 程序 <code>fibonacci.cc</code>，斐波纳契数字的递归写法。</p><div class="highlight"><pre><code class="language-text">#include &lt;emscripten.h&gt;
extern "C" {
  EMSCRIPTEN_KEEPALIVE 
  int fibonacci(int n) {
    if(n &lt; 2) {
      return 1;
    }
    return fibonacci(n - 1) + fibonacci(n - 2);
  }
}</code></pre></div><p data-pid="Cwqzv9Tk">函数的定义置在 <code>extern “C” {}</code> 结构中，是为了防止函数名编译后被改变。<code>EMSCRIPTEN_KEEPALIVE</code> 是为了确保函数不会在编译器的编译过程中，被 <code>DCE（Dead Code 」limination）</code>过程处理掉。</p><p data-pid="Ivd0Fh2H">然后需要安装 <code>Emscripten</code> 用来将 <code>C++</code> 程序编译为 <code>WebAssembly(wasm)</code> 的程序，安装后执行下边的命令。</p><div class="highlight"><pre><code class="language-text">emcc fibonacci.cc -s WASM=1 -O3 --no-entry -o fibonacci.wasm</code></pre></div><p data-pid="UEaBPzAX"><code>-s WASM=1</code> 表明编译成 <code>Webassembly</code> 的程序，<code>-O3</code> 表明编译的优化程度，<code>–no-entry</code> 参数告诉编译器没有声明 <code>main</code> 函数，<code>-o</code> 指定生成的文件名。</p><p data-pid="M1fmT2R_">让我们看一下生成的字节码文件 <code>fibonacci.wasm</code>。</p><div class="highlight"><pre><code class="language-text">Offset: 00 01 02 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F   
00000000: 00 61 73 6D 01 00 00 00 01 11 04 60 00 01 7F 60    .asm.......`...`
00000010: 01 7F 01 7F 60 00 00 60 01 7F 00 03 07 06 02 01    ....`..`........
00000020: 00 03 01 00 04 05 01 70 01 02 02 05 06 01 01 80    .......p........
00000030: 02 80 02 06 0F 02 7F 01 41 90 88 C0 02 0B 7F 00    ........A..@....
00000040: 41 84 08 0B 07 88 01 09 06 6D 65 6D 6F 72 79 02    A........memory.
00000050: 00 19 5F 5F 69 6E 64 69 72 65 63 74 5F 66 75 6E    ..__indirect_fun
00000060: 63 74 69 6F 6E 5F 74 61 62 6C 65 01 00 09 66 69    ction_table...fi
00000070: 62 6F 6E 61 63 63 69 00 01 0B 5F 69 6E 69 74 69    bonacci..._initi
00000080: 61 6C 69 7A 65 00 00 10 5F 5F 65 72 72 6E 6F 5F    alize...__errno_
00000090: 6C 6F 63 61 74 69 6F 6E 00 05 09 73 74 61 63 6B    location...stack
000000a0: 53 61 76 65 00 02 0C 73 74 61 63 6B 52 65 73 74    Save...stackRest
000000b0: 6F 72 65 00 03 0A 73 74 61 63 6B 41 6C 6C 6F 63    ore...stackAlloc
000000c0: 00 04 0A 5F 5F 64 61 74 61 5F 65 6E 64 03 01 09    ...__data_end...
000000d0: 07 01 00 41 01 0B 01 00 0A 66 06 03 00 01 0B 3D    ...A.....f.....=
000000e0: 01 02 7F 41 01 21 01 20 00 41 02 4E 04 7F 41 00    ...A.!...A.N..A.
000000f0: 21 01 03 40 20 00 41 7F 6A 10 01 20 01 6A 21 01    !..@..A.j....j!.
00000100: 20 00 41 03 4A 21 02 20 00 41 7E 6A 21 00 20 02    ..A.J!...A~j!...
00000110: 0D 00 0B 20 01 41 01 6A 05 41 01 0B 0B 04 00 23    .....A.j.A.....#
00000120: 00 0B 06 00 20 00 24 00 0B 10 00 23 00 20 00 6B    ......$....#...k
00000130: 41 70 71 22 00 24 00 20 00 0B 05 00 41 80 08 0B    Apq".$......A...</code></pre></div><p data-pid="RHc5bTKb">让我们来解读下，最开始的前八个字节 <code>0x0 0x61 0x73 0x6d 0x1 0x0 0x0 0x0</code> 表明当前是一个 <code>wasm</code> 的模块。然后会分很多 <code>Section</code> ，<code>Function Section</code>， <code>Code Section</code> 等等，都有特定的数字对应，还有就是文章开头讲的指令操作符所对应的一些数字。</p><p data-pid="fwXDntaR">看着上边的字节码仿佛回到了上古时期直接用机器码编程的时代，当年出现了汇编语言。这里也会有类似汇编的东西，那就是 <code>WAT（WebAssembly Text Format)</code> 。</p><p data-pid="IxKKRuLM">需要安装 <a href="https://github.com/WebAssembly/wabt#building-using-cmake-directly-linux-and-macos" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">WABT</a> , 然后执行 <code>wasm2wat</code> 命令。</p><div class="highlight"><pre><code class="language-text">../wabt/bin/wasm2wat <span><a data-za-not-track-link="true" href="https://www.zhihu.com/search?q=fibonacci&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1961085507%7D" target="_blank" class="css-pgtd2j">fibonacci<svg width="10px" height="10px" viewBox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"></path></svg></a></span>.wasm -o fibonacci.wat</code></pre></div><p data-pid="kjeeo3sY">然后就生成了 <code>fibonacci.wat</code> 文件。</p><div class="highlight"><pre><code class="language-text">(module
  (type (;0;) (func (result i32)))
  (type (;1;) (func (param i32) (result i32)))
  (type (;2;) (func))
  (type (;3;) (func (param i32)))
  (func (;0;) (type 2)
    nop)
  (func (;1;) (type 1) (param i32) (result i32)
    (local i32 i32)
    i32.const 1
    local.set 1
    local.get 0
    i32.const 2
    i32.ge_s
    if (result i32)  ;; label = @1
      i32.const 0
      local.set 1
      loop  ;; label = @2
        local.get 0
        i32.const -1
        i32.add
        call 1
        local.get 1
        i32.add
        local.set 1
        local.get 0
        i32.const 3
        i32.gt_s
        local.set 2
        local.get 0
        i32.const -2
        i32.add
        local.set 0
        local.get 2
        br_if 0 (;@2;)
      end
      local.get 1
      i32.const 1
      i32.add
    else
      i32.const 1
    end)
  (func (;2;) (type 0) (result i32)
    global.get 0)
  (func (;3;) (type 3) (param i32)
    local.get 0
    global.set 0)
  (func (;4;) (type 1) (param i32) (result i32)
    global.get 0
    local.get 0
    i32.sub
    i32.const -16
    i32.and
    local.tee 0
    global.set 0
    local.get 0)
  (func (;5;) (type 0) (result i32)
    i32.const 1024)
  (table (;0;) 2 2 funcref)
  (memory (;0;) 256 256)
  (global (;0;) (mut i32) (i32.const 5243920))
  (global (;1;) i32 (i32.const 1028))
  (export "memory" (memory 0))
  (export "__indirect_function_table" (table 0))
  (export "fibonacci" (func 1))
  (export "_initialize" (func 0))
  (export "__errno_location" (func 5))
  (export "stackSave" (func 2))
  (export "stackRestore" (func 3))
  (export "stackAlloc" (func 4))
  (export "__data_end" (global 1))
  (elem (;0;) (i32.const 1) func 0))</code></pre></div><p data-pid="Xr9qzKYm">上边的格式属于 「S- 表达式」， <code>Lisp</code> 语言就是采用的这种表达式，每条语句都是先执行最里边括号的表达式然后依次展开。</p><h2>使用方法</h2><p data-pid="TVTi59CF">上边主要介绍了 <code>.wasm</code> 具体长什么样子，下边看一下怎么用到浏览器中。</p><p data-pid="375i05u0">从 <code>.wasm</code> 源文件到实例化的对象主要有三个步骤，<code>加载 -&gt; 编译 -&gt; 实例化 -&gt; 调用</code>。</p><p data-pid="PG0uN3kL">加载：读取 <code>.wasm</code> 字节码到本地中，一般是通过 <code>fetch</code> 从网络中取得。</p><p data-pid="Pnf5SeDl">编译：在 Worker 线程进行，编译成平台相关的代码。</p><p data-pid="PkqqmMRu">实例化：将宿主环境的一些对象、方法导入到 <code>wasm</code> 模块中，比如导入操作 <code>dom</code> 的方法。</p><p data-pid="4HiCQ3jQ">调用：通过上一步已经实例化的对象，来调用 <code>wasm</code> 模块中的方法。</p><p data-pid="cqo8N06U">主要有两种类型的 <code>API</code>，一种是 <code>js</code> 提供的 <code>api</code> ，另一种是 <code>Web</code> 提供的 <code>api</code> ，<code>Web</code> 提供的 <code>api</code> 支持流式编译实例化。</p><p data-pid="k2Y5RjHD"><code>js</code> 的方法，<code>WebAssembly.instantiate(bufferSource, importObject)</code>，可以完成编译和实例化。</p><p data-pid="jr8ORg3T"><code>bufferSource</code> 是含有效 <code>Wasm</code> 模块二进制字节码的 <code>ArrayBuffer</code> 或 <code>TypedArray</code> 对象。</p><p data-pid="tgja8stO"><code>importObject</code> 是要导入到 <code>Wasm</code> 模块中的对象。</p><p data-pid="tdQNjEp0">方法在调用后返回一个<code>Promise</code> 对象，<code>resolve</code> 后返回一个对象，该对象包含编译好的 <code>module</code> 和已经实例化的 <code>instance</code>，模块导出的方法可以通过 <code>instance</code> 对象进行调用。</p><p data-pid="WOrgbskB"><code>web</code> 的方法，<code>WebAssembly.instantiateStreaming(source, importObject)</code>。</p><p data-pid="2TvGLLws">不同之处在于第一个参数，这里的 <code>source</code> 指的是尚未 <code>Resolve</code> 的 <code>Response</code> 对象（<code>window.fetch</code> 调用后会返回该对象），好处就是可以边读取 <code>.wasm</code> 字节流，边进行编译。</p><p data-pid="raT-t7Ty">其他参数和返回值和 <code>js</code> 的 <code>api</code> 均一致。</p><h2>js API 尝试</h2><p data-pid="kMFPR4Zc">先简单的尝试一下，我们直接构造一个 <code>wasm</code> 模块的 <code>TypedArray</code> 对象，该模块包含了一个 <code>add</code> 方法，然后调用 <code>WebAssembly.instantiate</code> 进行编译和实例化。</p><p data-pid="HcQSydhp">对应的 <code>C++</code> 代码。</p><div class="highlight"><pre><code class="language-text">#include &lt;emscripten.h&gt;

extern "C" {
  EMSCRIPTEN_KEEPALIVE 
  int add(int a, int b) {
    return a + b;
  }
}</code></pre></div><p data-pid="NRxB5Kgq">对应的 <code>.wasm</code> 字节码。</p><div class="highlight"><pre><code class="language-text">00 61 73 6D 01 00 00 00 01 17 05 60 00 01 7F 60
00 00 60 01 7F 00 60 01 7F 01 7F 60 02 7F 7F 01
7F 03 07 06 01 04 00 02 03 00 04 05 01 70 01 02
02 05 06 01 01 80 02 80 02 06 0F 02 7F 01 41 90
88 C0 02 0B 7F 00 41 84 08 0B 07 82 01 09 06 6D
65 6D 6F 72 79 02 00 19 5F 5F 69 6E 64 69 72 65
63 74 5F 66 75 6E 63 74 69 6F 6E 5F 74 61 62 6C
65 01 00 03 61 64 64 00 01 0B 5F 69 6E 69 74 69
61 6C 69 7A 65 00 00 10 5F 5F 65 72 72 6E 6F 5F
6C 6F 63 61 74 69 6F 6E 00 05 09 73 74 61 63 6B
53 61 76 65 00 02 0C 73 74 61 63 6B 52 65 73 74
6F 72 65 00 03 0A 73 74 61 63 6B 41 6C 6C 6F 63
00 04 0A 5F 5F 64 61 74 61 5F 65 6E 64 03 01 09
07 01 00 41 01 0B 01 00 0A 30 06 03 00 01 0B 07
00 20 00 20 01 6A 0B 04 00 23 00 0B 06 00 20 00
24 00 0B 10 00 23 00 20 00 6B 41 70 71 22 00 24
00 20 00 0B 05 00 41 80 08 0B</code></pre></div><p data-pid="w8ffz1ET">然后直接在控制台输入下边的代码。</p><div class="highlight"><pre><code class="language-text">WebAssembly.instantiate(new Uint8Array(`
  00 61 73 6D 01 00 00 00 01 17 05 60 00 01 7F 60
00 00 60 01 7F 00 60 01 7F 01 7F 60 02 7F 7F 01
7F 03 07 06 01 04 00 02 03 00 04 05 01 70 01 02
02 05 06 01 01 80 02 80 02 06 0F 02 7F 01 41 90
88 C0 02 0B 7F 00 41 84 08 0B 07 82 01 09 06 6D
65 6D 6F 72 79 02 00 19 5F 5F 69 6E 64 69 72 65
63 74 5F 66 75 6E 63 74 69 6F 6E 5F 74 61 62 6C
65 01 00 03 61 64 64 00 01 0B 5F 69 6E 69 74 69
61 6C 69 7A 65 00 00 10 5F 5F 65 72 72 6E 6F 5F
6C 6F 63 61 74 69 6F 6E 00 05 09 73 74 61 63 6B
53 61 76 65 00 02 0C 73 74 61 63 6B 52 65 73 74
6F 72 65 00 03 0A 73 74 61 63 6B 41 6C 6C 6F 63
00 04 0A 5F 5F 64 61 74 61 5F 65 6E 64 03 01 09
07 01 00 41 01 0B 01 00 0A 30 06 03 00 01 0B 07
00 20 00 20 01 6A 0B 04 00 23 00 0B 06 00 20 00
24 00 0B 10 00 23 00 20 00 6B 41 70 71 22 00 24
00 20 00 0B 05 00 41 80 08 0B`.trim().split(/[\s\r\n]+/g).map(str =&gt; parseInt(str, 16))
)).then(({instance}) =&gt; {
  const { add } = instance.exports
  console.log(''2 + 4 ='', add(2, 4))
})</code></pre></div><p data-pid="xTJJ044U">然后就会看到输出了 <code>2 + 4 = 6</code>。</p><p class="ztext-empty-paragraph"><br></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/50/v2-a5dcd7c68723b430d2e6d8a4c41c86ab_720w.jpg?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="1328" data-rawheight="816" class="origin_image zh-lightbox-thumb" width="1328" data-original="https://pic1.zhimg.com/v2-a5dcd7c68723b430d2e6d8a4c41c86ab_r.jpg?source=1940ef5c"/></noscript><div><img src="data:image/svg+xml;utf8,<svg xmlns=''http://www.w3.org/2000/svg'' width=''1328'' height=''816''></svg>" data-caption="" data-size="normal" data-rawwidth="1328" data-rawheight="816" class="origin_image zh-lightbox-thumb lazy hide" width="1328" data-original="https://pic1.zhimg.com/v2-a5dcd7c68723b430d2e6d8a4c41c86ab_r.jpg?source=1940ef5c" data-actualsrc="https://pic1.zhimg.com/50/v2-a5dcd7c68723b430d2e6d8a4c41c86ab_720w.jpg?source=1940ef5c" style="display: none;"></div></figure><p class="ztext-empty-paragraph"><br></p><h2>Web API 尝试</h2><p data-pid="se7N0jIF">我们再尝试一下流式编译。直接使用之前的<span><a data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E6%96%90%E6%B3%A2%E7%BA%B3%E5%A5%91%E6%95%B0%E5%AD%97&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1961085507%7D" target="_blank" class="css-pgtd2j">斐波纳契数字<svg width="10px" height="10px" viewBox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"></path></svg></a></span>的 <code>fibonacci.wasm</code> 模块。</p><p data-pid="AQ_INsBJ">首先我们需要提供一个简单的 <code>HTTP</code> 服务，用来返回 <code>.wasm</code> 文件。</p><p data-pid="uX64YWvf">新建一个 <code>node.js</code> 文件。</p><div class="highlight"><pre><code class="language-text">const http = require(''http'');
const url = require(''url'');
const fs = require(''fs'');
const path =require(''path'');

const PORT = 8888;  // 服务器监听的端口号；

const mime = {
  "html": "text/html;charset=UTF-8",
  "wasm": "application/wasm"  // 当遇到对 ".wasm" 格式文件的请求时，返回特定的 MIME 头；
};

http.createServer((req, res) =&gt; {
  let realPath = path.join(__dirname, `.${url.parse(req.url).pathname}`);
  // 检查所访问文件是否存在，且是否可读；
  fs.access(realPath, fs.constants.R_OK, err =&gt; {  
    if (err) {
      res.writeHead(404, { ''Content-Type'': ''text/plain'' });
      res.end();
    } else {
      fs.readFile(realPath, "binary", (err, file) =&gt; {
        if (err) {
          // 文件读取失败时返回 500；          
          res.writeHead(500, { ''Content-Type'': ''text/plain'' });
          res.end();
        } else {
          // 根据请求的文件返回相应的文件内容；
          let ext = path.extname(realPath);
          ext = ext ? ext.slice(1) : ''unknown'';
          let contentType = mime[ext] || "text/plain";
          res.writeHead(200, { ''Content-Type'': contentType });
          res.write(file, "binary");
          res.end();
        }
      });
    }
  });
}).listen(PORT);
console.log("Server is runing at port: " + PORT + ".");</code></pre></div><p data-pid="9_rMXfIY">然后来编写我们的 <code>html</code> 文件，讲到<span><a data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0%E5%AD%97&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1961085507%7D" target="_blank" class="css-pgtd2j">斐波那契数字<svg width="10px" height="10px" viewBox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"></path></svg></a></span>，我们顺便做一个性能的测试，来比较一下使用 <code>wasm</code> 的方式和原生 <code>js</code> 的求解速度。</p><div class="highlight"><pre><code class="language-text">&lt;!DOCTYPE html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;
    &lt;title&gt;斐波纳切数字&lt;/title&gt;
  &lt;/head&gt;
  &lt;script&gt;
    function fibonacciJS(n) {
      if (n &lt; 2) {
        return 1;
      }
      return fibonacciJS(n - 1) + fibonacciJS(n - 2);
    }
    const response = fetch("fibonacci.wasm");
    const num = [5, 15, 25, 35, 45];
    WebAssembly.instantiateStreaming(response).then(
      ({ instance }) =&gt; {
        let { fibonacci } = instance.exports;
        for(let n of num) {
          console.log(`斐波纳切数字: ${n}，运行 10 次`)
          let cTime = 0;
          let jsTime = 0;
          for(let time = 0; time &lt; 10; time++) {
            let start = performance.now();
            fibonacci(n)
            cTime += (performance.now() - start)

            start = performance.now();
            fibonacciJS(n)
            jsTime += (performance.now() - start)
          }
          console.log(`wasm 模块平均调用时间：${cTime / 10}ms`)
          console.log(`js 模块平均调用时间：${jsTime / 10}ms`)
        }

      }
    )
  &lt;/script&gt;
  &lt;body&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre></div><p data-pid="3qyIs4J5">然后执行 <code>node node.js</code> 开启 <code>http</code> 服务，接着在浏览器中打开 <code>http://localhost:8888/index.html</code>，控制台中输出如下：</p><div class="highlight"><pre><code class="language-text">斐波纳切数字: 5，运行 10 次
index.html:34 wasm 模块平均调用时间：0.001499993959441781ms
index.html:35 js 模块平均调用时间：0.005500001134350896ms
index.html:22 斐波纳切数字: 15，运行 10 次
index.html:34 wasm 模块平均调用时间：0.005999993300065398ms
index.html:35 js 模块平均调用时间：0.15650001005269587ms
index.html:22 斐波纳切数字: 25，运行 10 次
index.html:34 wasm 模块平均调用时间：0.6239999900572002ms
index.html:35 js 模块平均调用时间：1.1620000121183693ms
index.html:22 斐波纳切数字: 35，运行 10 次
index.html:34 wasm 模块平均调用时间：70.59700000681914ms
index.html:35 js 模块平均调用时间：126.21099999523722ms
index.html:22 斐波纳切数字: 45，运行 10 次
index.html:34 wasm 模块平均调用时间：8129.7520000021905ms
index.html:35 js 模块平均调用时间：16918.658500007587ms</code></pre></div><p data-pid="T6YNvFSe">整理成表格看一下：</p><p class="ztext-empty-paragraph"><br></p><figure data-size="normal"><noscript><img src="https://pic3.zhimg.com/50/v2-7bdaf707a4d16646c2819f9fc87e045d_720w.jpg?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="1192" data-rawheight="172" class="origin_image zh-lightbox-thumb" width="1192" data-original="https://pica.zhimg.com/v2-7bdaf707a4d16646c2819f9fc87e045d_r.jpg?source=1940ef5c"/></noscript><div><img src="data:image/svg+xml;utf8,<svg xmlns=''http://www.w3.org/2000/svg'' width=''1192'' height=''172''></svg>" data-caption="" data-size="normal" data-rawwidth="1192" data-rawheight="172" class="origin_image zh-lightbox-thumb lazy hide" width="1192" data-original="https://pica.zhimg.com/v2-7bdaf707a4d16646c2819f9fc87e045d_r.jpg?source=1940ef5c" data-actualsrc="https://pic3.zhimg.com/50/v2-7bdaf707a4d16646c2819f9fc87e045d_720w.jpg?source=1940ef5c" style="display: none;"></div></figure><p class="ztext-empty-paragraph"><br></p><p data-pid="l-AZ1Hm1">可以看到 <code>wasm</code> 很明显的提高了运行速度，运行时间稳定在 <code>js</code> 的一半，当规模达到 <code>45</code> 的时候，<code>wasm</code> 的运行时间比 <code>js</code> 少了整整 <code>8</code> 秒。</p><p data-pid="v0QgTpx2">这里也可以看出，如果对于计算密集型的应用，<code>wasm</code> 可以大展身手了。</p><h2>前端应用</h2><p data-pid="UM2o9fr-">来看一些目前已经成功落地的 <code>WebAssembly</code> 的应用。</p><ol><li data-pid="gjs0sVtU"><code>eBay</code> 的条形码扫描</li></ol><p data-pid="Dz-QK80i"><code>eBay</code> 在原生应用中有专门的 <code>C++</code> 库用于条形码的扫描，在 <code>H5</code> 中利用开源 <code>JavaScript</code> 库 <code>BarcodeReader</code> 做了一个带条形码扫描功能的Web版本。 问题是它只有在 <code>20％</code> 的时间表现良好。 剩余的 <code>80％</code> 的时间运行非常缓慢，准确率也不高。</p><p data-pid="_J8gRGxG">最终的解决方案是通过 <code>wasm</code> ，将原有的 <code>c++</code> 库引入，以及业界十分有名的、基于 <code>C</code> 语言编写的开源条形码扫描库 <code>ZBar</code> 引入，再加上原本的 <code>js</code> 库，三者协助，最终识别率达到了 <code>100%</code>。</p><p data-pid="9I8nfllS">产品上线后的最终效果如下图所示。</p><p class="ztext-empty-paragraph"><br></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/50/v2-bb5a300749c27008137e8f45c9bdced9_720w.jpg?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="600" data-rawheight="302" class="origin_image zh-lightbox-thumb" width="600" data-original="https://pic1.zhimg.com/v2-bb5a300749c27008137e8f45c9bdced9_r.jpg?source=1940ef5c"/></noscript><div><img src="data:image/svg+xml;utf8,<svg xmlns=''http://www.w3.org/2000/svg'' width=''600'' height=''302''></svg>" data-caption="" data-size="normal" data-rawwidth="600" data-rawheight="302" class="origin_image zh-lightbox-thumb lazy hide" width="600" data-original="https://pic1.zhimg.com/v2-bb5a300749c27008137e8f45c9bdced9_r.jpg?source=1940ef5c" data-actualsrc="https://pic1.zhimg.com/50/v2-bb5a300749c27008137e8f45c9bdced9_720w.jpg?source=1940ef5c" style="display: none;"></div></figure><p class="ztext-empty-paragraph"><br></p><p data-pid="YDKOks_b">产品在上线使用了一段时间后，<code>eBay</code> 技术团队对应用的条形码扫描情况进行了统计，结果发现有 <code>53%</code> 的成功扫描来自于 <code>ZBar</code>；<code>34%</code> 来自于自研的 <code>C++</code> 库。剩下的 <code>13%</code> 则来自于第三方的 <code>JavaScript</code> 库实现。可见，其中通过 <code>Wasm</code> 实现得到的扫描结果占据了总成功次数的 <code>87%</code>。</p><p data-pid="cZSsPTla">更详细的过程可以参考 <a href="https://www.infoq.cn/article/vc*q7psQqWMaVU8igJeD" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">WebAssembly在eBay的实践：速度提升50倍</a>。</p><ol><li data-pid="g3V51eST">AutoCAD</li></ol><p data-pid="9XK-kr0U"><code>AutoCAD</code> 是一款由将近 <code>40</code> 年历史的知名桌面端设计软件，被广泛地用于土木建筑、装饰装潢、工业制图等多个领域中。</p><p class="ztext-empty-paragraph"><br></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/50/v2-526a41fafae9ffafa80e2c152dd55b4c_720w.jpg?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="1920" data-rawheight="1066" class="origin_image zh-lightbox-thumb" width="1920" data-original="https://pic2.zhimg.com/v2-526a41fafae9ffafa80e2c152dd55b4c_r.jpg?source=1940ef5c"/></noscript><div><img src="data:image/svg+xml;utf8,<svg xmlns=''http://www.w3.org/2000/svg'' width=''1920'' height=''1066''></svg>" data-caption="" data-size="normal" data-rawwidth="1920" data-rawheight="1066" class="origin_image zh-lightbox-thumb lazy hide" width="1920" data-original="https://pic2.zhimg.com/v2-526a41fafae9ffafa80e2c152dd55b4c_r.jpg?source=1940ef5c" data-actualsrc="https://pic1.zhimg.com/50/v2-526a41fafae9ffafa80e2c152dd55b4c_720w.jpg?source=1940ef5c" style="display: none;"></div></figure><p class="ztext-empty-paragraph"><br></p><p data-pid="0-hbtrqq">最初基于<code>C++</code> 编译为 <code>Java</code> 代码供 <code>Android</code> 设备使用，最后，在 <code>Google Web Toolkit</code>（一个 <code>Google</code> 开发的可以使用 <code>Java</code> 语言开发 <code>Web</code> 应用的工具集）的帮助下，又将这些 <code>Java</code> 代码转译为了 <code>Web</code> 平台可用的 <code>JavaScript</code> 代码。但最后生成的 <code>Web</code> 应用代码库十分庞大，且在浏览器中的运行性能并不可观。这个「粗糙版」的 <code>Web</code> 应用发布于 <code>2014</code> 年。</p><p data-pid="1WQsvlze"><code>2015</code> 年通过 <code>Asm.js</code> 将原有的 <code>C++</code> 代码中的主要功能直接进行编译移植到到 <code>Web</code> 平台，性能有了很大的提告。<code>2018</code> 年 <code>3</code> 月，基于 <code>Wasm</code> 构建的 <code>AutoCAD Web</code> 也成功诞生，<a href="https://web.autocad.com/login" class=" external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043"><span class="invisible">https://</span><span class="visible">web.autocad.com/login</span><span class="invisible"></span></a>。</p><p class="ztext-empty-paragraph"><br></p><figure data-size="normal"><noscript><img src="https://pica.zhimg.com/50/v2-3e790cd3bb850cd4e36e55d17c7887e9_720w.jpg?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="1854" data-rawheight="942" class="origin_image zh-lightbox-thumb" width="1854" data-original="https://pic3.zhimg.com/v2-3e790cd3bb850cd4e36e55d17c7887e9_r.jpg?source=1940ef5c"/></noscript><div><img src="data:image/svg+xml;utf8,<svg xmlns=''http://www.w3.org/2000/svg'' width=''1854'' height=''942''></svg>" data-caption="" data-size="normal" data-rawwidth="1854" data-rawheight="942" class="origin_image zh-lightbox-thumb lazy hide" width="1854" data-original="https://pic3.zhimg.com/v2-3e790cd3bb850cd4e36e55d17c7887e9_r.jpg?source=1940ef5c" data-actualsrc="https://pica.zhimg.com/50/v2-3e790cd3bb850cd4e36e55d17c7887e9_720w.jpg?source=1940ef5c" style="display: none;"></div></figure><p class="ztext-empty-paragraph"><br></p><ol><li data-pid="So6G0sdD"><a href="https://zh.wikipedia.org/wiki/Google地球" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">谷歌地球</a></li></ol><p data-pid="7zkxtyHt"><code>Google</code> 地球最初使用 <code>C++</code> 语言在 <code>Windows</code> 平台上开发。后来移植到了 <code>Android</code> 和 <code>iOS</code> 平台中。<code>2017</code> 年 <code>4</code> 月 <code>18</code> 日，经过全新设计的 <code>Google</code> 地球 <code>9.0</code> 发布。由于采用了 <a href="https://zh.wikipedia.org/wiki/Native_Client" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Native Client</a> 技术，刚发布时仅能在<code>Chrome</code> 中运行。<code>2020</code> 年 <code>2</code> 月 <code>27</code> 日，<code>Google</code> 使用 <code>C++</code> 语言通过 <code>WebAssembly</code> 上重写了 <code>Google</code> 地球，从此 <code>Google</code> 地球可以在 <code>Firefox</code> 和 <code>Edge</code> 上运行。</p><ol><li data-pid="aQ6clbMd">bilibili 上传视频的封面</li></ol><p data-pid="mEk_lSdS">在 <a href="https://www.zhihu.com/question/265700379/answer/951118579" class="internal" data-za-detail-view-id="1043">知乎</a> 看到的一个回答。</p><p class="ztext-empty-paragraph"><br></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/50/v2-69d4967947278e4cab3ba299fef523db_720w.jpg?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="924" data-rawheight="576" class="origin_image zh-lightbox-thumb" width="924" data-original="https://pic1.zhimg.com/v2-69d4967947278e4cab3ba299fef523db_r.jpg?source=1940ef5c"/></noscript><div><img src="data:image/svg+xml;utf8,<svg xmlns=''http://www.w3.org/2000/svg'' width=''924'' height=''576''></svg>" data-caption="" data-size="normal" data-rawwidth="924" data-rawheight="576" class="origin_image zh-lightbox-thumb lazy hide" width="924" data-original="https://pic1.zhimg.com/v2-69d4967947278e4cab3ba299fef523db_r.jpg?source=1940ef5c" data-actualsrc="https://pic1.zhimg.com/50/v2-69d4967947278e4cab3ba299fef523db_720w.jpg?source=1940ef5c" style="display: none;"></div></figure><p class="ztext-empty-paragraph"><br></p><blockquote data-pid="eXwklaIR">投稿视频的时候，当你的视频还在上传中，已经可以自由选择AI推荐的封面。这里采用了webassembly+AI的前端整合。<br>webassembly 负责读取本地视频，生成图片；<br><span><a data-za-not-track-link="true" href="https://www.zhihu.com/search?q=tensorflow.js&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1961085507%7D" target="_blank" class="css-pgtd2j">tensorflow.js<svg width="10px" height="10px" viewBox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"></path></svg></a></span> 负责加载AI训练过的 model，读取图片并打分。<br>从完全的<span><a data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%9E%B6%E6%9E%84&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1961085507%7D" target="_blank" class="css-pgtd2j">服务端架构<svg width="10px" height="10px" viewBox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"></path></svg></a></span> =&gt; 前端架构 &amp;&amp; 服务端兜底。<br>webassembly支持解析99%以上的视频编码格式，速度提升体验惠及约50%的web投稿用户。<br>作者：Stois Fu 链接：<a href="https://www.zhihu.com/question/265700379/answer/951118579" class="internal" data-za-detail-view-id="1043"><span class="invisible">https://www.</span><span class="visible">zhihu.com/question/2657</span><span class="invisible">00379/answer/951118579</span><span class="ellipsis"></span></a> 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</blockquote><p data-pid="b8vhNtYJ">由于当前 <code>Wasm</code> 标准下，<code>Wasm</code> 模块不能直接操纵 <code>dom</code> 元素，所以 <code>WebAssembly</code> 主要应用在了一些计算密集型的场景下，视频的解码编码、图像处理、涉及到复杂计算的算法、<span><a data-za-not-track-link="true" href="https://www.zhihu.com/search?q=%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95&amp;search_source=Entity&amp;hybrid_search_source=Entity&amp;hybrid_search_extra=%7B%22sourceType%22%3A%22answer%22%2C%22sourceId%22%3A1961085507%7D" target="_blank" class="css-pgtd2j">加密算法<svg width="10px" height="10px" viewBox="0 0 15 15" class="css-1dvsrp"><path d="M10.89 9.477l3.06 3.059a1 1 0 0 1-1.414 1.414l-3.06-3.06a6 6 0 1 1 1.414-1.414zM6 10a4 4 0 1 0 0-8 4 4 0 0 0 0 8z" fill="currentColor"></path></svg></a></span>等等。</p><h2>不止于Web</h2><p data-pid="GxLAeV10"><code>Wasm</code> 除了应用在浏览器中，也可以应用到 <code>out-of-web</code> 环境中。通过 <code>WASI</code>（<code>WebAssembly System Interface</code>，<code>Wasm</code> 操作系统接口）标准，<code>Wasm</code> 可以直接与操作系统打交道。通过已经在各种环境实现了 <code>WASI</code> 标准的虚拟机，我们就可以将 <code>wasm</code> 用在嵌入式、IOT 物联网以及甚至云，AI 和区块链等特殊的领域和场景中。</p><p data-pid="ZcoLW1v4">有了 <code>WASI</code> 标准，文章最开始介绍的当前应用的架构在未来可能会发生质的改变。</p><p class="ztext-empty-paragraph"><br></p><figure data-size="normal"><noscript><img src="https://pic1.zhimg.com/50/v2-953036585bc2a93917804f7391d0ed73_720w.jpg?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="1230" data-rawheight="494" class="origin_image zh-lightbox-thumb" width="1230" data-original="https://pic1.zhimg.com/v2-953036585bc2a93917804f7391d0ed73_r.jpg?source=1940ef5c"/></noscript><div><img src="data:image/svg+xml;utf8,<svg xmlns=''http://www.w3.org/2000/svg'' width=''1230'' height=''494''></svg>" data-caption="" data-size="normal" data-rawwidth="1230" data-rawheight="494" class="origin_image zh-lightbox-thumb lazy hide" width="1230" data-original="https://pic1.zhimg.com/v2-953036585bc2a93917804f7391d0ed73_r.jpg?source=1940ef5c" data-actualsrc="https://pic1.zhimg.com/50/v2-953036585bc2a93917804f7391d0ed73_720w.jpg?source=1940ef5c" style="display: none;"></div></figure><p class="ztext-empty-paragraph"><br></p><p data-pid="4egZCULJ">上边架构的最大问题就是各个操作系统不能兼容，同一个<code>app</code> 需要采用不同的语言在不同平台下各实现一次。</p><p data-pid="1Yqoedjv">比如一款 <code>A</code> 应用，如果想实现跨平台的话，我们需要用 <code>java</code> 完成在安卓上的开发，用 <code>Objective-C</code> 实现 <code>iOS</code> 上的开发，用 <code>C#</code> 实现 <code>PC</code> 端的开发... ...也就是下边的样子。</p><p class="ztext-empty-paragraph"><br></p><figure data-size="normal"><noscript><img src="https://pica.zhimg.com/50/v2-53bf865350c95d4d68312147959a6064_720w.jpg?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="1256" data-rawheight="524" class="origin_image zh-lightbox-thumb" width="1256" data-original="https://pic3.zhimg.com/v2-53bf865350c95d4d68312147959a6064_r.jpg?source=1940ef5c"/></noscript><div><img src="data:image/svg+xml;utf8,<svg xmlns=''http://www.w3.org/2000/svg'' width=''1256'' height=''524''></svg>" data-caption="" data-size="normal" data-rawwidth="1256" data-rawheight="524" class="origin_image zh-lightbox-thumb lazy hide" width="1256" data-original="https://pic3.zhimg.com/v2-53bf865350c95d4d68312147959a6064_r.jpg?source=1940ef5c" data-actualsrc="https://pica.zhimg.com/50/v2-53bf865350c95d4d68312147959a6064_720w.jpg?source=1940ef5c" style="display: none;"></div></figure><p class="ztext-empty-paragraph"><br></p><p data-pid="t4wgtF6R">但如果有了 <code>wasm</code> ，我们只需要选择任意一门语言，然后编译成 <code>wasm</code>，就可以分发到各个平台上了。</p><p class="ztext-empty-paragraph"><br></p><figure data-size="normal"><noscript><img src="https://pica.zhimg.com/50/v2-42272fd4e389da72377afe0a46690720_720w.jpg?source=1940ef5c" data-caption="" data-size="normal" data-rawwidth="1268" data-rawheight="776" class="origin_image zh-lightbox-thumb" width="1268" data-original="https://pica.zhimg.com/v2-42272fd4e389da72377afe0a46690720_r.jpg?source=1940ef5c"/></noscript><div><img src="data:image/svg+xml;utf8,<svg xmlns=''http://www.w3.org/2000/svg'' width=''1268'' height=''776''></svg>" data-caption="" data-size="normal" data-rawwidth="1268" data-rawheight="776" class="origin_image zh-lightbox-thumb lazy hide" width="1268" data-original="https://pica.zhimg.com/v2-42272fd4e389da72377afe0a46690720_r.jpg?source=1940ef5c" data-actualsrc="https://pica.zhimg.com/50/v2-42272fd4e389da72377afe0a46690720_720w.jpg?source=1940ef5c" style="display: none;"></div></figure><p class="ztext-empty-paragraph"><br></p><p data-pid="y0vdZyHR">这也是 <code>Wasm</code> 官方宣传的 <code>Ending</code> 定律，<i>Any application that can be compiled to WebAssembly, will be compiled to WebAssembly eventually.</i></p><h2>总结</h2><p data-pid="pv876FcO">此时回顾一下，<code>WebAssebmly</code> 的定义，应该会清晰很多了。</p><blockquote data-pid="K0SSYSCq">WebAssembly (abbreviated <i>Wasm</i>) is a binary instruction format for a stack-based virtual machine. Wasm is designed as a portable compilation target for programming languages, enabling deployment on the web for client and server applications.</blockquote><p data-pid="Rdg818AH">它不是一种语言，而是规定了一种虚拟指令集，可以作为各个语言的编译目标，然后通过 <code>wasm</code> 的虚拟机运行到浏览器还有其他各个平台中。</p><p data-pid="mG5AJ4ws">对于前端领域，当前 <code>Webassembly</code> 在某些场景下可以有效提高前端项目的性能，并且可以将 <code>C/C++</code> 领域的一些优秀的库通过编译直接运行到浏览器中。如果前端遇到了性能的问题，不妨可以考虑下 <code>WebAssmbly</code> 的方案。</p><h2>参考链接</h2><p data-pid="YW-0UU48"><a href="https://developer.ibm.com/zh/technologies/web-development/articles/wa-lo-webassembly-status-and-reality/" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">WebAssembly 现状与实战</a></p><p data-pid="GsfXRy_0"><a href="https://dev.to/oayomide/webassembly-another-jvm-4g79" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">WebAssembly: another JVM?</a></p><p data-pid="FivQnYDk"><a href="https://medium.com/@mikevdg/why-webassembly-is-a-big-deal-a308d72c6de1" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Why WebAssembly is a Big Deal</a></p><p data-pid="cglT1ot2"><a href="https://github.com/appcypher/awesome-wasm-langs" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">Awesome WebAssembly Languages</a></p><p data-pid="VwA9vRnu"><a href="https://time.geekbang.org/column/intro/100059901?code=y9watqWBWzgfBrz1HyzOV9ktX8sAuL5W3ZLtRRJnaV4=" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">极客时间WebAssembly入门课</a>，很系统，强烈推荐</p><p data-pid="0LTYXL-F"><a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">汇编语言入门教程</a></p><p data-pid="U0X_nPcq"><a href="https://www.infoq.cn/article/vc*q7psQqWMaVU8igJeD" class=" wrap external" target="_blank" rel="nofollow noreferrer" data-za-detail-view-id="1043">WebAssembly在eBay的实践：速度提升50倍</a></p></span>', '2


I''m relatively new to regex, so bear with me if the question is trivial. I''d like to place a colon between every letter of a string using regex, e.g.,

x <- "ABCD"
I want to get

"A,B,C,D"
It would be nice if I could do that using gsub, sub or related on a vector of strings of arbitrary number of characters.

I tried

> sub("(\\w)", "\\1,", x)
[1] "A,BCD"
> gsub("(\\w)", "\\1,", x)
[1] "A,B,C,D,"
> gsub("(\\w)(\\w{1})$", "\\1,\\2", x)
[1] "ABC,D"
', '2


I''m relatively new to regex, so bear with me if the question is trivial. I''d like to place a colon between every letter of a string using regex, e.g.,

x <- "ABCD"
I want to get

"A,B,C,D"
It would be nice if I could do that using gsub, sub or related on a vector of strings of arbitrary number of characters.

I tried

> sub("(\\w)", "\\1,", x)
[1] "A,BCD"
> gsub("(\\w)", "\\1,", x)
[1] "A,B,C,D,"
> gsub("(\\w)(\\w{1})$", "\\1,\\2", x)
[1] "ABC,D"
');
INSERT INTO public.qa_question_content VALUES (1589941377376976896, '2022-11-08 19:22:18.72', false, '2022-11-08 19:32:14.114', 1588166867304841216, '<h2 id="不同颜色BlockTipQuote测试"><a href="#不同颜色blocktipquote测试" id="不同颜色blocktipquote测试">不同颜色BlockTipQuote测试</a></h2>
<p><code>Form Handsome</code></p>
<p><em>Markdown语法前缀</em></p>
<pre><code class="language-java">String[] badPrefix = {&quot;> x&quot;, &quot;> X&quot;, &quot;> x:&quot;, &quot;> X:&quot;, &quot;> bad:&quot;, &quot;> no:&quot;, &quot;> error:&quot;};

String[] goodPrefix = {&quot;> √&quot;, &quot;> good:&quot;, &quot;> ok:&quot;, &quot;> yes:&quot;, &quot;> right:&quot;};

String[] infoPrefix = {&quot;> i&quot;, &quot;> I&quot;, &quot;> i:&quot;, &quot;> I:&quot;, &quot;> tip:&quot;};

String[] warnPrefix = {&quot;> !&quot;, &quot;> ！&quot;, &quot;> !:&quot;, &quot;> ！:&quot;, &quot;> warn:&quot;, &quot;> warning:&quot;};

String[] sharePrefix = {&quot;> @&quot;, &quot;> @:&quot;, &quot;> at:&quot;};;
</code></pre>
<p><code>Test</code></p>
<h3 id="单行测试"><a href="#单行测试" id="单行测试">单行测试</a></h3>
<blockquote>
<p>0正常的 正常的 正常的 正常的 正常的 <code>test</code></p>
</blockquote>
<p><blockquote class="d-tip d-tip-share"><p class="mdi mdi-at">1这是灰色的短代码框，常用来引用资料什么的 <a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a><br />
</p></blockquote></p>
<p><blockquote class="d-tip d-tip-warning"><p class="mdi mdi-exclamation-thick">2这是黄色的短代码框，常用来做提示，引起读者注意。 <code>test</code><br />
</p></blockquote></p>
<p><blockquote class="d-tip d-tip-error"><p class="mdi mdi-close">3这是红色的短代码框，用于严重警告什么的。 <code>test</code><br />
</p></blockquote></p>
<p><blockquote class="d-tip d-tip-info"><p class="mdi mdi-information-variant">4这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code><br />
</p></blockquote></p>
<p><blockquote class="d-tip d-tip-success"><p class="mdi mdi-check">5这是绿色的短代码框，显示一些推荐信息。 <code>test</code><br />
</p></blockquote></p>
<h3 id="多行测试"><a href="#多行测试" id="多行测试">多行测试</a></h3>
<p><blockquote class="d-tip d-tip-share"><p class="mdi mdi-at">1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a></p>
<p>1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a></p>
<p>1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a></p>
<p>1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a></p>
<p>1这是灰色的短代码框，常用来引用资料什么的<a href="http://nuxt.localhost/article/editor/draft?id=16" rel="nofollow" target="_blank">http://nuxt.localhost/article/editor/draft?id=16</a><br />
</p></blockquote></p>
<hr />
<p><blockquote class="d-tip d-tip-warning"><p class="mdi mdi-exclamation-thick">2这是黄色的短代码框，常用来做提示，引起读者注意。 <code>test</code></p>
<p>2这是黄色的短代码框，常用来做提示，引起读者注意。 <code>test</code></p>
<p>2这是黄色的短代码框，常用来做提示，引起读者注意。 <code>test</code><br />
</p></blockquote></p>
<hr />
<p><blockquote class="d-tip d-tip-error"><p class="mdi mdi-close">这是红色的短代码框，用于严重警告什么的。 <code>test</code></p>
<p>x3这是红色的短代码框，用于严重警告什么的。 <code>test</code></p>
<p>这是红色的短代码框，用于严重警告什么的。 <code>test</code></p>
<p>3这是红色的短代码框，用于严重警告什么的。 <code>test</code><br />
</p></blockquote></p>
<hr />
<p><blockquote class="d-tip d-tip-info"><p class="mdi mdi-information-variant">这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code></p>
<p>这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code></p>
<p>这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code></p>
<p>这是浅蓝色的短代码框，用于显示一些信息。 <code>test</code><br />
</p></blockquote></p>
<hr />
<p><blockquote class="d-tip d-tip-success"><p class="mdi mdi-check">5这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p>
<p>这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p>
<p>这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p>
<p>5这是绿色的短代码框，显示一些推荐信息。 <code>test</code></p></blockquote></p>
', '## 不同颜色BlockTipQuote测试

`Form Handsome`

*Markdown语法前缀*
```java
String[] badPrefix = {"> x", "> X", "> x:", "> X:", "> bad:", "> no:", "> error:"};

String[] goodPrefix = {"> √", "> good:", "> ok:", "> yes:", "> right:"};

String[] infoPrefix = {"> i", "> I", "> i:", "> I:", "> tip:"};

String[] warnPrefix = {"> !", "> ！", "> !:", "> ！:", "> warn:", "> warning:"};

String[] sharePrefix = {"> @", "> @:", "> at:"};;
```

`Test`


### 单行测试

> 0正常的 正常的 正常的 正常的 正常的 `test`

> @1这是灰色的短代码框，常用来引用资料什么的 http://nuxt.localhost/article/editor/draft?id=16

> !2这是黄色的短代码框，常用来做提示，引起读者注意。 `test`

> x3这是红色的短代码框，用于严重警告什么的。 `test`

> i4这是浅蓝色的短代码框，用于显示一些信息。 `test`

> √5这是绿色的短代码框，显示一些推荐信息。 `test`



### 多行测试




> @1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
> at:1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
> @1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
> at:1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
> @1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16

---
> !2这是黄色的短代码框，常用来做提示，引起读者注意。 `test`
> warn:2这是黄色的短代码框，常用来做提示，引起读者注意。 `test`
> warning:2这是黄色的短代码框，常用来做提示，引起读者注意。 `test`

---

> no:这是红色的短代码框，用于严重警告什么的。 `test`
> no:x3这是红色的短代码框，用于严重警告什么的。 `test`
> bad:这是红色的短代码框，用于严重警告什么的。 `test`
> x3这是红色的短代码框，用于严重警告什么的。 `test`

----

> i:这是浅蓝色的短代码框，用于显示一些信息。 `test`
> i这是浅蓝色的短代码框，用于显示一些信息。 `test`
> i:这是浅蓝色的短代码框，用于显示一些信息。 `test`
> i:这是浅蓝色的短代码框，用于显示一些信息。 `test`

-----

> √5这是绿色的短代码框，显示一些推荐信息。 `test`
> good:这是绿色的短代码框，显示一些推荐信息。 `test`
> yes:这是绿色的短代码框，显示一些推荐信息。 `test`
> right:5这是绿色的短代码框，显示一些推荐信息。 `test`', '不同颜色BlockTipQuote测试
Form Handsome
Markdown语法前缀
String[] badPrefix = {"> x", "> X", "> x:", "> X:", "> bad:", "> no:", "> error:"};

String[] goodPrefix = {"> √", "> good:", "> ok:", "> yes:", "> right:"};

String[] infoPrefix = {"> i", "> I", "> i:", "> I:", "> tip:"};

String[] warnPrefix = {"> !", "> ！", "> !:", "> ！:", "> warn:", "> warning:"};

String[] sharePrefix = {"> @", "> @:", "> at:"};;

Test
单行测试

0正常的 正常的 正常的 正常的 正常的 test

1这是灰色的短代码框，常用来引用资料什么的 http://nuxt.localhost/article/editor/draft?id=16

2这是黄色的短代码框，常用来做提示，引起读者注意。 test

3这是红色的短代码框，用于严重警告什么的。 test

4这是浅蓝色的短代码框，用于显示一些信息。 test

5这是绿色的短代码框，显示一些推荐信息。 test

多行测试
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16
1这是灰色的短代码框，常用来引用资料什么的http://nuxt.localhost/article/editor/draft?id=16


2这是黄色的短代码框，常用来做提示，引起读者注意。 test
2这是黄色的短代码框，常用来做提示，引起读者注意。 test
2这是黄色的短代码框，常用来做提示，引起读者注意。 test


这是红色的短代码框，用于严重警告什么的。 test
x3这是红色的短代码框，用于严重警告什么的。 test
这是红色的短代码框，用于严重警告什么的。 test
3这是红色的短代码框，用于严重警告什么的。 test


这是浅蓝色的短代码框，用于显示一些信息。 test
这是浅蓝色的短代码框，用于显示一些信息。 test
这是浅蓝色的短代码框，用于显示一些信息。 test
这是浅蓝色的短代码框，用于显示一些信息。 test


5这是绿色的短代码框，显示一些推荐信息。 test
这是绿色的短代码框，显示一些推荐信息。 test
这是绿色的短代码框，显示一些推荐信息。 test
5这是绿色的短代码框，显示一些推荐信息。 test
');
INSERT INTO public.qa_question_content VALUES (4, '2022-08-28 19:39:48.174', false, '2022-11-15 01:00:12.779', 4, '<p>2<br />
version</p>
<p>I&rsquo;m relatively new to regex, so bear with me if the question is trivial. I&rsquo;d like to place a colon between every letter of a string using regex, e.g.,</p>
<p>x &lt;- &ldquo;ABCD&rdquo;<br />
I want to get</p>
<p>&ldquo;A,B,C,D&rdquo;<br />
It would be nice if I could do that using gsub, sub or related on a vector of strings of arbitrary number of characters.</p>
<p>I tried</p>
<blockquote>
<p>sub(&ldquo;(\w)&rdquo;, &ldquo;\1,&rdquo;, x)<br />
[1] &ldquo;A,BCD&rdquo;<br />
gsub(&ldquo;(\w)&rdquo;, &ldquo;\1,&rdquo;, x)<br />
[1] &ldquo;A,B,C,D,&rdquo;<br />
gsub(&ldquo;(\w)(\w{1})$&rdquo;, &ldquo;\1,\2&rdquo;, x)<br />
[1] &ldquo;ABC,D&rdquo;</p>
</blockquote>
', '2
version

I''m relatively new to regex, so bear with me if the question is trivial. I''d like to place a colon between every letter of a string using regex, e.g.,

x <- "ABCD"
I want to get

"A,B,C,D"
It would be nice if I could do that using gsub, sub or related on a vector of strings of arbitrary number of characters.

I tried

> sub("(\\w)", "\\1,", x)
[1] "A,BCD"
> gsub("(\\w)", "\\1,", x)
[1] "A,B,C,D,"
> gsub("(\\w)(\\w{1})$", "\\1,\\2", x)
[1] "ABC,D"
', '2
version
I’m relatively new to regex, so bear with me if the question is trivial. I’d like to place a colon between every letter of a string using regex, e.g.,
x <- “ABCD”
I want to get
“A,B,C,D”
It would be nice if I could do that using gsub, sub or related on a vector of strings of arbitrary number of characters.
I tried

sub(“(\w)”, “\1,”, x)
[1] “A,BCD”
gsub(“(\w)”, “\1,”, x)
[1] “A,B,C,D,”
gsub(“(\w)(\w{1})$”, “\1,\2”, x)
[1] “ABC,D”

');
INSERT INTO public.qa_question_content VALUES (1597173734957907968, '2022-11-28 18:21:07.127', false, '2022-11-28 18:21:07.127', 1597173734861438976, '<p>question1</p>
', 'question1', 'question1
');
INSERT INTO public.qa_question_content VALUES (1597173739915575297, '2022-11-28 18:21:08.306', false, '2022-11-28 18:21:08.306', 1597173739915575296, '<p>question1</p>
', 'question1', 'question1
');
INSERT INTO public.qa_question_content VALUES (1597173742042087425, '2022-11-28 18:21:08.813', false, '2022-11-28 18:21:08.813', 1597173742042087424, '<p>question1</p>
', 'question1', 'question1
');
INSERT INTO public.qa_question_content VALUES (1597173742667038720, '2022-11-28 18:21:08.962', false, '2022-11-28 18:21:08.962', 1597173742662844416, '<p>question1</p>
', 'question1', 'question1
');
INSERT INTO public.qa_question_content VALUES (1597173743229075457, '2022-11-28 18:21:09.096', false, '2022-11-28 18:21:09.096', 1597173743229075456, '<p>question1</p>
', 'question1', 'question1
');
INSERT INTO public.qa_question_content VALUES (1597173744197959680, '2022-11-28 18:21:09.327', false, '2022-11-28 18:21:09.327', 1597173744193765376, '<p>question1</p>
', 'question1', 'question1
');
INSERT INTO public.qa_question_content VALUES (1598329529686818816, '2022-12-01 22:53:50.063', false, '2022-12-01 22:53:50.063', 1598329529674235904, '<p>123</p>
', '123', '123
');
INSERT INTO public.qa_question_content VALUES (1597173745103929345, '2022-11-28 18:21:09.543', false, '2022-12-01 21:02:15.153', 1597173745103929344, '<p>3</p>
', '3', '3
');
INSERT INTO public.qa_question_content VALUES (1602174123243470849, '2022-12-12 13:30:52.594', false, '2022-12-12 13:30:52.594', 1602174123243470848, '<p>Test4</p>
', 'Test4', 'Test4
');
INSERT INTO public.qa_question_content VALUES (1598329962337665025, '2022-12-01 22:55:33.213', true, '2022-12-01 22:55:33.213', 1598329962337665024, '<p>123123<a href="http://localhost" rel="nofollow" target="_blank">http://localhost</a>:3000/question/ask?new=truehttp://localhost:3000/question/ask?new=true</p>
', '123123http://localhost:3000/question/ask?new=truehttp://localhost:3000/question/ask?new=true', '123123http://localhost:3000/question/ask?new=truehttp://localhost:3000/question/ask?new=true
');
INSERT INTO public.qa_question_content VALUES (1598317969765564416, '2022-12-01 22:07:53.961', true, '2022-12-01 22:07:53.961', 1598317969761370112, '<p>test1</p>
', 'test1', 'test1
');
INSERT INTO public.qa_question_content VALUES (1598317234940280832, '2022-12-01 22:04:58.767', true, '2022-12-01 22:04:58.767', 1598317234910920704, '<p>test1</p>
', 'test1', 'test1
');
INSERT INTO public.qa_question_content VALUES (1598317675132485632, '2022-12-01 22:06:43.717', true, '2022-12-01 22:06:43.717', 1598317675052793856, '<p>test1</p>
', 'test1', 'test1
');
INSERT INTO public.qa_question_content VALUES (1598317875976732673, '2022-12-01 22:07:31.6', true, '2022-12-01 22:07:31.6', 1598317875976732672, '<p>test2</p>
', 'test2', 'test2
');
INSERT INTO public.qa_question_content VALUES (1598576245417705472, '2022-12-02 15:14:11.677', false, '2022-12-02 15:14:11.677', 1598576245409316864, '<p>注销测试</p>
', '注销测试', '注销测试
');
INSERT INTO public.qa_question_content VALUES (1598319058288115712, '2022-12-01 22:12:13.486', true, '2022-12-01 22:12:13.486', 1598319058191646720, '<p>testtesttesttesttesttest</p>
', 'testtesttesttesttesttest', 'testtesttesttesttesttest
');
INSERT INTO public.qa_question_content VALUES (1598318733892255745, '2022-12-01 22:10:56.143', true, '2022-12-01 22:10:56.143', 1598318733892255744, '<p>testtesttesttest</p>
', 'testtesttesttest', 'testtesttesttest
');
INSERT INTO public.qa_question_content VALUES (1598319885673299969, '2022-12-01 22:15:30.749', true, '2022-12-01 22:15:30.749', 1598319885673299968, '<p>搜索测试 搜索测试</p>
', '搜索测试 搜索测试', '搜索测试 搜索测试
');
INSERT INTO public.qa_question_content VALUES (1598959826774261760, '2022-12-03 16:38:24.599', false, '2022-12-03 16:38:24.599', 1598959826694569984, '<p>有哪些值得阅读学习、代码优雅的小型 Rust 项目？</p>
', '有哪些值得阅读学习、代码优雅的小型 Rust 项目？', '有哪些值得阅读学习、代码优雅的小型 Rust 项目？
');
INSERT INTO public.qa_question_content VALUES (1598325339665203201, '2022-12-01 22:37:11.082', true, '2022-12-01 22:37:11.082', 1598325339665203200, '<p>ts、typescript、enum、枚举、ts 获取枚举对应的类型、获取 enum 的 key 和 value</p>
', 'ts、typescript、enum、枚举、ts 获取枚举对应的类型、获取 enum 的 key 和 value', 'ts、typescript、enum、枚举、ts 获取枚举对应的类型、获取 enum 的 key 和 value
');
INSERT INTO public.qa_question_content VALUES (1598324677485264896, '2022-12-01 22:34:33.208', true, '2022-12-01 22:34:33.208', 1598324677351047168, '<p>ts、typescript、enum、枚举、ts 获取枚举对应的类型、获取 enum 的 key 和 value</p>
', 'ts、typescript、enum、枚举、ts 获取枚举对应的类型、获取 enum 的 key 和 value', 'ts、typescript、enum、枚举、ts 获取枚举对应的类型、获取 enum 的 key 和 value
');
INSERT INTO public.qa_question_content VALUES (1598325650416992256, '2022-12-01 22:38:25.171', false, '2022-12-01 22:38:25.171', 1598325650412797952, '<p>删除成功</p>
', '删除成功', '删除成功
');
INSERT INTO public.qa_question_content VALUES (1600519049903603712, '2022-12-07 23:54:12.364', false, '2022-12-07 23:54:12.364', 1600519049484173312, '<p>123</p>
', '123', '123
');
INSERT INTO public.qa_question_content VALUES (1602173902555971584, '2022-12-12 13:29:59.981', false, '2022-12-12 13:29:59.981', 1602173902400782336, '<p>Test1</p>
', 'Test1', 'Test1
');
INSERT INTO public.qa_question_content VALUES (1602173971741016064, '2022-12-12 13:30:16.473', false, '2022-12-12 13:30:16.473', 1602173971736821760, '<p>Test1</p>
', 'Test1', 'Test1
');
INSERT INTO public.qa_question_content VALUES (1602174038854074369, '2022-12-12 13:30:32.474', false, '2022-12-12 13:30:32.474', 1602174038854074368, '<p>Test1</p>
', 'Test1', 'Test1
');


--
-- Data for Name: qa_question_field; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.qa_question_field VALUES (1600519049484173312, '2022-12-07 23:54:12.341', false, '2022-12-07 23:54:12.341', true, 0, 0, 0, 0, '123
', '123', 0, 7, 3, 1600519049903603712, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1602173971736821760, '2022-12-12 13:30:16.472', false, '2022-12-12 13:30:16.472', true, 0, 0, 0, 0, 'Test1
', 'Test2', 0, 3, 3, 1602173971741016064, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1, '2022-08-28 19:29:52.126', false, '2022-08-28 19:29:52.126', true, 1, 0, 0, 2, '如题 什么是 WebAssembly(wasm)？', '什么是 WebAssembly(wasm)？', 19, 171, 3, 1, 1, 'xcode', 'monokai', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1588166867304841216, '2022-08-28 19:35:34.276', false, '2022-11-08 19:22:18.732', true, 1, 0, 1, 2, '不同颜色BlockTipQuote测试', '不同颜色BlockTipQuote测试', 0, 174, 3, 1589941377376976896, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1597173745103929344, '2022-11-28 18:21:09.543', false, '2022-12-01 21:02:15.153', true, 0, 0, 0, 0, 'question1', '3', 0, 16, 1597170473374842880, 1597173745103929345, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', 2, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1598576245409316864, '2022-12-02 15:14:11.674', false, '2022-12-02 15:14:11.674', true, 1, 0, 0, 2, '注销测试', '注销测试', 0, 13, 1597170473374842881, 1598576245417705472, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1598318733892255744, '2022-12-01 22:10:56.143', true, '2022-12-01 22:10:56.143', true, 0, 0, 0, 0, 'test', 'testtesttesttest', 0, 1, 20, 1598318733892255745, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1598329962337665024, '2022-12-01 22:55:33.213', true, '2022-12-01 22:59:23.43', true, 0, 0, 0, 5, '123123http://localhost:3000/question/ask?new=truehttp://localhost:3000/question/ask?new=true
', 'http://localhost:3000/question/ask?new=true', 0, 0, 20, 1598329962337665025, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', 2, 0, 0);
INSERT INTO public.qa_question_field VALUES (1597173734861438976, '2022-11-28 18:21:07.118', false, '2022-11-28 18:21:07.118', true, 1, 0, 0, 2, 'question1', 'question13', 0, 13, 1597170473374842880, 1597173734957907968, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1597173742042087424, '2022-11-28 18:21:08.813', false, '2022-11-28 18:21:08.813', true, 0, 0, 0, 0, 'question1', 'question14', 0, 4, 1597170473374842880, 1597173742042087425, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1598317875976732672, '2022-12-01 22:07:31.6', true, '2022-12-01 22:07:31.6', true, 0, 0, 0, 1, '123', 'test2', 0, 0, 20, 1598317875976732673, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1598317234910920704, '2022-12-01 22:04:58.764', true, '2022-12-01 22:04:58.764', true, 0, 0, 0, 0, '123', 'test1', 0, 4, 20, 1598317234940280832, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1598319885673299968, '2022-12-01 22:15:30.749', true, '2022-12-01 22:16:02.428', true, 0, 0, 0, 0, '搜索测试 搜索测试
', '搜索测试', 0, 1, 20, 1598319885673299969, 2, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', 0, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1597173743229075456, '2022-11-28 18:21:09.096', false, '2022-11-28 18:21:09.096', true, 0, 0, 0, 0, 'question1', 'question16', 0, 11, 1597170473374842880, 1597173743229075457, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1597173742662844416, '2022-11-28 18:21:08.961', false, '2022-11-28 18:21:08.961', true, 0, 0, 0, 0, 'question1', 'question15', 0, 5, 1597170473374842880, 1597173742667038720, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1597173744193765376, '2022-11-28 18:21:09.327', false, '2022-11-28 18:21:09.327', true, 1, 0, 0, 2, 'question1', 'question12', 0, 7, 1597170473374842880, 1597173744197959680, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1598317969761370112, '2022-12-01 22:07:53.96', true, '2022-12-01 22:07:53.96', true, 0, 0, 0, 1, '123', 'createQuestionRBcreateQuestionRB', 0, 0, 20, 1598317969765564416, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1598317675052793856, '2022-12-01 22:06:43.71', true, '2022-12-01 22:06:43.71', true, 0, 0, 0, 1, '123', 'test1', 0, 0, 20, 1598317675132485632, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1598325339665203200, '2022-12-01 22:37:11.082', true, '2022-12-01 22:37:11.082', true, 0, 0, 0, 1, 'ts、typescript、enum、枚举、ts 获取枚举对应的类型、获取 enum 的 key 和 value
', 'ts、typescript、enum、枚举、ts 获取枚举对应的类型、获取 enum 的 key 和 value', 0, 0, 20, 1598325339665203201, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1598329529674235904, '2022-12-01 22:53:50.059', false, '2022-12-01 22:53:50.059', true, 0, 0, 0, 1, '123
', '123', 0, 0, 20, 1598329529686818816, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1598319058191646720, '2022-12-01 22:12:13.479', true, '2022-12-01 22:12:13.479', true, 0, 0, 0, 0, 'testtesttesttesttesttest
', 'testtesttest', 0, 1, 20, 1598319058288115712, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1598324677351047168, '2022-12-01 22:34:33.201', true, '2022-12-01 22:35:10.778', true, 0, 0, 0, 5, 'ts、typescript、enum、枚举、ts 获取枚举对应的类型、获取 enum 的 key 和 value
', 'ts、typescript、enum、枚举、ts 获取枚举对应的类型、获取 enum 的 key 和 value', 0, 1, 20, 1598324677485264896, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', 0, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1597173739915575296, '2022-11-28 18:21:08.306', false, '2022-11-28 18:21:08.306', true, 12, 0, 0, 3, 'question1', 'question1', 0, 78, 1597170473374842880, 1597173739915575297, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1602173902400782336, '2022-12-12 13:29:59.969', false, '2022-12-12 13:29:59.969', true, 0, 0, 0, 0, 'Test1
', 'Test1', 0, 2, 3, 1602173902555971584, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1602174038854074368, '2022-12-12 13:30:32.474', false, '2022-12-12 13:30:32.474', true, 0, 0, 0, 0, 'Test1
', 'Test3', 0, 5, 3, 1602174038854074369, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (2, '2022-08-28 19:35:34.276', false, '2022-08-28 19:35:34.276', true, 2, 0, 0, 0, '问题简介', '发起提问2', 223, 153, 3, 2, 1, 'xcode', 'monokai', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1598959826694569984, '2022-12-03 16:38:24.592', false, '2022-12-03 16:38:24.592', true, 2, 0, 0, 2, '有哪些值得阅读学习、代码优雅的小型 Rust 项目？
', '有哪些值得阅读学习、代码优雅的小型 Rust 项目？', 1, 32, 3, 1598959826774261760, 3, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 0);
INSERT INTO public.qa_question_field VALUES (4, '2022-08-28 19:39:48.155', false, '2022-11-15 01:00:12.792', true, 7, 35, 2, 2, 'replace every letter except the last one using regex', 'replace every letter except the last one using regex', 8, 724, 3, 4, 1, 'xcode', 'monokai', 'cyanosis', 'geekBlackDark', 4, NULL, 0);
INSERT INTO public.qa_question_field VALUES (1602174123243470848, '2022-12-12 13:30:52.594', false, '2022-12-12 13:30:52.594', true, 1, 0, 0, 2, 'Test4
', 'Test4', 2, 23, 3, 1602174123243470849, 1, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', -1, NULL, 1);
INSERT INTO public.qa_question_field VALUES (1598325650412797952, '2022-12-01 22:38:25.171', false, '2022-12-01 22:51:01.349', true, 2, 0, 0, 3, '删除成功
', 'testtest', 0, 24, 20, 1598325650416992256, 2, 'xcode', 'xcode', 'cyanosis', 'geekBlackDark', 12, NULL, 0);
INSERT INTO public.qa_question_field VALUES (3, '2022-08-28 19:36:42.284', false, '2022-08-28 19:36:42.284', true, 1, 0, 0, 0, '问题简介', '发起提问3', 1, 50, 3, 3, 3, 'xcode', 'monokai', 'cyanosis', 'geekBlackDark', -1, NULL, 0);


--
-- Data for Name: qa_tag; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.qa_tag VALUES (2, '2022-08-28 18:36:54.314', false, '2022-08-28 18:36:54.314', 'rust', 0, '{}', 3, NULL, true);
INSERT INTO public.qa_tag VALUES (1, '2022-08-28 18:36:54.276', false, '2022-08-28 18:36:54.276', 'Java', 0, '{}', 3, NULL, true);
INSERT INTO public.qa_tag VALUES (5, '2022-08-28 18:36:54.317', false, '2022-08-28 18:36:54.317', 'Vue', 0, '{}', 1, NULL, true);
INSERT INTO public.qa_tag VALUES (4, '2022-08-28 18:36:54.317', false, '2022-08-28 18:36:54.317', 'C++', 0, '{}', 3, NULL, true);
INSERT INTO public.qa_tag VALUES (3, '2022-08-28 18:36:54.316', false, '2022-08-28 18:36:54.316', 'go', 0, '{}', 3, NULL, true);
INSERT INTO public.qa_tag VALUES (1585294500006199297, '2022-10-26 23:37:16.806', false, '2022-10-26 23:37:16.806', 'CSS', 0, 'CSS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500006199298, '2022-10-26 23:37:16.806', false, '2022-10-26 23:37:16.806', 'Node.js', 0, 'Node.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500006199299, '2022-10-26 23:37:16.806', false, '2022-10-26 23:37:16.806', '数据库', 0, '数据库', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500006199300, '2022-10-26 23:37:16.806', false, '2022-10-26 23:37:16.806', '程序员', 0, '程序员', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500010393600, '2022-10-26 23:37:16.807', false, '2022-10-26 23:37:16.807', '前端框架', 0, '前端框架', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500010393601, '2022-10-26 23:37:16.807', false, '2022-10-26 23:37:16.807', '设计模式', 0, '设计模式', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500014587904, '2022-10-26 23:37:16.808', false, '2022-10-26 23:37:16.808', 'HTML', 0, 'HTML', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500014587905, '2022-10-26 23:37:16.808', false, '2022-10-26 23:37:16.808', 'Android', 0, 'Android', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500014587906, '2022-10-26 23:37:16.808', false, '2022-10-26 23:37:16.808', 'React.js', 0, 'React.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500014587907, '2022-10-26 23:37:16.808', false, '2022-10-26 23:37:16.808', 'Linux', 0, 'Linux', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500014587908, '2022-10-26 23:37:16.809', false, '2022-10-26 23:37:16.809', '微信小程序', 0, '微信小程序', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500018782208, '2022-10-26 23:37:16.809', false, '2022-10-26 23:37:16.809', 'Git', 0, 'Git', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500018782209, '2022-10-26 23:37:16.809', false, '2022-10-26 23:37:16.809', 'Python', 0, 'Python', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500018782210, '2022-10-26 23:37:16.809', false, '2022-10-26 23:37:16.809', 'Webpack', 0, 'Webpack', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500022976512, '2022-10-26 23:37:16.81', false, '2022-10-26 23:37:16.81', '开源', 0, '开源', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500022976513, '2022-10-26 23:37:16.81', false, '2022-10-26 23:37:16.81', 'MySQL', 0, 'MySQL', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500022976514, '2022-10-26 23:37:16.81', false, '2022-10-26 23:37:16.81', '人工智能', 0, '人工智能', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500022976515, '2022-10-26 23:37:16.81', false, '2022-10-26 23:37:16.81', '设计', 0, '设计', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500027170816, '2022-10-26 23:37:16.811', false, '2022-10-26 23:37:16.811', '产品', 0, '产品', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500027170817, '2022-10-26 23:37:16.811', false, '2022-10-26 23:37:16.811', 'HTTP', 0, 'HTTP', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500027170818, '2022-10-26 23:37:16.811', false, '2022-10-26 23:37:16.811', 'ECMAScript 6', 0, 'ECMAScript 6', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500027170819, '2022-10-26 23:37:16.811', false, '2022-10-26 23:37:16.811', 'iOS', 0, 'iOS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500027170820, '2022-10-26 23:37:16.811', false, '2022-10-26 23:37:16.811', '全栈', 0, '全栈', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500031365120, '2022-10-26 23:37:16.812', false, '2022-10-26 23:37:16.812', 'Redis', 0, 'Redis', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500031365121, '2022-10-26 23:37:16.812', false, '2022-10-26 23:37:16.812', '微信', 0, '微信', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500031365122, '2022-10-26 23:37:16.812', false, '2022-10-26 23:37:16.812', 'Nginx', 0, 'Nginx', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500031365123, '2022-10-26 23:37:16.812', false, '2022-10-26 23:37:16.812', '正则表达式', 0, '正则表达式', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500035559424, '2022-10-26 23:37:16.813', false, '2022-10-26 23:37:16.813', 'Google', 0, 'Google', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500035559425, '2022-10-26 23:37:16.813', false, '2022-10-26 23:37:16.813', '机器学习', 0, '机器学习', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500035559426, '2022-10-26 23:37:16.813', false, '2022-10-26 23:37:16.813', 'Docker', 0, 'Docker', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500035559427, '2022-10-26 23:37:16.813', false, '2022-10-26 23:37:16.813', '黑客', 0, '黑客', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500035559428, '2022-10-26 23:37:16.813', false, '2022-10-26 23:37:16.813', 'jQuery', 0, 'jQuery', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500039753728, '2022-10-26 23:37:16.814', false, '2022-10-26 23:37:16.814', 'Chrome', 0, 'Chrome', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500039753729, '2022-10-26 23:37:16.814', false, '2022-10-26 23:37:16.814', '响应式设计', 0, '响应式设计', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500039753730, '2022-10-26 23:37:16.814', false, '2022-10-26 23:37:16.814', '编程语言', 0, '编程语言', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500039753731, '2022-10-26 23:37:16.814', false, '2022-10-26 23:37:16.814', 'APP', 0, 'APP', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500039753732, '2022-10-26 23:37:16.814', false, '2022-10-26 23:37:16.814', '命令行', 0, '命令行', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500043948032, '2022-10-26 23:37:16.815', false, '2022-10-26 23:37:16.815', '创业', 0, '创业', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500043948033, '2022-10-26 23:37:16.815', false, '2022-10-26 23:37:16.815', 'Spring', 0, 'Spring', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500043948034, '2022-10-26 23:37:16.815', false, '2022-10-26 23:37:16.815', 'React Native', 0, 'React Native', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500043948035, '2022-10-26 23:37:16.815', false, '2022-10-26 23:37:16.815', 'Android Studio', 0, 'Android Studio', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500048142336, '2022-10-26 23:37:16.816', false, '2022-10-26 23:37:16.816', 'Angular.js', 0, 'Angular.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500048142337, '2022-10-26 23:37:16.816', false, '2022-10-26 23:37:16.816', 'Mac', 0, 'Mac', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500048142338, '2022-10-26 23:37:16.816', false, '2022-10-26 23:37:16.816', '产品经理', 0, '产品经理', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500048142339, '2022-10-26 23:37:16.816', false, '2022-10-26 23:37:16.816', 'Bootstrap', 0, 'Bootstrap', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500048142340, '2022-10-26 23:37:16.816', false, '2022-10-26 23:37:16.816', 'Vuex', 0, 'Vuex', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500048142341, '2022-10-26 23:37:16.817', false, '2022-10-26 23:37:16.817', 'Apple', 0, 'Apple', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500052336640, '2022-10-26 23:37:16.817', false, '2022-10-26 23:37:16.817', '数据可视化', 0, '数据可视化', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500052336641, '2022-10-26 23:37:16.817', false, '2022-10-26 23:37:16.817', 'PHP', 0, 'PHP', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500052336642, '2022-10-26 23:37:16.817', false, '2022-10-26 23:37:16.817', 'Photoshop', 0, 'Photoshop', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500052336643, '2022-10-26 23:37:16.817', false, '2022-10-26 23:37:16.817', '操作系统', 0, '操作系统', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500052336644, '2022-10-26 23:37:16.818', false, '2022-10-26 23:37:16.818', 'API', 0, 'API', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500056530944, '2022-10-26 23:37:16.818', false, '2022-10-26 23:37:16.818', '图片资源', 0, '图片资源', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500056530945, '2022-10-26 23:37:16.818', false, '2022-10-26 23:37:16.818', 'MongoDB', 0, 'MongoDB', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500056530946, '2022-10-26 23:37:16.818', false, '2022-10-26 23:37:16.818', '阿里巴巴', 0, '阿里巴巴', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500056530947, '2022-10-26 23:37:16.819', false, '2022-10-26 23:37:16.819', 'TypeScript', 0, 'TypeScript', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500060725248, '2022-10-26 23:37:16.819', false, '2022-10-26 23:37:16.819', '数据挖掘', 0, '数据挖掘', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500060725249, '2022-10-26 23:37:16.819', false, '2022-10-26 23:37:16.819', '深度学习', 0, '深度学习', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500060725250, '2022-10-26 23:37:16.819', false, '2022-10-26 23:37:16.819', '安全', 0, '安全', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500060725251, '2022-10-26 23:37:16.819', false, '2022-10-26 23:37:16.819', 'Sublime Text', 0, 'Sublime Text', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500060725252, '2022-10-26 23:37:16.819', false, '2022-10-26 23:37:16.819', '运维', 0, '运维', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500064919552, '2022-10-26 23:37:16.82', false, '2022-10-26 23:37:16.82', '设计师', 0, '设计师', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500064919553, '2022-10-26 23:37:16.82', false, '2022-10-26 23:37:16.82', 'gradle', 0, 'gradle', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500064919554, '2022-10-26 23:37:16.82', false, '2022-10-26 23:37:16.82', '微服务', 0, '微服务', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500064919555, '2022-10-26 23:37:16.82', false, '2022-10-26 23:37:16.82', 'Canvas', 0, 'Canvas', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500002004993, '2022-10-26 23:37:16.805', false, '2022-10-26 23:37:16.805', '架构', 0, '架构', 3, NULL, true);
INSERT INTO public.qa_tag VALUES (1585294500002004992, '2022-10-26 23:37:16.805', false, '2022-10-26 23:37:16.805', 'Vue.js', 0, 'Vue.js', 2, NULL, true);
INSERT INTO public.qa_tag VALUES (1585294499851010048, '2022-10-26 23:37:16.79', false, '2022-10-26 23:37:16.79', '前端', 0, '前端', 1, NULL, true);
INSERT INTO public.qa_tag VALUES (1585294500006199296, '2022-10-26 23:37:16.806', false, '2022-10-26 23:37:16.806', '代码规范', 0, '代码规范', 3, NULL, true);
INSERT INTO public.qa_tag VALUES (1585294500064919556, '2022-10-26 23:37:16.82', false, '2022-10-26 23:37:16.82', '招聘', 0, '招聘', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500069113856, '2022-10-26 23:37:16.821', false, '2022-10-26 23:37:16.821', '爬虫', 0, '爬虫', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500069113857, '2022-10-26 23:37:16.821', false, '2022-10-26 23:37:16.821', 'MVVM', 0, 'MVVM', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500069113858, '2022-10-26 23:37:16.821', false, '2022-10-26 23:37:16.821', 'Material Design', 0, 'Material Design', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500069113859, '2022-10-26 23:37:16.821', false, '2022-10-26 23:37:16.821', 'Swift', 0, 'Swift', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500069113860, '2022-10-26 23:37:16.821', false, '2022-10-26 23:37:16.821', '源码', 0, '源码', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500073308160, '2022-10-26 23:37:16.822', false, '2022-10-26 23:37:16.822', '云计算', 0, '云计算', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500073308161, '2022-10-26 23:37:16.822', false, '2022-10-26 23:37:16.822', 'Markdown', 0, 'Markdown', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500073308162, '2022-10-26 23:37:16.822', false, '2022-10-26 23:37:16.822', '敏捷开发', 0, '敏捷开发', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500073308163, '2022-10-26 23:37:16.822', false, '2022-10-26 23:37:16.822', 'Visual Studio Code', 0, 'Visual Studio Code', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500073308164, '2022-10-26 23:37:16.822', false, '2022-10-26 23:37:16.822', 'Xcode', 0, 'Xcode', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500077502464, '2022-10-26 23:37:16.823', false, '2022-10-26 23:37:16.823', '物联网', 0, '物联网', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500077502465, '2022-10-26 23:37:16.823', false, '2022-10-26 23:37:16.823', 'RxJava', 0, 'RxJava', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500077502466, '2022-10-26 23:37:16.823', false, '2022-10-26 23:37:16.823', 'Spring Boot', 0, 'Spring Boot', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500077502467, '2022-10-26 23:37:16.823', false, '2022-10-26 23:37:16.823', '腾讯', 0, '腾讯', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500077502468, '2022-10-26 23:37:16.823', false, '2022-10-26 23:37:16.823', '动效', 0, '动效', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500081696768, '2022-10-26 23:37:16.824', false, '2022-10-26 23:37:16.824', 'HTTPS', 0, 'HTTPS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500081696769, '2022-10-26 23:37:16.824', false, '2022-10-26 23:37:16.824', 'Objective-C', 0, 'Objective-C', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500081696770, '2022-10-26 23:37:16.824', false, '2022-10-26 23:37:16.824', 'NPM', 0, 'NPM', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500081696771, '2022-10-26 23:37:16.824', false, '2022-10-26 23:37:16.824', '字体', 0, '字体', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500081696772, '2022-10-26 23:37:16.824', false, '2022-10-26 23:37:16.824', 'Flutter', 0, 'Flutter', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500081696773, '2022-10-26 23:37:16.825', false, '2022-10-26 23:37:16.825', '运营', 0, '运营', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500085891072, '2022-10-26 23:37:16.825', false, '2022-10-26 23:37:16.825', 'JSON', 0, 'JSON', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500085891073, '2022-10-26 23:37:16.825', false, '2022-10-26 23:37:16.825', 'Ajax', 0, 'Ajax', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500085891074, '2022-10-26 23:37:16.825', false, '2022-10-26 23:37:16.825', 'Icon', 0, 'Icon', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500085891075, '2022-10-26 23:37:16.825', false, '2022-10-26 23:37:16.825', '测试', 0, '测试', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500085891076, '2022-10-26 23:37:16.825', false, '2022-10-26 23:37:16.825', 'JVM', 0, 'JVM', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500090085376, '2022-10-26 23:37:16.826', false, '2022-10-26 23:37:16.826', '虚拟现实', 0, '虚拟现实', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500090085377, '2022-10-26 23:37:16.826', false, '2022-10-26 23:37:16.826', 'DOM', 0, 'DOM', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500090085378, '2022-10-26 23:37:16.826', false, '2022-10-26 23:37:16.826', 'Debug', 0, 'Debug', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500090085379, '2022-10-26 23:37:16.826', false, '2022-10-26 23:37:16.826', '电子书', 0, '电子书', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500090085380, '2022-10-26 23:37:16.826', false, '2022-10-26 23:37:16.826', 'Redux', 0, 'Redux', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500094279680, '2022-10-26 23:37:16.827', false, '2022-10-26 23:37:16.827', '浏览器', 0, '浏览器', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500094279681, '2022-10-26 23:37:16.827', false, '2022-10-26 23:37:16.827', 'Ubuntu', 0, 'Ubuntu', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500094279682, '2022-10-26 23:37:16.827', false, '2022-10-26 23:37:16.827', 'Eclipse', 0, 'Eclipse', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500094279683, '2022-10-26 23:37:16.827', false, '2022-10-26 23:37:16.827', 'SQL', 0, 'SQL', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500094279684, '2022-10-26 23:37:16.827', false, '2022-10-26 23:37:16.827', '掘金翻译计划', 0, '掘金翻译计划', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500094279685, '2022-10-26 23:37:16.827', false, '2022-10-26 23:37:16.827', '负载均衡', 0, '负载均衡', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500098473984, '2022-10-26 23:37:16.828', false, '2022-10-26 23:37:16.828', 'LeetCode', 0, 'LeetCode', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500098473985, '2022-10-26 23:37:16.828', false, '2022-10-26 23:37:16.828', '数据结构', 0, '数据结构', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500098473986, '2022-10-26 23:37:16.828', false, '2022-10-26 23:37:16.828', 'SCSS', 0, 'SCSS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500098473987, '2022-10-26 23:37:16.828', false, '2022-10-26 23:37:16.828', 'maven', 0, 'maven', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500098473988, '2022-10-26 23:37:16.828', false, '2022-10-26 23:37:16.828', 'MyBatis', 0, 'MyBatis', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500102668288, '2022-10-26 23:37:16.829', false, '2022-10-26 23:37:16.829', '配色', 0, '配色', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500102668289, '2022-10-26 23:37:16.829', false, '2022-10-26 23:37:16.829', 'Kotlin', 0, 'Kotlin', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500102668290, '2022-10-26 23:37:16.829', false, '2022-10-26 23:37:16.829', 'Promise', 0, 'Promise', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500102668291, '2022-10-26 23:37:16.829', false, '2022-10-26 23:37:16.829', 'Sketch', 0, 'Sketch', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500102668292, '2022-10-26 23:37:16.829', false, '2022-10-26 23:37:16.829', 'C', 0, 'C', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500102668293, '2022-10-26 23:37:16.83', false, '2022-10-26 23:37:16.83', '数据分析', 0, '数据分析', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500106862592, '2022-10-26 23:37:16.83', false, '2022-10-26 23:37:16.83', '游戏', 0, '游戏', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500106862593, '2022-10-26 23:37:16.83', false, '2022-10-26 23:37:16.83', 'IntelliJ IDEA', 0, 'IntelliJ IDEA', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500106862594, '2022-10-26 23:37:16.83', false, '2022-10-26 23:37:16.83', '函数式编程', 0, '函数式编程', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500106862595, '2022-10-26 23:37:16.83', false, '2022-10-26 23:37:16.83', 'vue-router', 0, 'vue-router', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500111056896, '2022-10-26 23:37:16.831', false, '2022-10-26 23:37:16.831', 'SVG', 0, 'SVG', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500111056897, '2022-10-26 23:37:16.831', false, '2022-10-26 23:37:16.831', '区块链', 0, '区块链', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500111056898, '2022-10-26 23:37:16.831', false, '2022-10-26 23:37:16.831', 'VIM', 0, 'VIM', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500115251200, '2022-10-26 23:37:16.832', false, '2022-10-26 23:37:16.832', 'Apache', 0, 'Apache', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500115251201, '2022-10-26 23:37:16.832', false, '2022-10-26 23:37:16.832', '性能优化', 0, '性能优化', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500115251202, '2022-10-26 23:37:16.832', false, '2022-10-26 23:37:16.832', 'Windows', 0, 'Windows', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500115251203, '2022-10-26 23:37:16.832', false, '2022-10-26 23:37:16.832', 'Facebook', 0, 'Facebook', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500115251204, '2022-10-26 23:37:16.832', false, '2022-10-26 23:37:16.832', '支付宝', 0, '支付宝', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500119445504, '2022-10-26 23:37:16.833', false, '2022-10-26 23:37:16.833', 'Element', 0, 'Element', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500119445505, '2022-10-26 23:37:16.833', false, '2022-10-26 23:37:16.833', '稀土', 0, '稀土', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500119445506, '2022-10-26 23:37:16.833', false, '2022-10-26 23:37:16.833', 'SEO', 0, 'SEO', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500119445507, '2022-10-26 23:37:16.833', false, '2022-10-26 23:37:16.833', '神经网络', 0, '神经网络', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500119445508, '2022-10-26 23:37:16.833', false, '2022-10-26 23:37:16.833', 'Kubernetes', 0, 'Kubernetes', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500119445509, '2022-10-26 23:37:16.833', false, '2022-10-26 23:37:16.833', 'Spring Cloud', 0, 'Spring Cloud', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500123639808, '2022-10-26 23:37:16.834', false, '2022-10-26 23:37:16.834', 'Unity3D', 0, 'Unity3D', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500123639809, '2022-10-26 23:37:16.834', false, '2022-10-26 23:37:16.834', 'axios', 0, 'axios', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500123639810, '2022-10-26 23:37:16.834', false, '2022-10-26 23:37:16.834', 'Kafka', 0, 'Kafka', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500123639811, '2022-10-26 23:37:16.834', false, '2022-10-26 23:37:16.834', 'TCP/IP', 0, 'TCP/IP', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500123639812, '2022-10-26 23:37:16.834', false, '2022-10-26 23:37:16.834', 'Elasticsearch', 0, 'Elasticsearch', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500127834112, '2022-10-26 23:37:16.835', false, '2022-10-26 23:37:16.835', 'Express', 0, 'Express', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500127834113, '2022-10-26 23:37:16.835', false, '2022-10-26 23:37:16.835', 'Java EE', 0, 'Java EE', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500127834114, '2022-10-26 23:37:16.835', false, '2022-10-26 23:37:16.835', '响应式编程', 0, '响应式编程', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500127834115, '2022-10-26 23:37:16.835', false, '2022-10-26 23:37:16.835', 'Microsoft', 0, 'Microsoft', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500127834116, '2022-10-26 23:37:16.835', false, '2022-10-26 23:37:16.835', '增强现实', 0, '增强现实', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500127834117, '2022-10-26 23:37:16.835', false, '2022-10-26 23:37:16.835', '分布式', 0, '分布式', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500132028416, '2022-10-26 23:37:16.836', false, '2022-10-26 23:37:16.836', '大数据', 0, '大数据', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500132028417, '2022-10-26 23:37:16.836', false, '2022-10-26 23:37:16.836', 'Gulp', 0, 'Gulp', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500132028418, '2022-10-26 23:37:16.836', false, '2022-10-26 23:37:16.836', 'TensorFlow', 0, 'TensorFlow', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500132028419, '2022-10-26 23:37:16.836', false, '2022-10-26 23:37:16.836', '单元测试', 0, '单元测试', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500132028420, '2022-10-26 23:37:16.836', false, '2022-10-26 23:37:16.836', '计算机视觉', 0, '计算机视觉', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500132028421, '2022-10-26 23:37:16.836', false, '2022-10-26 23:37:16.836', 'ECharts', 0, 'ECharts', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500136222720, '2022-10-26 23:37:16.837', false, '2022-10-26 23:37:16.837', 'Hadoop', 0, 'Hadoop', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500136222721, '2022-10-26 23:37:16.837', false, '2022-10-26 23:37:16.837', 'SQLite', 0, 'SQLite', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500136222722, '2022-10-26 23:37:16.837', false, '2022-10-26 23:37:16.837', '远程工作', 0, '远程工作', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500136222723, '2022-10-26 23:37:16.837', false, '2022-10-26 23:37:16.837', 'Tomcat', 0, 'Tomcat', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500136222724, '2022-10-26 23:37:16.837', false, '2022-10-26 23:37:16.837', 'Vite', 0, 'Vite', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500140417024, '2022-10-26 23:37:16.838', false, '2022-10-26 23:37:16.838', 'WebSocket', 0, 'WebSocket', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500140417025, '2022-10-26 23:37:16.838', false, '2022-10-26 23:37:16.838', '嵌入式', 0, '嵌入式', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500140417026, '2022-10-26 23:37:16.838', false, '2022-10-26 23:37:16.838', 'Firefox', 0, 'Firefox', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500140417027, '2022-10-26 23:37:16.838', false, '2022-10-26 23:37:16.838', '求职', 0, '求职', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500140417028, '2022-10-26 23:37:16.838', false, '2022-10-26 23:37:16.838', 'APK', 0, 'APK', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500140417029, '2022-10-26 23:37:16.838', false, '2022-10-26 23:37:16.838', '服务器', 0, '服务器', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500144611328, '2022-10-26 23:37:16.839', false, '2022-10-26 23:37:16.839', 'WebGL', 0, 'WebGL', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500144611329, '2022-10-26 23:37:16.839', false, '2022-10-26 23:37:16.839', '机器人', 0, '机器人', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500144611330, '2022-10-26 23:37:16.839', false, '2022-10-26 23:37:16.839', 'Django', 0, 'Django', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500144611331, '2022-10-26 23:37:16.839', false, '2022-10-26 23:37:16.839', 'Webkit', 0, 'Webkit', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500148805632, '2022-10-26 23:37:16.84', false, '2022-10-26 23:37:16.84', '投资', 0, '投资', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500148805633, '2022-10-26 23:37:16.84', false, '2022-10-26 23:37:16.84', '比特币', 0, '比特币', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500148805634, '2022-10-26 23:37:16.84', false, '2022-10-26 23:37:16.84', 'NoSQL', 0, 'NoSQL', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500148805635, '2022-10-26 23:37:16.84', false, '2022-10-26 23:37:16.84', '编译器', 0, '编译器', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500148805636, '2022-10-26 23:37:16.84', false, '2022-10-26 23:37:16.84', 'Atom', 0, 'Atom', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500148805637, '2022-10-26 23:37:16.84', false, '2022-10-26 23:37:16.84', 'MVC', 0, 'MVC', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500152999936, '2022-10-26 23:37:16.841', false, '2022-10-26 23:37:16.841', 'uni-app', 0, 'uni-app', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500152999937, '2022-10-26 23:37:16.841', false, '2022-10-26 23:37:16.841', '百度', 0, '百度', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500152999938, '2022-10-26 23:37:16.841', false, '2022-10-26 23:37:16.841', '科幻', 0, '科幻', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500152999939, '2022-10-26 23:37:16.841', false, '2022-10-26 23:37:16.841', 'RabbitMQ', 0, 'RabbitMQ', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500152999940, '2022-10-26 23:37:16.841', false, '2022-10-26 23:37:16.841', 'Shell', 0, 'Shell', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500152999941, '2022-10-26 23:37:16.842', false, '2022-10-26 23:37:16.842', 'ZooKeeper', 0, 'ZooKeeper', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500157194240, '2022-10-26 23:37:16.842', false, '2022-10-26 23:37:16.842', 'Electron', 0, 'Electron', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500157194241, '2022-10-26 23:37:16.842', false, '2022-10-26 23:37:16.842', 'three.js', 0, 'three.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500157194242, '2022-10-26 23:37:16.842', false, '2022-10-26 23:37:16.842', 'flexbox', 0, 'flexbox', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500157194243, '2022-10-26 23:37:16.842', false, '2022-10-26 23:37:16.842', '连续集成', 0, '连续集成', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500157194244, '2022-10-26 23:37:16.842', false, '2022-10-26 23:37:16.842', 'CentOS', 0, 'CentOS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500161388544, '2022-10-26 23:37:16.843', false, '2022-10-26 23:37:16.843', 'V2EX', 0, 'V2EX', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500161388545, '2022-10-26 23:37:16.843', false, '2022-10-26 23:37:16.843', 'Spark', 0, 'Spark', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500161388546, '2022-10-26 23:37:16.843', false, '2022-10-26 23:37:16.843', 'd3.js', 0, 'd3.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500161388547, '2022-10-26 23:37:16.843', false, '2022-10-26 23:37:16.843', 'GitLab', 0, 'GitLab', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500165582848, '2022-10-26 23:37:16.844', false, '2022-10-26 23:37:16.844', 'Postman', 0, 'Postman', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500165582849, '2022-10-26 23:37:16.844', false, '2022-10-26 23:37:16.844', 'UI Kit', 0, 'UI Kit', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500165582850, '2022-10-26 23:37:16.844', false, '2022-10-26 23:37:16.844', 'Less', 0, 'Less', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500165582851, '2022-10-26 23:37:16.844', false, '2022-10-26 23:37:16.844', '掘金日报', 0, '掘金日报', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500165582852, '2022-10-26 23:37:16.844', false, '2022-10-26 23:37:16.844', 'Safari', 0, 'Safari', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500165582853, '2022-10-26 23:37:16.845', false, '2022-10-26 23:37:16.845', 'Dubbo', 0, 'Dubbo', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500169777152, '2022-10-26 23:37:16.845', false, '2022-10-26 23:37:16.845', '.NET', 0, '.NET', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500169777153, '2022-10-26 23:37:16.845', false, '2022-10-26 23:37:16.845', '交互设计', 0, '交互设计', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500169777154, '2022-10-26 23:37:16.845', false, '2022-10-26 23:37:16.845', 'Laravel', 0, 'Laravel', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500169777155, '2022-10-26 23:37:16.845', false, '2022-10-26 23:37:16.845', 'Weex', 0, 'Weex', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500169777156, '2022-10-26 23:37:16.845', false, '2022-10-26 23:37:16.845', 'Twitter', 0, 'Twitter', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500173971456, '2022-10-26 23:37:16.846', false, '2022-10-26 23:37:16.846', 'Netty', 0, 'Netty', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500173971457, '2022-10-26 23:37:16.846', false, '2022-10-26 23:37:16.846', 'ORM', 0, 'ORM', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500173971458, '2022-10-26 23:37:16.846', false, '2022-10-26 23:37:16.846', 'SSH', 0, 'SSH', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500173971459, '2022-10-26 23:37:16.846', false, '2022-10-26 23:37:16.846', 'Wireshark', 0, 'Wireshark', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500173971460, '2022-10-26 23:37:16.846', false, '2022-10-26 23:37:16.846', 'PostgreSQL', 0, 'PostgreSQL', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500173971461, '2022-10-26 23:37:16.846', false, '2022-10-26 23:37:16.846', '网络协议', 0, '网络协议', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500178165760, '2022-10-26 23:37:16.847', false, '2022-10-26 23:37:16.847', 'Jenkins', 0, 'Jenkins', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500178165761, '2022-10-26 23:37:16.847', false, '2022-10-26 23:37:16.847', 'Ruby', 0, 'Ruby', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500178165762, '2022-10-26 23:37:16.847', false, '2022-10-26 23:37:16.847', 'Sea.js', 0, 'Sea.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500178165763, '2022-10-26 23:37:16.847', false, '2022-10-26 23:37:16.847', 'UML', 0, 'UML', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500178165764, '2022-10-26 23:37:16.847', false, '2022-10-26 23:37:16.847', 'RocketMQ', 0, 'RocketMQ', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500182360064, '2022-10-26 23:37:16.848', false, '2022-10-26 23:37:16.848', 'JetBrains', 0, 'JetBrains', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500182360065, '2022-10-26 23:37:16.848', false, '2022-10-26 23:37:16.848', 'ionic', 0, 'ionic', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500182360066, '2022-10-26 23:37:16.848', false, '2022-10-26 23:37:16.848', '如何当个好爸爸', 0, '如何当个好爸爸', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500182360067, '2022-10-26 23:37:16.848', false, '2022-10-26 23:37:16.848', '状态机', 0, '状态机', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500182360068, '2022-10-26 23:37:16.848', false, '2022-10-26 23:37:16.848', 'macOS', 0, 'macOS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500186554368, '2022-10-26 23:37:16.849', false, '2022-10-26 23:37:16.849', 'Grunt', 0, 'Grunt', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500186554369, '2022-10-26 23:37:16.849', false, '2022-10-26 23:37:16.849', 'koa', 0, 'koa', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500186554370, '2022-10-26 23:37:16.849', false, '2022-10-26 23:37:16.849', '线下活动', 0, '线下活动', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500186554371, '2022-10-26 23:37:16.849', false, '2022-10-26 23:37:16.849', 'NLP', 0, 'NLP', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500186554372, '2022-10-26 23:37:16.849', false, '2022-10-26 23:37:16.849', '搜索引擎', 0, '搜索引擎', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500186554373, '2022-10-26 23:37:16.849', false, '2022-10-26 23:37:16.849', 'Oracle', 0, 'Oracle', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500190748672, '2022-10-26 23:37:16.85', false, '2022-10-26 23:37:16.85', '掘金技术征文', 0, '掘金技术征文', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500190748673, '2022-10-26 23:37:16.85', false, '2022-10-26 23:37:16.85', 'SVN', 0, 'SVN', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500190748674, '2022-10-26 23:37:16.85', false, '2022-10-26 23:37:16.85', '直播', 0, '直播', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500190748675, '2022-10-26 23:37:16.85', false, '2022-10-26 23:37:16.85', 'Flask', 0, 'Flask', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500190748676, '2022-10-26 23:37:16.85', false, '2022-10-26 23:37:16.85', 'Hacker News', 0, 'Hacker News', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500194942976, '2022-10-26 23:37:16.851', false, '2022-10-26 23:37:16.851', '增长黑客', 0, '增长黑客', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500194942977, '2022-10-26 23:37:16.851', false, '2022-10-26 23:37:16.851', '容器', 0, '容器', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500194942978, '2022-10-26 23:37:16.851', false, '2022-10-26 23:37:16.851', 'Babel', 0, 'Babel', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500194942979, '2022-10-26 23:37:16.851', false, '2022-10-26 23:37:16.851', '云原生', 0, '云原生', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500194942980, '2022-10-26 23:37:16.851', false, '2022-10-26 23:37:16.851', 'PostCSS', 0, 'PostCSS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500194942981, '2022-10-26 23:37:16.851', false, '2022-10-26 23:37:16.851', 'ESLint', 0, 'ESLint', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500199137280, '2022-10-26 23:37:16.852', false, '2022-10-26 23:37:16.852', 'CDN', 0, 'CDN', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500199137281, '2022-10-26 23:37:16.852', false, '2022-10-26 23:37:16.852', 'DNS', 0, 'DNS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500199137282, '2022-10-26 23:37:16.852', false, '2022-10-26 23:37:16.852', 'Scala', 0, 'Scala', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500199137283, '2022-10-26 23:37:16.852', false, '2022-10-26 23:37:16.852', 'Backbone.js', 0, 'Backbone.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500199137284, '2022-10-26 23:37:16.852', false, '2022-10-26 23:37:16.852', '消息队列', 0, '消息队列', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500199137285, '2022-10-26 23:37:16.852', false, '2022-10-26 23:37:16.852', '沸点', 0, '沸点', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500203331584, '2022-10-26 23:37:16.853', false, '2022-10-26 23:37:16.853', 'Lua', 0, 'Lua', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500203331585, '2022-10-26 23:37:16.853', false, '2022-10-26 23:37:16.853', 'Flux', 0, 'Flux', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500203331586, '2022-10-26 23:37:16.853', false, '2022-10-26 23:37:16.853', '小程序·云开发', 0, '小程序·云开发', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500203331587, '2022-10-26 23:37:16.853', false, '2022-10-26 23:37:16.853', 'MVP', 0, 'MVP', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500203331588, '2022-10-26 23:37:16.853', false, '2022-10-26 23:37:16.853', '视觉设计', 0, '视觉设计', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500203331589, '2022-10-26 23:37:16.853', false, '2022-10-26 23:37:16.853', 'Retrofit', 0, 'Retrofit', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500203331590, '2022-10-26 23:37:16.854', false, '2022-10-26 23:37:16.854', 'C#', 0, 'C#', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500207525888, '2022-10-26 23:37:16.854', false, '2022-10-26 23:37:16.854', 'Ant Design', 0, 'Ant Design', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500207525889, '2022-10-26 23:37:16.854', false, '2022-10-26 23:37:16.854', '树莓派', 0, '树莓派', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500207525890, '2022-10-26 23:37:16.854', false, '2022-10-26 23:37:16.854', 'OKHttp', 0, 'OKHttp', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500207525891, '2022-10-26 23:37:16.854', false, '2022-10-26 23:37:16.854', 'CMS', 0, 'CMS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500207525892, '2022-10-26 23:37:16.854', false, '2022-10-26 23:37:16.854', '笔记', 0, '笔记', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500211720192, '2022-10-26 23:37:16.855', false, '2022-10-26 23:37:16.855', 'PyCharm', 0, 'PyCharm', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500211720193, '2022-10-26 23:37:16.855', false, '2022-10-26 23:37:16.855', 'GraphQL', 0, 'GraphQL', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500211720194, '2022-10-26 23:37:16.855', false, '2022-10-26 23:37:16.855', 'ECMAScript 8', 0, 'ECMAScript 8', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500211720195, '2022-10-26 23:37:16.855', false, '2022-10-26 23:37:16.855', 'Yarn', 0, 'Yarn', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500215914496, '2022-10-26 23:37:16.856', false, '2022-10-26 23:37:16.856', 'Medium', 0, 'Medium', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500215914497, '2022-10-26 23:37:16.856', false, '2022-10-26 23:37:16.856', '逆向', 0, '逆向', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500215914498, '2022-10-26 23:37:16.856', false, '2022-10-26 23:37:16.856', 'ReactiveX', 0, 'ReactiveX', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500215914499, '2022-10-26 23:37:16.856', false, '2022-10-26 23:37:16.856', '音视频开发', 0, '音视频开发', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500215914500, '2022-10-26 23:37:16.856', false, '2022-10-26 23:37:16.856', '排序算法', 0, '排序算法', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500215914501, '2022-10-26 23:37:16.856', false, '2022-10-26 23:37:16.856', 'Underscore.js', 0, 'Underscore.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500220108800, '2022-10-26 23:37:16.857', false, '2022-10-26 23:37:16.857', 'Apple Watch', 0, 'Apple Watch', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500220108801, '2022-10-26 23:37:16.857', false, '2022-10-26 23:37:16.857', 'V8', 0, 'V8', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500220108802, '2022-10-26 23:37:16.857', false, '2022-10-26 23:37:16.857', 'DNodeJS', 0, 'DNodeJS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500220108803, '2022-10-26 23:37:16.857', false, '2022-10-26 23:37:16.857', '午夜话题', 0, '午夜话题', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500220108804, '2022-10-26 23:37:16.857', false, '2022-10-26 23:37:16.857', 'Cocoa', 0, 'Cocoa', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500220108805, '2022-10-26 23:37:16.857', false, '2022-10-26 23:37:16.857', 'Web Components', 0, 'Web Components', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500224303104, '2022-10-26 23:37:16.858', false, '2022-10-26 23:37:16.858', 'Instagram', 0, 'Instagram', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500224303105, '2022-10-26 23:37:16.858', false, '2022-10-26 23:37:16.858', 'Meteor.js', 0, 'Meteor.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500224303106, '2022-10-26 23:37:16.858', false, '2022-10-26 23:37:16.858', 'Excel', 0, 'Excel', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500224303107, '2022-10-26 23:37:16.858', false, '2022-10-26 23:37:16.858', 'WebAssembly', 0, 'WebAssembly', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500228497408, '2022-10-26 23:37:16.859', false, '2022-10-26 23:37:16.859', 'Keynote', 0, 'Keynote', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500228497409, '2022-10-26 23:37:16.859', false, '2022-10-26 23:37:16.859', '汇编语言', 0, '汇编语言', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500228497410, '2022-10-26 23:37:16.859', false, '2022-10-26 23:37:16.859', 'Android Wear', 0, 'Android Wear', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500228497411, '2022-10-26 23:37:16.859', false, '2022-10-26 23:37:16.859', 'WebRTC', 0, 'WebRTC', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500228497412, '2022-10-26 23:37:16.859', false, '2022-10-26 23:37:16.859', 'Uber', 0, 'Uber', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500232691712, '2022-10-26 23:37:16.86', false, '2022-10-26 23:37:16.86', 'RxJS', 0, 'RxJS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500232691713, '2022-10-26 23:37:16.86', false, '2022-10-26 23:37:16.86', 'CoffeeScript', 0, 'CoffeeScript', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500232691714, '2022-10-26 23:37:16.86', false, '2022-10-26 23:37:16.86', '游戏开发', 0, '游戏开发', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500232691715, '2022-10-26 23:37:16.86', false, '2022-10-26 23:37:16.86', 'iView', 0, 'iView', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500232691716, '2022-10-26 23:37:16.86', false, '2022-10-26 23:37:16.86', 'SaaS', 0, 'SaaS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500236886016, '2022-10-26 23:37:16.861', false, '2022-10-26 23:37:16.861', '七牛云', 0, '七牛云', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500236886017, '2022-10-26 23:37:16.861', false, '2022-10-26 23:37:16.861', 'ThinkPHP', 0, 'ThinkPHP', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500236886018, '2022-10-26 23:37:16.861', false, '2022-10-26 23:37:16.861', 'Ember.js', 0, 'Ember.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500236886019, '2022-10-26 23:37:16.861', false, '2022-10-26 23:37:16.861', 'Bower', 0, 'Bower', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500236886020, '2022-10-26 23:37:16.861', false, '2022-10-26 23:37:16.861', 'Swagger', 0, 'Swagger', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500241080320, '2022-10-26 23:37:16.862', false, '2022-10-26 23:37:16.862', 'WebP', 0, 'WebP', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500241080321, '2022-10-26 23:37:16.862', false, '2022-10-26 23:37:16.862', 'OpenCV', 0, 'OpenCV', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500241080322, '2022-10-26 23:37:16.862', false, '2022-10-26 23:37:16.862', '年终总结', 0, '年终总结', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500241080323, '2022-10-26 23:37:16.862', false, '2022-10-26 23:37:16.862', '自动化运维', 0, '自动化运维', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500241080324, '2022-10-26 23:37:16.862', false, '2022-10-26 23:37:16.862', 'Zepto.js', 0, 'Zepto.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500241080325, '2022-10-26 23:37:16.862', false, '2022-10-26 23:37:16.862', 'LLVM', 0, 'LLVM', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500245274624, '2022-10-26 23:37:16.863', false, '2022-10-26 23:37:16.863', '掘金社区', 0, '掘金社区', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500245274625, '2022-10-26 23:37:16.863', false, '2022-10-26 23:37:16.863', 'Flink', 0, 'Flink', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500245274626, '2022-10-26 23:37:16.863', false, '2022-10-26 23:37:16.863', 'Egg.js', 0, 'Egg.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500245274627, '2022-10-26 23:37:16.863', false, '2022-10-26 23:37:16.863', 'HBase', 0, 'HBase', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500245274628, '2022-10-26 23:37:16.863', false, '2022-10-26 23:37:16.863', 'Android Jetpack', 0, 'Android Jetpack', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500245274629, '2022-10-26 23:37:16.863', false, '2022-10-26 23:37:16.863', 'AB测试', 0, 'AB测试', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500245274630, '2022-10-26 23:37:16.863', false, '2022-10-26 23:37:16.863', 'XSS', 0, 'XSS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500249468928, '2022-10-26 23:37:16.864', false, '2022-10-26 23:37:16.864', 'mpvue', 0, 'mpvue', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500249468929, '2022-10-26 23:37:16.864', false, '2022-10-26 23:37:16.864', '蓝牙', 0, '蓝牙', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500249468930, '2022-10-26 23:37:16.864', false, '2022-10-26 23:37:16.864', 'JUnit', 0, 'JUnit', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500249468931, '2022-10-26 23:37:16.864', false, '2022-10-26 23:37:16.864', 'Dart', 0, 'Dart', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500249468932, '2022-10-26 23:37:16.864', false, '2022-10-26 23:37:16.864', 'PyTorch', 0, 'PyTorch', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500249468933, '2022-10-26 23:37:16.864', false, '2022-10-26 23:37:16.864', 'fir.im', 0, 'fir.im', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500253663232, '2022-10-26 23:37:16.865', false, '2022-10-26 23:37:16.865', 'IPython', 0, 'IPython', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500253663233, '2022-10-26 23:37:16.865', false, '2022-10-26 23:37:16.865', 'RequireJS', 0, 'RequireJS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500253663234, '2022-10-26 23:37:16.865', false, '2022-10-26 23:37:16.865', 'PhpStorm', 0, 'PhpStorm', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500253663235, '2022-10-26 23:37:16.865', false, '2022-10-26 23:37:16.865', 'WeUI', 0, 'WeUI', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500253663236, '2022-10-26 23:37:16.865', false, '2022-10-26 23:37:16.865', 'Chart.js', 0, 'Chart.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500253663237, '2022-10-26 23:37:16.865', false, '2022-10-26 23:37:16.865', 'Rails', 0, 'Rails', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500253663238, '2022-10-26 23:37:16.865', false, '2022-10-26 23:37:16.865', 'Shiro', 0, 'Shiro', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500257857536, '2022-10-26 23:37:16.866', false, '2022-10-26 23:37:16.866', 'ReactiveCocoa', 0, 'ReactiveCocoa', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500257857537, '2022-10-26 23:37:16.866', false, '2022-10-26 23:37:16.866', 'Surge', 0, 'Surge', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500257857538, '2022-10-26 23:37:16.866', false, '2022-10-26 23:37:16.866', 'Nuxt.js', 0, 'Nuxt.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500257857539, '2022-10-26 23:37:16.866', false, '2022-10-26 23:37:16.866', 'SAMSUNG', 0, 'SAMSUNG', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500257857540, '2022-10-26 23:37:16.866', false, '2022-10-26 23:37:16.866', 'WWDC', 0, 'WWDC', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500257857541, '2022-10-26 23:37:16.866', false, '2022-10-26 23:37:16.866', 'Trello', 0, 'Trello', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500262051840, '2022-10-26 23:37:16.867', false, '2022-10-26 23:37:16.867', 'OpenGL', 0, 'OpenGL', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500262051841, '2022-10-26 23:37:16.867', false, '2022-10-26 23:37:16.867', '以太坊', 0, '以太坊', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500262051842, '2022-10-26 23:37:16.867', false, '2022-10-26 23:37:16.867', 'LaTex', 0, 'LaTex', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500262051843, '2022-10-26 23:37:16.867', false, '2022-10-26 23:37:16.867', 'CTO', 0, 'CTO', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500262051844, '2022-10-26 23:37:16.867', false, '2022-10-26 23:37:16.867', 'RxSwift', 0, 'RxSwift', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500262051845, '2022-10-26 23:37:16.867', false, '2022-10-26 23:37:16.867', 'Hibernate', 0, 'Hibernate', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500262051846, '2022-10-26 23:37:16.867', false, '2022-10-26 23:37:16.867', 'Travis CI', 0, 'Travis CI', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500262051847, '2022-10-26 23:37:16.868', false, '2022-10-26 23:37:16.868', '资讯', 0, '资讯', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500266246144, '2022-10-26 23:37:16.868', false, '2022-10-26 23:37:16.868', '图像识别', 0, '图像识别', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500266246145, '2022-10-26 23:37:16.868', false, '2022-10-26 23:37:16.868', 'DaoCloud', 0, 'DaoCloud', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500266246146, '2022-10-26 23:37:16.868', false, '2022-10-26 23:37:16.868', 'PWA', 0, 'PWA', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500266246147, '2022-10-26 23:37:16.868', false, '2022-10-26 23:37:16.868', '强化学习', 0, '强化学习', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500266246148, '2022-10-26 23:37:16.868', false, '2022-10-26 23:37:16.868', 'Slack', 0, 'Slack', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500266246149, '2022-10-26 23:37:16.868', false, '2022-10-26 23:37:16.868', 'VirtualBox', 0, 'VirtualBox', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500270440448, '2022-10-26 23:37:16.869', false, '2022-10-26 23:37:16.869', 'PyQt', 0, 'PyQt', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500270440449, '2022-10-26 23:37:16.869', false, '2022-10-26 23:37:16.869', 'EventBus', 0, 'EventBus', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500270440450, '2022-10-26 23:37:16.869', false, '2022-10-26 23:37:16.869', 'FFmpeg', 0, 'FFmpeg', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500270440451, '2022-10-26 23:37:16.869', false, '2022-10-26 23:37:16.869', 'Hexo', 0, 'Hexo', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500270440452, '2022-10-26 23:37:16.869', false, '2022-10-26 23:37:16.869', 'Solr', 0, 'Solr', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500270440453, '2022-10-26 23:37:16.869', false, '2022-10-26 23:37:16.869', 'Apache Hive', 0, 'Apache Hive', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500270440454, '2022-10-26 23:37:16.869', false, '2022-10-26 23:37:16.869', 'Arduino', 0, 'Arduino', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500274634752, '2022-10-26 23:37:16.87', false, '2022-10-26 23:37:16.87', 'iTerm', 0, 'iTerm', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500274634753, '2022-10-26 23:37:16.87', false, '2022-10-26 23:37:16.87', 'Y Combinator', 0, 'Y Combinator', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500274634754, '2022-10-26 23:37:16.87', false, '2022-10-26 23:37:16.87', '监控', 0, '监控', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500274634755, '2022-10-26 23:37:16.87', false, '2022-10-26 23:37:16.87', '数学', 0, '数学', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500274634756, '2022-10-26 23:37:16.87', false, '2022-10-26 23:37:16.87', 'Apache ActiveMQ', 0, 'Apache ActiveMQ', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500274634757, '2022-10-26 23:37:16.87', false, '2022-10-26 23:37:16.87', '编译原理', 0, '编译原理', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500278829056, '2022-10-26 23:37:16.871', false, '2022-10-26 23:37:16.871', 'Amazon', 0, 'Amazon', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500278829057, '2022-10-26 23:37:16.871', false, '2022-10-26 23:37:16.871', 'Glide', 0, 'Glide', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500278829058, '2022-10-26 23:37:16.871', false, '2022-10-26 23:37:16.871', '自动驾驶', 0, '自动驾驶', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500278829059, '2022-10-26 23:37:16.871', false, '2022-10-26 23:37:16.871', 'MariaDB', 0, 'MariaDB', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500278829060, '2022-10-26 23:37:16.871', false, '2022-10-26 23:37:16.871', 'Memcached', 0, 'Memcached', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500278829061, '2022-10-26 23:37:16.871', false, '2022-10-26 23:37:16.871', 'Core ML', 0, 'Core ML', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500278829062, '2022-10-26 23:37:16.871', false, '2022-10-26 23:37:16.871', '图形学', 0, '图形学', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500283023360, '2022-10-26 23:37:16.872', false, '2022-10-26 23:37:16.872', 'HDFS', 0, 'HDFS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500283023361, '2022-10-26 23:37:16.872', false, '2022-10-26 23:37:16.872', 'NumPy', 0, 'NumPy', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500283023362, '2022-10-26 23:37:16.872', false, '2022-10-26 23:37:16.872', 'HarmonyOS', 0, 'HarmonyOS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500283023363, '2022-10-26 23:37:16.872', false, '2022-10-26 23:37:16.872', 'MATLAB', 0, 'MATLAB', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500283023364, '2022-10-26 23:37:16.872', false, '2022-10-26 23:37:16.872', 'ARKit', 0, 'ARKit', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500283023365, '2022-10-26 23:37:16.872', false, '2022-10-26 23:37:16.872', '团队管理', 0, '团队管理', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500283023366, '2022-10-26 23:37:16.873', false, '2022-10-26 23:37:16.873', 'WordPress', 0, 'WordPress', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500287217664, '2022-10-26 23:37:16.873', false, '2022-10-26 23:37:16.873', '莆田', 0, '莆田', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500287217665, '2022-10-26 23:37:16.873', false, '2022-10-26 23:37:16.873', 'Dagger', 0, 'Dagger', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500287217666, '2022-10-26 23:37:16.873', false, '2022-10-26 23:37:16.873', 'JMeter', 0, 'JMeter', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500287217667, '2022-10-26 23:37:16.873', false, '2022-10-26 23:37:16.873', 'Vonic', 0, 'Vonic', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500287217668, '2022-10-26 23:37:16.873', false, '2022-10-26 23:37:16.873', '360', 0, '360', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500287217669, '2022-10-26 23:37:16.873', false, '2022-10-26 23:37:16.873', 'gRPC', 0, 'gRPC', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500291411968, '2022-10-26 23:37:16.874', false, '2022-10-26 23:37:16.874', 'Gson', 0, 'Gson', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500291411969, '2022-10-26 23:37:16.874', false, '2022-10-26 23:37:16.874', 'Workflow', 0, 'Workflow', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500291411970, '2022-10-26 23:37:16.874', false, '2022-10-26 23:37:16.874', 'Fiddler', 0, 'Fiddler', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500291411971, '2022-10-26 23:37:16.874', false, '2022-10-26 23:37:16.874', 'Polymer', 0, 'Polymer', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500291411972, '2022-10-26 23:37:16.874', false, '2022-10-26 23:37:16.874', 'Scrapy', 0, 'Scrapy', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500291411973, '2022-10-26 23:37:16.874', false, '2022-10-26 23:37:16.874', '数字货币', 0, '数字货币', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500291411974, '2022-10-26 23:37:16.874', false, '2022-10-26 23:37:16.874', '播客', 0, '播客', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500295606272, '2022-10-26 23:37:16.875', false, '2022-10-26 23:37:16.875', '王者荣耀', 0, '王者荣耀', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500295606273, '2022-10-26 23:37:16.875', false, '2022-10-26 23:37:16.875', 'Serverless', 0, 'Serverless', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500295606274, '2022-10-26 23:37:16.875', false, '2022-10-26 23:37:16.875', 'RESTful', 0, 'RESTful', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500295606275, '2022-10-26 23:37:16.875', false, '2022-10-26 23:37:16.875', 'CircleCI', 0, 'CircleCI', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500295606276, '2022-10-26 23:37:16.875', false, '2022-10-26 23:37:16.875', 'Curl', 0, 'Curl', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500295606277, '2022-10-26 23:37:16.875', false, '2022-10-26 23:37:16.875', 'Cocos2d-x', 0, 'Cocos2d-x', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500299800576, '2022-10-26 23:37:16.876', false, '2022-10-26 23:37:16.876', '5G', 0, '5G', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500299800577, '2022-10-26 23:37:16.876', false, '2022-10-26 23:37:16.876', 'OpenStack', 0, 'OpenStack', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500299800578, '2022-10-26 23:37:16.876', false, '2022-10-26 23:37:16.876', 'Cython', 0, 'Cython', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500299800579, '2022-10-26 23:37:16.876', false, '2022-10-26 23:37:16.876', 'Axure', 0, 'Axure', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500299800580, '2022-10-26 23:37:16.876', false, '2022-10-26 23:37:16.876', 'Pixate', 0, 'Pixate', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500299800581, '2022-10-26 23:37:16.876', false, '2022-10-26 23:37:16.876', 'Fastjson', 0, 'Fastjson', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500303994880, '2022-10-26 23:37:16.877', false, '2022-10-26 23:37:16.877', 'pandas', 0, 'pandas', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500303994881, '2022-10-26 23:37:16.877', false, '2022-10-26 23:37:16.877', 'PhantomJS', 0, 'PhantomJS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500303994882, '2022-10-26 23:37:16.877', false, '2022-10-26 23:37:16.877', 'SwiftUI', 0, 'SwiftUI', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500303994883, '2022-10-26 23:37:16.877', false, '2022-10-26 23:37:16.877', '计算机图形学', 0, '计算机图形学', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500303994884, '2022-10-26 23:37:16.877', false, '2022-10-26 23:37:16.877', 'HTTP3', 0, 'HTTP3', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500303994885, '2022-10-26 23:37:16.877', false, '2022-10-26 23:37:16.877', 'Charles', 0, 'Charles', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500303994886, '2022-10-26 23:37:16.877', false, '2022-10-26 23:37:16.877', 'HotFix', 0, 'HotFix', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500303994887, '2022-10-26 23:37:16.877', false, '2022-10-26 23:37:16.877', 'Apache Log4j', 0, 'Apache Log4j', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500308189184, '2022-10-26 23:37:16.878', false, '2022-10-26 23:37:16.878', 'Elm', 0, 'Elm', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500308189185, '2022-10-26 23:37:16.878', false, '2022-10-26 23:37:16.878', 'Picasso', 0, 'Picasso', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500308189186, '2022-10-26 23:37:16.878', false, '2022-10-26 23:37:16.878', 'Emacs', 0, 'Emacs', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500308189187, '2022-10-26 23:37:16.878', false, '2022-10-26 23:37:16.878', 'Taro', 0, 'Taro', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500308189188, '2022-10-26 23:37:16.878', false, '2022-10-26 23:37:16.878', 'CI/CD', 0, 'CI/CD', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500308189189, '2022-10-26 23:37:16.878', false, '2022-10-26 23:37:16.878', 'Google I/O', 0, 'Google I/O', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500308189190, '2022-10-26 23:37:16.878', false, '2022-10-26 23:37:16.878', 'Unicode', 0, 'Unicode', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500312383488, '2022-10-26 23:37:16.879', false, '2022-10-26 23:37:16.879', 'Yii', 0, 'Yii', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500312383489, '2022-10-26 23:37:16.879', false, '2022-10-26 23:37:16.879', 'Qt', 0, 'Qt', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500312383490, '2022-10-26 23:37:16.879', false, '2022-10-26 23:37:16.879', 'Lucene', 0, 'Lucene', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500312383491, '2022-10-26 23:37:16.879', false, '2022-10-26 23:37:16.879', '领域驱动设计', 0, '领域驱动设计', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500312383492, '2022-10-26 23:37:16.879', false, '2022-10-26 23:37:16.879', 'AWS', 0, 'AWS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500312383493, '2022-10-26 23:37:16.879', false, '2022-10-26 23:37:16.879', 'Kibana', 0, 'Kibana', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500312383494, '2022-10-26 23:37:16.879', false, '2022-10-26 23:37:16.879', 'Apache Storm', 0, 'Apache Storm', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500312383495, '2022-10-26 23:37:16.879', false, '2022-10-26 23:37:16.879', 'Selenium', 0, 'Selenium', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500316577792, '2022-10-26 23:37:16.88', false, '2022-10-26 23:37:16.88', 'PM2', 0, 'PM2', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500316577793, '2022-10-26 23:37:16.88', false, '2022-10-26 23:37:16.88', 'protobuf', 0, 'protobuf', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500316577794, '2022-10-26 23:37:16.88', false, '2022-10-26 23:37:16.88', 'Cordova', 0, 'Cordova', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500316577795, '2022-10-26 23:37:16.88', false, '2022-10-26 23:37:16.88', 'Realm', 0, 'Realm', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500316577796, '2022-10-26 23:37:16.88', false, '2022-10-26 23:37:16.88', 'bpython', 0, 'bpython', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500316577797, '2022-10-26 23:37:16.88', false, '2022-10-26 23:37:16.88', 'Tornado', 0, 'Tornado', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500316577798, '2022-10-26 23:37:16.88', false, '2022-10-26 23:37:16.88', '智能合约', 0, '智能合约', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500316577799, '2022-10-26 23:37:16.88', false, '2022-10-26 23:37:16.88', '快应用', 0, '快应用', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500320772096, '2022-10-26 23:37:16.881', false, '2022-10-26 23:37:16.881', 'R', 0, 'R', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500320772097, '2022-10-26 23:37:16.881', false, '2022-10-26 23:37:16.881', 'Groovy', 0, 'Groovy', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500320772098, '2022-10-26 23:37:16.881', false, '2022-10-26 23:37:16.881', 'Vant', 0, 'Vant', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500320772099, '2022-10-26 23:37:16.881', false, '2022-10-26 23:37:16.881', 'MobX', 0, 'MobX', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500320772100, '2022-10-26 23:37:16.881', false, '2022-10-26 23:37:16.881', 'etcd', 0, 'etcd', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500320772101, '2022-10-26 23:37:16.881', false, '2022-10-26 23:37:16.881', '智能小程序', 0, '智能小程序', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500320772102, '2022-10-26 23:37:16.881', false, '2022-10-26 23:37:16.881', 'Linkedin', 0, 'Linkedin', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500320772103, '2022-10-26 23:37:16.881', false, '2022-10-26 23:37:16.881', 'Swoole', 0, 'Swoole', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500324966400, '2022-10-26 23:37:16.882', false, '2022-10-26 23:37:16.882', '华为', 0, '华为', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500324966401, '2022-10-26 23:37:16.882', false, '2022-10-26 23:37:16.882', 'RSS', 0, 'RSS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500324966402, '2022-10-26 23:37:16.882', false, '2022-10-26 23:37:16.882', 'Logstash', 0, 'Logstash', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500324966403, '2022-10-26 23:37:16.882', false, '2022-10-26 23:37:16.882', 'Touch bar', 0, 'Touch bar', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500324966404, '2022-10-26 23:37:16.882', false, '2022-10-26 23:37:16.882', 'Firebase', 0, 'Firebase', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500324966405, '2022-10-26 23:37:16.882', false, '2022-10-26 23:37:16.882', 'web.py', 0, 'web.py', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500324966406, '2022-10-26 23:37:16.882', false, '2022-10-26 23:37:16.882', 'DBA', 0, 'DBA', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500324966407, '2022-10-26 23:37:16.882', false, '2022-10-26 23:37:16.882', 'OpenAI', 0, 'OpenAI', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500329160704, '2022-10-26 23:37:16.883', false, '2022-10-26 23:37:16.883', 'KVM', 0, 'KVM', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500329160705, '2022-10-26 23:37:16.883', false, '2022-10-26 23:37:16.883', '边缘计算', 0, '边缘计算', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500329160706, '2022-10-26 23:37:16.883', false, '2022-10-26 23:37:16.883', 'Grafana', 0, 'Grafana', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500329160707, '2022-10-26 23:37:16.883', false, '2022-10-26 23:37:16.883', 'AndroidAnnotations', 0, 'AndroidAnnotations', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500329160708, '2022-10-26 23:37:16.883', false, '2022-10-26 23:37:16.883', 'Debian', 0, 'Debian', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500329160709, '2022-10-26 23:37:16.883', false, '2022-10-26 23:37:16.883', 'Highlight.js', 0, 'Highlight.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500329160710, '2022-10-26 23:37:16.883', false, '2022-10-26 23:37:16.883', 'rollup.js', 0, 'rollup.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500329160711, '2022-10-26 23:37:16.883', false, '2022-10-26 23:37:16.883', 'VuePress', 0, 'VuePress', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500333355008, '2022-10-26 23:37:16.884', false, '2022-10-26 23:37:16.884', '量子计算', 0, '量子计算', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500333355009, '2022-10-26 23:37:16.884', false, '2022-10-26 23:37:16.884', 'Airbnb', 0, 'Airbnb', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500333355010, '2022-10-26 23:37:16.884', false, '2022-10-26 23:37:16.884', 'TiDB', 0, 'TiDB', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500333355011, '2022-10-26 23:37:16.884', false, '2022-10-26 23:37:16.884', 'PyPy', 0, 'PyPy', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500333355012, '2022-10-26 23:37:16.884', false, '2022-10-26 23:37:16.884', 'NativeScript', 0, 'NativeScript', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500333355013, '2022-10-26 23:37:16.884', false, '2022-10-26 23:37:16.884', 'greenDAO', 0, 'greenDAO', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500333355014, '2022-10-26 23:37:16.884', false, '2022-10-26 23:37:16.884', 'Stylus', 0, 'Stylus', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500333355015, '2022-10-26 23:37:16.884', false, '2022-10-26 23:37:16.884', 'Kaggle', 0, 'Kaggle', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500337549312, '2022-10-26 23:37:16.885', false, '2022-10-26 23:37:16.885', 'Apache Flume', 0, 'Apache Flume', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500337549313, '2022-10-26 23:37:16.885', false, '2022-10-26 23:37:16.885', 'FreeMarker', 0, 'FreeMarker', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500337549314, '2022-10-26 23:37:16.885', false, '2022-10-26 23:37:16.885', 'ZeroMQ', 0, 'ZeroMQ', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500337549315, '2022-10-26 23:37:16.885', false, '2022-10-26 23:37:16.885', 'Elixir', 0, 'Elixir', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500337549316, '2022-10-26 23:37:16.885', false, '2022-10-26 23:37:16.885', 'scikit-learn', 0, 'scikit-learn', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500337549317, '2022-10-26 23:37:16.885', false, '2022-10-26 23:37:16.885', 'Apache Thrift', 0, 'Apache Thrift', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500341743616, '2022-10-26 23:37:16.886', false, '2022-10-26 23:37:16.886', 'Keras', 0, 'Keras', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500341743617, '2022-10-26 23:37:16.886', false, '2022-10-26 23:37:16.886', 'Ansible', 0, 'Ansible', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500341743618, '2022-10-26 23:37:16.886', false, '2022-10-26 23:37:16.886', 'Jest', 0, 'Jest', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500341743619, '2022-10-26 23:37:16.886', false, '2022-10-26 23:37:16.886', 'Volley', 0, 'Volley', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500341743620, '2022-10-26 23:37:16.886', false, '2022-10-26 23:37:16.886', 'Caffe', 0, 'Caffe', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500341743621, '2022-10-26 23:37:16.886', false, '2022-10-26 23:37:16.886', 'SciPy', 0, 'SciPy', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500341743622, '2022-10-26 23:37:16.886', false, '2022-10-26 23:37:16.886', 'Composer', 0, 'Composer', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500341743623, '2022-10-26 23:37:16.886', false, '2022-10-26 23:37:16.886', 'Immutable.js', 0, 'Immutable.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500345937920, '2022-10-26 23:37:16.887', false, '2022-10-26 23:37:16.887', 'Akka', 0, 'Akka', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500345937921, '2022-10-26 23:37:16.887', false, '2022-10-26 23:37:16.887', 'ButterKnife', 0, 'ButterKnife', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500345937922, '2022-10-26 23:37:16.887', false, '2022-10-26 23:37:16.887', 'ZXing', 0, 'ZXing', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500345937923, '2022-10-26 23:37:16.887', false, '2022-10-26 23:37:16.887', 'Project Lombok', 0, 'Project Lombok', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500345937924, '2022-10-26 23:37:16.887', false, '2022-10-26 23:37:16.887', 'Apache Kylin', 0, 'Apache Kylin', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500345937925, '2022-10-26 23:37:16.887', false, '2022-10-26 23:37:16.887', 'Mocha', 0, 'Mocha', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500345937926, '2022-10-26 23:37:16.887', false, '2022-10-26 23:37:16.887', 'C语言', 0, 'C语言', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500345937927, '2022-10-26 23:37:16.887', false, '2022-10-26 23:37:16.887', 'Unreal Engine', 0, 'Unreal Engine', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500350132224, '2022-10-26 23:37:16.888', false, '2022-10-26 23:37:16.888', 'Erlang', 0, 'Erlang', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500350132225, '2022-10-26 23:37:16.888', false, '2022-10-26 23:37:16.888', 'JCenter', 0, 'JCenter', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500350132226, '2022-10-26 23:37:16.888', false, '2022-10-26 23:37:16.888', 'Karma', 0, 'Karma', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500350132227, '2022-10-26 23:37:16.888', false, '2022-10-26 23:37:16.888', 'CocoaPods', 0, 'CocoaPods', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500350132228, '2022-10-26 23:37:16.888', false, '2022-10-26 23:37:16.888', 'NestJS', 0, 'NestJS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500350132229, '2022-10-26 23:37:16.888', false, '2022-10-26 23:37:16.888', 'AFNetworking', 0, 'AFNetworking', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500350132230, '2022-10-26 23:37:16.888', false, '2022-10-26 23:37:16.888', 'VisualVM', 0, 'VisualVM', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500350132231, '2022-10-26 23:37:16.888', false, '2022-10-26 23:37:16.888', 'RPC', 0, 'RPC', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500354326528, '2022-10-26 23:37:16.889', false, '2022-10-26 23:37:16.889', 'Perl', 0, 'Perl', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500354326529, '2022-10-26 23:37:16.889', false, '2022-10-26 23:37:16.889', 'Vagrant', 0, 'Vagrant', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500354326530, '2022-10-26 23:37:16.889', false, '2022-10-26 23:37:16.889', 'Apache Cassandra', 0, 'Apache Cassandra', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500354326531, '2022-10-26 23:37:16.889', false, '2022-10-26 23:37:16.889', 'PhoneGap', 0, 'PhoneGap', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500354326532, '2022-10-26 23:37:16.889', false, '2022-10-26 23:37:16.889', 'Apache Mesos', 0, 'Apache Mesos', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500354326533, '2022-10-26 23:37:16.889', false, '2022-10-26 23:37:16.889', 'JSPatch', 0, 'JSPatch', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500354326534, '2022-10-26 23:37:16.889', false, '2022-10-26 23:37:16.889', 'Tinker', 0, 'Tinker', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500354326535, '2022-10-26 23:37:16.889', false, '2022-10-26 23:37:16.889', 'WebVR', 0, 'WebVR', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500354326536, '2022-10-26 23:37:16.889', false, '2022-10-26 23:37:16.889', 'Yeoman', 0, 'Yeoman', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500358520832, '2022-10-26 23:37:16.89', false, '2022-10-26 23:37:16.89', 'LeakCanary', 0, 'LeakCanary', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500358520833, '2022-10-26 23:37:16.89', false, '2022-10-26 23:37:16.89', 'WebView', 0, 'WebView', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500358520834, '2022-10-26 23:37:16.89', false, '2022-10-26 23:37:16.89', 'deno', 0, 'deno', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500358520835, '2022-10-26 23:37:16.89', false, '2022-10-26 23:37:16.89', 'Swarm', 0, 'Swarm', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500358520836, '2022-10-26 23:37:16.89', false, '2022-10-26 23:37:16.89', 'WebStorm', 0, 'WebStorm', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500358520837, '2022-10-26 23:37:16.89', false, '2022-10-26 23:37:16.89', 'Lisp', 0, 'Lisp', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500358520838, '2022-10-26 23:37:16.89', false, '2022-10-26 23:37:16.89', 'SDWebImage', 0, 'SDWebImage', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500358520839, '2022-10-26 23:37:16.89', false, '2022-10-26 23:37:16.89', '掘金圆桌', 0, '掘金圆桌', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500362715136, '2022-10-26 23:37:16.891', false, '2022-10-26 23:37:16.891', '有赞', 0, '有赞', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500362715137, '2022-10-26 23:37:16.891', false, '2022-10-26 23:37:16.891', '无人机', 0, '无人机', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500362715138, '2022-10-26 23:37:16.891', false, '2022-10-26 23:37:16.891', 'Daydream', 0, 'Daydream', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500362715139, '2022-10-26 23:37:16.891', false, '2022-10-26 23:37:16.891', 'Haskell', 0, 'Haskell', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500362715140, '2022-10-26 23:37:16.891', false, '2022-10-26 23:37:16.891', 'Preact', 0, 'Preact', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500362715141, '2022-10-26 23:37:16.891', false, '2022-10-26 23:37:16.891', 'LevelDB', 0, 'LevelDB', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500362715142, '2022-10-26 23:37:16.891', false, '2022-10-26 23:37:16.891', 'GPU', 0, 'GPU', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500362715143, '2022-10-26 23:37:16.891', false, '2022-10-26 23:37:16.891', 'pyspider', 0, 'pyspider', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500362715144, '2022-10-26 23:37:16.891', false, '2022-10-26 23:37:16.891', '客户端', 0, '客户端', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500366909440, '2022-10-26 23:37:16.892', false, '2022-10-26 23:37:16.892', 'DevOps', 0, 'DevOps', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500366909441, '2022-10-26 23:37:16.892', false, '2022-10-26 23:37:16.892', 'Fresco', 0, 'Fresco', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500366909442, '2022-10-26 23:37:16.892', false, '2022-10-26 23:37:16.892', 'Apache Ant', 0, 'Apache Ant', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500366909443, '2022-10-26 23:37:16.892', false, '2022-10-26 23:37:16.892', 'Service Mesh', 0, 'Service Mesh', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500371103744, '2022-10-26 23:37:16.893', false, '2022-10-26 23:37:16.893', 'Fedora', 0, 'Fedora', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500371103745, '2022-10-26 23:37:16.893', false, '2022-10-26 23:37:16.893', 'Gevent', 0, 'Gevent', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500371103746, '2022-10-26 23:37:16.893', false, '2022-10-26 23:37:16.893', 'SonarQube', 0, 'SonarQube', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500371103747, '2022-10-26 23:37:16.893', false, '2022-10-26 23:37:16.893', 'SymPy', 0, 'SymPy', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500371103748, '2022-10-26 23:37:16.893', false, '2022-10-26 23:37:16.893', 'Bluebird.js', 0, 'Bluebird.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500371103749, '2022-10-26 23:37:16.893', false, '2022-10-26 23:37:16.893', 'Raft', 0, 'Raft', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500371103750, '2022-10-26 23:37:16.893', false, '2022-10-26 23:37:16.893', 'Browserify', 0, 'Browserify', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500371103751, '2022-10-26 23:37:16.893', false, '2022-10-26 23:37:16.893', 'Gunicorn', 0, 'Gunicorn', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500375298048, '2022-10-26 23:37:16.894', false, '2022-10-26 23:37:16.894', 'Clojure', 0, 'Clojure', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500375298049, '2022-10-26 23:37:16.894', false, '2022-10-26 23:37:16.894', 'uWSGI', 0, 'uWSGI', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500375298050, '2022-10-26 23:37:16.894', false, '2022-10-26 23:37:16.894', 'Jieba', 0, 'Jieba', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500375298051, '2022-10-26 23:37:16.894', false, '2022-10-26 23:37:16.894', 'Snapchat', 0, 'Snapchat', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500375298052, '2022-10-26 23:37:16.894', false, '2022-10-26 23:37:16.894', 'MPAndroidChart', 0, 'MPAndroidChart', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500375298053, '2022-10-26 23:37:16.894', false, '2022-10-26 23:37:16.894', 'Xposed', 0, 'Xposed', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500375298054, '2022-10-26 23:37:16.894', false, '2022-10-26 23:37:16.894', 'E2E', 0, 'E2E', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500375298055, '2022-10-26 23:37:16.894', false, '2022-10-26 23:37:16.894', 'AMP', 0, 'AMP', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500375298056, '2022-10-26 23:37:16.894', false, '2022-10-26 23:37:16.894', 'Omi', 0, 'Omi', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500379492352, '2022-10-26 23:37:16.895', false, '2022-10-26 23:37:16.895', 'Mockito', 0, 'Mockito', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500379492353, '2022-10-26 23:37:16.895', false, '2022-10-26 23:37:16.895', 'NSQ', 0, 'NSQ', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500379492354, '2022-10-26 23:37:16.895', false, '2022-10-26 23:37:16.895', 'Twisted', 0, 'Twisted', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500379492355, '2022-10-26 23:37:16.895', false, '2022-10-26 23:37:16.895', 'Brython', 0, 'Brython', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500379492356, '2022-10-26 23:37:16.895', false, '2022-10-26 23:37:16.895', 'Bintray', 0, 'Bintray', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500379492357, '2022-10-26 23:37:16.895', false, '2022-10-26 23:37:16.895', 'Istio', 0, 'Istio', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500379492358, '2022-10-26 23:37:16.895', false, '2022-10-26 23:37:16.895', 'Fluentd', 0, 'Fluentd', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500379492359, '2022-10-26 23:37:16.895', false, '2022-10-26 23:37:16.895', '芯片', 0, '芯片', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500379492360, '2022-10-26 23:37:16.895', false, '2022-10-26 23:37:16.895', 'Symfony', 0, 'Symfony', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500383686656, '2022-10-26 23:37:16.896', false, '2022-10-26 23:37:16.896', '低代码', 0, '低代码', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500383686657, '2022-10-26 23:37:16.896', false, '2022-10-26 23:37:16.896', 'Jekyll', 0, 'Jekyll', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500383686658, '2022-10-26 23:37:16.896', false, '2022-10-26 23:37:16.896', 'Puppeteer', 0, 'Puppeteer', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500383686659, '2022-10-26 23:37:16.896', false, '2022-10-26 23:37:16.896', 'Agera ', 0, 'Agera ', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500383686660, '2022-10-26 23:37:16.896', false, '2022-10-26 23:37:16.896', 'CasperJS', 0, 'CasperJS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500383686661, '2022-10-26 23:37:16.896', false, '2022-10-26 23:37:16.896', '计算机组成原理', 0, '计算机组成原理', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500383686662, '2022-10-26 23:37:16.896', false, '2022-10-26 23:37:16.896', 'QUnit', 0, 'QUnit', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500383686663, '2022-10-26 23:37:16.896', false, '2022-10-26 23:37:16.896', 'reCAPTCHA', 0, 'reCAPTCHA', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500383686664, '2022-10-26 23:37:16.896', false, '2022-10-26 23:37:16.896', 'Unix', 0, 'Unix', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500387880960, '2022-10-26 23:37:16.897', false, '2022-10-26 23:37:16.897', 'ORMLite', 0, 'ORMLite', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500387880961, '2022-10-26 23:37:16.897', false, '2022-10-26 23:37:16.897', 'Android Things', 0, 'Android Things', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500387880962, '2022-10-26 23:37:16.897', false, '2022-10-26 23:37:16.897', 'Jasmine', 0, 'Jasmine', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500387880963, '2022-10-26 23:37:16.897', false, '2022-10-26 23:37:16.897', 'FMDB', 0, 'FMDB', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500387880964, '2022-10-26 23:37:16.897', false, '2022-10-26 23:37:16.897', 'Natural Language Toolkit', 0, 'Natural Language Toolkit', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500387880965, '2022-10-26 23:37:16.897', false, '2022-10-26 23:37:16.897', 'IndexedDB', 0, 'IndexedDB', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500387880966, '2022-10-26 23:37:16.897', false, '2022-10-26 23:37:16.897', 'ThinkJS', 0, 'ThinkJS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500387880967, '2022-10-26 23:37:16.897', false, '2022-10-26 23:37:16.897', 'DeepStack', 0, 'DeepStack', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500387880968, '2022-10-26 23:37:16.897', false, '2022-10-26 23:37:16.897', 'Alamofire', 0, 'Alamofire', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500392075264, '2022-10-26 23:37:16.898', false, '2022-10-26 23:37:16.898', 'MJRefresh', 0, 'MJRefresh', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500392075265, '2022-10-26 23:37:16.898', false, '2022-10-26 23:37:16.898', 'SaltStack', 0, 'SaltStack', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500392075266, '2022-10-26 23:37:16.898', false, '2022-10-26 23:37:16.898', 'ReactOS', 0, 'ReactOS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500392075267, '2022-10-26 23:37:16.898', false, '2022-10-26 23:37:16.898', 'AsyncDisplayKit', 0, 'AsyncDisplayKit', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500392075268, '2022-10-26 23:37:16.898', false, '2022-10-26 23:37:16.898', 'Traefik', 0, 'Traefik', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500392075269, '2022-10-26 23:37:16.898', false, '2022-10-26 23:37:16.898', 'marked', 0, 'marked', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500392075270, '2022-10-26 23:37:16.898', false, '2022-10-26 23:37:16.898', 'Fuchsia', 0, 'Fuchsia', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500392075271, '2022-10-26 23:37:16.898', false, '2022-10-26 23:37:16.898', 'fastlane', 0, 'fastlane', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500392075272, '2022-10-26 23:37:16.898', false, '2022-10-26 23:37:16.898', 'Mongoose', 0, 'Mongoose', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500396269568, '2022-10-26 23:37:16.899', false, '2022-10-26 23:37:16.899', 'Monolog', 0, 'Monolog', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500396269569, '2022-10-26 23:37:16.899', false, '2022-10-26 23:37:16.899', 'SnapKit', 0, 'SnapKit', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500396269570, '2022-10-26 23:37:16.899', false, '2022-10-26 23:37:16.899', 'IGListKit', 0, 'IGListKit', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500396269571, '2022-10-26 23:37:16.899', false, '2022-10-26 23:37:16.899', 'Nvidia', 0, 'Nvidia', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500396269572, '2022-10-26 23:37:16.899', false, '2022-10-26 23:37:16.899', 'Jupyter', 0, 'Jupyter', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500396269573, '2022-10-26 23:37:16.899', false, '2022-10-26 23:37:16.899', 'Perfect', 0, 'Perfect', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500396269574, '2022-10-26 23:37:16.899', false, '2022-10-26 23:37:16.899', 'Chrome OS', 0, 'Chrome OS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500396269575, '2022-10-26 23:37:16.899', false, '2022-10-26 23:37:16.899', 'Bulma', 0, 'Bulma', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500396269576, '2022-10-26 23:37:16.899', false, '2022-10-26 23:37:16.899', 'GIS', 0, 'GIS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500396269577, '2022-10-26 23:37:16.9', false, '2022-10-26 23:37:16.9', 'Anko', 0, 'Anko', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500400463872, '2022-10-26 23:37:16.9', false, '2022-10-26 23:37:16.9', 'Caddy', 0, 'Caddy', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500400463873, '2022-10-26 23:37:16.9', false, '2022-10-26 23:37:16.9', 'Knockout', 0, 'Knockout', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500400463874, '2022-10-26 23:37:16.9', false, '2022-10-26 23:37:16.9', 'AChartEngine', 0, 'AChartEngine', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500400463875, '2022-10-26 23:37:16.9', false, '2022-10-26 23:37:16.9', 'Julia', 0, 'Julia', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500400463876, '2022-10-26 23:37:16.9', false, '2022-10-26 23:37:16.9', 'StatsD', 0, 'StatsD', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500400463877, '2022-10-26 23:37:16.9', false, '2022-10-26 23:37:16.9', 'Parcel', 0, 'Parcel', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500400463878, '2022-10-26 23:37:16.9', false, '2022-10-26 23:37:16.9', 'Theano', 0, 'Theano', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500400463879, '2022-10-26 23:37:16.9', false, '2022-10-26 23:37:16.9', 'Vapor', 0, 'Vapor', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500404658176, '2022-10-26 23:37:16.901', false, '2022-10-26 23:37:16.901', 'Polycode', 0, 'Polycode', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500404658177, '2022-10-26 23:37:16.901', false, '2022-10-26 23:37:16.901', 'libGDX', 0, 'libGDX', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500404658178, '2022-10-26 23:37:16.901', false, '2022-10-26 23:37:16.901', 'Feathers', 0, 'Feathers', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500404658179, '2022-10-26 23:37:16.901', false, '2022-10-26 23:37:16.901', 'ARCore', 0, 'ARCore', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500404658180, '2022-10-26 23:37:16.901', false, '2022-10-26 23:37:16.901', 'mlpack', 0, 'mlpack', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500404658181, '2022-10-26 23:37:16.901', false, '2022-10-26 23:37:16.901', 'DroidMVP', 0, 'DroidMVP', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500404658182, '2022-10-26 23:37:16.901', false, '2022-10-26 23:37:16.901', 'Espresso', 0, 'Espresso', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500404658183, '2022-10-26 23:37:16.901', false, '2022-10-26 23:37:16.901', 'AIOps', 0, 'AIOps', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500404658184, '2022-10-26 23:37:16.901', false, '2022-10-26 23:37:16.901', 'Phabricator', 0, 'Phabricator', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500404658185, '2022-10-26 23:37:16.901', false, '2022-10-26 23:37:16.901', 'Gin', 0, 'Gin', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500408852480, '2022-10-26 23:37:16.902', false, '2022-10-26 23:37:16.902', 'Classyshark', 0, 'Classyshark', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500408852481, '2022-10-26 23:37:16.902', false, '2022-10-26 23:37:16.902', 'Carthage', 0, 'Carthage', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500408852482, '2022-10-26 23:37:16.902', false, '2022-10-26 23:37:16.902', 'AVA', 0, 'AVA', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500408852483, '2022-10-26 23:37:16.902', false, '2022-10-26 23:37:16.902', 'JitPack', 0, 'JitPack', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500408852484, '2022-10-26 23:37:16.902', false, '2022-10-26 23:37:16.902', 'Vuforia', 0, 'Vuforia', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500408852485, '2022-10-26 23:37:16.902', false, '2022-10-26 23:37:16.902', 'RoboSpice', 0, 'RoboSpice', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500408852486, '2022-10-26 23:37:16.902', false, '2022-10-26 23:37:16.902', 'Stetho', 0, 'Stetho', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500408852487, '2022-10-26 23:37:16.902', false, '2022-10-26 23:37:16.902', 'FlatBuffers', 0, 'FlatBuffers', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500408852488, '2022-10-26 23:37:16.903', false, '2022-10-26 23:37:16.903', 'Solidity', 0, 'Solidity', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500413046784, '2022-10-26 23:37:16.903', false, '2022-10-26 23:37:16.903', '推广', 0, '推广', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500413046785, '2022-10-26 23:37:16.903', false, '2022-10-26 23:37:16.903', 'MessagePack', 0, 'MessagePack', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500413046786, '2022-10-26 23:37:16.903', false, '2022-10-26 23:37:16.903', 'Buck', 0, 'Buck', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500413046787, '2022-10-26 23:37:16.903', false, '2022-10-26 23:37:16.903', 'Marko', 0, 'Marko', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500413046788, '2022-10-26 23:37:16.903', false, '2022-10-26 23:37:16.903', 'Libratus', 0, 'Libratus', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500413046789, '2022-10-26 23:37:16.903', false, '2022-10-26 23:37:16.903', 'EazeGraph', 0, 'EazeGraph', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500413046790, '2022-10-26 23:37:16.903', false, '2022-10-26 23:37:16.903', 'DbInspector', 0, 'DbInspector', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500413046791, '2022-10-26 23:37:16.903', false, '2022-10-26 23:37:16.903', 'RoboGuic', 0, 'RoboGuic', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500413046792, '2022-10-26 23:37:16.904', false, '2022-10-26 23:37:16.904', 'Fossil', 0, 'Fossil', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500417241088, '2022-10-26 23:37:16.904', false, '2022-10-26 23:37:16.904', 'Microsoft Edge', 0, 'Microsoft Edge', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500417241089, '2022-10-26 23:37:16.904', false, '2022-10-26 23:37:16.904', 'HTM', 0, 'HTM', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500417241090, '2022-10-26 23:37:16.904', false, '2022-10-26 23:37:16.904', 'PyCon', 0, 'PyCon', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500417241091, '2022-10-26 23:37:16.904', false, '2022-10-26 23:37:16.904', 'GAN', 0, 'GAN', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500417241092, '2022-10-26 23:37:16.904', false, '2022-10-26 23:37:16.904', 'RTC', 0, 'RTC', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500417241093, '2022-10-26 23:37:16.904', false, '2022-10-26 23:37:16.904', 'Mozilla', 0, 'Mozilla', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500417241094, '2022-10-26 23:37:16.904', false, '2022-10-26 23:37:16.904', 'Smartisan OS', 0, 'Smartisan OS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500421435392, '2022-10-26 23:37:16.905', false, '2022-10-26 23:37:16.905', 'FoundationDB', 0, 'FoundationDB', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500421435393, '2022-10-26 23:37:16.905', false, '2022-10-26 23:37:16.905', 'iPadOS', 0, 'iPadOS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500421435394, '2022-10-26 23:37:16.905', false, '2022-10-26 23:37:16.905', '掘金·日新计划', 0, '掘金·日新计划', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500421435395, '2022-10-26 23:37:16.905', false, '2022-10-26 23:37:16.905', 'mPaaS', 0, 'mPaaS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500421435396, '2022-10-26 23:37:16.905', false, '2022-10-26 23:37:16.905', 'NuGet', 0, 'NuGet', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500421435397, '2022-10-26 23:37:16.905', false, '2022-10-26 23:37:16.905', 'Svelte', 0, 'Svelte', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500421435398, '2022-10-26 23:37:16.905', false, '2022-10-26 23:37:16.905', 'CMake', 0, 'CMake', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500421435399, '2022-10-26 23:37:16.905', false, '2022-10-26 23:37:16.905', '笔记测评', 0, '笔记测评', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500421435400, '2022-10-26 23:37:16.905', false, '2022-10-26 23:37:16.905', 'Godot', 0, 'Godot', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500421435401, '2022-10-26 23:37:16.905', false, '2022-10-26 23:37:16.905', 'NEO', 0, 'NEO', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500425629696, '2022-10-26 23:37:16.906', false, '2022-10-26 23:37:16.906', '京东小程序', 0, '京东小程序', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500425629697, '2022-10-26 23:37:16.906', false, '2022-10-26 23:37:16.906', 'AMA', 0, 'AMA', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500425629698, '2022-10-26 23:37:16.906', false, '2022-10-26 23:37:16.906', 'GWT', 0, 'GWT', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500425629699, '2022-10-26 23:37:16.906', false, '2022-10-26 23:37:16.906', 'Chameleon', 0, 'Chameleon', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500425629700, '2022-10-26 23:37:16.906', false, '2022-10-26 23:37:16.906', 'tvOS', 0, 'tvOS', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500425629701, '2022-10-26 23:37:16.906', false, '2022-10-26 23:37:16.906', '视频编码', 0, '视频编码', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500425629702, '2022-10-26 23:37:16.906', false, '2022-10-26 23:37:16.906', 'Ramda', 0, 'Ramda', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500425629703, '2022-10-26 23:37:16.906', false, '2022-10-26 23:37:16.906', 'Libra', 0, 'Libra', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500425629704, '2022-10-26 23:37:16.906', false, '2022-10-26 23:37:16.906', 'TLA+', 0, 'TLA+', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500425629705, '2022-10-26 23:37:16.906', false, '2022-10-26 23:37:16.906', 'D', 0, 'D', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500429824000, '2022-10-26 23:37:16.907', false, '2022-10-26 23:37:16.907', 'Debezium', 0, 'Debezium', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500429824001, '2022-10-26 23:37:16.907', false, '2022-10-26 23:37:16.907', 'greenplum', 0, 'greenplum', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500429824002, '2022-10-26 23:37:16.907', false, '2022-10-26 23:37:16.907', 'SQL Server', 0, 'SQL Server', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500429824003, '2022-10-26 23:37:16.907', false, '2022-10-26 23:37:16.907', 'Visual Studio', 0, 'Visual Studio', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500429824004, '2022-10-26 23:37:16.907', false, '2022-10-26 23:37:16.907', 'Cocos Creator', 0, 'Cocos Creator', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500429824005, '2022-10-26 23:37:16.907', false, '2022-10-26 23:37:16.907', 'arco design', 0, 'arco design', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500429824006, '2022-10-26 23:37:16.907', false, '2022-10-26 23:37:16.907', 'Modern.js', 0, 'Modern.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500429824007, '2022-10-26 23:37:16.907', false, '2022-10-26 23:37:16.907', 'Semi Design', 0, 'Semi Design', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500429824008, '2022-10-26 23:37:16.907', false, '2022-10-26 23:37:16.907', '轻服务', 0, '轻服务', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500434018304, '2022-10-26 23:37:16.908', false, '2022-10-26 23:37:16.908', 'Fes.js', 0, 'Fes.js', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500434018305, '2022-10-26 23:37:16.908', false, '2022-10-26 23:37:16.908', '青训营', 0, '青训营', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500434018306, '2022-10-26 23:37:16.908', false, '2022-10-26 23:37:16.908', '单片机', 0, '单片机', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500434018307, '2022-10-26 23:37:16.908', false, '2022-10-26 23:37:16.908', 'kerberos', 0, 'kerberos', NULL, NULL, false);
INSERT INTO public.qa_tag VALUES (1585294500002004994, '2022-10-26 23:37:16.805', false, '2022-10-26 23:37:16.805', '算法', 0, '算法', 3, NULL, true);
INSERT INTO public.qa_tag VALUES (1585294499997810689, '2022-10-26 23:37:16.804', false, '2022-10-26 23:37:16.804', 'JavaScript', 0, 'JavaScript', 1, NULL, true);
INSERT INTO public.qa_tag VALUES (1585294499997810688, '2022-10-26 23:37:16.804', false, '2022-10-26 23:37:16.804', '后端', 0, '后端', 1, NULL, true);
INSERT INTO public.qa_tag VALUES (1585294499997810691, '2022-10-26 23:37:16.805', false, '2022-10-26 23:37:16.805', '面试', 0, '面试', 2, NULL, true);
INSERT INTO public.qa_tag VALUES (1585294499997810690, '2022-10-26 23:37:16.804', false, '2022-10-26 23:37:16.804', 'GitHub', 0, 'GitHub', 2, NULL, true);


--
-- Data for Name: qa_tag_ref; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.qa_tag_ref VALUES (1, 1);
INSERT INTO public.qa_tag_ref VALUES (1, 2);
INSERT INTO public.qa_tag_ref VALUES (1, 3);
INSERT INTO public.qa_tag_ref VALUES (2, 3);
INSERT INTO public.qa_tag_ref VALUES (2, 2);
INSERT INTO public.qa_tag_ref VALUES (2, 1);
INSERT INTO public.qa_tag_ref VALUES (3, 4);
INSERT INTO public.qa_tag_ref VALUES (3, 1);
INSERT INTO public.qa_tag_ref VALUES (3, 2);
INSERT INTO public.qa_tag_ref VALUES (1588166867304841216, 1);
INSERT INTO public.qa_tag_ref VALUES (4, 1);
INSERT INTO public.qa_tag_ref VALUES (1597173734861438976, 1);
INSERT INTO public.qa_tag_ref VALUES (1597173739915575296, 1);
INSERT INTO public.qa_tag_ref VALUES (1597173742042087424, 1);
INSERT INTO public.qa_tag_ref VALUES (1597173742662844416, 1);
INSERT INTO public.qa_tag_ref VALUES (1597173743229075456, 1);
INSERT INTO public.qa_tag_ref VALUES (1597173744193765376, 1);
INSERT INTO public.qa_tag_ref VALUES (1597173745103929344, 1);
INSERT INTO public.qa_tag_ref VALUES (1598317234910920704, 1);
INSERT INTO public.qa_tag_ref VALUES (1598317675052793856, 1);
INSERT INTO public.qa_tag_ref VALUES (1598317875976732672, 1);
INSERT INTO public.qa_tag_ref VALUES (1598317969761370112, 1);
INSERT INTO public.qa_tag_ref VALUES (1598318733892255744, 1);
INSERT INTO public.qa_tag_ref VALUES (1598319058191646720, 1);
INSERT INTO public.qa_tag_ref VALUES (1598319885673299968, 1);
INSERT INTO public.qa_tag_ref VALUES (1598324677351047168, 1);
INSERT INTO public.qa_tag_ref VALUES (1598325339665203200, 1);
INSERT INTO public.qa_tag_ref VALUES (1598325650412797952, 1);
INSERT INTO public.qa_tag_ref VALUES (1598329529674235904, 1);
INSERT INTO public.qa_tag_ref VALUES (1598329962337665024, 1);
INSERT INTO public.qa_tag_ref VALUES (1598576245409316864, 1);
INSERT INTO public.qa_tag_ref VALUES (1598959826694569984, 1);
INSERT INTO public.qa_tag_ref VALUES (1600519049484173312, 1);
INSERT INTO public.qa_tag_ref VALUES (1602173902400782336, 1);
INSERT INTO public.qa_tag_ref VALUES (1602173971736821760, 1);
INSERT INTO public.qa_tag_ref VALUES (1602174038854074368, 1);
INSERT INTO public.qa_tag_ref VALUES (1602174123243470848, 1);


--
-- Data for Name: qa_user_watch_ref; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.qa_user_watch_ref VALUES (3, 3, NULL, NULL);
INSERT INTO public.qa_user_watch_ref VALUES (20, 3, NULL, '2022-11-13 13:59:01');
INSERT INTO public.qa_user_watch_ref VALUES (1597170473374842880, 1597173744193765376, false, '2022-11-29 19:07:25.039285');
INSERT INTO public.qa_user_watch_ref VALUES (3, 1602174123243470848, false, '2022-12-12 13:52:22.492623');


--
-- Data for Name: question_daily_data; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.question_daily_data VALUES (1601567234403074048, 0, 0, 0, '2023-04-20', 0, 2, 1, 0, 1, 3, 1, '[2, 2, 2]');
INSERT INTO public.question_daily_data VALUES (1601567234583429120, 0, 0, 0, '2023-04-20', 0, 3, 1, 0, 1, 3, 3, '[3, 3, 3]');
INSERT INTO public.question_daily_data VALUES (1601844063093391361, 0, 0, 0, '2023-04-20', 0, 1600519049484173312, 1, 0, 1, 3, 1, '[1600519049484173312]');
INSERT INTO public.question_daily_data VALUES (1602333706519838721, 0, 0, 0, '2023-04-20', 0, 4, 2, 0, 2, 3, 1, '[4]');
INSERT INTO public.question_daily_data VALUES (1602333706524033025, 0, 0, 0, '2023-04-20', 0, 1598959826694569984, 1, 0, 1, 3, 3, '[1598959826694569984]');
INSERT INTO public.question_daily_data VALUES (1603420870632538113, 0, 0, 0, '2023-04-20', 0, 1602173902400782336, 1, 0, 1, 3, 1, '[1602173902400782336]');
INSERT INTO public.question_daily_data VALUES (1603420870628343809, 0, 0, 0, '2023-04-20', 0, 1598325650412797952, 3, 0, 3, 20, 2, '[1598325650412797952]');
INSERT INTO public.question_daily_data VALUES (1603420870624149505, 0, 0, 0, '2023-04-20', 0, 4, 2, 0, 2, 3, 1, '[4]');
INSERT INTO public.question_daily_data VALUES (1603420870636732416, 0, 0, 0, '2023-04-20', 0, 1602174038854074368, 2, 0, 2, 3, 1, '[1602174038854074368]');
INSERT INTO public.question_daily_data VALUES (1603420870632538114, 0, 0, 0, '2023-04-20', 0, 1602173971736821760, 1, 0, 1, 3, 1, '[1602173971736821760]');
INSERT INTO public.question_daily_data VALUES (1603420870632538112, 0, 0, 0, '2023-04-20', 0, 1600519049484173312, 1, 0, 1, 3, 1, '[1600519049484173312]');
INSERT INTO public.question_daily_data VALUES (1603420870628343810, 0, 0, 0, '2023-04-20', 0, 1598959826694569984, 1, 0, 1, 3, 3, '[1598959826694569984]');
INSERT INTO public.question_daily_data VALUES (1603420870628343808, 1, 0, 1, '2023-04-20', 1, 1588166867304841216, 46, -1, 1, 3, 1, '[1588166867304841216]');
INSERT INTO public.question_daily_data VALUES (1603420870624149504, 0, 0, 0, '2023-04-20', 0, 3, 1, 0, 1, 3, 3, '[3, 3, 3]');
INSERT INTO public.question_daily_data VALUES (1601844062598463488, 0, 0, 0, '2023-04-20', 0, 2, 1, 0, 1, 3, 1, '[2, 2, 2]');
INSERT INTO public.question_daily_data VALUES (1603420870368296960, 0, 0, 0, '2023-04-20', 0, 2, 1, 0, 1, 3, 1, '[2, 2, 2]');
INSERT INTO public.question_daily_data VALUES (1601844063080808448, 0, 0, 0, '2023-04-20', 0, 3, 1, 0, 1, 3, 3, '[3, 3, 3]');
INSERT INTO public.question_daily_data VALUES (1601844063085002752, 0, 0, 0, '2023-04-20', 0, 4, 2, 0, 2, 3, 1, '[4]');
INSERT INTO public.question_daily_data VALUES (1601844063089197056, 1, 0, 1, '2023-04-20', 1, 1588166867304841216, 46, -1, 1, 3, 1, '[1588166867304841216]');
INSERT INTO public.question_daily_data VALUES (1601844063093391360, 0, 0, 0, '2023-04-20', 0, 1598959826694569984, 1, 0, 1, 3, 3, '[1598959826694569984]');
INSERT INTO public.question_daily_data VALUES (1602333706528227331, 0, 0, 0, '2023-04-20', 0, 1602174123243470848, 6, 0, 6, 3, 1, '[1602174123243470848]');
INSERT INTO public.question_daily_data VALUES (123, 0, 0, 0, '2023-04-20', 0, 1600519049484173312, 123213, 0, 1, 3, 1, '[1600519049484173312]');
INSERT INTO public.question_daily_data VALUES (1601567234591817729, 1, 0, 1, '2023-04-20', 1, 1588166867304841216, 46, -1, 1, 3, 1, '[1588166867304841216]');
INSERT INTO public.question_daily_data VALUES (1601567234596012033, 0, 0, 0, '2023-04-20', 0, 1600519049484173312, 1, 0, 1, 3, 1, '[1600519049484173312]');
INSERT INTO public.question_daily_data VALUES (1602333706352066560, 0, 0, 0, '2023-04-20', 0, 2, 1, 0, 1, 3, 1, '[2, 2, 2]');
INSERT INTO public.question_daily_data VALUES (1602333706519838720, 0, 0, 0, '2023-04-20', 0, 3, 1, 0, 1, 3, 3, '[3, 3, 3]');
INSERT INTO public.question_daily_data VALUES (1602333706519838722, 1, 0, 1, '2023-04-20', 1, 1588166867304841216, 46, -1, 1, 3, 1, '[1588166867304841216]');
INSERT INTO public.question_daily_data VALUES (1602333706524033024, 0, 0, 0, '2023-04-20', 0, 1598325650412797952, 3, 0, 3, 20, 2, '[1598325650412797952]');
INSERT INTO public.question_daily_data VALUES (1602333706524033026, 0, 0, 0, '2023-04-20', 0, 1600519049484173312, 1, 0, 1, 3, 1, '[1600519049484173312]');
INSERT INTO public.question_daily_data VALUES (1602333706528227330, 0, 0, 0, '2023-04-20', 0, 1602174038854074368, 1, 0, 1, 3, 1, '[1602174038854074368]');
INSERT INTO public.question_daily_data VALUES (1602333706528227328, 0, 0, 0, '2023-04-20', 0, 1602173902400782336, 1, 0, 1, 3, 1, '[1602173902400782336]');
INSERT INTO public.question_daily_data VALUES (1603420870636732417, 1, 0, 1, '2023-04-20', 0, 1602174123243470848, 72, 1, 7, 3, 1, '[1602174123243470848]');
INSERT INTO public.question_daily_data VALUES (1601567234591817728, 0, 0, 0, '2023-04-20', 0, 4, 2, 0, 2, 3, 1, '[4]');
INSERT INTO public.question_daily_data VALUES (1601567234596012032, 0, 0, 0, '2023-04-20', 0, 1598959826694569984, 1, 0, 1, 3, 3, '[1598959826694569984]');
INSERT INTO public.question_daily_data VALUES (1602333706528227329, 0, 0, 0, '2023-04-20', 0, 1602173971736821760, 1, 0, 1, 3, 1, '[1602173971736821760]');


--
-- Data for Name: system_message; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- Data for Name: system_users; Type: TABLE DATA; Schema: public; Owner: postgres
--



--
-- Data for Name: user_active; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_active VALUES (3, '2022-09-13 00:21:32.864', false, '2022-09-18 00:21:32.864', NULL, 0, 3, NULL, NULL);
INSERT INTO public.user_active VALUES (6, '2022-09-17 00:30:55.69', false, '2022-09-17 00:30:55.69', NULL, 0, 4, NULL, NULL);
INSERT INTO public.user_active VALUES (13, '2022-09-18 01:17:51.772', false, '2022-09-18 01:17:51.772', NULL, 0, 4, NULL, NULL);
INSERT INTO public.user_active VALUES (14, '2022-09-18 01:32:12.973', false, '2022-09-18 01:32:12.973', NULL, 0, 5, NULL, NULL);
INSERT INTO public.user_active VALUES (1604885288008548352, '2022-12-20 01:04:04.646', false, '2022-12-20 01:04:04.646', NULL, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', '0:0:0:0:0:0:0:1%0');
INSERT INTO public.user_active VALUES (1606258837642280960, '2022-12-23 20:02:04.399', false, '2022-12-23 20:02:04.399', 19, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1603628246149103616, '2022-12-27 21:36:57.789', false, '2022-12-27 21:36:57.791', 1603330152295563264, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1607732281059835904, '2022-12-27 21:37:00.685', false, '2022-12-27 21:37:00.685', 1602174123360911360, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1604749271595220992, '2022-12-19 22:04:29.913', false, '2022-12-19 22:04:29.914', 15, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1603636953465487360, '2022-12-19 22:04:44.83', false, '2022-12-19 22:04:44.831', 1598325650412797952, 3, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1607732295328858112, '2022-12-27 21:37:04.085', false, '2022-12-27 21:37:04.085', 1602331714808446976, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1631667519553011712, '2023-03-03 22:47:06.237', false, '2023-03-03 22:47:06.237', NULL, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', '0:0:0:0:0:0:0:1%0');
INSERT INTO public.user_active VALUES (1641696569788989440, '2023-03-31 14:58:58.158', false, '2023-03-31 14:58:58.158', NULL, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.0.0', '0:0:0:0:0:0:0:1%0');
INSERT INTO public.user_active VALUES (1646687485352214528, '2023-04-14 09:31:05.139', false, '2023-04-14 09:31:05.139', 19, 2, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1646687511759552512, '2023-04-14 09:31:11.435', false, '2023-04-14 09:31:11.435', 1580605648092004352, 2, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1644868819883130880, '2023-04-21 10:49:10.863', false, '2023-04-21 10:49:10.865', 1599428443726938112, 2, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1649243995601108992, '2023-04-21 10:49:44.682', false, '2023-04-21 10:49:44.682', 1602174123243470848, 3, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1646855608441241600, '2023-04-21 10:51:44.281', false, '2023-04-21 10:51:44.282', 4, 3, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1603636902538248192, '2023-04-21 10:52:53.627', false, '2023-04-21 10:52:53.629', 1602174123243470848, 3, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1646687474828705792, '2023-04-21 11:06:01.248', false, '2023-04-21 11:06:01.249', 91, 2, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1646687500804030464, '2023-04-21 11:06:13.168', false, '2023-04-21 11:06:13.17', 16, 2, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1646687465840312320, '2023-04-21 11:39:38.092', false, '2023-04-21 11:39:38.093', 11, 2, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1603438809347784704, '2023-04-21 12:34:03.185', false, '2023-04-21 12:34:03.187', 1598959826694569984, 3, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1744015574968565760, '2024-01-07 23:18:09.989', false, '2024-01-07 23:18:09.989', 1649248024339152896, 2, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1702.3', NULL);
INSERT INTO public.user_active VALUES (1631667651874914304, '2023-03-03 22:47:37.783', false, '2023-03-03 22:47:37.783', 114, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1603628317326442496, '2023-03-05 11:28:34.312', false, '2023-03-05 11:28:34.314', 1602338399681773568, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1604436202058940416, '2022-12-18 19:19:34.227', false, '2022-12-18 19:19:34.227', NULL, 0, 6, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1641733863010992128, '2023-03-31 17:27:09.559', false, '2023-03-31 17:27:09.559', 17, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1644868860349775872, '2023-04-09 09:04:31.15', false, '2023-04-09 09:04:31.15', 1598951510023077888, 2, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1644868992336134144, '2023-04-09 09:05:02.618', false, '2023-04-09 09:05:02.618', 1, 3, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1644868846307246080, '2023-04-14 09:31:14.309', false, '2023-04-14 09:31:14.311', 1583860253252911104, 2, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1646687746191785984, '2023-04-14 09:32:07.328', false, '2023-04-14 09:32:07.328', NULL, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', '0:0:0:0:0:0:0:1%0');
INSERT INTO public.user_active VALUES (1646855740733784064, '2023-04-14 20:39:40.366', false, '2023-04-14 20:39:40.366', 1632225194653253632, 18, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1604789280524206080, '2023-04-21 10:48:58.738', false, '2023-04-21 10:48:58.808', 1599743283574079488, 2, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1646687849510076416, '2023-04-21 10:49:59.022', false, '2023-04-21 10:49:59.024', 1598959826694569984, 3, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1649244076169494528, '2023-04-21 10:50:03.909', false, '2023-04-21 10:50:03.909', 1646693219276161024, 11, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1603645740456869888, '2023-04-21 11:39:08.661', false, '2023-04-21 11:39:08.73', 1588166867304841216, 3, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1644868828976381952, '2023-04-21 11:39:21.106', false, '2023-04-21 11:39:21.109', 1599374122381475840, 2, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1744015928896520192, '2024-01-07 23:19:34.355', false, '2024-01-07 23:19:34.355', 1599428443726938112, 2, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1702.3', NULL);
INSERT INTO public.user_active VALUES (1603645808685613056, '2022-12-16 14:58:49.746', false, '2022-12-16 14:58:49.746', 1602173971833290752, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1604440229203148800, '2022-12-18 19:35:34.357', false, '2022-12-18 19:35:34.357', 11, 2, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1604789287159595008, '2022-12-19 18:42:36.309', false, '2022-12-19 18:42:36.309', 1599743283574079488, 6, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1644869741082312704, '2023-04-09 09:08:01.136', false, '2023-04-09 09:08:01.136', 1632224773444468736, 18, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1646687867025489920, '2023-04-14 09:32:36.154', false, '2023-04-14 09:32:36.154', 1598959826694569984, 12, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1646856023786389504, '2023-04-14 20:40:47.833', false, '2023-04-14 20:40:47.833', 12, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1646856067172270080, '2023-04-14 20:40:58.178', false, '2023-04-14 20:40:58.178', 1583860253252911104, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1646856117818490880, '2023-04-14 20:41:10.252', false, '2023-04-14 20:41:10.252', 91, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1649244102782353408, '2023-04-21 10:50:10.234', false, '2023-04-21 10:50:10.234', NULL, 0, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', '0:0:0:0:0:0:0:1%0');
INSERT INTO public.user_active VALUES (1744016034139996160, '2024-01-07 23:19:59.447', false, '2024-01-07 23:19:59.447', 1602174123243470848, 3, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1702.3', NULL);
INSERT INTO public.user_active VALUES (1632222381424508928, '2024-01-07 23:23:35.896', false, '2024-01-07 23:23:35.903', 1632222360327159808, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1702.3', NULL);
INSERT INTO public.user_active VALUES (1603645818257014784, '2022-12-16 14:58:52.028', false, '2022-12-16 14:58:52.028', 1599428444045705216, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1604440242033524736, '2022-12-18 19:35:37.42', false, '2022-12-18 19:35:37.42', 11, 4, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1604440248618582016, '2022-12-18 19:35:38.986', false, '2022-12-18 19:35:38.986', 11, 4, 1597170473374842880, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1646693427280084992, '2023-04-14 09:54:41.805', false, '2023-04-14 09:54:41.805', 1598959826694569984, 8, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1604829456105472000, '2023-04-14 20:41:42.137', false, '2023-04-14 20:41:42.138', 9, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1632225043784138752, '2023-04-21 11:00:16.559', false, '2023-04-21 11:00:16.562', 1632222360327159808, 19, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1646857567046991872, '2023-04-21 11:06:36.3', false, '2023-04-21 11:06:36.302', 1598325650412797952, 3, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1649248097974353920, '2023-04-21 12:29:47.499', false, '2023-04-21 12:29:47.502', 1649248024339152896, 2, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1744017442402729984, '2024-01-07 23:25:35.203', false, '2024-01-07 23:25:35.203', 1596086875150352384, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1702.3', NULL);
INSERT INTO public.user_active VALUES (1603645826956001280, '2022-12-16 14:58:54.102', false, '2022-12-16 14:58:54.102', 1598952212388642816, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1603645835378163712, '2022-12-16 14:58:56.11', false, '2022-12-16 14:58:56.11', 1596090564271407104, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1603645842999214080, '2022-12-16 14:58:57.927', false, '2022-12-16 14:58:57.927', 1596088957441933312, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1603645851358461952, '2022-12-16 14:58:59.92', false, '2022-12-16 14:58:59.92', 1596088461134135296, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1603645859268919296, '2022-12-16 14:59:01.806', false, '2022-12-16 14:59:01.806', 1595478125087555584, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1603645870870364160, '2022-12-16 14:59:04.572', false, '2022-12-16 14:59:04.572', 1595478116006887424, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1604837261168345088, '2022-12-19 21:53:14.154', false, '2022-12-19 21:53:14.154', 1602174038854074368, 3, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1604837270081241088, '2022-12-19 21:53:16.279', false, '2022-12-19 21:53:16.279', 1602173971736821760, 3, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1646857621644247040, '2023-04-14 20:47:08.793', false, '2023-04-14 20:47:08.793', 1646693219276161024, 13, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1649248269710131200, '2023-04-21 11:06:43.707', false, '2023-04-21 11:06:43.707', 1588166867304841216, 3, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1632227044588781568, '2023-04-21 12:29:43.794', false, '2023-04-21 12:29:43.865', 9, 2, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1744017589413085184, '2024-01-07 23:26:10.253', false, '2024-01-07 23:26:10.253', 1599743284450689024, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1702.3', NULL);
INSERT INTO public.user_active VALUES (1744017612565643264, '2024-01-07 23:26:15.773', false, '2024-01-07 23:26:15.773', 1744016821310193664, 19, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1702.3', NULL);
INSERT INTO public.user_active VALUES (1604837306852704256, '2022-12-19 21:53:25.046', false, '2022-12-19 21:53:25.046', 1598952212040515584, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1604837335847927808, '2022-12-19 21:53:31.959', false, '2022-12-19 21:53:31.959', NULL, 0, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36', '0:0:0:0:0:0:0:1%0');
INSERT INTO public.user_active VALUES (1646865252593172480, '2023-04-14 21:17:28.152', false, '2023-04-14 21:17:28.152', 1602174038854074368, 3, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1646865292514557952, '2023-04-14 21:17:37.67', false, '2023-04-14 21:17:37.67', 4, 3, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1649256579423272960, '2023-04-21 11:39:44.915', false, '2023-04-21 11:39:44.915', 1599374122381475840, 4, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1604840072828420096, '2023-03-31 17:28:04.935', false, '2023-03-31 17:28:04.942', 1580605648092004352, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1646865349594841088, '2023-04-14 21:17:51.279', false, '2023-04-14 21:17:51.279', 4, 8, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1604840088477368320, '2022-12-19 22:04:28.237', false, '2022-12-19 22:04:28.237', 95, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1604840106160553984, '2022-12-19 22:04:32.453', false, '2022-12-19 22:04:32.453', 10, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1604840193615986688, '2022-12-19 22:04:53.304', false, '2022-12-19 22:04:53.304', 1597173739915575296, 3, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (503, '2022-09-26 18:08:59.083', false, '2022-09-26 18:08:59.083', NULL, 0, 3, NULL, NULL);
INSERT INTO public.user_active VALUES (662, '2022-09-27 14:01:52.533', false, '2022-09-27 14:01:52.533', NULL, 0, 3, NULL, NULL);
INSERT INTO public.user_active VALUES (698, '2022-09-28 12:09:44.817', false, '2022-09-28 12:09:44.817', NULL, 0, 3, NULL, NULL);
INSERT INTO public.user_active VALUES (754, '2022-09-29 04:56:24.835', false, '2022-09-29 04:56:24.835', NULL, 0, 6, NULL, NULL);
INSERT INTO public.user_active VALUES (1669, '2022-10-10 13:28:04.838', false, '2022-10-10 13:28:04.838', NULL, 0, 20, NULL, NULL);
INSERT INTO public.user_active VALUES (845, '2022-09-29 07:19:42.497', false, '2022-09-29 07:19:42.497', NULL, 0, 3, NULL, NULL);
INSERT INTO public.user_active VALUES (1385, '2022-10-06 14:13:31.083', false, '2022-10-06 14:13:31.083', NULL, 0, 3, NULL, NULL);
INSERT INTO public.user_active VALUES (1582748946323734528, '2022-10-19 23:02:09.514', false, '2022-10-19 23:02:09.514', NULL, 0, 3, NULL, NULL);
INSERT INTO public.user_active VALUES (1584469678791589888, '2022-10-24 16:59:44.118', false, '2022-10-24 16:59:44.118', NULL, 0, 3, NULL, NULL);
INSERT INTO public.user_active VALUES (1597118639650111488, '2022-11-28 14:42:11.392', false, '2022-11-28 14:42:11.392', NULL, 0, 3, NULL, NULL);
INSERT INTO public.user_active VALUES (1599366397299785728, '2022-12-04 19:33:58.579', false, '2022-12-04 19:33:58.579', NULL, 0, 3, NULL, NULL);
INSERT INTO public.user_active VALUES (1600360364250234880, '2022-12-07 13:23:38.767', false, '2022-12-07 13:23:38.767', 114, 6, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1600361709782958080, '2022-12-07 13:28:59.553', false, '2022-12-07 13:28:59.553', 1600361709422247936, 18, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1600372538699939840, '2022-12-07 14:12:01.367', false, '2022-12-07 14:12:01.367', 1598583941625806848, 13, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1600385104335601664, '2022-12-07 15:01:57.264', false, '2022-12-07 15:01:57.264', 1580605648092004352, 6, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1600385153744502784, '2022-12-07 15:02:09.028', false, '2022-12-07 15:02:09.028', 1588166867304841216, 12, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1600385177224216576, '2022-12-07 15:02:14.627', false, '2022-12-07 15:02:14.627', 1589864392655110144, 13, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1600385233021042688, '2022-12-07 15:02:27.929', false, '2022-12-07 15:02:27.929', 1600385232660332544, 18, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1600397178973454336, '2022-12-07 15:49:56.087', false, '2022-12-07 15:49:56.087', 1598952212388642816, 18, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1600397234979995648, '2022-12-07 15:50:09.419', false, '2022-12-07 15:50:09.419', 1596265633027194880, 18, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1600397242059980800, '2022-12-07 15:50:11.107', false, '2022-12-07 15:50:11.107', 1596090564271407104, 18, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1600409009091772416, '2022-12-07 16:36:56.6', false, '2022-12-07 16:36:56.6', 1597435188462223360, 18, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1600410002470731776, '2022-12-07 16:40:53.427', false, '2022-12-07 16:40:53.427', 1597435220368293888, 18, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1600410009336807424, '2022-12-07 16:40:55.063', false, '2022-12-07 16:40:55.063', 1597435237271339008, 18, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1600410013107486720, '2022-12-07 16:40:55.962', false, '2022-12-07 16:40:55.962', 1597494620642607104, 18, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1600410018660745216, '2022-12-07 16:40:57.286', false, '2022-12-07 16:40:57.286', 1597497687861624832, 18, 4, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1601531504339451904, '2022-12-10 18:57:20.327', false, '2022-12-10 18:57:20.327', 10, 6, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1602227643778859008, '2022-12-12 17:03:32.903', false, '2022-12-12 17:03:32.903', 1602214729864970240, 18, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1602933571826221056, '2022-12-14 15:48:39.263', false, '2022-12-14 15:48:39.263', 1602338399681773568, 18, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602933644807110656, '2022-12-14 15:48:56.649', false, '2022-12-14 15:48:56.649', 1602214729864970240, 18, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602934464969703424, '2022-12-14 15:52:12.188', false, '2022-12-14 15:52:12.188', 1596427793640456192, 18, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602949204462796800, '2022-12-14 16:50:46.357', false, '2022-12-14 16:50:46.357', 1595478116006887424, 18, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602949208732598272, '2022-12-14 16:50:47.375', false, '2022-12-14 16:50:47.375', 1595478116006887424, 18, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602949217175732224, '2022-12-14 16:50:49.388', false, '2022-12-14 16:50:49.388', 1595478116006887424, 18, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1603465193478684672, '2022-12-18 14:20:43.72', false, '2022-12-18 14:20:43.777', 110, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1603465175749361664, '2023-03-03 22:46:16.266', false, '2023-03-03 22:46:16.269', 16, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36 Edg/110.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1602949481546907648, '2022-12-14 16:51:52.434', false, '2022-12-14 16:51:52.434', 1595478116006887424, 18, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602949534105731072, '2022-12-14 16:52:04.95', false, '2022-12-14 16:52:04.95', 1595485629309779968, 18, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602950872743018496, '2022-12-14 16:57:24.121', false, '2022-12-14 16:57:24.121', 1595485629309779968, 18, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602951153018994688, '2022-12-14 16:58:30.929', false, '2022-12-14 16:58:30.929', 1595478116006887424, 18, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602951157947301888, '2022-12-14 16:58:32.104', false, '2022-12-14 16:58:32.104', 1596427793640456192, 18, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602954025848799232, '2022-12-14 17:09:55.866', false, '2022-12-14 17:09:55.866', 1596088957441933312, 18, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602954153175285760, '2022-12-14 17:10:26.222', false, '2022-12-14 17:10:26.222', 1599743283574079488, 6, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602954187941871616, '2022-12-14 17:10:34.512', false, '2022-12-14 17:10:34.512', 1599743283574079488, 4, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602954257009475584, '2022-12-14 17:10:50.979', false, '2022-12-14 17:10:50.979', 1602174123243470848, 10, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602954286587707392, '2022-12-14 17:10:58.03', false, '2022-12-14 17:10:58.03', 1602174123243470848, 8, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1602954310461685760, '2022-12-14 17:11:03.722', false, '2022-12-14 17:11:03.722', 1602174123243470848, 12, 5, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/107.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1603322050955444224, '2022-12-15 17:32:19.89', false, '2022-12-15 17:32:19.89', 1602338399681773568, 18, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/109.0.0.0 Safari/537.36 Edg/109.0.0.0', NULL);
INSERT INTO public.user_active VALUES (1603418000021520384, '2023-04-09 09:13:32.515', false, '2023-04-09 09:13:32.516', 1599374122381475840, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1603416872781348864, '2024-01-07 23:26:16.057', false, '2024-01-07 23:26:16.059', 1599743283574079488, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1702.3', NULL);
INSERT INTO public.user_active VALUES (1603465157776769024, '2024-01-07 23:27:54.331', false, '2024-01-07 23:27:54.332', 93, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/112.0.0.0 Safari/537.36 Edg/112.0.1702.3', NULL);
INSERT INTO public.user_active VALUES (1603417915602763776, '2022-12-19 21:53:22.914', false, '2022-12-19 21:53:22.915', 1599428443726938112, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36', NULL);
INSERT INTO public.user_active VALUES (1603465111408738304, '2022-12-19 22:04:26.328', false, '2022-12-19 22:04:26.329', 112, 2, 3, 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36', NULL);


--
-- Data for Name: user_collection; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_collection VALUES (1581492166927056896, '2022-10-16 11:48:09.957', false, '2022-10-16 12:44:01.182', 0, 9, 'Go 语言的参考手册 ', 4, 2);
INSERT INTO public.user_collection VALUES (1587805494334980096, '2022-11-02 21:55:04.506', false, '2022-11-02 21:55:04.506', 3, 1, '<div class="d-collect-answer-title">replace every letter except the last one using regex</div><div class="d-collect-answer-content">
You can use
> gsub("(.)(?=.)", "\\1,", x, perl=TRUE)
[1] "A,B,C,D"

The (.)(?=.) regex matches any char capturing it into Group 1 (with (.)) that mus</div>', 3, 12);
INSERT INTO public.user_collection VALUES (1587808947299942400, '2022-11-02 22:08:47.757', false, '2022-11-02 22:08:47.757', 3, 1587354439092535296, '<div class="d-collect-answer-title">replace every letter except the last one using regex</div><div class="d-collect-answer-content">null</div>', 3, 12);
INSERT INTO public.user_collection VALUES (1587809231434678272, '2022-11-02 22:09:55.5', false, '2022-11-02 22:09:55.5', 3, 1587399114599956480, '<div class="d-collect-answer-title">replace every letter except the last one using regex</div><div class="d-collect-answer-content">    private long replyComment
            (QaAnswerRB qaAnswerRB, AnswerType answerType, long questionFieldId, User user, QaQuestionField qaQuestionFi</div>', 3, 12);
INSERT INTO public.user_collection VALUES (1587809771707170816, '2022-11-02 22:12:04.311', false, '2022-11-02 22:12:04.311', 1, 4, 'replace every letter except the last one using regex', 3, 1);
INSERT INTO public.user_collection VALUES (1591500476434612224, '2022-11-13 02:37:36.904', false, '2022-11-13 02:37:36.904', 1, 1, '什么是 WebAssembly(wasm)？', 4, 2);
INSERT INTO public.user_collection VALUES (1591670972912500736, '2022-11-13 13:55:06.417', false, '2022-11-13 13:55:06.417', 1, 4, 'replace every letter except the last one using regex', 6, 4);
INSERT INTO public.user_collection VALUES (27, '2022-10-10 13:30:50.085', false, '2022-10-10 13:30:50.085', 0, 9, 'Go 语言的参考手册 ', 20, 13);
INSERT INTO public.user_collection VALUES (28, '2022-10-10 13:31:05.433', false, '2022-10-10 13:31:05.433', 0, 10, 'title', 20, 13);
INSERT INTO public.user_collection VALUES (29, '2022-10-10 13:31:30.942', false, '2022-10-10 13:31:30.942', 0, 11, 'title', 20, 13);
INSERT INTO public.user_collection VALUES (30, '2022-10-10 13:35:17.425', false, '2022-10-10 13:35:17.425', 0, 91, 'title', 20, 14);
INSERT INTO public.user_collection VALUES (31, '2022-10-10 13:35:18.428', false, '2022-10-10 13:35:18.428', 0, 91, 'title', 20, 13);
INSERT INTO public.user_collection VALUES (32, '2022-10-11 15:42:37.417', false, '2022-10-11 15:42:37.417', 0, 22, '123321123312', 20, 14);
INSERT INTO public.user_collection VALUES (33, '2022-10-11 19:33:44.333', false, '2022-10-11 19:33:44.333', 0, 12, 'title', 20, 13);
INSERT INTO public.user_collection VALUES (34, '2022-10-11 19:33:47.609', false, '2022-10-11 19:33:47.609', 0, 15, 'title', 20, 13);
INSERT INTO public.user_collection VALUES (35, '2022-10-11 19:33:51.169', false, '2022-10-11 19:33:51.169', 0, 16, 'title', 20, 13);
INSERT INTO public.user_collection VALUES (37, '2022-10-11 19:34:00.617', false, '2022-10-11 19:34:00.617', 0, 93, 'title', 20, 13);
INSERT INTO public.user_collection VALUES (38, '2022-10-11 19:34:03.765', false, '2022-10-11 19:34:03.765', 0, 95, 'title', 20, 13);
INSERT INTO public.user_collection VALUES (39, '2022-10-11 19:34:06.704', false, '2022-10-11 19:34:06.704', 0, 97, 'title', 20, 13);
INSERT INTO public.user_collection VALUES (40, '2022-10-11 19:34:10.318', false, '2022-10-11 19:34:10.318', 0, 99, 'title', 20, 13);
INSERT INTO public.user_collection VALUES (41, '2022-10-11 19:34:13.783', false, '2022-10-11 19:34:13.783', 0, 101, 'title', 20, 13);
INSERT INTO public.user_collection VALUES (42, '2022-10-11 19:34:19.951', false, '2022-10-11 19:34:19.951', 0, 108, 'title', 20, 13);
INSERT INTO public.user_collection VALUES (1580808962662465536, '2022-10-14 14:33:21.367', false, '2022-10-14 14:39:19.74', 0, 17, 'TestTestTestTest', 20, 14);
INSERT INTO public.user_collection VALUES (1580808058219528192, '2022-10-14 14:29:45.73', false, '2022-10-14 14:39:20.008', 0, 17, 'TestTestTestTest', 20, 13);
INSERT INTO public.user_collection VALUES (26, '2022-10-09 19:07:50.376', false, '2022-10-09 19:07:50.376', 1, 9, 'question', 3, 12);
INSERT INTO public.user_collection VALUES (46, '2022-10-11 21:31:04.515', false, '2022-12-10 18:57:23.026', 0, 10, 'title', 3, 9);
INSERT INTO public.user_collection VALUES (43, '2022-10-11 19:34:24.332', false, '2022-10-11 19:34:24.332', 1, 1, 'questionTest', 20, 13);
INSERT INTO public.user_collection VALUES (44, '2022-10-11 21:31:04.019', false, '2022-10-11 21:31:04.019', 0, 10, 'title', 3, 1);
INSERT INTO public.user_collection VALUES (45, '2022-10-11 21:31:04.224', false, '2022-10-11 21:31:04.224', 0, 10, 'title', 3, 11);
INSERT INTO public.user_collection VALUES (47, '2022-10-11 21:31:04.893', false, '2022-10-11 21:31:04.893', 0, 10, 'title', 3, 12);
INSERT INTO public.user_collection VALUES (48, '2022-10-11 21:31:05.289', false, '2022-10-11 21:31:05.289', 0, 10, 'title', 3, 10);
INSERT INTO public.user_collection VALUES (1601535048056569856, '2022-12-10 19:11:25.196', false, '2022-12-10 19:11:25.196', 0, 1599428443726938112, 'Rem', 3, 10);
INSERT INTO public.user_collection VALUES (1580790057776709632, '2022-10-14 13:18:14.093', false, '2022-10-14 13:18:14.093', 0, 1580605648092004352, 'title', 20, 13);
INSERT INTO public.user_collection VALUES (1601535077357977600, '2022-12-10 19:11:32.182', false, '2022-12-10 19:11:32.182', 0, 114, 'title', 3, 9);
INSERT INTO public.user_collection VALUES (24, '2022-10-09 18:34:38.866', true, '2022-12-10 19:16:02.267', 0, 9, 'Go 语言的参考手册 ', 3, 1);
INSERT INTO public.user_collection VALUES (25, '2022-10-09 19:00:33.243', false, '2022-12-10 19:16:02.778', 0, 9, 'Go 语言的参考手册 ', 3, 12);
INSERT INTO public.user_collection VALUES (1581493451457822720, '2022-10-16 11:53:16.212', false, '2022-10-16 11:53:29.646', 0, 12, 'title', 4, 2);
INSERT INTO public.user_collection VALUES (23, '2022-10-09 18:34:38.544', true, '2022-12-10 19:16:03.213', 0, 9, 'Go 语言的参考手册 ', 3, 11);
INSERT INTO public.user_collection VALUES (21, '2022-10-09 18:34:27.829', false, '2022-12-10 19:16:04.668', 0, 9, 'Go 语言的参考手册 ', 3, 9);
INSERT INTO public.user_collection VALUES (22, '2022-10-09 18:34:38.198', true, '2023-04-14 20:42:41.942', 0, 9, 'Go 语言的参考手册 ', 3, 10);
INSERT INTO public.user_collection VALUES (1581495114042179584, '2022-10-16 11:59:52.605', false, '2022-10-16 12:16:14.971', 0, 1580605959804289024, 'Test', 4, 2);


--
-- Data for Name: user_collection_group; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_collection_group VALUES (3, '2022-09-09 22:27:56.325', false, '2022-09-09 22:27:56.325', 0, '默认收藏夹', 0, 5, NULL);
INSERT INTO public.user_collection_group VALUES (4, '2022-09-09 22:27:56.329', false, '2022-11-13 13:55:06.401', 1, '默认收藏夹', 0, 6, NULL);
INSERT INTO public.user_collection_group VALUES (2, '2022-09-09 22:27:56.321', false, '2022-11-13 02:37:36.873', 4, '默认收藏夹', 0, 4, NULL);
INSERT INTO public.user_collection_group VALUES (14, '2022-10-10 13:35:16.506', false, '2022-10-14 14:39:19.743', 3, 'AAA', 0, 20, '文章简介');
INSERT INTO public.user_collection_group VALUES (13, '2022-10-10 13:30:46.147', false, '2022-10-14 14:39:20.012', 17, '默认收藏夹', 0, 20, '文章简介');
INSERT INTO public.user_collection_group VALUES (1, '2022-09-09 22:27:56.287', false, '2022-12-10 19:16:02.263', 9, '默认收藏夹', 0, 3, NULL);
INSERT INTO public.user_collection_group VALUES (12, '2022-10-09 19:00:22.779', false, '2022-12-10 19:16:02.803', 8, 'Test', 0, 3, '文章简介');
INSERT INTO public.user_collection_group VALUES (11, '2022-10-09 15:40:30.561', false, '2022-12-10 19:16:03.208', 3, 'Wasm', 0, 3, '文章简介');
INSERT INTO public.user_collection_group VALUES (9, '2022-10-09 15:35:51.868', false, '2022-12-10 19:16:04.68', 3, '后端开发', 0, 3, '文章简介');
INSERT INTO public.user_collection_group VALUES (10, '2022-10-09 15:39:37.397', false, '2023-04-14 20:42:41.937', 3, 'Myqsl相关', 0, 3, '文章简介');
INSERT INTO public.user_collection_group VALUES (1649256718334427136, '2023-04-21 11:40:18.022', false, '2023-04-21 11:40:18.022', 0, 'test', 0, 4, '文章简介');


--
-- Data for Name: user_file_ref; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_file_ref VALUES (1605861156558209024, '2022-12-22 17:41:49.853', false, '2022-12-22 17:41:49.853', false, '7ee6d879b41aa55db4b1271de7a52ed0', '微信图片_20200912193911.png', 0, 8, 'qiniu.dwsy.link/ddl/b6b8759ddefd4b509574342fbdcff916.png', 3);
INSERT INTO public.user_file_ref VALUES (1632221941479768064, '2023-03-05 11:30:10.738', false, '2023-03-05 11:30:10.738', false, '08c457acbdf88a32fdf77ceca06c1711', '截图 2023-03-05 11-29-46.png', 0, 7, 'qiniu.dwsy.link/ddl/7854851065f9407a9ce552f0a0b1dd23.png', 3);
INSERT INTO public.user_file_ref VALUES (1649264811927666688, '2023-04-21 12:12:27.682', false, '2023-04-21 12:12:27.682', false, '1d3f324314c413784864031a59828255', '截图 2023-04-10 20-29-00.png', 0, 1, 'qiniu.dwsy.link/ddl/ae0f7fe45e7c483ca3c40979919bb628.png', 4);
INSERT INTO public.user_file_ref VALUES (1744017171530383360, '2024-01-07 23:24:30.626', false, '2024-01-07 23:24:30.626', false, '1c578d5b756001ed079ac41308756620', '截图 2023-03-05 12-15-52.png', 0, 8, 'qiniu.dwsy.link/ddl/78a1920d6c244535bd06f6134add0bbc.png', 3);


--
-- Data for Name: user_following; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_following VALUES (26, '2022-10-10 18:38:04.659', false, '2022-10-10 18:39:06.73', 4, 20, NULL, NULL, NULL);
INSERT INTO public.user_following VALUES (1584090285040730112, '2022-10-23 15:52:09.585', false, '2022-10-23 15:52:09.585', 4, 3, NULL, NULL, NULL);
INSERT INTO public.user_following VALUES (2, '2022-09-02 01:25:25.836', false, '2022-11-01 16:25:57.683', 20, 3, NULL, NULL, NULL);
INSERT INTO public.user_following VALUES (5, '2022-09-02 01:25:25.854', false, '2022-11-08 12:53:24.153', 3, 20, NULL, NULL, NULL);
INSERT INTO public.user_following VALUES (1591670942386356224, '2022-11-13 13:54:59.138', false, '2022-11-13 13:54:59.138', 3, 6, NULL, NULL, NULL);
INSERT INTO public.user_following VALUES (1597172431535996928, '2022-11-28 18:15:56.366', false, '2022-11-28 19:10:09.362', 3, 1597170473374842880, NULL, NULL, NULL);
INSERT INTO public.user_following VALUES (1600407569615028224, '2022-12-07 16:31:13.39', false, '2022-12-07 16:31:13.39', 5, 4, NULL, NULL, NULL);
INSERT INTO public.user_following VALUES (1583936312509988864, '2022-10-23 05:40:19.678', false, '2022-12-08 01:07:41.404', 3, 4, NULL, NULL, NULL);
INSERT INTO public.user_following VALUES (15, '2022-10-10 14:45:22.504', false, '2022-10-10 14:45:22.504', 5, 20, NULL, NULL, NULL);
INSERT INTO public.user_following VALUES (6, '2022-09-02 01:25:25.861', false, '2022-09-02 01:25:25.861', 20, 6, NULL, NULL, NULL);
INSERT INTO public.user_following VALUES (4, '2022-09-02 01:25:25.849', false, '2022-09-02 01:25:25.849', 20, 4, NULL, NULL, NULL);


--
-- Data for Name: user_info; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_info VALUES (1597170473458728960, '2022-11-28 18:08:09.524', false, '2022-11-28 18:08:09.524', 'https://avatars.githubusercontent.com/u/57082013?v=4', NULL, NULL, NULL);
INSERT INTO public.user_info VALUES (1597170473458728961, '2022-11-28 18:08:09.524', false, '2022-11-28 18:08:09.524', 'https://avatars.githubusercontent.com/u/57082013?v=4', NULL, NULL, NULL);
INSERT INTO public.user_info VALUES (1604412387278979072, '2022-12-18 17:44:56.327', false, '2022-12-18 17:44:56.327', 'https://tva4.sinaimg.cn/large/005NWBIgly1h6ffm4ez6bj30fo0fogra.jpg', NULL, NULL, NULL);
INSERT INTO public.user_info VALUES (1604412751394897920, '2022-12-18 17:46:23.137', false, '2022-12-18 17:46:23.137', 'https://tva4.sinaimg.cn/large/005NWBIgly1h6ffm4ez6bj30fo0fogra.jpg', NULL, NULL, NULL);
INSERT INTO public.user_info VALUES (1604413084946923520, '2022-12-18 17:47:42.662', false, '2022-12-18 17:47:42.662', 'https://tva4.sinaimg.cn/large/005NWBIgly1h6ffm4ez6bj30fo0fogra.jpg', NULL, NULL, NULL);
INSERT INTO public.user_info VALUES (1604415137400225792, '2022-12-18 17:55:52.007', false, '2022-12-18 17:55:52.007', 'https://tva4.sinaimg.cn/large/005NWBIgly1h6ffm4ez6bj30fo0fogra.jpg', NULL, NULL, NULL);
INSERT INTO public.user_info VALUES (1604419761658134528, '2022-12-18 18:14:14.517', false, '2022-12-18 18:14:14.517', 'https://tva4.sinaimg.cn/large/005NWBIgly1h6ffm4ez6bj30fo0fogra.jpg', NULL, NULL, NULL);
INSERT INTO public.user_info VALUES (7, '2022-09-22 15:51:35.738', false, '2022-09-22 15:51:35.738', 'https://tvax2.sinaimg.cn/mw690/005NWBIgly1h6mun37jjmj30rs0rsqbv.jpg', '2008-10-03 22:08:15', '1', 'エミリアたんマジ天使！');
INSERT INTO public.user_info VALUES (6, '2022-08-26 21:13:40.243', false, '2022-08-26 21:13:40.243', 'https://tvax1.sinaimg.cn/mw690/005NWBIgly1h6mutoup6cj30u10u0wl8.jpg', '2008-10-03 22:08:15', '1', 'sign');
INSERT INTO public.user_info VALUES (5, '2022-08-26 20:33:42.007', false, '2022-08-26 20:33:42.007', 'https://tva1.sinaimg.cn/large/005NWBIgly1h595eqbwk6j30jh0icgqq.jpg', '2008-10-03 22:08:15', '1', 'sign');
INSERT INTO public.user_info VALUES (4, '2022-08-26 21:13:40.243', false, '2022-10-19 00:01:02.929', 'https://qiniu.dwsy.link/ddl/e01fb835d7cb4a63866c3d06680ca7e2.png?imageMogr2/thumbnail/200x200', '2008-10-03 22:08:15', '0', 'sign');
INSERT INTO public.user_info VALUES (3, '2022-08-26 20:33:42.007', false, '2022-10-09 19:51:02.249', 'https://qiniu.dwsy.link/ddl/039bb69836944bc99e91dca3c906470c.jpg?imageMogr2/thumbnail/200x200', '1970-01-01 08:02:03.123', '0', 'sign123');


--
-- Data for Name: user_message; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_message VALUES (209, '2022-09-30 00:52:34.943', false, '2022-09-30 00:52:35.014', '1', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (212, '2022-09-30 00:54:13.295', false, '2022-09-30 00:54:14.578', '2', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (10, '2022-09-01 23:34:53.532', false, '2022-09-30 11:50:33.37', 'hello hello4', '3_4', 4, 1, 3);
INSERT INTO public.user_message VALUES (8, '2022-09-01 23:34:53.527', false, '2022-09-30 11:50:33.383', 'hello hello3', '3_4', 4, 1, 3);
INSERT INTO public.user_message VALUES (17, '2022-09-28 14:36:47.093', false, '2022-09-30 12:32:56.014', '123', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (16, '2022-09-28 14:36:06.511', false, '2022-09-30 12:32:56.02', '网页发送消息测试', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (56, '2022-09-29 02:06:57.285', false, '2022-09-30 12:32:56.03', '输入消息..1222222222', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (9, '2022-09-01 23:34:53.53', false, '2022-09-30 12:32:56.037', 'hello4', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (216, '2022-09-30 12:37:13.49', false, '2022-09-30 12:37:13.543', '2', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (67, '2022-09-29 02:59:42.655', false, '2022-09-30 00:11:07.533', '333', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (66, '2022-09-29 02:58:12.215', false, '2022-09-30 00:11:07.56', '222', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (64, '2022-09-29 02:53:23.17', false, '2022-09-30 00:11:07.631', '111', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (63, '2022-09-29 02:51:54.82', false, '2022-09-30 00:11:07.686', '333', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (58, '2022-09-29 02:43:57.843', false, '2022-09-30 00:11:08.239', '1', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (57, '2022-09-29 02:43:36.272', false, '2022-09-30 00:11:08.326', 'wstest', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (52, '2022-09-28 16:15:22.902', false, '2022-09-30 00:11:08.496', '图片测试 <img src="https://tva1.sinaimg.cn/large/005NWBIgly1h6am5nluz5j31kw0zv441.jpg"></img>', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (217, '2022-09-30 12:37:23.827', false, '2022-09-30 12:37:23.876', '3', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (171, '2022-09-29 22:11:08.314', false, '2022-09-30 12:37:39.443', '发起了聊天', '4_6', 6, 1, 4);
INSERT INTO public.user_message VALUES (69, '2022-09-29 03:22:09.19', false, '2022-09-30 20:50:01.178', 'fix Test', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (68, '2022-09-29 03:01:32.294', false, '2022-09-30 20:50:01.191', '1111', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (65, '2022-09-29 02:55:16.949', false, '2022-09-30 20:50:01.215', '11111', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (62, '2022-09-29 02:49:18.444', false, '2022-09-30 20:50:01.269', '111', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (61, '2022-09-29 02:47:41.132', false, '2022-09-30 20:50:01.627', 'debug', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (60, '2022-09-29 02:46:08.679', false, '2022-09-30 20:50:01.643', 'debug', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (59, '2022-09-29 02:45:10.971', false, '2022-09-30 20:50:01.655', 'wsTest', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (54, '2022-09-28 19:08:02.942', false, '2022-09-30 20:50:01.672', 'wsTest', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (6, '2022-09-01 23:34:53.522', false, '2022-09-30 20:50:03.519', 'hello hello2', '3_4', 4, 1, 3);
INSERT INTO public.user_message VALUES (4, '2022-09-01 23:34:53.517', false, '2022-09-30 20:50:03.533', 'hello hello1', '3_4', 4, 1, 3);
INSERT INTO public.user_message VALUES (2, '2022-09-01 23:33:59.918', false, '2022-09-30 20:50:03.547', 'hello hello', '3_4', 4, 1, 3);
INSERT INTO public.user_message VALUES (43, '2022-09-28 14:47:34.052', false, '2022-09-30 23:16:08.586', '1231231212312312321312312321', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (44, '2022-09-28 14:47:35.404', false, '2022-09-30 23:16:08.598', '1231231212312312321312312321123123123', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (45, '2022-09-28 15:04:15.458', false, '2022-09-30 23:16:08.624', 'hhh', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (46, '2022-09-28 15:04:22.498', false, '2022-09-30 23:16:08.643', 'http://localhost:3000/messages/chats/5', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (47, '2022-09-28 15:06:03.448', false, '2022-09-30 23:16:08.669', 'http://localhost:3000/messages/chats/5', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (48, '2022-09-28 15:06:39.207', false, '2022-09-30 23:16:08.693', '123asd1实打实口袋巾阿森纳https://www.baidu.com/', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (49, '2022-09-28 15:06:47.554', false, '2022-09-30 23:16:08.698', '123asd1实打实口袋巾阿森纳http://localhost:3000/messages/chats/5', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (206, '2022-09-29 23:06:16.669', false, '2022-09-30 23:16:13.499', '1', '5_6', 6, 1, 5);
INSERT INTO public.user_message VALUES (221, '2022-10-01 00:08:13.501', false, '2022-10-01 00:08:13.547', '1', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (225, '2022-10-01 00:12:04.417', false, '2022-10-01 00:13:48.077', '1', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (228, '2022-10-01 00:19:34.185', false, '2022-10-01 00:19:34.243', '1', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (232, '2022-10-01 00:20:27.48', false, '2022-10-01 00:22:41.729', '', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (231, '2022-10-01 00:20:27.096', false, '2022-10-01 00:22:41.729', '4', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (235, '2022-10-01 00:22:44.051', false, '2022-10-01 00:22:44.102', '333', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (1580408835800039424, '2022-10-13 12:03:23.688', false, '2022-10-13 12:47:36.096', 'NotNull', '4_20', 20, 1, 4);
INSERT INTO public.user_message VALUES (1580408403254050816, '2022-10-13 12:01:40.573', false, '2022-10-13 12:47:37.189', 'NotNull', '4_20', 20, 1, 4);
INSERT INTO public.user_message VALUES (7, '2022-09-01 23:34:53.524', false, '2022-10-15 22:00:05.062', 'hello3', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (5, '2022-09-01 23:34:53.52', false, '2022-10-15 22:00:05.069', 'hello2', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (3, '2022-09-01 23:34:53.461', false, '2022-10-15 22:00:05.096', 'hello1', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (1, '2022-09-01 23:33:59.866', false, '2022-10-15 22:00:05.111', 'hello', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (1583896210022858752, '2022-10-23 03:00:58.511', false, '2022-11-13 13:53:16.929', 'ww', '3_6', 3, 1, 6);
INSERT INTO public.user_message VALUES (1597190035336069120, '2022-11-28 19:25:53.44', false, '2022-11-29 10:30:35.56', '发起了聊天', '20_1597170473374842880', 1597170473374842880, 1, 20);
INSERT INTO public.user_message VALUES (42, '2022-09-28 14:47:32.942', false, '2022-12-06 16:18:59.339', '12312312123123123213', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (41, '2022-09-28 14:47:31.498', false, '2022-12-06 16:18:59.372', '12312312123', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (40, '2022-09-28 14:47:30.002', false, '2022-12-06 16:18:59.571', '12312312', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (30, '2022-09-28 14:38:19.256', false, '2022-12-06 16:18:59.678', 'web test3', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (29, '2022-09-28 14:38:14.41', false, '2022-12-06 16:18:59.683', 'web test2', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (28, '2022-09-28 14:38:11.43', false, '2022-12-06 16:18:59.919', 'web test1', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (27, '2022-09-28 14:37:56.046', false, '2022-12-06 16:18:59.949', 'web test', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (26, '2022-09-28 14:37:55.927', false, '2022-12-06 16:18:59.965', 'web test', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (25, '2022-09-28 14:37:55.784', false, '2022-12-06 16:18:59.98', 'web test', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (24, '2022-09-28 14:37:55.548', false, '2022-12-06 16:19:00.002', 'web test', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (23, '2022-09-28 14:37:55.3', false, '2022-12-06 16:19:00.252', 'web test', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (22, '2022-09-28 14:37:54.883', false, '2022-12-06 16:19:00.289', 'web test', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (21, '2022-09-28 14:37:54.56', false, '2022-12-06 16:19:00.319', 'web test', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (20, '2022-09-28 14:37:53.957', false, '2022-12-06 16:19:00.386', 'web test', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (19, '2022-09-28 14:37:52.861', false, '2022-12-06 16:19:00.396', 'web test', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (11, '2022-09-02 14:09:35.068', false, '2022-12-06 16:19:00.482', '3->5', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (55, '2022-09-29 02:06:01.208', false, '2022-09-30 12:32:56.024', 'wsTest', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (83, '2022-09-29 04:12:19.508', false, '2022-09-30 00:52:22.891', '999', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (88, '2022-09-29 04:18:13.514', false, '2022-09-30 00:52:22.893', 'rty', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (87, '2022-09-29 04:16:44.767', false, '2022-09-30 00:52:22.891', 'zxc', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (85, '2022-09-29 04:13:42.404', false, '2022-09-30 00:52:22.891', 'qwe', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (210, '2022-09-30 00:53:48.291', false, '2022-09-30 00:53:48.349', 'readTest', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (213, '2022-09-30 12:34:00.115', false, '2022-09-30 12:34:08.396', '1', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (214, '2022-09-30 12:34:12.464', false, '2022-09-30 12:34:45.709', '1', '3_4', 4, 1, 3);
INSERT INTO public.user_message VALUES (89, '2022-09-29 04:20:01.268', false, '2022-09-29 04:20:01.268', 'Dynamic typing is crap', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (86, '2022-09-29 04:15:27.391', false, '2022-09-30 00:05:17.526', 'asd', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (84, '2022-09-29 04:13:11.334', false, '2022-09-30 00:05:17.526', '111', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (81, '2022-09-29 04:08:44.253', false, '2022-09-30 00:06:34.371', '123', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (80, '2022-09-29 04:07:50.372', false, '2022-09-30 00:06:48.782', '1111', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (79, '2022-09-29 04:07:41.283', false, '2022-09-30 00:06:48.887', '123', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (77, '2022-09-29 04:04:49.85', false, '2022-09-30 00:06:49.195', '777', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (70, '2022-09-29 03:22:56.375', false, '2022-09-30 00:11:06.729', 'fixTest', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (207, '2022-09-29 23:06:54.451', false, '2022-09-30 00:12:10.379', '33', '6_20', 20, 1, 6);
INSERT INTO public.user_message VALUES (172, '2022-09-29 22:11:44.751', false, '2022-09-30 12:37:39.442', '123', '4_6', 6, 1, 4);
INSERT INTO public.user_message VALUES (218, '2022-09-30 12:37:42.322', false, '2022-09-30 12:37:43.827', '4', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (82, '2022-09-29 04:09:40.041', false, '2022-09-30 20:50:00.385', '312', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (78, '2022-09-29 04:07:29.394', false, '2022-09-30 20:50:00.801', '123', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (76, '2022-09-29 04:03:26.435', false, '2022-09-30 20:50:00.827', '666', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (75, '2022-09-29 04:03:04.836', false, '2022-09-30 20:50:00.845', '555', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (74, '2022-09-29 03:38:12.276', false, '2022-09-30 20:50:00.852', '444', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (73, '2022-09-29 03:35:49.041', false, '2022-09-30 20:50:00.894', '333', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (72, '2022-09-29 03:34:52.356', false, '2022-09-30 20:50:00.902', 'TTT', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (71, '2022-09-29 03:26:11.786', false, '2022-09-30 20:50:01.15', 'ffffff', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (1598584629042872320, '2022-12-02 15:47:30.487', false, '2022-12-02 17:11:27.437', '注销测试', '3_1597170473374842881', 1597170473374842881, 1, 3);
INSERT INTO public.user_message VALUES (1598584649993420800, '2022-12-02 15:47:35.482', false, '2022-12-02 17:11:27.437', '😗😄🤩🙂', '3_1597170473374842881', 1597170473374842881, 1, 3);
INSERT INTO public.user_message VALUES (222, '2022-10-01 00:08:42.083', false, '2022-10-01 00:08:42.19', '2', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (223, '2022-10-01 00:08:44.287', false, '2022-10-01 00:08:44.347', '2', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (226, '2022-10-01 00:15:43.179', false, '2022-10-01 00:15:43.256', '1', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (229, '2022-10-01 00:19:40.006', false, '2022-10-01 00:19:40.056', '2', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (233, '2022-10-01 00:20:32.94', false, '2022-10-01 00:22:41.729', '5', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (204, '2022-09-29 22:58:40.525', false, '2022-10-02 19:53:01.533', '发起了聊天', '4_20', 20, 1, 4);
INSERT INTO public.user_message VALUES (1580408640089620480, '2022-10-13 12:02:37.027', false, '2022-10-13 12:47:36.096', 'NotNullNotNull', '4_20', 20, 1, 4);
INSERT INTO public.user_message VALUES (1580414478124580864, '2022-10-13 12:25:48.936', false, '2022-10-13 12:47:36.096', 'test', '4_20', 20, 1, 4);
INSERT INTO public.user_message VALUES (1597190093553008640, '2022-11-28 19:26:07.317', false, '2022-11-29 10:30:35.546', '123', '20_1597170473374842880', 1597170473374842880, 1, 20);
INSERT INTO public.user_message VALUES (1597190167632805888, '2022-11-28 19:26:24.979', false, '2022-11-29 10:30:35.546', '😗', '20_1597170473374842880', 1597170473374842880, 1, 20);
INSERT INTO public.user_message VALUES (1599371025756192768, '2022-12-04 19:52:22.09', false, '2022-12-06 15:16:52.598', '2', '3_6', 3, 1, 6);
INSERT INTO public.user_message VALUES (1600026603977441280, '2022-12-06 15:17:24.103', false, '2022-12-06 15:17:24.164', '1', '3_6', 6, 1, 3);
INSERT INTO public.user_message VALUES (1600026611925647360, '2022-12-06 15:17:25.997', false, '2022-12-06 15:17:26.048', '2', '3_6', 6, 1, 3);
INSERT INTO public.user_message VALUES (1600026646801285120, '2022-12-06 15:17:34.312', false, '2022-12-06 15:17:34.368', '1', '3_6', 6, 1, 3);
INSERT INTO public.user_message VALUES (1600026674517245952, '2022-12-06 15:17:40.92', false, '2022-12-06 15:17:40.979', '1', '3_6', 6, 1, 3);
INSERT INTO public.user_message VALUES (1600026684495495168, '2022-12-06 15:17:43.299', false, '2022-12-06 15:17:43.345', '2', '3_6', 6, 1, 3);
INSERT INTO public.user_message VALUES (1600026864418553856, '2022-12-06 15:18:26.197', false, '2022-12-06 15:18:26.25', '1', '3_6', 6, 1, 3);
INSERT INTO public.user_message VALUES (1600026945381203968, '2022-12-06 15:18:45.499', false, '2022-12-06 15:18:45.546', '1', '3_6', 3, 1, 6);
INSERT INTO public.user_message VALUES (18, '2022-09-28 14:37:18.489', false, '2022-12-06 16:19:00.441', '                this.scrollBottom()', '3_5', 3, 1, 5);
INSERT INTO public.user_message VALUES (1602237486984069120, '2022-12-12 17:42:39.687', false, '2022-12-13 12:54:12.237', 'img||https://tva1.sinaimg.cn/large/005NWBIgly1h64egkbgepj30cq0e8jve.jpg', '3_5', 5, 1, 3);
INSERT INTO public.user_message VALUES (1605859931003551744, '2022-12-22 17:36:57.643', false, '2023-03-05 12:03:34.649', 'img||http://qiniu.dwsy.link/ddl/00633c4c350b4f128764a18b47d35f41.png?imageMogr2', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (1649267786733584384, '2023-04-21 12:24:16.932', false, '2023-04-21 12:24:17.018', 'md||# test', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (1649270501966610432, '2023-04-21 12:35:04.294', false, '2023-04-21 12:35:04.362', '123', '3_4', 4, 1, 3);
INSERT INTO public.user_message VALUES (1649270528558497792, '2023-04-21 12:35:10.63', false, '2023-04-21 12:35:10.683', '123', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (211, '2022-09-30 00:54:10.085', false, '2022-09-30 00:54:14.607', '1', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (170, '2022-09-29 22:11:00.016', false, '2022-09-30 11:50:32.933', '333', '3_6', 6, 1, 3);
INSERT INTO public.user_message VALUES (169, '2022-09-29 22:10:51.661', false, '2022-09-30 11:50:32.936', '发起了聊天', '3_6', 6, 1, 3);
INSERT INTO public.user_message VALUES (215, '2022-09-30 12:37:11.419', false, '2022-09-30 12:37:11.528', '1', '3_4', 4, 1, 3);
INSERT INTO public.user_message VALUES (205, '2022-09-29 23:00:36.955', false, '2022-09-30 23:16:12.415', '发起了聊天', '5_20', 20, 1, 5);
INSERT INTO public.user_message VALUES (173, '2022-09-29 22:11:50.478', false, '2022-09-30 23:16:13.481', '发起了聊天', '5_6', 6, 1, 5);
INSERT INTO public.user_message VALUES (219, '2022-10-01 00:07:49.727', false, '2022-10-01 00:07:51.745', '3', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (220, '2022-10-01 00:08:01.113', false, '2022-10-01 00:08:01.177', '1', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (168, '2022-09-29 22:10:36.472', false, '2022-09-30 00:12:17.293', '123', '6_20', 6, 1, 20);
INSERT INTO public.user_message VALUES (167, '2022-09-29 22:08:59.531', false, '2022-09-30 00:12:17.298', '发起了聊天', '6_20', 6, 1, 20);
INSERT INTO public.user_message VALUES (208, '2022-09-29 23:07:08.044', false, '2022-09-30 00:12:17.307', '11', '6_20', 6, 1, 20);
INSERT INTO public.user_message VALUES (224, '2022-10-01 00:09:08.785', false, '2022-10-01 00:09:08.868', '1', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (227, '2022-10-01 00:17:52.502', false, '2022-10-01 00:19:28.54', '1', '3_20', 20, 1, 3);
INSERT INTO public.user_message VALUES (230, '2022-10-01 00:20:10.653', false, '2022-10-01 00:22:41.729', '3', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (234, '2022-10-01 00:21:20.13', false, '2022-10-01 00:22:41.729', '1', '3_20', 3, 1, 20);
INSERT INTO public.user_message VALUES (1580408708658102272, '2022-10-13 12:02:53.376', false, '2022-10-13 12:47:36.096', 'NotNull', '4_20', 20, 1, 4);
INSERT INTO public.user_message VALUES (1597192780294127616, '2022-11-28 19:36:47.901', false, '2022-11-29 10:30:35.555', '123', '20_1597170473374842880', 1597170473374842880, 1, 20);
INSERT INTO public.user_message VALUES (1598584596662845440, '2022-12-02 15:47:22.77', false, '2022-12-02 17:11:27.437', '发起了聊天', '3_1597170473374842881', 1597170473374842881, 1, 3);
INSERT INTO public.user_message VALUES (1599371046744489984, '2022-12-04 19:52:27.078', false, '2022-12-06 15:16:52.597', '3', '3_6', 3, 1, 6);
INSERT INTO public.user_message VALUES (1599370963470778368, '2022-12-04 19:52:07.239', false, '2022-12-06 15:16:52.598', '1', '3_6', 3, 1, 6);
INSERT INTO public.user_message VALUES (1600026520636620800, '2022-12-06 15:17:04.234', false, '2022-12-06 15:17:04.301', '1', '3_6', 6, 1, 3);
INSERT INTO public.user_message VALUES (1600026807673815040, '2022-12-06 15:18:12.667', false, '2022-12-06 15:18:12.734', '1', '3_6', 6, 1, 3);
INSERT INTO public.user_message VALUES (1600026875009171456, '2022-12-06 15:18:28.721', false, '2022-12-06 15:18:28.776', '2', '3_6', 6, 1, 3);
INSERT INTO public.user_message VALUES (1600026906055409664, '2022-12-06 15:18:36.123', false, '2022-12-06 15:18:36.182', '3', '3_6', 6, 1, 3);
INSERT INTO public.user_message VALUES (1600026922664853504, '2022-12-06 15:18:40.083', false, '2022-12-06 15:18:40.13', '44', '3_6', 6, 1, 3);
INSERT INTO public.user_message VALUES (1600026977652178944, '2022-12-06 15:18:53.193', false, '2022-12-06 15:18:53.238', '2', '3_6', 3, 1, 6);
INSERT INTO public.user_message VALUES (1600027016390770688, '2022-12-06 15:19:02.429', false, '2022-12-06 15:19:02.478', '1', '3_6', 6, 1, 3);
INSERT INTO public.user_message VALUES (1602237652856209408, '2022-12-12 17:43:19.234', false, '2022-12-13 12:54:12.237', 'img||https://tva1.sinaimg.cn/large/005NWBIgly1h4jkcbyrs2j31f035ib29.jpg', '3_5', 5, 1, 3);
INSERT INTO public.user_message VALUES (1602236433827889152, '2022-12-12 17:38:28.597', false, '2022-12-13 12:54:12.237', 'md||# Test1
## Test2', '3_5', 5, 1, 3);
INSERT INTO public.user_message VALUES (1602954466162638848, '2022-12-14 17:11:40.846', false, '2022-12-16 14:59:30.826', '😃', '3_5', 5, 1, 3);
INSERT INTO public.user_message VALUES (1605857418720313344, '2022-12-22 17:26:58.682', false, '2023-03-05 12:03:34.645', 'img||http://qiniu.dwsy.link/ddl/5591218de91e4002b046b7493f15c0cd.png?imageMogr2', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (1605861156931502080, '2022-12-22 17:41:49.927', false, '2023-03-05 12:03:34.664', 'img||http://qiniu.dwsy.link/ddl/b6b8759ddefd4b509574342fbdcff916.png?imageMogr2', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (1632230661790105600, '2023-03-05 12:04:49.808', false, '2023-03-05 12:04:49.895', '发送消息', '3_4', 4, 1, 3);
INSERT INTO public.user_message VALUES (1646855941527699456, '2023-04-14 20:40:28.223', false, '2023-04-21 10:52:22.203', '12312', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (1649244627766607872, '2023-04-21 10:52:15.403', false, '2023-04-21 10:52:22.205', '123', '3_4', 3, 1, 4);
INSERT INTO public.user_message VALUES (1649267824830447616, '2023-04-21 12:24:26.011', false, '2023-04-21 12:24:26.053', '🤗😣🤩🤩🤩🤩🤩🤩', '3_4', 4, 1, 3);
INSERT INTO public.user_message VALUES (1744017171874316288, '2024-01-07 23:24:30.709', false, '2024-01-07 23:24:30.709', 'img||http://qiniu.dwsy.link/ddl/78a1920d6c244535bd06f6134add0bbc.png?imageMogr2', '3_4', 3, 0, 4);


--
-- Data for Name: user_notify; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_notify VALUES (1603313760666124288, '2022-12-15 16:59:23.353', false, '2022-12-15 16:59:23.353', NULL, NULL, NULL, '1', 3, 15, NULL, '🤗', 5, NULL, 0, NULL, false, 1603313760120864768, 1602338399681773568);
INSERT INTO public.user_notify VALUES (1602954025865576448, '2022-12-14 17:09:55.869', false, '2022-12-16 14:59:41.378', NULL, NULL, NULL, NULL, 5, 14, NULL, '123', 3, NULL, 1, NULL, false, NULL, 1596088957441933312);
INSERT INTO public.user_notify VALUES (1600360364405424128, '2022-12-07 13:23:38.792', false, '2022-12-07 13:23:38.792', NULL, 114, -1, NULL, 3, 2, NULL, 'title', 20, NULL, 0, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (58, '2022-10-09 19:44:42.541', false, '2022-11-12 13:45:15.14', NULL, 9, 74, 'qqq', 3, 1, NULL, 'kkk', 4, 154, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1587535462308773888, '2022-11-02 04:02:03.855', false, '2022-11-03 11:31:20.442', NULL, NULL, NULL, '回复@EMT：2', 20, 6, 4, 'replace every letter except the last one using regex', 3, NULL, 1, 1587535462203916288, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (34, '2022-09-30 21:41:51.879', false, '2022-10-24 22:59:14.127', NULL, 11, 51, 'r b', 4, 1, NULL, 'pinia Test', 3, 125, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (53, '2022-10-02 19:38:39.976', false, '2022-10-24 22:59:14.12', NULL, 9, 7, '评论测试 <script>alert(/XSS/)</script>', 4, 1, NULL, '评论测试', 3, 146, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1598240898615869440, '2022-12-01 17:01:38.768', false, '2022-12-07 15:20:11.831', NULL, 1580605959804289024, 1581489737602957312, NULL, 20, 3, NULL, 'www', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1590433708039471104, '2022-11-10 03:58:39.483', false, '2022-11-13 13:53:03.274', NULL, NULL, NULL, 'replace every letter except the last one using regex', 3, 10, 4, NULL, 6, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1602954099253313536, '2022-12-14 17:10:13.367', false, '2022-12-16 14:59:42.126', NULL, NULL, NULL, 'r', 5, 15, NULL, '123', 3, NULL, 1, NULL, false, 1602954099223953408, 1596088957441933312);
INSERT INTO public.user_notify VALUES (1591343014553321472, '2022-11-12 16:11:55.05', false, '2022-11-12 16:18:55.11', 1591342961742839808, NULL, NULL, '发起提问2', 3, 11, 2, '采纳回答通知测试

', 20, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1604789287654522880, '2022-12-19 18:42:36.392', false, '2022-12-19 21:22:05.046', NULL, 1599743283574079488, -1, NULL, 4, 2, NULL, '"Markdown语法介绍"', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1604440248631164928, '2022-12-18 19:35:38.989', false, '2022-12-19 21:22:05.938', NULL, 11, 0, '2', 1597170473374842880, 0, NULL, 'title', 3, 1604440248576638976, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (37, '2022-09-30 22:34:44.75', false, '2022-11-12 13:45:15.173', NULL, 9, 117, '二级回复@通知测试 3！！！', 20, 1, NULL, '评论测试 <script>alert(/XSS/)</script>', 4, 131, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (45, '2022-09-30 22:52:28.86', false, '2022-11-02 03:51:48.448', NULL, 9, 137, 'emt!', 4, 1, NULL, '回复@Sumi：回复Vuetify 是一个纯手工精心打造的 Material 样式的 Vue UI 组件库。测试！', 20, 142, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (62, '2022-10-09 22:29:14.536', false, '2022-11-02 03:51:48.444', NULL, 9, 133, 'eee', 3, 1, NULL, '回复@EMT：二级回复@通知测试 2', 20, 162, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1604440242075467776, '2022-12-18 19:35:37.426', false, '2022-12-19 21:22:06.01', NULL, 11, 0, '1', 1597170473374842880, 0, NULL, 'title', 3, 1604440241744117760, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (47, '2022-09-30 22:55:35.08', false, '2022-11-02 03:54:15.928', NULL, 9, 137, NULL, 4, 3, NULL, '回复@Sumi：回复Vuetify 是一个纯手工精心打造的 Material 样式的 Vue UI 组件库。测试！', 20, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1584433358144798720, '2022-10-24 14:35:24.587', false, '2022-10-24 23:11:43.918', NULL, 93, 1584433253673074688, NULL, 4, 3, NULL, 'del1123', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1597169759537856512, '2022-11-28 18:05:19.325', false, '2022-12-02 00:23:08.294', NULL, 9, -1, NULL, 1597168569714475008, 2, NULL, 'Go 语言的参考手册 1', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589864462062452736, '2022-11-08 14:16:40.666', false, '2022-11-08 16:52:11.523', NULL, NULL, NULL, '123213
    public boolean delDocById(long aid) {
        try {
            client.delete(req -> req.index(INDEX).id(String.valueOf(aid)));
        } catch (IOException e) {
            log.info("删除失败 ', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589864461986955264, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589904053926625280, '2022-11-08 16:54:00.102', false, '2022-11-08 16:54:05.58', NULL, NULL, NULL, 'page test
', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589904053851127808, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589864161704148992, '2022-11-08 14:15:29.055', false, '2022-11-08 16:52:11.55', NULL, NULL, NULL, '123
123123

', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589864161624457216, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1601531504536584192, '2022-12-10 18:57:20.359', false, '2023-04-09 09:04:57.307', NULL, 10, -1, NULL, 3, 2, NULL, 'title', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1598583992846647296, '2022-12-02 15:44:58.806', false, '2022-12-02 17:02:59.873', -1, NULL, NULL, NULL, 1597170473374842881, 8, 1, '什么是 WebAssembly(wasm)？', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1587536144352935936, '2022-11-02 04:04:46.466', false, '2022-11-03 11:31:20.434', NULL, NULL, NULL, '回复@Dwsy：4', 20, 6, 4, 'replace every letter except the last one using regex', 3, NULL, 1, 1587536144256466944, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589904056145412096, '2022-11-08 16:54:00.632', false, '2022-11-08 16:54:05.575', NULL, NULL, NULL, 'page test
', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589904056078303232, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589864496522854400, '2022-11-08 14:16:48.882', false, '2022-11-08 16:52:11.513', NULL, NULL, NULL, '123213
    private final String INDEX = QuestionSearchConstants.INDEX;
    @Resource
    ArticleFieldRepository articleFieldRepository;
    @Resource
    private QaQuestionFieldRepository qaQuestionFi', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589864496451551232, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (29, '2022-09-30 19:40:12.12', false, '2022-10-24 22:59:29.852', NULL, 9, NULL, '渐进式
JavaScript 框架
易学易用，性能出色，适用场景丰富的 Web 前端框架。', 4, 0, NULL, 'Go 语言的参考手册 ', 3, 118, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (52, '2022-09-30 23:17:20.908', false, '2022-11-12 13:48:16.249', NULL, 9, 142, NULL, 5, 3, NULL, '回复@EMT：emt!', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (56, '2022-10-09 19:43:18.988', false, '2022-12-06 16:18:50.499', NULL, 9, 143, 'ttt', 3, 1, NULL, '回复@Sumi：好', 5, 152, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1599371988676116480, '2022-12-04 19:56:11.652', false, '2022-12-04 19:56:11.652', NULL, 9, 131, NULL, 3, 3, NULL, '回复@Sumi：二级回复@通知测试 3！！！', 20, NULL, 0, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (32, '2022-09-30 21:03:47.743', false, '2022-11-12 13:48:16.253', NULL, 11, 120, NULL, 3, 3, NULL, 'aaa', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (39, '2022-09-30 22:49:12.781', false, '2022-11-12 13:45:15.162', NULL, 11, 125, '二级回复@通知测试 2', 20, 1, NULL, 'pinia Test', 4, 135, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1600786848865583104, '2022-12-08 17:38:20.608', false, '2023-04-09 09:04:59.331', NULL, NULL, NULL, '什么是 WebAssembly(wasm)？', 3, 10, 1, NULL, 4, NULL, 1, NULL, true, NULL, NULL);
INSERT INTO public.user_notify VALUES (1632224774035865600, '2023-03-05 11:41:26.102', false, '2023-04-09 09:07:49.083', NULL, NULL, NULL, '每1k个token的价格为0.002美元，比现有的GPT-3.5模型便宜10倍！', 3, 15, NULL, '免费使用GPT3.5-turbo 大家快来试试吧 https://freegpt.one/', 3, NULL, 1, NULL, false, 1632224773444468736, 1632222360327159808);
INSERT INTO public.user_notify VALUES (1646687867222622208, '2023-04-14 09:32:36.188', false, '2023-04-14 20:40:15.019', -1, NULL, NULL, NULL, 4, 8, 1598959826694569984, '有哪些值得阅读学习、代码优雅的小型 Rust 项目？', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1649244076454707200, '2023-04-21 10:50:03.961', false, '2023-04-21 10:52:05.305', 1646693219276161024, NULL, NULL, '123', 4, 7, 1598959826694569984, '推荐一下陈天老师的极客时间课程的代码： https://github.com/tyrchen/geektime-rust 课程是需要花钱才能看的，但是代码是公开的。按照陈天老师的写法，这些代码都是基于开闭原则编写的，所有项目先根据业务要求实现 traits, 再写具体实现，并且完整的项目基本都带有测试用例以及 examples，代码中应用了很多 rust 中流行的第三方 crates,.
', 3, NULL, 1, 1649244075678760960, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1646855740909944832, '2023-04-14 20:39:40.395', false, '2023-04-21 10:59:13.008', NULL, NULL, NULL, NULL, 3, 14, NULL, '感谢分享。', 4, NULL, 1, NULL, false, 1632225194653253632, 1632222360327159808);
INSERT INTO public.user_notify VALUES (1644869741124255744, '2023-04-09 09:08:01.143', false, '2024-01-07 23:23:31.169', NULL, NULL, NULL, NULL, 3, 14, NULL, '每1k个token的价格为0.002美元，比现有的GPT-3.5模型便宜10倍！', 3, NULL, 1, NULL, false, 1632224773444468736, 1632222360327159808);
INSERT INTO public.user_notify VALUES (54, '2022-10-02 19:46:27.224', false, '2022-10-24 22:59:14.117', NULL, 10, 37, 'alert("123")', 20, 1, NULL, '评论test11', 3, 148, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (48, '2022-09-30 22:55:35.318', false, '2022-11-02 03:54:15.925', NULL, 9, 137, NULL, 4, 3, NULL, '回复@Sumi：回复Vuetify 是一个纯手工精心打造的 Material 样式的 Vue UI 组件库。测试！', 20, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (50, '2022-09-30 22:55:36.25', false, '2022-11-02 03:54:15.917', NULL, 9, 137, NULL, 4, 3, NULL, '回复@Sumi：回复Vuetify 是一个纯手工精心打造的 Material 样式的 Vue UI 组件库。测试！', 20, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (68, '2022-10-10 17:03:01.423', false, '2022-11-12 13:48:16.236', NULL, 9, 74, NULL, 20, 3, NULL, 'kkk', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1603316787263307776, '2022-12-15 17:11:24.926', false, '2022-12-15 17:11:24.926', NULL, NULL, NULL, '123', 3, 15, NULL, '🤗', 5, NULL, 0, NULL, false, 1603316787187810304, 1602338399681773568);
INSERT INTO public.user_notify VALUES (1602954153183674368, '2022-12-14 17:10:26.224', false, '2022-12-16 14:59:36.65', NULL, 1599743283574079488, -1, NULL, 5, 2, NULL, '"Markdown语法介绍"', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1632225194699390976, '2023-03-05 11:43:06.351', false, '2023-04-09 09:07:49.071', NULL, NULL, NULL, '感谢分享。', 4, 16, NULL, '免费使用GPT3.5-turbo 大家快来试试吧 https://freegpt.one/', 3, NULL, 1, NULL, false, 1632225194653253632, 1632224773444468736);
INSERT INTO public.user_notify VALUES (1646693427296862208, '2023-04-14 09:54:41.809', false, '2023-04-14 20:40:10.329', 0, NULL, NULL, '推荐一下陈天老师的极客时间课程的代码： https://github.com/tyrchen/geektime-rust 课程是需要花钱才能看的，但是代码是公开的。按照陈天老师的写法，这些代码都是基于开闭原则编写的，所有项目先根据业务要求实现 traits, 再写具体实现，并且完整的项目基本都带有测试用例以及 examples，代码中应用了很多 rust 中流行的第三方 crates.
', 4, 5, 1598959826694569984, '有哪些值得阅读学习、代码优雅的小型 Rust 项目？', 3, NULL, 1, 1646693427196198912, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1646857621661024256, '2023-04-14 20:47:08.796', false, '2023-04-21 11:22:41.258', 1646693219276161024, NULL, NULL, NULL, 4, 9, 1598959826694569984, '推荐一下陈天老师的极客时间课程的代码： https://github.com/tyrchen/geektime-rust 课程是需要花钱才能看的，但是代码是公开的。按照陈天老师的写法，这些代码都是基于开闭原则编写的，所有项目先根据业务要求实现 traits, 再写具体实现，并且完整的项目基本都带有测试用例以及 examples，代码中应用了很多 rust 中流行的第三方 crates,.
', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1598314765644464128, '2022-12-01 21:55:10.092', false, '2022-12-02 00:07:47.421', -1, NULL, NULL, NULL, 1597170473374842880, 8, 1, '什么是 WebAssembly(wasm)？', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1591500325280284672, '2022-11-13 02:37:00.85', false, '2022-11-15 01:14:31.941', -1, NULL, NULL, NULL, 4, 8, 1, '什么是 WebAssembly(wasm)？', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (96, '2022-10-12 12:08:43.62', false, '2022-10-24 22:59:14.101', NULL, 10, 38, 'commentSerialNumber Test 2', 4, 1, NULL, '评论test2', 3, 181, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1580405295920709632, '2022-10-13 11:49:19.715', false, '2022-11-12 13:48:16.22', NULL, 9, 95, NULL, 20, 3, NULL, '操作复数
有三个函数可以组装或者分解复数。内置函数 complex 会构造一个复数，real 和 imag 会分解出复数的实部和虚部。

complex(realPart, imaginaryPart floatT) complexT
real(complexT) floatT
imag(complexT) floatT
参数的类型和返回值类型是对应的。对于 complex，两个参数必须是相同的浮点类型，并返回由相同浮点数组成的复数类型。complex64 是 float32 对应的类型，complex128 是 float64 对应的参数类型。如果参数是一个无类型常量，它会转换成另一个参数的类型。如果两个参数都是无类型常量，他们必须实数或者虚数部分为零，并且它会返回一个无类型的复数常量。

real 和 imag 函数和 complex 正好相反的，所以对于一个值复数类型 Z 的值 z，z==Z(complex(real(z),imag(z)))。

如果这么操作都是常量，那么返回的值也是常量。

var a = complex(2, -2)             // complex128
const b = complex(1.0, -1.4)       // untyped complex constant 1 - 1.4i
x := float32(math.Cos(math.Pi/2))  // float32
var c64 = complex(5, -x)           // complex64
var s uint = complex(1, 0)         // untyped complex constant 1 + 0i can be converted to uint
_ = complex(1, 2<~
', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1581489737728786432, '2022-10-16 11:38:30.79', false, '2022-11-02 03:51:48.394', NULL, 1580605959804289024, NULL, 'www', 4, 0, NULL, 'Test', 20, 1581489737602957312, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1597186148466163712, '2022-11-28 19:10:26.735', false, '2022-12-02 00:08:18.647', NULL, 9, -1, NULL, 1597170473374842880, 2, NULL, 'Go 语言的参考手册 1', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1584422217951739904, '2022-10-24 13:51:08.578', false, '2022-11-12 13:45:15.106', NULL, 10, NULL, '123', 3, 0, NULL, 'title', 4, 1584422217242902528, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1649246665120415744, '2023-04-21 11:00:21.143', false, '2024-01-07 23:23:49.733', NULL, NULL, NULL, '123', 4, 15, NULL, '免费使用GPT3.5-turbo 大家快来试试吧 https://freegpt.one/', 3, NULL, 1, NULL, false, 1649246664621293568, 1632222360327159808);
INSERT INTO public.user_notify VALUES (1600787074951151616, '2022-12-08 17:39:14.511', false, '2022-12-08 17:39:32.494', NULL, NULL, NULL, '什么是 WebAssembly(wasm)？', 3, 10, 1, NULL, 20, NULL, 0, NULL, true, NULL, NULL);
INSERT INTO public.user_notify VALUES (1600105554636701696, '2022-12-06 20:31:07.406', false, '2022-12-14 15:08:34.553', NULL, NULL, NULL, 'notify test1', 4, 15, NULL, '"Markdown语法介绍"
"README
该文件用来测试和展示书写README的各种markdown语法。GitHub的markdown语法在标准的markdown语法基础上做了扩充，称之为GitHub Flavored Markdown。简称GFM，GFM在GitHub上有广泛应用，除了README文件外，issues和wiki均支持markdown语法。
横线
***、—、___可以显示横线效果
标题
一级标题
二级标', 3, NULL, 1, NULL, false, 1600105554603147264, 1599743284450689024);
INSERT INTO public.user_notify VALUES (1597547707684093952, '2022-11-29 19:07:09.17', false, '2022-12-06 20:36:58.705', NULL, NULL, NULL, 'question1', 1597170473374842880, 10, 1597173744193765376, NULL, 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1584433362603343872, '2022-10-24 14:35:25.65', false, '2022-10-24 23:11:43.907', NULL, 93, 1584433268663517184, NULL, 4, 3, NULL, 'del1231233123', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (65, '2022-10-10 16:55:33.873', false, '2022-10-24 23:11:43.937', NULL, 9, 1, NULL, 20, 3, NULL, '评论测试 <script>alert(/XSS/)</script>', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1598575839480381440, '2022-12-02 15:12:34.893', false, '2022-12-02 15:41:11.974', NULL, 9, -1, NULL, 1597170473374842881, 2, NULL, 'Go 语言的参考手册 1', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (97, '2022-10-12 12:08:55.46', false, '2022-11-02 03:51:48.42', NULL, 10, 148, 'commentSerialNumber Test 9', 4, 1, NULL, '回复@Dwsy： <script>alert("123")</script>', 20, 182, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1598575884351045632, '2022-12-02 15:12:45.59', false, '2022-12-02 15:40:59.338', NULL, 9, NULL, '注销测试', 1597170473374842881, 0, NULL, 'Go 语言的参考手册 1', 3, 1598575884283936768, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (18, '2022-09-30 19:37:54.684', false, '2022-10-24 22:59:29.865', NULL, 17, NULL, 'www', 4, 0, NULL, 'title', 3, 104, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1603322050984804352, '2022-12-15 17:32:19.895', false, '2022-12-15 17:32:19.895', NULL, NULL, NULL, NULL, 3, 14, NULL, '🤗', 5, NULL, 0, NULL, false, NULL, 1602338399681773568);
INSERT INTO public.user_notify VALUES (1603322078956617728, '2022-12-15 17:32:26.564', false, '2022-12-15 17:32:26.564', NULL, NULL, NULL, '123', 3, 15, NULL, '🤗', 5, NULL, 0, NULL, false, 1603322078889508864, 1602338399681773568);
INSERT INTO public.user_notify VALUES (19, '2022-09-30 19:38:04.621', false, '2022-10-24 23:11:49.187', NULL, 9, 71, NULL, 4, 3, NULL, '33', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (23, '2022-09-30 19:38:14.41', false, '2022-10-24 23:11:43.949', NULL, 9, 23, NULL, 4, 3, NULL, '评论测试～', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1602954187958648832, '2022-12-14 17:10:34.515', false, '2022-12-16 14:59:35.467', NULL, 1599743283574079488, 0, '123', 5, 0, NULL, '"Markdown语法介绍"', 3, 1602954187816042496, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1600372538712522752, '2022-12-07 14:12:01.37', false, '2022-12-07 14:12:01.37', 1598583941625806848, NULL, NULL, NULL, 3, 9, 1, '注销测试
', 1597170473374842881, NULL, 0, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1599413985524842496, '2022-12-04 22:43:04.498', false, '2022-12-07 15:20:11.826', NULL, 9, 76, NULL, 3, 3, NULL, 'www', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (93, '2022-10-12 12:01:09.724', false, '2022-10-24 22:59:14.11', NULL, 9, NULL, 'commentSerialNumber Test 21', 4, 0, NULL, 'Go 语言的参考手册 ', 3, 178, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1600787156211597312, '2022-12-08 17:39:33.885', false, '2023-04-09 09:04:59.328', NULL, NULL, NULL, '什么是 WebAssembly(wasm)？', 3, 10, 1, NULL, 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (20, '2022-09-30 19:38:08.154', false, '2022-10-24 23:11:49.184', NULL, 9, 28, NULL, 4, 3, NULL, '？？？', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (63, '2022-10-09 22:30:32.044', false, '2022-11-12 13:45:15.128', NULL, 11, 120, 'www', 3, 1, NULL, 'aaa', 4, 163, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (30, '2022-09-30 21:01:58.936', false, '2022-10-24 22:59:14.134', NULL, 91, NULL, 'ttt', 4, 0, NULL, 'title', 3, 119, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1591317652431699968, '2022-11-12 14:31:08.25', false, '2022-11-12 14:37:13.892', NULL, NULL, NULL, '采纳回答测试
', 4, 5, 2, '发起提问2', 3, NULL, 1, 1591317651454427136, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1591504761306218496, '2022-11-13 02:54:38.481', false, '2022-11-15 01:14:31.921', -1, NULL, NULL, NULL, 20, 8, 3, '发起提问3', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589904050613125120, '2022-11-08 16:53:59.312', false, '2022-11-08 16:54:05.595', NULL, NULL, NULL, 'page test
', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589904050571182080, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1646693682855804928, '2023-04-14 09:55:42.739', false, '2023-04-21 10:50:06.445', 1646693427196198912, NULL, NULL, '有哪些值得阅读学习、代码优雅的小型 Rust 项目？', 3, 11, 1598959826694569984, '推荐一下陈天老师的极客时间课程的代码： https://github.com/tyrchen/geektime-rust 课程是需要花钱才能看的，但是代码是公开的。按照陈天老师的写法，这些代码都是基于开闭原则编写的，所有项目先根据业务要求实现 traits, 再写具体实现，并且完整的项目基本都带有测试用例以及 examples，代码中应用了很多 rust 中流行的第三方 crates.
', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1590433703048249344, '2022-11-10 03:58:38.293', false, '2022-11-13 13:53:03.301', NULL, 0, NULL, 'replace every letter except the last one using regex', 3, 10, 4, NULL, 6, NULL, 1, NULL, true, NULL, NULL);
INSERT INTO public.user_notify VALUES (1597547706098647040, '2022-11-29 19:07:08.809', false, '2022-12-01 15:12:46.805', NULL, NULL, NULL, 'question1', 1597170473374842880, 10, 1597173744193765376, NULL, 6, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1600787153749540864, '2022-12-08 17:39:33.298', false, '2022-12-08 17:39:33.298', NULL, NULL, NULL, '什么是 WebAssembly(wasm)？', 3, 10, 1, NULL, 20, NULL, 0, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1597547710557192192, '2022-11-29 19:07:09.855', false, '2022-12-02 00:07:53.049', NULL, NULL, NULL, 'question1', 1597170473374842880, 10, 1597173744193765376, NULL, 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1646865349632589824, '2023-04-14 21:17:51.288', false, '2023-04-21 10:52:06.773', 0, NULL, NULL, '测试下
', 4, 5, 4, 'replace every letter except the last one using regex', 3, NULL, 1, 1646865348714037248, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (25, '2022-09-30 19:38:17.68', false, '2022-10-24 23:11:43.944', NULL, 9, 26, NULL, 4, 3, NULL, '评论测试22', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (21, '2022-09-30 19:38:09.956', false, '2022-10-24 23:11:49.174', NULL, 9, 72, NULL, 4, 3, NULL, '123', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1649256579603628032, '2023-04-21 11:39:44.944', false, '2023-04-21 12:34:44.531', NULL, 1599374122381475840, 0, '123', 4, 0, NULL, '一行代码，让网页变为黑白配色', 3, 1649256579016425472, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (71, '2022-10-10 17:03:14.824', false, '2022-10-24 23:11:43.927', NULL, 9, 28, NULL, 20, 3, NULL, '？？？', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (60, '2022-10-09 22:23:21.415', false, '2022-12-06 16:18:50.465', NULL, 9, 143, 'aa', 3, 1, NULL, '回复@Sumi：好', 5, 160, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (61, '2022-10-09 22:25:01.86', false, '2022-11-12 13:45:15.134', NULL, 9, 147, 'sss', 3, 1, NULL, '回复@Sumi：评论测试 <script>alert("123")</script>
', 4, 161, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (94, '2022-10-12 12:01:38.489', false, '2022-10-24 22:59:14.107', NULL, 9, NULL, 'commentSerialNumber Test 17', 4, 0, NULL, 'Go 语言的参考手册 ', 3, 179, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (92, '2022-10-12 12:00:30.944', false, '2022-11-02 03:51:48.425', NULL, 114, NULL, 'commentSerialNumber Test 4', 4, 0, NULL, 'title', 20, 177, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (27, '2022-09-30 19:38:28.705', false, '2022-10-24 23:11:43.939', NULL, 9, 1, NULL, 4, 3, NULL, '评论测试 <script>alert(/XSS/)</script>', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1600105716763328512, '2022-12-06 20:31:46.06', false, '2022-12-14 15:08:34.547', NULL, NULL, NULL, 'notify test2', 4, 16, NULL, '"Markdown语法介绍"
"README
该文件用来测试和展示书写README的各种markdown语法。GitHub的markdown语法在标准的markdown语法基础上做了扩充，称之为GitHub Flavored Markdown。简称GFM，GFM在GitHub上有广泛应用，除了README文件外，issues和wiki均支持markdown语法。
横线
***、—、___可以显示横线效果
标题
一级标题
二级标', 3, NULL, 1, NULL, false, 1600105716696219648, 1600105554603147264);
INSERT INTO public.user_notify VALUES (1600385104490790912, '2022-12-07 15:01:57.289', false, '2022-12-07 15:01:57.289', NULL, 1580605648092004352, -1, NULL, 4, 2, NULL, 'title', 20, NULL, 0, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1600106831982624768, '2022-12-06 20:36:11.949', false, '2022-12-14 15:08:34.51', NULL, NULL, NULL, 'test3', 4, 17, NULL, '"Markdown语法介绍"
"README
该文件用来测试和展示书写README的各种markdown语法。GitHub的markdown语法在标准的markdown语法基础上做了扩充，称之为GitHub Flavored Markdown。简称GFM，GFM在GitHub上有广泛应用，除了README文件外，issues和wiki均支持markdown语法。
横线
***、—、___可以显示横线效果
标题
一级标题
二级标', 3, NULL, 1, NULL, false, 1600106831911321600, 1600105716696219648);
INSERT INTO public.user_notify VALUES (1589864154095681536, '2022-11-08 14:15:27.255', false, '2022-11-08 16:52:11.555', NULL, NULL, NULL, '123
123123

', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589864152631869440, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589904056569036800, '2022-11-08 16:54:00.732', false, '2022-11-08 16:54:05.562', NULL, NULL, NULL, 'page test
', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589904056527093760, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1603323623106412544, '2022-12-15 17:38:34.718', false, '2022-12-15 17:38:34.718', NULL, NULL, NULL, '1', 3, 15, NULL, '🤗', 5, NULL, 0, NULL, false, 1603323623056080896, 1602338399681773568);
INSERT INTO public.user_notify VALUES (1602954310470074368, '2022-12-14 17:11:03.724', false, '2022-12-16 02:14:00.734', -1, NULL, NULL, NULL, 5, 8, 1602174123243470848, 'Test4', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1598575962696450048, '2022-12-02 15:13:04.269', false, '2022-12-02 15:40:59.334', NULL, 9, 8, '注销测试', 1597170473374842881, 1, NULL, '评论测试', 3, 1598575962662895616, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (46, '2022-09-30 22:55:34.812', false, '2022-11-02 03:54:15.932', NULL, 9, 137, NULL, 4, 3, NULL, '回复@Sumi：回复Vuetify 是一个纯手工精心打造的 Material 样式的 Vue UI 组件库。测试！', 20, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1587516550947012608, '2022-11-02 02:46:55.035', false, '2022-11-03 12:45:56.202', 1, NULL, NULL, NULL, 20, 9, 4, '
You can use
> gsub("(.)(?=.)", "\\1,", x, perl=TRUE)
[1] "A,B,C,D"

The (.)(?=.) regex matches any char capturing it into Group 1 (with (.)) that must be followed with any single char ((?=.)) is a positive lookahead that requires a char immediately to the right of the current location).
Vriations of the solution:
> gsub("(.)(?!$)", "\\1,", x, perl=TRUE)
## Or with stringr:
## stringr::str_replace_all(x, "(.)(?!$)", "\\1,")
[1] "A,B,C,D"

Here, (?!$) fails the match if there is an end of string position.
See the R demo online:
x <- "ABCD"
gsub("(.)(?=.)", "\\1,", x, perl=TRUE)
# => [1] "A,B,C,D"
gsub("(.)(?!$)", "\\1,", x, perl=TRUE)
# => [1] "A,B,C,D"
stringr::str_replace_all(x, "(.)(?!$)", "\\1,")
# => [1] "A,B,C,D"

    ', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1602954286604484608, '2022-12-14 17:10:58.034', false, '2022-12-16 14:59:37.339', 0, NULL, NULL, 'xx
', 5, 5, 1602174123243470848, 'Test4', 3, NULL, 1, 1602954285522354176, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1602954257022058496, '2022-12-14 17:10:50.981', false, '2022-12-16 14:59:37.897', 0, NULL, NULL, 'xx', 5, 6, 1602174123243470848, 'Test4', 3, NULL, 1, 1602954256728457216, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1600787176281341952, '2022-12-08 17:39:38.67', false, '2022-12-18 19:19:07.6', NULL, NULL, NULL, '什么是 WebAssembly(wasm)？', 3, 10, 1, NULL, 6, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (44, '2022-09-30 22:52:21.607', false, '2022-11-02 03:54:15.936', NULL, 9, 133, NULL, 4, 3, NULL, '回复@EMT：二级回复@通知测试 2', 20, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (38, '2022-09-30 22:48:59.556', false, '2022-11-12 13:45:15.168', NULL, 11, 120, '二级回复@通知测试 2', 20, 1, NULL, 'pinia Test', 4, 134, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1587536038547423232, '2022-11-02 04:04:21.24', false, '2022-11-03 11:31:20.437', NULL, NULL, NULL, '回复@EMT：3', 20, 6, 4, 'replace every letter except the last one using regex', 3, NULL, 1, 1587536038450954240, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (89, '2022-10-12 12:00:16.745', false, '2022-11-02 03:51:48.44', NULL, 114, NULL, 'commentSerialNumber Test 1', 4, 0, NULL, 'title', 20, 174, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (35, '2022-09-30 22:29:10.769', false, '2022-10-24 22:59:14.125', NULL, 9, 1, '二级回复@通知测试', 20, 1, NULL, '评论测试 <script>alert(/XSS/)</script>', 3, 129, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (59, '2022-10-09 21:10:16.952', false, '2022-11-12 13:48:16.245', NULL, 9, 146, NULL, 3, 3, NULL, '回复@Dwsy：评论测试 <script>alert(/XSS/)</script>', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1599371983508733952, '2022-12-04 19:56:10.425', false, '2022-12-04 19:56:10.425', NULL, 9, 130, NULL, 3, 3, NULL, '回复@Sumi：回复@Sumi：二级回复@通知测试 2', 20, NULL, 0, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1581283681383743488, '2022-10-15 21:59:43.148', false, '2022-10-24 23:11:43.924', NULL, 9, 158, NULL, 4, 3, NULL, '回复@Dwsy：push test', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (36, '2022-09-30 22:30:30.102', false, '2022-10-24 22:59:14.122', NULL, 9, 1, '回复@Sumi：二级回复@通知测试 2', 20, 1, NULL, '评论测试 <script>alert(/XSS/)</script>', 3, 130, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1587360304730210304, '2022-11-01 16:26:03.067', false, '2022-11-02 03:54:15.909', NULL, 101, -1, NULL, 3, 2, NULL, 'title', 20, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (33, '2022-09-30 21:04:45.638', false, '2022-10-24 22:59:14.129', NULL, 11, 51, 'ddd', 4, 1, NULL, 'pinia Test', 3, 124, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1581489756682846208, '2022-10-16 11:38:35.309', false, '2022-11-02 03:54:15.913', NULL, 1580605959804289024, -1, NULL, 4, 2, NULL, 'Test', 20, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1581486033193664512, '2022-10-16 11:23:47.56', false, '2022-10-24 23:11:43.921', NULL, 9, -1, NULL, 4, 2, NULL, 'Go 语言的参考手册 ', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (66, '2022-10-10 16:55:35.213', false, '2022-10-24 23:11:43.935', NULL, 9, -1, NULL, 20, 2, NULL, 'Go 语言的参考手册 ', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1580405330762792960, '2022-10-13 11:49:28.022', false, '2022-10-24 22:59:14.091', NULL, 9, NULL, 'EE', 20, 0, NULL, 'Go 语言的参考手册 ', 3, 1580405330691489792, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (95, '2022-10-12 12:08:37.454', false, '2022-10-24 22:59:14.104', NULL, 10, 38, 'commentSerialNumber Test 1', 4, 1, NULL, '评论test2', 3, 180, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (67, '2022-10-10 16:55:40.011', false, '2022-11-12 13:48:16.241', NULL, 10, -1, NULL, 20, 2, NULL, 'title', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1580405288920416256, '2022-10-13 11:49:18.046', false, '2022-11-12 13:48:16.224', NULL, 9, 94, NULL, 20, 3, NULL, 'reply2', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1580405270599696384, '2022-10-13 11:49:13.694', false, '2022-11-12 13:48:16.228', NULL, 9, 93, NULL, 20, 3, NULL, 'reply', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (51, '2022-09-30 23:17:08.359', false, '2022-11-12 13:45:15.145', NULL, 9, 93, '好', 5, 1, NULL, 'reply', 4, 143, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (24, '2022-09-30 19:38:16.182', false, '2022-10-24 23:11:43.947', NULL, 9, 8, NULL, 4, 3, NULL, '评论测试', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (26, '2022-09-30 19:38:25.663', false, '2022-10-24 23:11:43.942', NULL, 9, 2, NULL, 4, 3, NULL, '表达式必须是函数或者方法调用；它不能使用括号括起来，调用内置函数会有一些限制。

每次执行 defer 语句执行时都会计算函数的参数和值，但是并不会调用函数。相反，函数的调用是在包裹函数返回后进行，', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589904051519094784, '2022-11-08 16:53:59.528', false, '2022-11-08 16:54:05.585', NULL, NULL, NULL, 'page test
', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589904051464568832, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (22, '2022-09-30 19:38:12.361', false, '2022-10-24 23:11:43.952', NULL, 9, 29, NULL, 4, 3, NULL, '子评论测试。', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1598583973766758400, '2022-12-02 15:44:54.257', false, '2022-12-02 17:02:55.511', NULL, NULL, NULL, '注销测试', 1597170473374842881, 6, 1, '什么是 WebAssembly(wasm)？', 3, NULL, 1, 1598583973695455232, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (55, '2022-10-02 19:52:32.234', false, '2022-10-24 22:59:14.115', NULL, 10, 48, '111alert(&quot;123&quot;)222', 4, 1, NULL, '123', 3, 149, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1598583941709692928, '2022-12-02 15:44:46.614', false, '2022-12-02 17:02:48.19', NULL, NULL, NULL, '注销测试
', 1597170473374842881, 5, 1, '什么是 WebAssembly(wasm)？', 3, NULL, 1, 1598583941625806848, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1590427796402864128, '2022-11-10 03:35:10.057', false, '2022-11-13 13:53:03.316', NULL, NULL, NULL, 'replace every letter except the last one using regex', 3, 10, 4, NULL, 6, NULL, 1, NULL, true, NULL, NULL);
INSERT INTO public.user_notify VALUES (1590427810403450880, '2022-11-10 03:35:13.377', false, '2022-11-12 14:29:41.308', NULL, NULL, NULL, 'replace every letter except the last one using regex', 3, 10, 4, NULL, 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1591529385800761344, '2022-11-13 04:32:29.418', false, '2022-11-24 15:52:28.463', 1591527820457148416, NULL, NULL, '发起提问3', 3, 13, 3, NULL, 20, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (57, '2022-10-09 19:44:29.212', false, '2022-12-06 16:18:50.493', NULL, 9, 143, 'order', 3, 1, NULL, '回复@Sumi：好', 5, 153, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (28, '2022-09-30 19:39:50.375', false, '2022-10-24 22:59:29.862', NULL, 9, 1, 'Vuetify 是一个纯手工精心打造的 Material 样式的 Vue UI 组件库。 不需要任何', 4, 1, NULL, 'Go 语言的参考手册 ', 3, 117, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (49, '2022-09-30 22:55:35.614', false, '2022-11-02 03:54:15.921', NULL, 9, 137, NULL, 4, 3, NULL, '回复@Sumi：回复Vuetify 是一个纯手工精心打造的 Material 样式的 Vue UI 组件库。测试！', 20, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1587824925266149376, '2022-11-02 23:12:17.217', false, '2022-11-03 13:16:51.65', NULL, NULL, NULL, 'TEsT
', 20, 5, 4, 'replace every letter except the last one using regex', 3, NULL, 1, 1587824924989325312, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1597547827364364288, '2022-11-29 19:07:37.704', false, '2022-12-01 15:32:46.138', NULL, NULL, NULL, 'question1', 1597170473374842880, 10, 1597173744193765376, NULL, 20, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1591319540787052544, '2022-11-12 14:38:38.469', false, '2022-11-12 17:16:30.279', 1591317651454427136, NULL, NULL, NULL, 3, 9, 2, '采纳回答测试
', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1590433690150764544, '2022-11-10 03:58:35.218', false, '2022-11-13 13:53:03.309', NULL, NULL, NULL, 'replace every letter except the last one using regex', 3, 10, 4, NULL, 6, NULL, 1, NULL, true, NULL, NULL);
INSERT INTO public.user_notify VALUES (1587516558257684480, '2022-11-02 02:46:56.777', false, '2022-11-03 12:45:56.191', 1587354439092535296, NULL, NULL, NULL, 20, 9, 4, 'console.log("test")

', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589864496002760704, '2022-11-08 14:16:48.758', false, '2022-11-08 16:52:11.519', NULL, NULL, NULL, '123213
    private final String INDEX = QuestionSearchConstants.INDEX;
    @Resource
    ArticleFieldRepository articleFieldRepository;
    @Resource
    private QaQuestionFieldRepository qaQuestionFi', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589864495927263232, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589864163826466816, '2022-11-08 14:15:29.561', false, '2022-11-08 16:52:11.546', NULL, NULL, NULL, '123
123123

', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589864163759357952, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589904050197889024, '2022-11-08 16:53:59.213', false, '2022-11-08 16:54:05.6', NULL, NULL, NULL, 'page test
', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589904050126585856, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589904049677795328, '2022-11-08 16:53:59.089', false, '2022-11-08 16:54:05.605', NULL, NULL, NULL, 'page test
', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589904049606492160, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1591342439648460800, '2022-11-12 16:09:37.997', false, '2022-11-12 17:16:19.334', 1591317651454427136, NULL, NULL, '发起提问2', 3, 11, 2, '采纳回答测试
', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1587535426200010752, '2022-11-02 04:01:55.245', false, '2022-11-03 11:31:20.446', NULL, NULL, NULL, '1', 20, 6, 4, 'replace every letter except the last one using regex', 3, NULL, 1, 1587535426090958848, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1591528918316220416, '2022-11-13 04:30:37.976', false, '2022-11-24 15:52:28.502', 1591527820457148416, NULL, NULL, '发起提问3', 3, 13, 3, NULL, 20, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (88, '2022-10-11 21:55:27.389', false, '2022-11-12 13:48:16.232', NULL, 9, 95, NULL, 3, 3, NULL, '操作复数
有三个函数可以组装或者分解复数。内置函数 complex 会构造一个复数，real 和 imag 会分解出复数的实部和虚部。

complex(realPart, imaginaryPart floatT) complexT
real(complexT) floatT
imag(complexT) floatT
参数的类型和返回值类型是对应的。对于 complex，两个参数必须是相同的浮点类型，并返回由相同浮点数组成的复数类型。complex64 是 float32 对应的类型，complex128 是 float64 对应的参数类型。如果参数是一个无类型常量，它会转换成另一个参数的类型。如果两个参数都是无类型常量，他们必须实数或者虚数部分为零，并且它会返回一个无类型的复数常量。

real 和 imag 函数和 complex 正好相反的，所以对于一个值复数类型 Z 的值 z，z==Z(complex(real(z),imag(z)))。

如果这么操作都是常量，那么返回的值也是常量。

var a = complex(2, -2)             // complex128
const b = complex(1.0, -1.4)       // untyped complex constant 1 - 1.4i
x := float32(math.Cos(math.Pi/2))  // float32
var c64 = complex(5, -x)           // complex64
var s uint = complex(1, 0)         // untyped complex constant 1 + 0i can be converted to uint
_ = complex(1, 2<~
', 4, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (64, '2022-10-10 13:28:37.535', false, '2022-10-24 22:59:14.113', NULL, 9, 162, 'www', 20, 1, NULL, '回复@EMT：eee', 3, 164, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1599371961685770240, '2022-12-04 19:56:05.221', false, '2022-12-04 19:56:05.221', NULL, 9, 129, NULL, 3, 3, NULL, '回复@Sumi：二级回复@通知测试', 20, NULL, 0, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1603324676426170368, '2022-12-15 17:42:45.849', false, '2022-12-15 17:42:45.849', NULL, NULL, NULL, '2', 3, 15, NULL, '🤗', 5, NULL, 0, NULL, false, 1603324676124180480, 1602338399681773568);
INSERT INTO public.user_notify VALUES (1600385177236799488, '2022-12-07 15:02:14.629', false, '2022-12-07 15:02:14.629', 1589864392655110144, NULL, NULL, NULL, 4, 9, 1588166867304841216, '123213
    public void updateScoreDataById(long questionId) {
        ArticleField af = articleFieldRepository.findByIdAndDeletedIsFalseAndArticleState(questionId, ArticleState.published);
        if (af == null) {
            return;
        }
        QuestionEsDoc esDoc = QuestionEsDoc.builder()
                .upNum(af.getUpNum())
                .downNum(af.getDownNum())
                .collectNum(af.getCollectNum())
                .viewNum(af.getViewNum())
                .answerNum(af.getCommentNum())
                .build();
        try {
            client.update(req -> req
                            .index(INDEX).id(String.valueOf(questionId))
                            .doc(esDoc).docAsUpsert(true)
                    , QuestionEsDoc.class);
        } catch (IOException e) {
            log.info("更新失败 questionId ：{}", questionId);
        }
    }

', 20, NULL, 0, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589864429443350528, '2022-11-08 14:16:32.89', false, '2022-11-08 16:52:11.533', NULL, NULL, NULL, '123213
    public boolean delDocById(long aid) {
        try {
            client.delete(req -> req.index(INDEX).id(String.valueOf(aid)));
        } catch (IOException e) {
            log.info("删除失败 ', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589864429388824576, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (70, '2022-10-10 17:03:04.079', false, '2022-10-24 23:11:43.93', NULL, 9, 28, NULL, 20, 3, NULL, '？？？', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (91, '2022-10-12 12:00:27.913', false, '2022-11-02 03:51:48.43', NULL, 114, NULL, 'commentSerialNumber Test 3', 4, 0, NULL, 'title', 20, 176, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (90, '2022-10-12 12:00:23.891', false, '2022-11-02 03:51:48.435', NULL, 114, NULL, 'commentSerialNumber Test 2', 4, 0, NULL, 'title', 20, 175, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1603330006971318272, '2022-12-15 18:03:56.75', false, '2022-12-15 18:03:56.75', NULL, NULL, NULL, '4', 3, 15, NULL, '🤗', 5, NULL, 0, NULL, false, 1603330006895820800, 1602338399681773568);
INSERT INTO public.user_notify VALUES (1600385153757085696, '2022-12-07 15:02:09.031', false, '2022-12-07 23:55:57.242', -1, NULL, NULL, NULL, 4, 8, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589904049027678208, '2022-11-08 16:53:58.934', false, '2022-11-08 16:54:05.61', NULL, NULL, NULL, 'page test
', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589904048956375040, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589904047098298368, '2022-11-08 16:53:58.474', false, '2022-11-08 16:54:05.615', NULL, NULL, NULL, 'page test
', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589904046968274944, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589864392747384832, '2022-11-08 14:16:24.14', false, '2022-11-08 16:52:11.538', NULL, NULL, NULL, '123213
    public void updateScoreDataById(long questionId) {
        ArticleField af = articleFieldRepository.findByIdAndDeletedIsFalseAndArticleState(questionId, ArticleState.published);
        if ', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589864392655110144, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589904051129024512, '2022-11-08 16:53:59.435', false, '2022-11-08 16:54:05.59', NULL, NULL, NULL, 'page test
', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589904051040944128, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1587515745217019904, '2022-11-02 02:43:43.145', false, '2022-11-03 11:31:20.453', 14, NULL, NULL, '回复@Sumi：notify test', 20, 7, 4, '<div class="s-prose js-post-body" itemprop="text">
<p>You can use</p>
<pre class="lang-r s-code-block"><code class="hljs language-r"><span class="hljs-operator">&gt;</span> gsub<span class="hljs-punctuation">(</span><span class="hljs-string">"(.)(?=.)"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"\\1,"</span><span class="hljs-punctuation">,</span> x<span class="hljs-punctuation">,</span> perl<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span>
<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">"A,B,C,D"</span>
</code></pre>
<p>The <code>(.)(?=.)</code> regex matches any char capturing it into Group 1 (with <code>(.)</code>) that must be followed with any single char (<code>(?=.)</code>) is a positive lookahead that requires a char immediately to the right of the current location).</p>
<p>Vriations of the solution:</p>
<pre class="lang-r s-code-block"><code class="hljs language-r"><span class="hljs-operator">&gt;</span> gsub<span class="hljs-punctuation">(</span><span class="hljs-string">"(.)(?!$)"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"\\1,"</span><span class="hljs-punctuation">,</span> x<span class="hljs-punctuation">,</span> perl<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span>
<span class="hljs-comment">## Or with stringr:</span>
<span class="hljs-comment">## stringr::str_replace_all(x, "(.)(?!$)", "\\1,")</span>
<span class="hljs-punctuation">[</span><span class="hljs-number">1</span><span class="hljs-punctuation">]</span> <span class="hljs-string">"A,B,C,D"</span>
</code></pre>
<p>Here, <code>(?!$)</code> fails the match if there is an end of string position.</p>
<p>See the <a href="https://ideone.com/Fe5iAN" rel="nofollow noreferrer">R demo online</a>:</p>
<pre class="lang-r s-code-block"><code class="hljs language-r">x <span class="hljs-operator">&lt;-</span> <span class="hljs-string">"ABCD"</span>
gsub<span class="hljs-punctuation">(</span><span class="hljs-string">"(.)(?=.)"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"\\1,"</span><span class="hljs-punctuation">,</span> x<span class="hljs-punctuation">,</span> perl<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span>
<span class="hljs-comment"># =&gt; [1] "A,B,C,D"</span>
gsub<span class="hljs-punctuation">(</span><span class="hljs-string">"(.)(?!$)"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"\\1,"</span><span class="hljs-punctuation">,</span> x<span class="hljs-punctuation">,</span> perl<span class="hljs-operator">=</span><span class="hljs-literal">TRUE</span><span class="hljs-punctuation">)</span>
<span class="hljs-comment"># =&gt; [1] "A,B,C,D"</span>
stringr<span class="hljs-operator">::</span>str_replace_all<span class="hljs-punctuation">(</span>x<span class="hljs-punctuation">,</span> <span class="hljs-string">"(.)(?!$)"</span><span class="hljs-punctuation">,</span> <span class="hljs-string">"\\1,"</span><span class="hljs-punctuation">)</span>
<span class="hljs-comment"># =&gt; [1] "A,B,C,D"</span>
</code></pre>
    </div>', 3, NULL, 1, 1587515465943482368, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1600549055950225408, '2022-12-08 01:53:26.359', false, '2022-12-08 13:14:54.795', NULL, NULL, NULL, '不同颜色BlockTipQuote测试', 4, 10, 1588166867304841216, NULL, 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1602951157959884800, '2022-12-14 16:58:32.108', false, '2022-12-14 16:58:36.539', NULL, NULL, NULL, NULL, 5, 14, NULL, 'reply reply reply4', 3, NULL, 1, NULL, false, 1596427793640456192, 1595478116006887424);
INSERT INTO public.user_notify VALUES (1602951153031577600, '2022-12-14 16:58:30.933', false, '2022-12-14 16:58:36.556', NULL, NULL, NULL, NULL, 5, 14, NULL, '2Test content 1595370887371030528', 3, NULL, 1, NULL, false, NULL, 1595478116006887424);
INSERT INTO public.user_notify VALUES (1587534588471672832, '2022-11-02 03:58:35.516', false, '2022-11-03 11:31:20.449', 1587399207608647680, NULL, NULL, '回复@Dwsy：32123', 20, 7, 4, '<pre><code class="language-java">    private long replyComment
            (QaAnswerRB qaAnswerRB, AnswerType answerType, long questionFieldId, User user, QaQuestionField qaQuestionField, int answerSerialNumber, long parentAnswerId, long replyUserId) {
        //todo
        if (replyUserId == 0) {
            replyUserId = qaAnswerRepository.findUserIdByAnswerId(parentAnswerId);
        }

        if (userRepository.findById(replyUserId).isEmpty()) {
            throw new CodeException(CustomerErrorCode.UserNotExist);
        }
        String mdText = qaAnswerRB.getMdText();
        QaAnswer qaAnswer = QaAnswer.builder()
                .user(user)
                .questionField(qaQuestionField)
                .textHtml(mdText)
                .textMd(null)
                .textPure(null)
                .parentAnswerId(qaAnswerRB.getParentAnswerId())
                .parentUserId(replyUserId)
                .answerType(answerType)
                .ua(userSupport.getUserAgent())
                .answerSerialNumber(answerSerialNumber)
                .build();
        QaAnswer save = qaAnswerRepository.save(qaAnswer);

        String content = mdText.substring(0, Math.min(100, mdText.length()));
        String parentText = HtmlHelper.toPure(qaAnswerRepository.getHtmlText(qaAnswerRB.getParentAnswerId()));
        sendActionMqMessage(user.getId(), questionFieldId, parentAnswerId,
                answerType, false, content, parentText, save.getId());
        return save.getId();
    }

</code></pre>
', 3, NULL, 1, 1587534587980939264, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (69, '2022-10-10 17:03:03.189', false, '2022-10-24 23:11:43.932', NULL, 9, 71, NULL, 20, 3, NULL, '33', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1600773882967490560, '2022-12-08 16:46:49.299', false, '2022-12-08 16:46:49.299', NULL, NULL, NULL, '不同颜色BlockTipQuote测试', 3, 10, 1588166867304841216, NULL, 20, NULL, 0, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (43, '2022-09-30 22:52:21.013', false, '2022-11-02 03:54:15.94', NULL, 9, 136, NULL, 4, 3, NULL, '回复@Sumi：二级回复@通知测试 2', 20, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (41, '2022-09-30 22:51:10.544', false, '2022-11-12 13:45:15.151', NULL, 9, 117, '回复Vuetify 是一个纯手工精心打造的 Material 样式的 Vue UI 组件库。测试！', 20, 1, NULL, 'Vuetify 是一个纯手工精心打造的 Material 样式的 Vue UI 组件库。 不需要任何设计技能 — 创建叹为观止的应用程序所需的一切都触手可及。', 4, 137, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (42, '2022-09-30 22:52:18.555', false, '2022-11-02 03:54:15.943', NULL, 9, 137, NULL, 4, 3, NULL, '回复@Sumi：回复Vuetify 是一个纯手工精心打造的 Material 样式的 Vue UI 组件库。测试！', 20, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (17, '2022-09-30 19:37:45.4', false, '2022-10-24 23:11:49.19', NULL, 17, -1, NULL, 4, 2, NULL, 'title', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (31, '2022-09-30 21:02:46.024', false, '2022-10-24 22:59:14.132', NULL, 11, 51, 'aaa', 4, 1, NULL, 'pinia Test', 3, 120, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1591342962673975296, '2022-11-12 16:11:42.681', false, '2022-11-12 16:58:11.895', NULL, NULL, NULL, '采纳回答通知测试

', 20, 5, 2, '发起提问2', 3, NULL, 1, 1591342961742839808, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1587538419452477440, '2022-11-02 04:13:48.892', false, '2022-11-03 11:31:20.401', 1587354439092535296, NULL, NULL, 'eee', 20, 7, 4, 'console.log("test")

', 3, NULL, 1, 1587538419087572992, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1587515964306489344, '2022-11-02 02:44:35.169', false, '2022-11-03 12:45:56.205', -1, NULL, NULL, NULL, 20, 8, 4, 'replace every letter except the last one using regex', 3, NULL, 1, NULL, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589864461550747648, '2022-11-08 14:16:40.544', false, '2022-11-08 16:52:11.528', NULL, NULL, NULL, '123213
    public boolean delDocById(long aid) {
        try {
            client.delete(req -> req.index(INDEX).id(String.valueOf(aid)));
        } catch (IOException e) {
            log.info("删除失败 ', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589864461475250176, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1589864165978144768, '2022-11-08 14:15:30.074', false, '2022-11-08 16:52:11.542', NULL, NULL, NULL, '123
123123

', 20, 5, 1588166867304841216, '不同颜色BlockTipQuote测试', 3, NULL, 1, 1589864165902647296, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (1588023352855887872, '2022-11-03 12:20:46.041', false, '2022-11-03 12:20:56.298', 1588022587668037632, NULL, NULL, '测试', 4, 7, 4, 'test
You can use
> gsub("(.)(?=.)", "\\1,", x, perl=TRUE)
[1] "A,B,C,D"

The (.)(?=.) regex matches any char capturing it into Group 1 (with (.)) that must be followed with any single char ((?=.)) is a positive lookahead that requires a char immediately to the right of the current location).
Vriations of the solution:
> gsub("(.)(?!$)", "\\1,", x, perl=TRUE)
## Or with stringr:
## stringr::str_replace_all(x, "(.)(?!$)", "\\1,")
[1] "A,B,C,D"

Here, (?!$) fails the match if there is an end of string position.
See the R demo online:
x  [1] "A,B,C,D"
gsub("(.)(?!$)", "\\1,", x, perl=TRUE)
# => [1] "A,B,C,D"
stringr::str_replace_all(x, "(.)(?!$)", "\\1,")
# => [1] "A,B,C,D"

', 3, NULL, 1, 1588023352679727104, false, NULL, NULL);
INSERT INTO public.user_notify VALUES (40, '2022-09-30 22:49:40.717', false, '2022-11-12 13:45:15.157', NULL, 9, 117, '二级回复@通知测试 2', 20, 1, NULL, '评论测试 <script>alert(/XSS/)</script>', 4, 136, 1, NULL, false, NULL, NULL);


--
-- Data for Name: user_points; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_points VALUES (1, '2022-09-18 02:21:00.494', false, '2022-09-18 02:21:00.494', 10, 1, 3);
INSERT INTO public.user_points VALUES (2, '2022-09-18 02:21:13.261', false, '2022-09-18 02:21:13.261', 10, 1, 3);
INSERT INTO public.user_points VALUES (3, '2022-09-18 02:21:16.366', false, '2022-09-18 02:21:16.366', 10, 1, 3);
INSERT INTO public.user_points VALUES (4, '2022-09-18 02:21:19.514', false, '2022-09-18 02:21:19.514', 10, 1, 3);
INSERT INTO public.user_points VALUES (5, '2022-09-18 02:21:20.567', false, '2022-09-18 02:21:20.567', 10, 1, 3);
INSERT INTO public.user_points VALUES (23, '2022-12-17 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (21, '2022-12-17 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (14, '2022-12-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (20, '2022-12-17 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (22, '2022-12-17 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (15, '2022-12-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (19, '2022-12-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (18, '2022-12-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (16, '2022-12-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (17, '2022-12-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (24, '2022-06-19 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (10, '2022-06-19 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (12, '2022-06-19 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (11, '2022-06-19 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (9, '2022-06-19 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (13, '2022-06-19 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (8, '2022-06-19 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (30, '2022-10-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (37, '2022-10-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (35, '2022-10-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (32, '2022-10-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (34, '2022-10-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (38, '2022-10-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (31, '2022-10-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (36, '2022-10-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (33, '2022-10-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (56, '2022-12-18 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (51, '2022-12-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (55, '2022-12-17 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (52, '2022-12-14 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (54, '2022-12-16 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (53, '2022-12-15 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (47, '2022-12-11 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (45, '2022-12-11 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (46, '2022-12-11 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (48, '2022-12-11 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (44, '2022-12-11 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (49, '2022-12-10 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (50, '2022-12-10 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (42, '2022-12-10 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (43, '2022-12-10 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (40, '2022-12-10 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (41, '2022-12-10 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (39, '2022-12-10 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (29, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (7, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (58, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (57, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (28, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (26, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (25, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (27, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (1604747472922476544, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:26.968', 1, 2, 3);
INSERT INTO public.user_points VALUES (59, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (1604747506455937024, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:34.963', 1, 2, 3);
INSERT INTO public.user_points VALUES (1604747542594060288, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:43.579', 1, 2, 3);
INSERT INTO public.user_points VALUES (1604747558096207872, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:47.275', 1, 2, 3);
INSERT INTO public.user_points VALUES (6, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (1604747524575330304, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:39.284', 1, 2, 3);
INSERT INTO public.user_points VALUES (1604747592804073472, '2022-05-13 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (1604747392186318848, '2022-03-17 15:35:50.488', false, '2022-12-19 15:56:07.719', 1, 2, 3);
INSERT INTO public.user_points VALUES (1604747434536206336, '2022-03-17 15:35:50.488', false, '2022-12-19 15:56:17.816', 1, 2, 3);
INSERT INTO public.user_points VALUES (1604747263047892992, '2022-03-17 15:35:50.488', false, '2022-12-19 15:55:36.936', 1, 2, 3);
INSERT INTO public.user_points VALUES (1604742286749466624, '2022-03-17 15:35:50.488', false, '2022-12-19 15:35:50.488', 0, 2, 3);
INSERT INTO public.user_points VALUES (1604742177345241088, '2022-03-12 15:35:24.404', false, '2022-12-19 15:35:24.404', 0, 2, 3);
INSERT INTO public.user_points VALUES (1604742024211202048, '2022-03-12 15:35:24.404', false, '2022-12-19 15:34:47.894', 0, 2, 3);
INSERT INTO public.user_points VALUES (1604739412313243648, '2022-03-12 15:35:24.404', false, '2022-12-19 15:24:25.169', 2.2, 13, 3);
INSERT INTO public.user_points VALUES (1604740645694472192, '2022-03-12 15:35:24.404', false, '2022-12-19 15:29:19.246', 1.1, 13, 3);
INSERT INTO public.user_points VALUES (1604738423350886400, '2022-03-12 15:35:24.404', false, '2022-12-19 15:20:29.386', 1, 2, 3);
INSERT INTO public.user_points VALUES (1604741987871752192, '2022-03-12 15:35:24.404', false, '2022-12-19 15:34:39.23', 0, 2, 3);
INSERT INTO public.user_points VALUES (60, '2022-12-18 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (63, '2022-12-18 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (64, '2022-12-18 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (61, '2020-12-18 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (62, '2021-12-18 15:56:55.55', false, '2022-12-19 15:56:55.55', 1, 2, 3);
INSERT INTO public.user_points VALUES (1604789685895299072, '2020-12-19 18:44:11.325', false, '2022-12-19 18:44:11.325', 1, 2, 4);
INSERT INTO public.user_points VALUES (1604789280524206081, '2021-12-19 18:42:34.694', false, '2022-12-19 18:42:34.694', 1, 2, 4);
INSERT INTO public.user_points VALUES (1605868034025586688, '2022-12-22 18:09:09.558', false, '2022-12-22 18:09:09.558', 1, 4, 3);
INSERT INTO public.user_points VALUES (1646687866849329152, '2023-04-14 09:32:36.099', false, '2023-04-14 09:32:36.099', 1, 11, 4);
INSERT INTO public.user_points VALUES (1646693220316348416, '2023-04-14 09:53:52.461', false, '2023-04-14 09:53:52.461', 2, 9, 3);
INSERT INTO public.user_points VALUES (1646693427342999552, '2023-04-14 09:54:41.821', false, '2023-04-14 09:54:41.821', 2, 9, 4);
INSERT INTO public.user_points VALUES (1646857621635858432, '2023-04-14 20:47:08.793', false, '2023-04-14 20:47:08.793', 1, 12, 4);
INSERT INTO public.user_points VALUES (1646865349678727168, '2023-04-14 21:17:51.299', false, '2023-04-14 21:17:51.299', 2, 9, 4);
INSERT INTO public.user_points VALUES (1649244425039118336, '2023-04-21 10:51:27.069', false, '2023-04-21 10:51:27.069', 1, 4, 3);
INSERT INTO public.user_points VALUES (1649244432106520576, '2023-04-21 10:51:28.751', false, '2023-04-21 10:51:28.751', 1, 7, 3);
INSERT INTO public.user_points VALUES (1649244794137870336, '2023-04-21 10:52:55.066', false, '2023-04-21 10:52:55.066', 1, 11, 3);
INSERT INTO public.user_points VALUES (1649256579322609664, '2023-04-21 11:39:44.878', false, '2023-04-21 11:39:44.878', 1, 4, 4);
INSERT INTO public.user_points VALUES (1649256588029984768, '2023-04-21 11:39:46.949', false, '2023-04-21 11:39:46.949', 1, 5, 4);
INSERT INTO public.user_points VALUES (1649270113456619520, '2023-04-21 12:33:31.666', false, '2023-04-21 12:33:31.666', 1, 7, 3);
INSERT INTO public.user_points VALUES (1649270122096885760, '2023-04-21 12:33:33.722', false, '2023-04-21 12:33:33.722', 1, 5, 3);


--
-- Data for Name: user_tag; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_tag VALUES (1590650980049879040, '2022-11-10 18:22:01.168', false, '2022-11-10 18:22:01.168', false, 'CSS', 'CSS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980070850560, '2022-11-10 18:22:01.172', false, '2022-11-10 18:22:01.172', false, 'Node.js', 'Node.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980087627776, '2022-11-10 18:22:01.176', false, '2022-11-10 18:22:01.176', false, '数据库', '数据库', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980104404992, '2022-11-10 18:22:01.181', false, '2022-11-10 18:22:01.181', false, '程序员', '程序员', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980125376512, '2022-11-10 18:22:01.185', false, '2022-11-10 18:22:01.185', false, '前端框架', '前端框架', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980142153728, '2022-11-10 18:22:01.189', false, '2022-11-10 18:22:01.189', false, '设计模式', '设计模式', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980163125248, '2022-11-10 18:22:01.194', false, '2022-11-10 18:22:01.194', false, 'HTML', 'HTML', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980179902464, '2022-11-10 18:22:01.198', false, '2022-11-10 18:22:01.198', false, 'Android', 'Android', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980196679680, '2022-11-10 18:22:01.202', false, '2022-11-10 18:22:01.202', false, 'React.js', 'React.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980213456896, '2022-11-10 18:22:01.206', false, '2022-11-10 18:22:01.206', false, 'Linux', 'Linux', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980234428416, '2022-11-10 18:22:01.211', false, '2022-11-10 18:22:01.211', false, '微信小程序', '微信小程序', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980255399936, '2022-11-10 18:22:01.216', false, '2022-11-10 18:22:01.216', false, 'Git', 'Git', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980267982848, '2022-11-10 18:22:01.22', false, '2022-11-10 18:22:01.22', false, 'Python', 'Python', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980284760064, '2022-11-10 18:22:01.223', false, '2022-11-10 18:22:01.223', false, 'Webpack', 'Webpack', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980301537280, '2022-11-10 18:22:01.227', false, '2022-11-10 18:22:01.227', false, '开源', '开源', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980318314496, '2022-11-10 18:22:01.231', false, '2022-11-10 18:22:01.231', false, 'MySQL', 'MySQL', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980335091712, '2022-11-10 18:22:01.235', false, '2022-11-10 18:22:01.235', false, '人工智能', '人工智能', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980351868928, '2022-11-10 18:22:01.239', false, '2022-11-10 18:22:01.239', false, '设计', '设计', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980368646144, '2022-11-10 18:22:01.243', false, '2022-11-10 18:22:01.243', false, '产品', '产品', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980385423360, '2022-11-10 18:22:01.247', false, '2022-11-10 18:22:01.247', false, 'HTTP', 'HTTP', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980402200576, '2022-11-10 18:22:01.251', false, '2022-11-10 18:22:01.251', false, 'ECMAScript 6', 'ECMAScript 6', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980418977792, '2022-11-10 18:22:01.255', false, '2022-11-10 18:22:01.255', false, 'iOS', 'iOS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980431560704, '2022-11-10 18:22:01.259', false, '2022-11-10 18:22:01.259', false, '全栈', '全栈', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980448337920, '2022-11-10 18:22:01.262', false, '2022-11-10 18:22:01.262', false, 'Redis', 'Redis', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980465115136, '2022-11-10 18:22:01.266', false, '2022-11-10 18:22:01.266', false, '微信', '微信', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980481892352, '2022-11-10 18:22:01.27', false, '2022-11-10 18:22:01.27', false, 'Nginx', 'Nginx', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980498669568, '2022-11-10 18:22:01.274', false, '2022-11-10 18:22:01.274', false, '正则表达式', '正则表达式', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980515446784, '2022-11-10 18:22:01.278', false, '2022-11-10 18:22:01.278', false, 'Google', 'Google', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980532224000, '2022-11-10 18:22:01.282', false, '2022-11-10 18:22:01.282', false, '机器学习', '机器学习', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980549001216, '2022-11-10 18:22:01.286', false, '2022-11-10 18:22:01.286', false, 'Docker', 'Docker', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980561584128, '2022-11-10 18:22:01.289', false, '2022-11-10 18:22:01.289', false, '黑客', '黑客', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980574167040, '2022-11-10 18:22:01.292', false, '2022-11-10 18:22:01.292', false, 'jQuery', 'jQuery', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980590944256, '2022-11-10 18:22:01.296', false, '2022-11-10 18:22:01.296', false, 'Chrome', 'Chrome', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980603527168, '2022-11-10 18:22:01.3', false, '2022-11-10 18:22:01.3', false, '响应式设计', '响应式设计', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980620304384, '2022-11-10 18:22:01.303', false, '2022-11-10 18:22:01.303', false, '编程语言', '编程语言', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980632887296, '2022-11-10 18:22:01.306', false, '2022-11-10 18:22:01.306', false, 'APP', 'APP', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980645470208, '2022-11-10 18:22:01.309', false, '2022-11-10 18:22:01.309', false, '命令行', '命令行', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980662247424, '2022-11-10 18:22:01.313', false, '2022-11-10 18:22:01.313', false, '创业', '创业', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980674830336, '2022-11-10 18:22:01.316', false, '2022-11-10 18:22:01.316', false, 'Spring', 'Spring', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980687413248, '2022-11-10 18:22:01.319', false, '2022-11-10 18:22:01.319', false, 'React Native', 'React Native', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980699996160, '2022-11-10 18:22:01.322', false, '2022-11-10 18:22:01.322', false, 'Android Studio', 'Android Studio', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980712579072, '2022-11-10 18:22:01.325', false, '2022-11-10 18:22:01.325', false, 'Angular.js', 'Angular.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980725161984, '2022-11-10 18:22:01.329', false, '2022-11-10 18:22:01.329', false, 'Mac', 'Mac', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980741939200, '2022-11-10 18:22:01.332', false, '2022-11-10 18:22:01.332', false, '产品经理', '产品经理', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980754522112, '2022-11-10 18:22:01.335', false, '2022-11-10 18:22:01.335', false, 'Bootstrap', 'Bootstrap', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980767105024, '2022-11-10 18:22:01.338', false, '2022-11-10 18:22:01.338', false, 'Vuex', 'Vuex', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (4, '2022-11-10 18:22:01.155', false, '2022-11-10 18:22:01.155', true, 'C++', '{}', 0, NULL, 3);
INSERT INTO public.user_tag VALUES (2, '2022-11-10 18:22:01.145', false, '2022-11-10 18:22:01.145', true, 'Java', '{}', 0, NULL, 3);
INSERT INTO public.user_tag VALUES (1, '2022-11-10 18:22:01.11', false, '2022-11-10 18:22:01.11', true, 'rust', '{}', 0, NULL, 3);
INSERT INTO public.user_tag VALUES (5, '2022-11-10 18:22:01.161', false, '2022-11-10 18:22:01.161', true, 'go', '{}', 0, NULL, 3);
INSERT INTO public.user_tag VALUES (3, '2022-11-10 18:22:01.15', false, '2022-11-10 18:22:01.15', true, 'Vue', '{}', 0, NULL, 1);
INSERT INTO public.user_tag VALUES (1590650980779687936, '2022-11-10 18:22:01.341', false, '2022-11-10 18:22:01.341', false, 'Apple', 'Apple', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980796465152, '2022-11-10 18:22:01.345', false, '2022-11-10 18:22:01.345', false, '数据可视化', '数据可视化', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980809048064, '2022-11-10 18:22:01.348', false, '2022-11-10 18:22:01.348', false, 'PHP', 'PHP', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980817436672, '2022-11-10 18:22:01.351', false, '2022-11-10 18:22:01.351', false, 'Photoshop', 'Photoshop', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980830019584, '2022-11-10 18:22:01.353', false, '2022-11-10 18:22:01.353', false, '操作系统', '操作系统', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980842602496, '2022-11-10 18:22:01.356', false, '2022-11-10 18:22:01.356', false, 'API', 'API', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980855185408, '2022-11-10 18:22:01.359', false, '2022-11-10 18:22:01.359', false, '图片资源', '图片资源', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980867768320, '2022-11-10 18:22:01.362', false, '2022-11-10 18:22:01.362', false, 'MongoDB', 'MongoDB', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980880351232, '2022-11-10 18:22:01.365', false, '2022-11-10 18:22:01.365', false, '阿里巴巴', '阿里巴巴', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980892934144, '2022-11-10 18:22:01.368', false, '2022-11-10 18:22:01.368', false, 'TypeScript', 'TypeScript', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980905517056, '2022-11-10 18:22:01.371', false, '2022-11-10 18:22:01.371', false, '数据挖掘', '数据挖掘', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980918099968, '2022-11-10 18:22:01.374', false, '2022-11-10 18:22:01.374', false, '深度学习', '深度学习', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980930682880, '2022-11-10 18:22:01.377', false, '2022-11-10 18:22:01.377', false, '安全', '安全', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980943265792, '2022-11-10 18:22:01.381', false, '2022-11-10 18:22:01.381', false, 'Sublime Text', 'Sublime Text', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980955848704, '2022-11-10 18:22:01.384', false, '2022-11-10 18:22:01.384', false, '运维', '运维', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980972625920, '2022-11-10 18:22:01.387', false, '2022-11-10 18:22:01.387', false, '设计师', '设计师', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650980989403136, '2022-11-10 18:22:01.391', false, '2022-11-10 18:22:01.391', false, 'gradle', 'gradle', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981001986048, '2022-11-10 18:22:01.394', false, '2022-11-10 18:22:01.394', false, '微服务', '微服务', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981014568960, '2022-11-10 18:22:01.397', false, '2022-11-10 18:22:01.397', false, 'Canvas', 'Canvas', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981027151872, '2022-11-10 18:22:01.401', false, '2022-11-10 18:22:01.401', true, '架构', '架构', 0, NULL, 3);
INSERT INTO public.user_tag VALUES (1590650981048123392, '2022-11-10 18:22:01.405', false, '2022-11-10 18:22:01.405', true, 'Vue.js', 'Vue.js', 0, NULL, 2);
INSERT INTO public.user_tag VALUES (1590650981069094912, '2022-11-10 18:22:01.41', false, '2022-11-10 18:22:01.41', true, '前端', '前端', 0, NULL, 1);
INSERT INTO public.user_tag VALUES (1590650981094260736, '2022-11-10 18:22:01.416', false, '2022-11-10 18:22:01.416', true, '代码规范', '代码规范', 0, NULL, 3);
INSERT INTO public.user_tag VALUES (1590650981115232256, '2022-11-10 18:22:01.421', false, '2022-11-10 18:22:01.421', false, '招聘', '招聘', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981132009472, '2022-11-10 18:22:01.425', false, '2022-11-10 18:22:01.425', false, '爬虫', '爬虫', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981148786688, '2022-11-10 18:22:01.429', false, '2022-11-10 18:22:01.429', false, 'MVVM', 'MVVM', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981161369600, '2022-11-10 18:22:01.432', false, '2022-11-10 18:22:01.432', false, 'Material Design', 'Material Design', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981178146816, '2022-11-10 18:22:01.436', false, '2022-11-10 18:22:01.436', false, 'Swift', 'Swift', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981194924032, '2022-11-10 18:22:01.44', false, '2022-11-10 18:22:01.44', false, '源码', '源码', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981203312640, '2022-11-10 18:22:01.442', false, '2022-11-10 18:22:01.442', false, '云计算', '云计算', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981215895552, '2022-11-10 18:22:01.445', false, '2022-11-10 18:22:01.445', false, 'Markdown', 'Markdown', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981228478464, '2022-11-10 18:22:01.448', false, '2022-11-10 18:22:01.448', false, '敏捷开发', '敏捷开发', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981241061376, '2022-11-10 18:22:01.451', false, '2022-11-10 18:22:01.451', false, 'Visual Studio Code', 'Visual Studio Code', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981257838592, '2022-11-10 18:22:01.455', false, '2022-11-10 18:22:01.455', false, 'Xcode', 'Xcode', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981270421504, '2022-11-10 18:22:01.458', false, '2022-11-10 18:22:01.458', false, '物联网', '物联网', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981278810112, '2022-11-10 18:22:01.461', false, '2022-11-10 18:22:01.461', false, 'RxJava', 'RxJava', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981291393024, '2022-11-10 18:22:01.463', false, '2022-11-10 18:22:01.463', false, 'Spring Boot', 'Spring Boot', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981303975936, '2022-11-10 18:22:01.466', false, '2022-11-10 18:22:01.466', false, '腾讯', '腾讯', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981316558848, '2022-11-10 18:22:01.469', false, '2022-11-10 18:22:01.469', false, '动效', '动效', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981324947456, '2022-11-10 18:22:01.472', false, '2022-11-10 18:22:01.472', false, 'HTTPS', 'HTTPS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981341724672, '2022-11-10 18:22:01.475', false, '2022-11-10 18:22:01.475', false, 'Objective-C', 'Objective-C', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981358501888, '2022-11-10 18:22:01.479', false, '2022-11-10 18:22:01.479', false, 'NPM', 'NPM', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981371084800, '2022-11-10 18:22:01.482', false, '2022-11-10 18:22:01.482', false, '字体', '字体', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981387862016, '2022-11-10 18:22:01.486', false, '2022-11-10 18:22:01.486', false, 'Flutter', 'Flutter', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981404639232, '2022-11-10 18:22:01.49', false, '2022-11-10 18:22:01.49', false, '运营', '运营', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981417222144, '2022-11-10 18:22:01.494', false, '2022-11-10 18:22:01.494', false, 'JSON', 'JSON', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981433999360, '2022-11-10 18:22:01.497', false, '2022-11-10 18:22:01.497', false, 'Ajax', 'Ajax', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981446582272, '2022-11-10 18:22:01.5', false, '2022-11-10 18:22:01.5', false, 'Icon', 'Icon', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981459165184, '2022-11-10 18:22:01.503', false, '2022-11-10 18:22:01.503', false, '测试', '测试', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981471748096, '2022-11-10 18:22:01.507', false, '2022-11-10 18:22:01.507', false, 'JVM', 'JVM', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981488525312, '2022-11-10 18:22:01.51', false, '2022-11-10 18:22:01.51', false, '虚拟现实', '虚拟现实', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981496913920, '2022-11-10 18:22:01.512', false, '2022-11-10 18:22:01.512', false, 'DOM', 'DOM', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981509496832, '2022-11-10 18:22:01.515', false, '2022-11-10 18:22:01.515', false, 'Debug', 'Debug', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981522079744, '2022-11-10 18:22:01.518', false, '2022-11-10 18:22:01.518', false, '电子书', '电子书', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981530468352, '2022-11-10 18:22:01.52', false, '2022-11-10 18:22:01.52', false, 'Redux', 'Redux', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981543051264, '2022-11-10 18:22:01.523', false, '2022-11-10 18:22:01.523', false, '浏览器', '浏览器', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981555634176, '2022-11-10 18:22:01.526', false, '2022-11-10 18:22:01.526', false, 'Ubuntu', 'Ubuntu', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981564022784, '2022-11-10 18:22:01.529', false, '2022-11-10 18:22:01.529', false, 'Eclipse', 'Eclipse', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981576605696, '2022-11-10 18:22:01.531', false, '2022-11-10 18:22:01.531', false, 'SQL', 'SQL', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981589188608, '2022-11-10 18:22:01.535', false, '2022-11-10 18:22:01.535', false, '掘金翻译计划', '掘金翻译计划', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981605965824, '2022-11-10 18:22:01.538', false, '2022-11-10 18:22:01.538', false, '负载均衡', '负载均衡', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981614354432, '2022-11-10 18:22:01.541', false, '2022-11-10 18:22:01.541', false, 'LeetCode', 'LeetCode', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981631131648, '2022-11-10 18:22:01.544', false, '2022-11-10 18:22:01.544', false, '数据结构', '数据结构', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981643714560, '2022-11-10 18:22:01.547', false, '2022-11-10 18:22:01.547', false, 'SCSS', 'SCSS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981652103168, '2022-11-10 18:22:01.549', false, '2022-11-10 18:22:01.549', false, 'maven', 'maven', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981664686080, '2022-11-10 18:22:01.552', false, '2022-11-10 18:22:01.552', false, 'MyBatis', 'MyBatis', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981673074688, '2022-11-10 18:22:01.554', false, '2022-11-10 18:22:01.554', false, '配色', '配色', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981685657600, '2022-11-10 18:22:01.557', false, '2022-11-10 18:22:01.557', false, 'Kotlin', 'Kotlin', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981694046208, '2022-11-10 18:22:01.56', false, '2022-11-10 18:22:01.56', false, 'Promise', 'Promise', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981706629120, '2022-11-10 18:22:01.562', false, '2022-11-10 18:22:01.562', false, 'Sketch', 'Sketch', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981715017728, '2022-11-10 18:22:01.564', false, '2022-11-10 18:22:01.564', false, 'C', 'C', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981727600640, '2022-11-10 18:22:01.567', false, '2022-11-10 18:22:01.567', false, '数据分析', '数据分析', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981740183552, '2022-11-10 18:22:01.57', false, '2022-11-10 18:22:01.57', false, '游戏', '游戏', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981756960768, '2022-11-10 18:22:01.574', false, '2022-11-10 18:22:01.574', false, 'IntelliJ IDEA', 'IntelliJ IDEA', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981769543680, '2022-11-10 18:22:01.577', false, '2022-11-10 18:22:01.577', false, '函数式编程', '函数式编程', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981786320896, '2022-11-10 18:22:01.581', false, '2022-11-10 18:22:01.581', false, 'vue-router', 'vue-router', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981803098112, '2022-11-10 18:22:01.585', false, '2022-11-10 18:22:01.585', false, 'SVG', 'SVG', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981819875328, '2022-11-10 18:22:01.589', false, '2022-11-10 18:22:01.589', false, '区块链', '区块链', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981832458240, '2022-11-10 18:22:01.593', false, '2022-11-10 18:22:01.593', false, 'VIM', 'VIM', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981861818368, '2022-11-10 18:22:01.599', false, '2022-11-10 18:22:01.599', false, 'Apache', 'Apache', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981874401280, '2022-11-10 18:22:01.603', false, '2022-11-10 18:22:01.603', false, '性能优化', '性能优化', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981886984192, '2022-11-10 18:22:01.605', false, '2022-11-10 18:22:01.605', false, 'Windows', 'Windows', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981899567104, '2022-11-10 18:22:01.608', false, '2022-11-10 18:22:01.608', false, 'Facebook', 'Facebook', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981916344320, '2022-11-10 18:22:01.612', false, '2022-11-10 18:22:01.612', false, '支付宝', '支付宝', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981928927232, '2022-11-10 18:22:01.615', false, '2022-11-10 18:22:01.615', false, 'Element', 'Element', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981941510144, '2022-11-10 18:22:01.618', false, '2022-11-10 18:22:01.618', false, '稀土', '稀土', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981954093056, '2022-11-10 18:22:01.621', false, '2022-11-10 18:22:01.621', false, 'SEO', 'SEO', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981970870272, '2022-11-10 18:22:01.625', false, '2022-11-10 18:22:01.625', false, '神经网络', '神经网络', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981983453184, '2022-11-10 18:22:01.628', false, '2022-11-10 18:22:01.628', false, 'Kubernetes', 'Kubernetes', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650981991841792, '2022-11-10 18:22:01.63', false, '2022-11-10 18:22:01.63', false, 'Spring Cloud', 'Spring Cloud', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982004424704, '2022-11-10 18:22:01.633', false, '2022-11-10 18:22:01.633', false, 'Unity3D', 'Unity3D', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982012813312, '2022-11-10 18:22:01.635', false, '2022-11-10 18:22:01.635', false, 'axios', 'axios', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982025396224, '2022-11-10 18:22:01.638', false, '2022-11-10 18:22:01.638', false, 'Kafka', 'Kafka', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982033784832, '2022-11-10 18:22:01.641', false, '2022-11-10 18:22:01.641', false, 'TCP/IP', 'TCP/IP', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982046367744, '2022-11-10 18:22:01.643', false, '2022-11-10 18:22:01.643', false, 'Elasticsearch', 'Elasticsearch', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982058950656, '2022-11-10 18:22:01.646', false, '2022-11-10 18:22:01.646', false, 'Express', 'Express', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982071533568, '2022-11-10 18:22:01.649', false, '2022-11-10 18:22:01.649', false, 'Java EE', 'Java EE', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982084116480, '2022-11-10 18:22:01.652', false, '2022-11-10 18:22:01.652', false, '响应式编程', '响应式编程', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982092505088, '2022-11-10 18:22:01.655', false, '2022-11-10 18:22:01.655', false, 'Microsoft', 'Microsoft', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982105088000, '2022-11-10 18:22:01.657', false, '2022-11-10 18:22:01.657', false, '增强现实', '增强现实', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982117670912, '2022-11-10 18:22:01.66', false, '2022-11-10 18:22:01.66', false, '分布式', '分布式', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982130253824, '2022-11-10 18:22:01.663', false, '2022-11-10 18:22:01.663', false, '大数据', '大数据', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982142836736, '2022-11-10 18:22:01.666', false, '2022-11-10 18:22:01.666', false, 'Gulp', 'Gulp', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982155419648, '2022-11-10 18:22:01.669', false, '2022-11-10 18:22:01.669', false, 'TensorFlow', 'TensorFlow', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982163808256, '2022-11-10 18:22:01.671', false, '2022-11-10 18:22:01.671', false, '单元测试', '单元测试', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982176391168, '2022-11-10 18:22:01.674', false, '2022-11-10 18:22:01.674', false, '计算机视觉', '计算机视觉', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982188974080, '2022-11-10 18:22:01.677', false, '2022-11-10 18:22:01.677', false, 'ECharts', 'ECharts', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982201556992, '2022-11-10 18:22:01.68', false, '2022-11-10 18:22:01.68', false, 'Hadoop', 'Hadoop', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982214139904, '2022-11-10 18:22:01.683', false, '2022-11-10 18:22:01.683', false, 'SQLite', 'SQLite', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982222528512, '2022-11-10 18:22:01.685', false, '2022-11-10 18:22:01.685', false, '远程工作', '远程工作', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982235111424, '2022-11-10 18:22:01.688', false, '2022-11-10 18:22:01.688', false, 'Tomcat', 'Tomcat', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982247694336, '2022-11-10 18:22:01.691', false, '2022-11-10 18:22:01.691', false, 'Vite', 'Vite', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982268665856, '2022-11-10 18:22:01.696', false, '2022-11-10 18:22:01.696', false, 'WebSocket', 'WebSocket', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982281248768, '2022-11-10 18:22:01.699', false, '2022-11-10 18:22:01.699', false, '嵌入式', '嵌入式', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982302220288, '2022-11-10 18:22:01.704', false, '2022-11-10 18:22:01.704', false, 'Firefox', 'Firefox', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982318997504, '2022-11-10 18:22:01.708', false, '2022-11-10 18:22:01.708', false, '求职', '求职', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982335774720, '2022-11-10 18:22:01.712', false, '2022-11-10 18:22:01.712', false, 'APK', 'APK', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982348357632, '2022-11-10 18:22:01.716', false, '2022-11-10 18:22:01.716', false, '服务器', '服务器', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982360940544, '2022-11-10 18:22:01.718', false, '2022-11-10 18:22:01.718', false, 'WebGL', 'WebGL', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982373523456, '2022-11-10 18:22:01.721', false, '2022-11-10 18:22:01.721', false, '机器人', '机器人', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982386106368, '2022-11-10 18:22:01.724', false, '2022-11-10 18:22:01.724', false, 'Django', 'Django', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982402883584, '2022-11-10 18:22:01.728', false, '2022-11-10 18:22:01.728', false, 'Webkit', 'Webkit', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982415466496, '2022-11-10 18:22:01.731', false, '2022-11-10 18:22:01.731', false, '投资', '投资', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982428049408, '2022-11-10 18:22:01.734', false, '2022-11-10 18:22:01.734', false, '比特币', '比特币', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982436438016, '2022-11-10 18:22:01.736', false, '2022-11-10 18:22:01.736', false, 'NoSQL', 'NoSQL', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982449020928, '2022-11-10 18:22:01.739', false, '2022-11-10 18:22:01.739', false, '编译器', '编译器', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982457409536, '2022-11-10 18:22:01.741', false, '2022-11-10 18:22:01.741', false, 'Atom', 'Atom', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982469992448, '2022-11-10 18:22:01.744', false, '2022-11-10 18:22:01.744', false, 'MVC', 'MVC', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982482575360, '2022-11-10 18:22:01.747', false, '2022-11-10 18:22:01.747', false, 'uni-app', 'uni-app', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982490963968, '2022-11-10 18:22:01.75', false, '2022-11-10 18:22:01.75', false, '百度', '百度', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982503546880, '2022-11-10 18:22:01.753', false, '2022-11-10 18:22:01.753', false, '科幻', '科幻', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982516129792, '2022-11-10 18:22:01.755', false, '2022-11-10 18:22:01.755', false, 'RabbitMQ', 'RabbitMQ', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982524518400, '2022-11-10 18:22:01.757', false, '2022-11-10 18:22:01.757', false, 'Shell', 'Shell', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982537101312, '2022-11-10 18:22:01.76', false, '2022-11-10 18:22:01.76', false, 'ZooKeeper', 'ZooKeeper', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982549684224, '2022-11-10 18:22:01.763', false, '2022-11-10 18:22:01.763', false, 'Electron', 'Electron', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982562267136, '2022-11-10 18:22:01.766', false, '2022-11-10 18:22:01.766', false, 'three.js', 'three.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982570655744, '2022-11-10 18:22:01.768', false, '2022-11-10 18:22:01.768', false, 'flexbox', 'flexbox', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982583238656, '2022-11-10 18:22:01.771', false, '2022-11-10 18:22:01.771', false, '连续集成', '连续集成', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982591627264, '2022-11-10 18:22:01.774', false, '2022-11-10 18:22:01.774', false, 'CentOS', 'CentOS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982604210176, '2022-11-10 18:22:01.776', false, '2022-11-10 18:22:01.776', false, 'V2EX', 'V2EX', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982616793088, '2022-11-10 18:22:01.779', false, '2022-11-10 18:22:01.779', false, 'Spark', 'Spark', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982629376000, '2022-11-10 18:22:01.782', false, '2022-11-10 18:22:01.782', false, 'd3.js', 'd3.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982641958912, '2022-11-10 18:22:01.785', false, '2022-11-10 18:22:01.785', false, 'GitLab', 'GitLab', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982654541824, '2022-11-10 18:22:01.788', false, '2022-11-10 18:22:01.788', false, 'Postman', 'Postman', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982667124736, '2022-11-10 18:22:01.791', false, '2022-11-10 18:22:01.791', false, 'UI Kit', 'UI Kit', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982679707648, '2022-11-10 18:22:01.794', false, '2022-11-10 18:22:01.794', false, 'Less', 'Less', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982696484864, '2022-11-10 18:22:01.798', false, '2022-11-10 18:22:01.798', false, '掘金日报', '掘金日报', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982709067776, '2022-11-10 18:22:01.801', false, '2022-11-10 18:22:01.801', false, 'Safari', 'Safari', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982721650688, '2022-11-10 18:22:01.804', false, '2022-11-10 18:22:01.804', false, 'Dubbo', 'Dubbo', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982734233600, '2022-11-10 18:22:01.807', false, '2022-11-10 18:22:01.807', false, '.NET', '.NET', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982746816512, '2022-11-10 18:22:01.81', false, '2022-11-10 18:22:01.81', false, '交互设计', '交互设计', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982759399424, '2022-11-10 18:22:01.813', false, '2022-11-10 18:22:01.813', false, 'Laravel', 'Laravel', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982771982336, '2022-11-10 18:22:01.816', false, '2022-11-10 18:22:01.816', false, 'Weex', 'Weex', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982784565248, '2022-11-10 18:22:01.819', false, '2022-11-10 18:22:01.819', false, 'Twitter', 'Twitter', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982801342464, '2022-11-10 18:22:01.823', false, '2022-11-10 18:22:01.823', false, 'Netty', 'Netty', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982813925376, '2022-11-10 18:22:01.826', false, '2022-11-10 18:22:01.826', false, 'ORM', 'ORM', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982826508288, '2022-11-10 18:22:01.83', false, '2022-11-10 18:22:01.83', false, 'SSH', 'SSH', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982843285504, '2022-11-10 18:22:01.833', false, '2022-11-10 18:22:01.833', false, 'Wireshark', 'Wireshark', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982851674112, '2022-11-10 18:22:01.835', false, '2022-11-10 18:22:01.835', false, 'PostgreSQL', 'PostgreSQL', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982864257024, '2022-11-10 18:22:01.839', false, '2022-11-10 18:22:01.839', false, '网络协议', '网络协议', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982881034240, '2022-11-10 18:22:01.842', false, '2022-11-10 18:22:01.842', false, 'Jenkins', 'Jenkins', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982893617152, '2022-11-10 18:22:01.845', false, '2022-11-10 18:22:01.845', false, 'Ruby', 'Ruby', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982910394368, '2022-11-10 18:22:01.849', false, '2022-11-10 18:22:01.849', false, 'Sea.js', 'Sea.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982927171584, '2022-11-10 18:22:01.853', false, '2022-11-10 18:22:01.853', false, 'UML', 'UML', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982939754496, '2022-11-10 18:22:01.856', false, '2022-11-10 18:22:01.856', false, 'RocketMQ', 'RocketMQ', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982952337408, '2022-11-10 18:22:01.859', false, '2022-11-10 18:22:01.859', false, 'JetBrains', 'JetBrains', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982964920320, '2022-11-10 18:22:01.862', false, '2022-11-10 18:22:01.862', false, 'ionic', 'ionic', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982973308928, '2022-11-10 18:22:01.864', false, '2022-11-10 18:22:01.864', false, '如何当个好爸爸', '如何当个好爸爸', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982985891840, '2022-11-10 18:22:01.867', false, '2022-11-10 18:22:01.867', false, '状态机', '状态机', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650982998474752, '2022-11-10 18:22:01.87', false, '2022-11-10 18:22:01.87', false, 'macOS', 'macOS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983011057664, '2022-11-10 18:22:01.873', false, '2022-11-10 18:22:01.873', false, 'Grunt', 'Grunt', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983023640576, '2022-11-10 18:22:01.876', false, '2022-11-10 18:22:01.876', false, 'koa', 'koa', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983036223488, '2022-11-10 18:22:01.879', false, '2022-11-10 18:22:01.879', false, '线下活动', '线下活动', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983048806400, '2022-11-10 18:22:01.882', false, '2022-11-10 18:22:01.882', false, 'NLP', 'NLP', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983061389312, '2022-11-10 18:22:01.885', false, '2022-11-10 18:22:01.885', false, '搜索引擎', '搜索引擎', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983073972224, '2022-11-10 18:22:01.888', false, '2022-11-10 18:22:01.888', false, 'Oracle', 'Oracle', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983086555136, '2022-11-10 18:22:01.891', false, '2022-11-10 18:22:01.891', false, '掘金技术征文', '掘金技术征文', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983094943744, '2022-11-10 18:22:01.893', false, '2022-11-10 18:22:01.893', false, 'SVN', 'SVN', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983107526656, '2022-11-10 18:22:01.896', false, '2022-11-10 18:22:01.896', false, '直播', '直播', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983120109568, '2022-11-10 18:22:01.899', false, '2022-11-10 18:22:01.899', false, 'Flask', 'Flask', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983132692480, '2022-11-10 18:22:01.902', false, '2022-11-10 18:22:01.902', false, 'Hacker News', 'Hacker News', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983145275392, '2022-11-10 18:22:01.905', false, '2022-11-10 18:22:01.905', false, '增长黑客', '增长黑客', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983157858304, '2022-11-10 18:22:01.908', false, '2022-11-10 18:22:01.908', false, '容器', '容器', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983170441216, '2022-11-10 18:22:01.911', false, '2022-11-10 18:22:01.911', false, 'Babel', 'Babel', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983183024128, '2022-11-10 18:22:01.914', false, '2022-11-10 18:22:01.914', false, '云原生', '云原生', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983191412736, '2022-11-10 18:22:01.917', false, '2022-11-10 18:22:01.917', false, 'PostCSS', 'PostCSS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983203995648, '2022-11-10 18:22:01.919', false, '2022-11-10 18:22:01.919', false, 'ESLint', 'ESLint', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983216578560, '2022-11-10 18:22:01.922', false, '2022-11-10 18:22:01.922', false, 'CDN', 'CDN', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983229161472, '2022-11-10 18:22:01.925', false, '2022-11-10 18:22:01.925', false, 'DNS', 'DNS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983241744384, '2022-11-10 18:22:01.928', false, '2022-11-10 18:22:01.928', false, 'Scala', 'Scala', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983254327296, '2022-11-10 18:22:01.931', false, '2022-11-10 18:22:01.931', false, 'Backbone.js', 'Backbone.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983262715904, '2022-11-10 18:22:01.933', false, '2022-11-10 18:22:01.933', false, '消息队列', '消息队列', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983275298816, '2022-11-10 18:22:01.936', false, '2022-11-10 18:22:01.936', false, '沸点', '沸点', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983287881728, '2022-11-10 18:22:01.939', false, '2022-11-10 18:22:01.939', false, 'Lua', 'Lua', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983300464640, '2022-11-10 18:22:01.942', false, '2022-11-10 18:22:01.942', false, 'Flux', 'Flux', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983313047552, '2022-11-10 18:22:01.945', false, '2022-11-10 18:22:01.945', false, '小程序·云开发', '小程序·云开发', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983321436160, '2022-11-10 18:22:01.947', false, '2022-11-10 18:22:01.947', false, 'MVP', 'MVP', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983329824768, '2022-11-10 18:22:01.95', false, '2022-11-10 18:22:01.95', false, '视觉设计', '视觉设计', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983342407680, '2022-11-10 18:22:01.952', false, '2022-11-10 18:22:01.952', false, 'Retrofit', 'Retrofit', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983350796288, '2022-11-10 18:22:01.954', false, '2022-11-10 18:22:01.954', false, 'C#', 'C#', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983363379200, '2022-11-10 18:22:01.957', false, '2022-11-10 18:22:01.957', false, 'Ant Design', 'Ant Design', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983371767808, '2022-11-10 18:22:01.959', false, '2022-11-10 18:22:01.959', false, '树莓派', '树莓派', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983388545024, '2022-11-10 18:22:01.963', false, '2022-11-10 18:22:01.963', false, 'OKHttp', 'OKHttp', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983401127936, '2022-11-10 18:22:01.966', false, '2022-11-10 18:22:01.966', false, 'CMS', 'CMS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983413710848, '2022-11-10 18:22:01.969', false, '2022-11-10 18:22:01.969', false, '笔记', '笔记', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983426293760, '2022-11-10 18:22:01.972', false, '2022-11-10 18:22:01.972', false, 'PyCharm', 'PyCharm', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983438876672, '2022-11-10 18:22:01.976', false, '2022-11-10 18:22:01.976', false, 'GraphQL', 'GraphQL', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983451459584, '2022-11-10 18:22:01.978', false, '2022-11-10 18:22:01.978', false, 'ECMAScript 8', 'ECMAScript 8', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983468236800, '2022-11-10 18:22:01.982', false, '2022-11-10 18:22:01.982', false, 'Yarn', 'Yarn', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983480819712, '2022-11-10 18:22:01.985', false, '2022-11-10 18:22:01.985', false, 'Medium', 'Medium', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983493402624, '2022-11-10 18:22:01.988', false, '2022-11-10 18:22:01.988', false, '逆向', '逆向', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983505985536, '2022-11-10 18:22:01.991', false, '2022-11-10 18:22:01.991', false, 'ReactiveX', 'ReactiveX', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983518568448, '2022-11-10 18:22:01.995', false, '2022-11-10 18:22:01.995', false, '音视频开发', '音视频开发', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983531151360, '2022-11-10 18:22:01.997', false, '2022-11-10 18:22:01.997', false, '排序算法', '排序算法', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983543734272, '2022-11-10 18:22:02', false, '2022-11-10 18:22:02', false, 'Underscore.js', 'Underscore.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983556317184, '2022-11-10 18:22:02.003', false, '2022-11-10 18:22:02.003', false, 'Apple Watch', 'Apple Watch', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983568900096, '2022-11-10 18:22:02.006', false, '2022-11-10 18:22:02.006', false, 'V8', 'V8', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983581483008, '2022-11-10 18:22:02.009', false, '2022-11-10 18:22:02.009', false, 'DNodeJS', 'DNodeJS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983594065920, '2022-11-10 18:22:02.012', false, '2022-11-10 18:22:02.012', false, '午夜话题', '午夜话题', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983606648832, '2022-11-10 18:22:02.015', false, '2022-11-10 18:22:02.015', false, 'Cocoa', 'Cocoa', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983623426048, '2022-11-10 18:22:02.019', false, '2022-11-10 18:22:02.019', false, 'Web Components', 'Web Components', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983636008960, '2022-11-10 18:22:02.022', false, '2022-11-10 18:22:02.022', false, 'Instagram', 'Instagram', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983644397568, '2022-11-10 18:22:02.024', false, '2022-11-10 18:22:02.024', false, 'Meteor.js', 'Meteor.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983656980480, '2022-11-10 18:22:02.028', false, '2022-11-10 18:22:02.028', false, 'Excel', 'Excel', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983669563392, '2022-11-10 18:22:02.03', false, '2022-11-10 18:22:02.03', false, 'WebAssembly', 'WebAssembly', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983682146304, '2022-11-10 18:22:02.033', false, '2022-11-10 18:22:02.033', false, 'Keynote', 'Keynote', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983694729216, '2022-11-10 18:22:02.036', false, '2022-11-10 18:22:02.036', false, '汇编语言', '汇编语言', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983707312128, '2022-11-10 18:22:02.04', false, '2022-11-10 18:22:02.04', false, 'Android Wear', 'Android Wear', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983724089344, '2022-11-10 18:22:02.043', false, '2022-11-10 18:22:02.043', false, 'WebRTC', 'WebRTC', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983736672256, '2022-11-10 18:22:02.046', false, '2022-11-10 18:22:02.046', false, 'Uber', 'Uber', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983745060864, '2022-11-10 18:22:02.048', false, '2022-11-10 18:22:02.048', false, 'RxJS', 'RxJS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983753449472, '2022-11-10 18:22:02.05', false, '2022-11-10 18:22:02.05', false, 'CoffeeScript', 'CoffeeScript', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983766032384, '2022-11-10 18:22:02.053', false, '2022-11-10 18:22:02.053', false, '游戏开发', '游戏开发', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983774420992, '2022-11-10 18:22:02.055', false, '2022-11-10 18:22:02.055', false, 'iView', 'iView', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983787003904, '2022-11-10 18:22:02.058', false, '2022-11-10 18:22:02.058', false, 'SaaS', 'SaaS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983799586816, '2022-11-10 18:22:02.061', false, '2022-11-10 18:22:02.061', false, '七牛云', '七牛云', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983812169728, '2022-11-10 18:22:02.064', false, '2022-11-10 18:22:02.064', false, 'ThinkPHP', 'ThinkPHP', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983820558336, '2022-11-10 18:22:02.066', false, '2022-11-10 18:22:02.066', false, 'Ember.js', 'Ember.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983833141248, '2022-11-10 18:22:02.069', false, '2022-11-10 18:22:02.069', false, 'Bower', 'Bower', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983841529856, '2022-11-10 18:22:02.071', false, '2022-11-10 18:22:02.071', false, 'Swagger', 'Swagger', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983854112768, '2022-11-10 18:22:02.074', false, '2022-11-10 18:22:02.074', false, 'WebP', 'WebP', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983862501376, '2022-11-10 18:22:02.076', false, '2022-11-10 18:22:02.076', false, 'OpenCV', 'OpenCV', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983870889984, '2022-11-10 18:22:02.078', false, '2022-11-10 18:22:02.078', false, '年终总结', '年终总结', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983883472896, '2022-11-10 18:22:02.081', false, '2022-11-10 18:22:02.081', false, '自动化运维', '自动化运维', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983891861504, '2022-11-10 18:22:02.083', false, '2022-11-10 18:22:02.083', false, 'Zepto.js', 'Zepto.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983900250112, '2022-11-10 18:22:02.085', false, '2022-11-10 18:22:02.085', false, 'LLVM', 'LLVM', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983912833024, '2022-11-10 18:22:02.088', false, '2022-11-10 18:22:02.088', false, '掘金社区', '掘金社区', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983925415936, '2022-11-10 18:22:02.091', false, '2022-11-10 18:22:02.091', false, 'Flink', 'Flink', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983937998848, '2022-11-10 18:22:02.094', false, '2022-11-10 18:22:02.094', false, 'Egg.js', 'Egg.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983950581760, '2022-11-10 18:22:02.097', false, '2022-11-10 18:22:02.097', false, 'HBase', 'HBase', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983963164672, '2022-11-10 18:22:02.1', false, '2022-11-10 18:22:02.1', false, 'Android Jetpack', 'Android Jetpack', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983975747584, '2022-11-10 18:22:02.103', false, '2022-11-10 18:22:02.103', false, 'AB测试', 'AB测试', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650983992524800, '2022-11-10 18:22:02.107', false, '2022-11-10 18:22:02.107', false, 'XSS', 'XSS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984005107712, '2022-11-10 18:22:02.11', false, '2022-11-10 18:22:02.11', false, 'mpvue', 'mpvue', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984017690624, '2022-11-10 18:22:02.113', false, '2022-11-10 18:22:02.113', false, '蓝牙', '蓝牙', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984030273536, '2022-11-10 18:22:02.116', false, '2022-11-10 18:22:02.116', false, 'JUnit', 'JUnit', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984042856448, '2022-11-10 18:22:02.119', false, '2022-11-10 18:22:02.119', false, 'Dart', 'Dart', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984055439360, '2022-11-10 18:22:02.122', false, '2022-11-10 18:22:02.122', false, 'PyTorch', 'PyTorch', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984068022272, '2022-11-10 18:22:02.125', false, '2022-11-10 18:22:02.125', false, 'fir.im', 'fir.im', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984080605184, '2022-11-10 18:22:02.128', false, '2022-11-10 18:22:02.128', false, 'IPython', 'IPython', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984093188096, '2022-11-10 18:22:02.131', false, '2022-11-10 18:22:02.131', false, 'RequireJS', 'RequireJS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984105771008, '2022-11-10 18:22:02.134', false, '2022-11-10 18:22:02.134', false, 'PhpStorm', 'PhpStorm', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984114159616, '2022-11-10 18:22:02.136', false, '2022-11-10 18:22:02.136', false, 'WeUI', 'WeUI', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984126742528, '2022-11-10 18:22:02.139', false, '2022-11-10 18:22:02.139', false, 'Chart.js', 'Chart.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984139325440, '2022-11-10 18:22:02.142', false, '2022-11-10 18:22:02.142', false, 'Rails', 'Rails', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984151908352, '2022-11-10 18:22:02.145', false, '2022-11-10 18:22:02.145', false, 'Shiro', 'Shiro', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984164491264, '2022-11-10 18:22:02.148', false, '2022-11-10 18:22:02.148', false, 'ReactiveCocoa', 'ReactiveCocoa', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984177074176, '2022-11-10 18:22:02.151', false, '2022-11-10 18:22:02.151', false, 'Surge', 'Surge', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984189657088, '2022-11-10 18:22:02.154', false, '2022-11-10 18:22:02.154', false, 'Nuxt.js', 'Nuxt.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984206434304, '2022-11-10 18:22:02.158', false, '2022-11-10 18:22:02.158', false, 'SAMSUNG', 'SAMSUNG', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984219017216, '2022-11-10 18:22:02.161', false, '2022-11-10 18:22:02.161', false, 'WWDC', 'WWDC', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984231600128, '2022-11-10 18:22:02.165', false, '2022-11-10 18:22:02.165', false, 'Trello', 'Trello', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984248377344, '2022-11-10 18:22:02.168', false, '2022-11-10 18:22:02.168', false, 'OpenGL', 'OpenGL', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984260960256, '2022-11-10 18:22:02.171', false, '2022-11-10 18:22:02.171', false, '以太坊', '以太坊', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984277737472, '2022-11-10 18:22:02.175', false, '2022-11-10 18:22:02.175', false, 'LaTex', 'LaTex', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984290320384, '2022-11-10 18:22:02.178', false, '2022-11-10 18:22:02.178', false, 'CTO', 'CTO', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984302903296, '2022-11-10 18:22:02.181', false, '2022-11-10 18:22:02.181', false, 'RxSwift', 'RxSwift', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984319680512, '2022-11-10 18:22:02.185', false, '2022-11-10 18:22:02.185', false, 'Hibernate', 'Hibernate', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984332263424, '2022-11-10 18:22:02.188', false, '2022-11-10 18:22:02.188', false, 'Travis CI', 'Travis CI', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984344846336, '2022-11-10 18:22:02.191', false, '2022-11-10 18:22:02.191', false, '资讯', '资讯', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984353234944, '2022-11-10 18:22:02.194', false, '2022-11-10 18:22:02.194', false, '图像识别', '图像识别', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984365817856, '2022-11-10 18:22:02.196', false, '2022-11-10 18:22:02.196', false, 'DaoCloud', 'DaoCloud', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984378400768, '2022-11-10 18:22:02.199', false, '2022-11-10 18:22:02.199', false, 'PWA', 'PWA', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984390983680, '2022-11-10 18:22:02.202', false, '2022-11-10 18:22:02.202', false, '强化学习', '强化学习', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984403566592, '2022-11-10 18:22:02.205', false, '2022-11-10 18:22:02.205', false, 'Slack', 'Slack', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984416149504, '2022-11-10 18:22:02.208', false, '2022-11-10 18:22:02.208', false, 'VirtualBox', 'VirtualBox', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984428732416, '2022-11-10 18:22:02.211', false, '2022-11-10 18:22:02.211', false, 'PyQt', 'PyQt', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984441315328, '2022-11-10 18:22:02.214', false, '2022-11-10 18:22:02.214', false, 'EventBus', 'EventBus', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984453898240, '2022-11-10 18:22:02.217', false, '2022-11-10 18:22:02.217', false, 'FFmpeg', 'FFmpeg', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984462286848, '2022-11-10 18:22:02.219', false, '2022-11-10 18:22:02.219', false, 'Hexo', 'Hexo', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984474869760, '2022-11-10 18:22:02.222', false, '2022-11-10 18:22:02.222', false, 'Solr', 'Solr', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984483258368, '2022-11-10 18:22:02.224', false, '2022-11-10 18:22:02.224', false, 'Apache Hive', 'Apache Hive', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984495841280, '2022-11-10 18:22:02.227', false, '2022-11-10 18:22:02.227', false, 'Arduino', 'Arduino', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984508424192, '2022-11-10 18:22:02.23', false, '2022-11-10 18:22:02.23', false, 'iTerm', 'iTerm', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984516812800, '2022-11-10 18:22:02.233', false, '2022-11-10 18:22:02.233', false, 'Y Combinator', 'Y Combinator', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984533590016, '2022-11-10 18:22:02.236', false, '2022-11-10 18:22:02.236', false, '监控', '监控', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984546172928, '2022-11-10 18:22:02.239', false, '2022-11-10 18:22:02.239', false, '数学', '数学', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984554561536, '2022-11-10 18:22:02.241', false, '2022-11-10 18:22:02.241', false, 'Apache ActiveMQ', 'Apache ActiveMQ', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984567144448, '2022-11-10 18:22:02.244', false, '2022-11-10 18:22:02.244', false, '编译原理', '编译原理', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984575533056, '2022-11-10 18:22:02.246', false, '2022-11-10 18:22:02.246', false, 'Amazon', 'Amazon', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984588115968, '2022-11-10 18:22:02.249', false, '2022-11-10 18:22:02.249', false, 'Glide', 'Glide', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984596504576, '2022-11-10 18:22:02.251', false, '2022-11-10 18:22:02.251', false, '自动驾驶', '自动驾驶', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984609087488, '2022-11-10 18:22:02.254', false, '2022-11-10 18:22:02.254', false, 'MariaDB', 'MariaDB', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984617476096, '2022-11-10 18:22:02.256', false, '2022-11-10 18:22:02.256', false, 'Memcached', 'Memcached', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984630059008, '2022-11-10 18:22:02.259', false, '2022-11-10 18:22:02.259', false, 'Core ML', 'Core ML', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984638447616, '2022-11-10 18:22:02.261', false, '2022-11-10 18:22:02.261', false, '图形学', '图形学', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984646836224, '2022-11-10 18:22:02.264', false, '2022-11-10 18:22:02.264', false, 'HDFS', 'HDFS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984659419136, '2022-11-10 18:22:02.266', false, '2022-11-10 18:22:02.266', false, 'NumPy', 'NumPy', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984672002048, '2022-11-10 18:22:02.269', false, '2022-11-10 18:22:02.269', false, 'HarmonyOS', 'HarmonyOS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984684584960, '2022-11-10 18:22:02.272', false, '2022-11-10 18:22:02.272', false, 'MATLAB', 'MATLAB', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984697167872, '2022-11-10 18:22:02.275', false, '2022-11-10 18:22:02.275', false, 'ARKit', 'ARKit', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984705556480, '2022-11-10 18:22:02.277', false, '2022-11-10 18:22:02.277', false, '团队管理', '团队管理', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984718139392, '2022-11-10 18:22:02.28', false, '2022-11-10 18:22:02.28', false, 'WordPress', 'WordPress', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984730722304, '2022-11-10 18:22:02.283', false, '2022-11-10 18:22:02.283', false, '莆田', '莆田', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984743305216, '2022-11-10 18:22:02.286', false, '2022-11-10 18:22:02.286', false, 'Dagger', 'Dagger', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984751693824, '2022-11-10 18:22:02.288', false, '2022-11-10 18:22:02.288', false, 'JMeter', 'JMeter', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984760082432, '2022-11-10 18:22:02.29', false, '2022-11-10 18:22:02.29', false, 'Vonic', 'Vonic', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984772665344, '2022-11-10 18:22:02.293', false, '2022-11-10 18:22:02.293', false, '360', '360', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984781053952, '2022-11-10 18:22:02.295', false, '2022-11-10 18:22:02.295', false, 'gRPC', 'gRPC', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984793636864, '2022-11-10 18:22:02.298', false, '2022-11-10 18:22:02.298', false, 'Gson', 'Gson', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984802025472, '2022-11-10 18:22:02.3', false, '2022-11-10 18:22:02.3', false, 'Workflow', 'Workflow', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984814608384, '2022-11-10 18:22:02.303', false, '2022-11-10 18:22:02.303', false, 'Fiddler', 'Fiddler', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984822996992, '2022-11-10 18:22:02.305', false, '2022-11-10 18:22:02.305', false, 'Polymer', 'Polymer', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984831385600, '2022-11-10 18:22:02.307', false, '2022-11-10 18:22:02.307', false, 'Scrapy', 'Scrapy', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984839774208, '2022-11-10 18:22:02.309', false, '2022-11-10 18:22:02.309', false, '数字货币', '数字货币', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984852357120, '2022-11-10 18:22:02.312', false, '2022-11-10 18:22:02.312', false, '播客', '播客', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984860745728, '2022-11-10 18:22:02.314', false, '2022-11-10 18:22:02.314', false, '王者荣耀', '王者荣耀', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984869134336, '2022-11-10 18:22:02.316', false, '2022-11-10 18:22:02.316', false, 'Serverless', 'Serverless', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984881717248, '2022-11-10 18:22:02.319', false, '2022-11-10 18:22:02.319', false, 'RESTful', 'RESTful', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984890105856, '2022-11-10 18:22:02.321', false, '2022-11-10 18:22:02.321', false, 'CircleCI', 'CircleCI', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984898494464, '2022-11-10 18:22:02.323', false, '2022-11-10 18:22:02.323', false, 'Curl', 'Curl', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984911077376, '2022-11-10 18:22:02.326', false, '2022-11-10 18:22:02.326', false, 'Cocos2d-x', 'Cocos2d-x', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984919465984, '2022-11-10 18:22:02.328', false, '2022-11-10 18:22:02.328', false, '5G', '5G', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984932048896, '2022-11-10 18:22:02.331', false, '2022-11-10 18:22:02.331', false, 'OpenStack', 'OpenStack', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984940437504, '2022-11-10 18:22:02.333', false, '2022-11-10 18:22:02.333', false, 'Cython', 'Cython', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984953020416, '2022-11-10 18:22:02.336', false, '2022-11-10 18:22:02.336', false, 'Axure', 'Axure', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984961409024, '2022-11-10 18:22:02.338', false, '2022-11-10 18:22:02.338', false, 'Pixate', 'Pixate', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984969797632, '2022-11-10 18:22:02.34', false, '2022-11-10 18:22:02.34', false, 'Fastjson', 'Fastjson', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984982380544, '2022-11-10 18:22:02.343', false, '2022-11-10 18:22:02.343', false, 'pandas', 'pandas', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650984994963456, '2022-11-10 18:22:02.346', false, '2022-11-10 18:22:02.346', false, 'PhantomJS', 'PhantomJS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985007546368, '2022-11-10 18:22:02.349', false, '2022-11-10 18:22:02.349', false, 'SwiftUI', 'SwiftUI', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985015934976, '2022-11-10 18:22:02.351', false, '2022-11-10 18:22:02.351', false, '计算机图形学', '计算机图形学', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985028517888, '2022-11-10 18:22:02.354', false, '2022-11-10 18:22:02.354', false, 'HTTP3', 'HTTP3', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985036906496, '2022-11-10 18:22:02.356', false, '2022-11-10 18:22:02.356', false, 'Charles', 'Charles', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985049489408, '2022-11-10 18:22:02.359', false, '2022-11-10 18:22:02.359', false, 'HotFix', 'HotFix', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985057878016, '2022-11-10 18:22:02.362', false, '2022-11-10 18:22:02.362', false, 'Apache Log4j', 'Apache Log4j', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985070460928, '2022-11-10 18:22:02.364', false, '2022-11-10 18:22:02.364', false, 'Elm', 'Elm', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985083043840, '2022-11-10 18:22:02.367', false, '2022-11-10 18:22:02.367', false, 'Picasso', 'Picasso', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985091432448, '2022-11-10 18:22:02.369', false, '2022-11-10 18:22:02.369', false, 'Emacs', 'Emacs', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985104015360, '2022-11-10 18:22:02.372', false, '2022-11-10 18:22:02.372', false, 'Taro', 'Taro', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985112403968, '2022-11-10 18:22:02.374', false, '2022-11-10 18:22:02.374', false, 'CI/CD', 'CI/CD', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985120792576, '2022-11-10 18:22:02.376', false, '2022-11-10 18:22:02.376', false, 'Google I/O', 'Google I/O', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985133375488, '2022-11-10 18:22:02.379', false, '2022-11-10 18:22:02.379', false, 'Unicode', 'Unicode', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985145958400, '2022-11-10 18:22:02.382', false, '2022-11-10 18:22:02.382', false, 'Yii', 'Yii', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985158541312, '2022-11-10 18:22:02.385', false, '2022-11-10 18:22:02.385', false, 'Qt', 'Qt', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985166929920, '2022-11-10 18:22:02.387', false, '2022-11-10 18:22:02.387', false, 'Lucene', 'Lucene', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985179512832, '2022-11-10 18:22:02.39', false, '2022-11-10 18:22:02.39', false, '领域驱动设计', '领域驱动设计', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985192095744, '2022-11-10 18:22:02.393', false, '2022-11-10 18:22:02.393', false, 'AWS', 'AWS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985200484352, '2022-11-10 18:22:02.395', false, '2022-11-10 18:22:02.395', false, 'Kibana', 'Kibana', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985213067264, '2022-11-10 18:22:02.398', false, '2022-11-10 18:22:02.398', false, 'Apache Storm', 'Apache Storm', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985225650176, '2022-11-10 18:22:02.401', false, '2022-11-10 18:22:02.401', false, 'Selenium', 'Selenium', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985234038784, '2022-11-10 18:22:02.403', false, '2022-11-10 18:22:02.403', false, 'PM2', 'PM2', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985246621696, '2022-11-10 18:22:02.406', false, '2022-11-10 18:22:02.406', false, 'protobuf', 'protobuf', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985259204608, '2022-11-10 18:22:02.409', false, '2022-11-10 18:22:02.409', false, 'Cordova', 'Cordova', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985267593216, '2022-11-10 18:22:02.411', false, '2022-11-10 18:22:02.411', false, 'Realm', 'Realm', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985280176128, '2022-11-10 18:22:02.414', false, '2022-11-10 18:22:02.414', false, 'bpython', 'bpython', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985288564736, '2022-11-10 18:22:02.416', false, '2022-11-10 18:22:02.416', false, 'Tornado', 'Tornado', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985301147648, '2022-11-10 18:22:02.419', false, '2022-11-10 18:22:02.419', false, '智能合约', '智能合约', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985309536256, '2022-11-10 18:22:02.421', false, '2022-11-10 18:22:02.421', false, '快应用', '快应用', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985322119168, '2022-11-10 18:22:02.424', false, '2022-11-10 18:22:02.424', false, 'R', 'R', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985330507776, '2022-11-10 18:22:02.426', false, '2022-11-10 18:22:02.426', false, 'Groovy', 'Groovy', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985343090688, '2022-11-10 18:22:02.429', false, '2022-11-10 18:22:02.429', false, 'Vant', 'Vant', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985351479296, '2022-11-10 18:22:02.431', false, '2022-11-10 18:22:02.431', false, 'MobX', 'MobX', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985364062208, '2022-11-10 18:22:02.434', false, '2022-11-10 18:22:02.434', false, 'etcd', 'etcd', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985372450816, '2022-11-10 18:22:02.436', false, '2022-11-10 18:22:02.436', false, '智能小程序', '智能小程序', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985380839424, '2022-11-10 18:22:02.438', false, '2022-11-10 18:22:02.438', false, 'Linkedin', 'Linkedin', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985389228032, '2022-11-10 18:22:02.44', false, '2022-11-10 18:22:02.44', false, 'Swoole', 'Swoole', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985397616640, '2022-11-10 18:22:02.442', false, '2022-11-10 18:22:02.442', false, '华为', '华为', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985410199552, '2022-11-10 18:22:02.445', false, '2022-11-10 18:22:02.445', false, 'RSS', 'RSS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985418588160, '2022-11-10 18:22:02.447', false, '2022-11-10 18:22:02.447', false, 'Logstash', 'Logstash', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985426976768, '2022-11-10 18:22:02.449', false, '2022-11-10 18:22:02.449', false, 'Touch bar', 'Touch bar', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985435365376, '2022-11-10 18:22:02.451', false, '2022-11-10 18:22:02.451', false, 'Firebase', 'Firebase', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985443753984, '2022-11-10 18:22:02.453', false, '2022-11-10 18:22:02.453', false, 'web.py', 'web.py', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985456336896, '2022-11-10 18:22:02.456', false, '2022-11-10 18:22:02.456', false, 'DBA', 'DBA', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985468919808, '2022-11-10 18:22:02.459', false, '2022-11-10 18:22:02.459', false, 'OpenAI', 'OpenAI', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985481502720, '2022-11-10 18:22:02.462', false, '2022-11-10 18:22:02.462', false, 'KVM', 'KVM', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985494085632, '2022-11-10 18:22:02.465', false, '2022-11-10 18:22:02.465', false, '边缘计算', '边缘计算', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985506668544, '2022-11-10 18:22:02.468', false, '2022-11-10 18:22:02.468', false, 'Grafana', 'Grafana', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985519251456, '2022-11-10 18:22:02.471', false, '2022-11-10 18:22:02.471', false, 'AndroidAnnotations', 'AndroidAnnotations', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985536028672, '2022-11-10 18:22:02.475', false, '2022-11-10 18:22:02.475', false, 'Debian', 'Debian', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985544417280, '2022-11-10 18:22:02.477', false, '2022-11-10 18:22:02.477', false, 'Highlight.js', 'Highlight.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985557000192, '2022-11-10 18:22:02.48', false, '2022-11-10 18:22:02.48', false, 'rollup.js', 'rollup.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985565388800, '2022-11-10 18:22:02.482', false, '2022-11-10 18:22:02.482', false, 'VuePress', 'VuePress', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985573777408, '2022-11-10 18:22:02.484', false, '2022-11-10 18:22:02.484', false, '量子计算', '量子计算', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985586360320, '2022-11-10 18:22:02.487', false, '2022-11-10 18:22:02.487', false, 'Airbnb', 'Airbnb', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985594748928, '2022-11-10 18:22:02.489', false, '2022-11-10 18:22:02.489', false, 'TiDB', 'TiDB', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985607331840, '2022-11-10 18:22:02.492', false, '2022-11-10 18:22:02.492', false, 'PyPy', 'PyPy', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985615720448, '2022-11-10 18:22:02.494', false, '2022-11-10 18:22:02.494', false, 'NativeScript', 'NativeScript', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985624109056, '2022-11-10 18:22:02.496', false, '2022-11-10 18:22:02.496', false, 'greenDAO', 'greenDAO', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985632497664, '2022-11-10 18:22:02.498', false, '2022-11-10 18:22:02.498', false, 'Stylus', 'Stylus', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985645080576, '2022-11-10 18:22:02.501', false, '2022-11-10 18:22:02.501', false, 'Kaggle', 'Kaggle', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985653469184, '2022-11-10 18:22:02.503', false, '2022-11-10 18:22:02.503', false, 'Apache Flume', 'Apache Flume', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985661857792, '2022-11-10 18:22:02.505', false, '2022-11-10 18:22:02.505', false, 'FreeMarker', 'FreeMarker', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985674440704, '2022-11-10 18:22:02.508', false, '2022-11-10 18:22:02.508', false, 'ZeroMQ', 'ZeroMQ', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985687023616, '2022-11-10 18:22:02.511', false, '2022-11-10 18:22:02.511', false, 'Elixir', 'Elixir', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985699606528, '2022-11-10 18:22:02.514', false, '2022-11-10 18:22:02.514', false, 'scikit-learn', 'scikit-learn', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985712189440, '2022-11-10 18:22:02.517', false, '2022-11-10 18:22:02.517', false, 'Apache Thrift', 'Apache Thrift', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985724772352, '2022-11-10 18:22:02.52', false, '2022-11-10 18:22:02.52', false, 'Keras', 'Keras', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985737355264, '2022-11-10 18:22:02.523', false, '2022-11-10 18:22:02.523', false, 'Ansible', 'Ansible', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985749938176, '2022-11-10 18:22:02.526', false, '2022-11-10 18:22:02.526', false, 'Jest', 'Jest', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985762521088, '2022-11-10 18:22:02.529', false, '2022-11-10 18:22:02.529', false, 'Volley', 'Volley', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985775104000, '2022-11-10 18:22:02.532', false, '2022-11-10 18:22:02.532', false, 'Caffe', 'Caffe', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985787686912, '2022-11-10 18:22:02.536', false, '2022-11-10 18:22:02.536', false, 'SciPy', 'SciPy', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985804464128, '2022-11-10 18:22:02.539', false, '2022-11-10 18:22:02.539', false, 'Composer', 'Composer', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985817047040, '2022-11-10 18:22:02.542', false, '2022-11-10 18:22:02.542', false, 'Immutable.js', 'Immutable.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985829629952, '2022-11-10 18:22:02.545', false, '2022-11-10 18:22:02.545', false, 'Akka', 'Akka', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985842212864, '2022-11-10 18:22:02.548', false, '2022-11-10 18:22:02.548', false, 'ButterKnife', 'ButterKnife', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985854795776, '2022-11-10 18:22:02.551', false, '2022-11-10 18:22:02.551', false, 'ZXing', 'ZXing', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985867378688, '2022-11-10 18:22:02.554', false, '2022-11-10 18:22:02.554', false, 'Project Lombok', 'Project Lombok', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985879961600, '2022-11-10 18:22:02.557', false, '2022-11-10 18:22:02.557', false, 'Apache Kylin', 'Apache Kylin', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985892544512, '2022-11-10 18:22:02.56', false, '2022-11-10 18:22:02.56', false, 'Mocha', 'Mocha', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985905127424, '2022-11-10 18:22:02.563', false, '2022-11-10 18:22:02.563', false, 'C语言', 'C语言', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985917710336, '2022-11-10 18:22:02.567', false, '2022-11-10 18:22:02.567', false, 'Unreal Engine', 'Unreal Engine', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985934487552, '2022-11-10 18:22:02.57', false, '2022-11-10 18:22:02.57', false, 'Erlang', 'Erlang', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985947070464, '2022-11-10 18:22:02.573', false, '2022-11-10 18:22:02.573', false, 'JCenter', 'JCenter', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985959653376, '2022-11-10 18:22:02.576', false, '2022-11-10 18:22:02.576', false, 'Karma', 'Karma', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985972236288, '2022-11-10 18:22:02.579', false, '2022-11-10 18:22:02.579', false, 'CocoaPods', 'CocoaPods', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650985984819200, '2022-11-10 18:22:02.582', false, '2022-11-10 18:22:02.582', false, 'NestJS', 'NestJS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986001596416, '2022-11-10 18:22:02.587', false, '2022-11-10 18:22:02.587', false, 'AFNetworking', 'AFNetworking', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986018373632, '2022-11-10 18:22:02.59', false, '2022-11-10 18:22:02.59', false, 'VisualVM', 'VisualVM', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986030956544, '2022-11-10 18:22:02.593', false, '2022-11-10 18:22:02.593', false, 'RPC', 'RPC', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986043539456, '2022-11-10 18:22:02.596', false, '2022-11-10 18:22:02.596', false, 'Perl', 'Perl', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986051928064, '2022-11-10 18:22:02.598', false, '2022-11-10 18:22:02.598', false, 'Vagrant', 'Vagrant', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986060316672, '2022-11-10 18:22:02.6', false, '2022-11-10 18:22:02.6', false, 'Apache Cassandra', 'Apache Cassandra', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986072899584, '2022-11-10 18:22:02.603', false, '2022-11-10 18:22:02.603', false, 'PhoneGap', 'PhoneGap', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986081288192, '2022-11-10 18:22:02.605', false, '2022-11-10 18:22:02.605', false, 'Apache Mesos', 'Apache Mesos', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986093871104, '2022-11-10 18:22:02.608', false, '2022-11-10 18:22:02.608', false, 'JSPatch', 'JSPatch', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986102259712, '2022-11-10 18:22:02.61', false, '2022-11-10 18:22:02.61', false, 'Tinker', 'Tinker', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986127425536, '2022-11-10 18:22:02.616', false, '2022-11-10 18:22:02.616', false, 'WebVR', 'WebVR', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986135814144, '2022-11-10 18:22:02.618', false, '2022-11-10 18:22:02.618', false, 'Yeoman', 'Yeoman', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986148397056, '2022-11-10 18:22:02.621', false, '2022-11-10 18:22:02.621', false, 'LeakCanary', 'LeakCanary', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986156785664, '2022-11-10 18:22:02.623', false, '2022-11-10 18:22:02.623', false, 'WebView', 'WebView', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986165174272, '2022-11-10 18:22:02.625', false, '2022-11-10 18:22:02.625', false, 'deno', 'deno', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986173562880, '2022-11-10 18:22:02.627', false, '2022-11-10 18:22:02.627', false, 'Swarm', 'Swarm', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986186145792, '2022-11-10 18:22:02.63', false, '2022-11-10 18:22:02.63', false, 'WebStorm', 'WebStorm', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986198728704, '2022-11-10 18:22:02.633', false, '2022-11-10 18:22:02.633', false, 'Lisp', 'Lisp', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986207117312, '2022-11-10 18:22:02.635', false, '2022-11-10 18:22:02.635', false, 'SDWebImage', 'SDWebImage', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986215505920, '2022-11-10 18:22:02.637', false, '2022-11-10 18:22:02.637', false, '掘金圆桌', '掘金圆桌', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986228088832, '2022-11-10 18:22:02.64', false, '2022-11-10 18:22:02.64', false, '有赞', '有赞', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986236477440, '2022-11-10 18:22:02.642', false, '2022-11-10 18:22:02.642', false, '无人机', '无人机', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986249060352, '2022-11-10 18:22:02.645', false, '2022-11-10 18:22:02.645', false, 'Daydream', 'Daydream', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986257448960, '2022-11-10 18:22:02.647', false, '2022-11-10 18:22:02.647', false, 'Haskell', 'Haskell', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986270031872, '2022-11-10 18:22:02.65', false, '2022-11-10 18:22:02.65', false, 'Preact', 'Preact', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986282614784, '2022-11-10 18:22:02.653', false, '2022-11-10 18:22:02.653', false, 'LevelDB', 'LevelDB', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986291003392, '2022-11-10 18:22:02.655', false, '2022-11-10 18:22:02.655', false, 'GPU', 'GPU', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986303586304, '2022-11-10 18:22:02.658', false, '2022-11-10 18:22:02.658', false, 'pyspider', 'pyspider', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986311974912, '2022-11-10 18:22:02.66', false, '2022-11-10 18:22:02.66', false, '客户端', '客户端', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986320363520, '2022-11-10 18:22:02.662', false, '2022-11-10 18:22:02.662', false, 'DevOps', 'DevOps', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986328752128, '2022-11-10 18:22:02.664', false, '2022-11-10 18:22:02.664', false, 'Fresco', 'Fresco', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986341335040, '2022-11-10 18:22:02.667', false, '2022-11-10 18:22:02.667', false, 'Apache Ant', 'Apache Ant', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986353917952, '2022-11-10 18:22:02.67', false, '2022-11-10 18:22:02.67', false, 'Service Mesh', 'Service Mesh', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986366500864, '2022-11-10 18:22:02.673', false, '2022-11-10 18:22:02.673', false, 'Fedora', 'Fedora', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986379083776, '2022-11-10 18:22:02.676', false, '2022-11-10 18:22:02.676', false, 'Gevent', 'Gevent', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986387472384, '2022-11-10 18:22:02.678', false, '2022-11-10 18:22:02.678', false, 'SonarQube', 'SonarQube', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986395860992, '2022-11-10 18:22:02.68', false, '2022-11-10 18:22:02.68', false, 'SymPy', 'SymPy', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986404249600, '2022-11-10 18:22:02.682', false, '2022-11-10 18:22:02.682', false, 'Bluebird.js', 'Bluebird.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986412638208, '2022-11-10 18:22:02.684', false, '2022-11-10 18:22:02.684', false, 'Raft', 'Raft', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986421026816, '2022-11-10 18:22:02.686', false, '2022-11-10 18:22:02.686', false, 'Browserify', 'Browserify', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986433609728, '2022-11-10 18:22:02.69', false, '2022-11-10 18:22:02.69', false, 'Gunicorn', 'Gunicorn', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986446192640, '2022-11-10 18:22:02.692', false, '2022-11-10 18:22:02.692', false, 'Clojure', 'Clojure', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986458775552, '2022-11-10 18:22:02.695', false, '2022-11-10 18:22:02.695', false, 'uWSGI', 'uWSGI', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986467164160, '2022-11-10 18:22:02.697', false, '2022-11-10 18:22:02.697', false, 'Jieba', 'Jieba', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986483941376, '2022-11-10 18:22:02.701', false, '2022-11-10 18:22:02.701', false, 'Snapchat', 'Snapchat', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986496524288, '2022-11-10 18:22:02.704', false, '2022-11-10 18:22:02.704', false, 'MPAndroidChart', 'MPAndroidChart', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986509107200, '2022-11-10 18:22:02.707', false, '2022-11-10 18:22:02.707', false, 'Xposed', 'Xposed', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986517495808, '2022-11-10 18:22:02.709', false, '2022-11-10 18:22:02.709', false, 'E2E', 'E2E', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986530078720, '2022-11-10 18:22:02.712', false, '2022-11-10 18:22:02.712', false, 'AMP', 'AMP', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986538467328, '2022-11-10 18:22:02.714', false, '2022-11-10 18:22:02.714', false, 'Omi', 'Omi', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986551050240, '2022-11-10 18:22:02.717', false, '2022-11-10 18:22:02.717', false, 'Mockito', 'Mockito', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986559438848, '2022-11-10 18:22:02.72', false, '2022-11-10 18:22:02.72', false, 'NSQ', 'NSQ', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986576216064, '2022-11-10 18:22:02.723', false, '2022-11-10 18:22:02.723', false, 'Twisted', 'Twisted', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986588798976, '2022-11-10 18:22:02.726', false, '2022-11-10 18:22:02.726', false, 'Brython', 'Brython', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986597187584, '2022-11-10 18:22:02.728', false, '2022-11-10 18:22:02.728', false, 'Bintray', 'Bintray', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986609770496, '2022-11-10 18:22:02.731', false, '2022-11-10 18:22:02.731', false, 'Istio', 'Istio', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986618159104, '2022-11-10 18:22:02.733', false, '2022-11-10 18:22:02.733', false, 'Fluentd', 'Fluentd', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986626547712, '2022-11-10 18:22:02.735', false, '2022-11-10 18:22:02.735', false, '芯片', '芯片', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986639130624, '2022-11-10 18:22:02.738', false, '2022-11-10 18:22:02.738', false, 'Symfony', 'Symfony', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986651713536, '2022-11-10 18:22:02.741', false, '2022-11-10 18:22:02.741', false, '低代码', '低代码', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986664296448, '2022-11-10 18:22:02.744', false, '2022-11-10 18:22:02.744', false, 'Jekyll', 'Jekyll', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986672685056, '2022-11-10 18:22:02.746', false, '2022-11-10 18:22:02.746', false, 'Puppeteer', 'Puppeteer', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986681073664, '2022-11-10 18:22:02.748', false, '2022-11-10 18:22:02.748', false, 'Agera ', 'Agera ', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986693656576, '2022-11-10 18:22:02.751', false, '2022-11-10 18:22:02.751', false, 'CasperJS', 'CasperJS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986702045184, '2022-11-10 18:22:02.753', false, '2022-11-10 18:22:02.753', false, '计算机组成原理', '计算机组成原理', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986710433792, '2022-11-10 18:22:02.755', false, '2022-11-10 18:22:02.755', false, 'QUnit', 'QUnit', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986723016704, '2022-11-10 18:22:02.758', false, '2022-11-10 18:22:02.758', false, 'reCAPTCHA', 'reCAPTCHA', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986739793920, '2022-11-10 18:22:02.762', false, '2022-11-10 18:22:02.762', false, 'Unix', 'Unix', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986752376832, '2022-11-10 18:22:02.765', false, '2022-11-10 18:22:02.765', false, 'ORMLite', 'ORMLite', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986764959744, '2022-11-10 18:22:02.768', false, '2022-11-10 18:22:02.768', false, 'Android Things', 'Android Things', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986773348352, '2022-11-10 18:22:02.77', false, '2022-11-10 18:22:02.77', false, 'Jasmine', 'Jasmine', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986785931264, '2022-11-10 18:22:02.773', false, '2022-11-10 18:22:02.773', false, 'FMDB', 'FMDB', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986798514176, '2022-11-10 18:22:02.776', false, '2022-11-10 18:22:02.776', false, 'Natural Language Toolkit', 'Natural Language Toolkit', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986811097088, '2022-11-10 18:22:02.78', false, '2022-11-10 18:22:02.78', false, 'IndexedDB', 'IndexedDB', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986827874304, '2022-11-10 18:22:02.783', false, '2022-11-10 18:22:02.783', false, 'ThinkJS', 'ThinkJS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986844651520, '2022-11-10 18:22:02.787', false, '2022-11-10 18:22:02.787', false, 'DeepStack', 'DeepStack', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986861428736, '2022-11-10 18:22:02.791', false, '2022-11-10 18:22:02.791', false, 'Alamofire', 'Alamofire', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986878205952, '2022-11-10 18:22:02.796', false, '2022-11-10 18:22:02.796', false, 'MJRefresh', 'MJRefresh', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986894983168, '2022-11-10 18:22:02.799', false, '2022-11-10 18:22:02.799', false, 'SaltStack', 'SaltStack', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986911760384, '2022-11-10 18:22:02.803', false, '2022-11-10 18:22:02.803', false, 'ReactOS', 'ReactOS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986924343296, '2022-11-10 18:22:02.806', false, '2022-11-10 18:22:02.806', false, 'AsyncDisplayKit', 'AsyncDisplayKit', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986932731904, '2022-11-10 18:22:02.808', false, '2022-11-10 18:22:02.808', false, 'Traefik', 'Traefik', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986941120512, '2022-11-10 18:22:02.81', false, '2022-11-10 18:22:02.81', false, 'marked', 'marked', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986953703424, '2022-11-10 18:22:02.813', false, '2022-11-10 18:22:02.813', false, 'Fuchsia', 'Fuchsia', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986962092032, '2022-11-10 18:22:02.815', false, '2022-11-10 18:22:02.815', false, 'fastlane', 'fastlane', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986974674944, '2022-11-10 18:22:02.818', false, '2022-11-10 18:22:02.818', false, 'Mongoose', 'Mongoose', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986987257856, '2022-11-10 18:22:02.821', false, '2022-11-10 18:22:02.821', false, 'Monolog', 'Monolog', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650986995646464, '2022-11-10 18:22:02.823', false, '2022-11-10 18:22:02.823', false, 'SnapKit', 'SnapKit', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987008229376, '2022-11-10 18:22:02.826', false, '2022-11-10 18:22:02.826', false, 'IGListKit', 'IGListKit', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987016617984, '2022-11-10 18:22:02.828', false, '2022-11-10 18:22:02.828', false, 'Nvidia', 'Nvidia', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987025006592, '2022-11-10 18:22:02.83', false, '2022-11-10 18:22:02.83', false, 'Jupyter', 'Jupyter', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987033395200, '2022-11-10 18:22:02.832', false, '2022-11-10 18:22:02.832', false, 'Perfect', 'Perfect', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987041783808, '2022-11-10 18:22:02.835', false, '2022-11-10 18:22:02.835', false, 'Chrome OS', 'Chrome OS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987054366720, '2022-11-10 18:22:02.837', false, '2022-11-10 18:22:02.837', false, 'Bulma', 'Bulma', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987062755328, '2022-11-10 18:22:02.839', false, '2022-11-10 18:22:02.839', false, 'GIS', 'GIS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987071143936, '2022-11-10 18:22:02.842', false, '2022-11-10 18:22:02.842', false, 'Anko', 'Anko', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987083726848, '2022-11-10 18:22:02.844', false, '2022-11-10 18:22:02.844', false, 'Caddy', 'Caddy', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987092115456, '2022-11-10 18:22:02.846', false, '2022-11-10 18:22:02.846', false, 'Knockout', 'Knockout', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987104698368, '2022-11-10 18:22:02.849', false, '2022-11-10 18:22:02.849', false, 'AChartEngine', 'AChartEngine', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987113086976, '2022-11-10 18:22:02.851', false, '2022-11-10 18:22:02.851', false, 'Julia', 'Julia', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987125669888, '2022-11-10 18:22:02.854', false, '2022-11-10 18:22:02.854', false, 'StatsD', 'StatsD', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987134058496, '2022-11-10 18:22:02.856', false, '2022-11-10 18:22:02.856', false, 'Parcel', 'Parcel', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987142447104, '2022-11-10 18:22:02.858', false, '2022-11-10 18:22:02.858', false, 'Theano', 'Theano', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987150835712, '2022-11-10 18:22:02.86', false, '2022-11-10 18:22:02.86', false, 'Vapor', 'Vapor', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987159224320, '2022-11-10 18:22:02.862', false, '2022-11-10 18:22:02.862', false, 'Polycode', 'Polycode', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987171807232, '2022-11-10 18:22:02.865', false, '2022-11-10 18:22:02.865', false, 'libGDX', 'libGDX', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987184390144, '2022-11-10 18:22:02.868', false, '2022-11-10 18:22:02.868', false, 'Feathers', 'Feathers', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987192778752, '2022-11-10 18:22:02.87', false, '2022-11-10 18:22:02.87', false, 'ARCore', 'ARCore', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987201167360, '2022-11-10 18:22:02.872', false, '2022-11-10 18:22:02.872', false, 'mlpack', 'mlpack', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987209555968, '2022-11-10 18:22:02.874', false, '2022-11-10 18:22:02.874', false, 'DroidMVP', 'DroidMVP', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987217944576, '2022-11-10 18:22:02.876', false, '2022-11-10 18:22:02.876', false, 'Espresso', 'Espresso', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987226333184, '2022-11-10 18:22:02.878', false, '2022-11-10 18:22:02.878', false, 'AIOps', 'AIOps', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987234721792, '2022-11-10 18:22:02.88', false, '2022-11-10 18:22:02.88', false, 'Phabricator', 'Phabricator', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987243110400, '2022-11-10 18:22:02.882', false, '2022-11-10 18:22:02.882', false, 'Gin', 'Gin', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987255693312, '2022-11-10 18:22:02.885', false, '2022-11-10 18:22:02.885', false, 'Classyshark', 'Classyshark', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987268276224, '2022-11-10 18:22:02.888', false, '2022-11-10 18:22:02.888', false, 'Carthage', 'Carthage', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987276664832, '2022-11-10 18:22:02.891', false, '2022-11-10 18:22:02.891', false, 'AVA', 'AVA', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987289247744, '2022-11-10 18:22:02.893', false, '2022-11-10 18:22:02.893', false, 'JitPack', 'JitPack', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987301830656, '2022-11-10 18:22:02.896', false, '2022-11-10 18:22:02.896', false, 'Vuforia', 'Vuforia', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987314413568, '2022-11-10 18:22:02.899', false, '2022-11-10 18:22:02.899', false, 'RoboSpice', 'RoboSpice', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987322802176, '2022-11-10 18:22:02.901', false, '2022-11-10 18:22:02.901', false, 'Stetho', 'Stetho', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987335385088, '2022-11-10 18:22:02.904', false, '2022-11-10 18:22:02.904', false, 'FlatBuffers', 'FlatBuffers', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987347968000, '2022-11-10 18:22:02.907', false, '2022-11-10 18:22:02.907', false, 'Solidity', 'Solidity', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987356356608, '2022-11-10 18:22:02.909', false, '2022-11-10 18:22:02.909', false, '推广', '推广', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987368939520, '2022-11-10 18:22:02.912', false, '2022-11-10 18:22:02.912', false, 'MessagePack', 'MessagePack', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987377328128, '2022-11-10 18:22:02.915', false, '2022-11-10 18:22:02.915', false, 'Buck', 'Buck', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987389911040, '2022-11-10 18:22:02.917', false, '2022-11-10 18:22:02.917', false, 'Marko', 'Marko', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987398299648, '2022-11-10 18:22:02.92', false, '2022-11-10 18:22:02.92', false, 'Libratus', 'Libratus', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987410882560, '2022-11-10 18:22:02.922', false, '2022-11-10 18:22:02.922', false, 'EazeGraph', 'EazeGraph', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987423465472, '2022-11-10 18:22:02.925', false, '2022-11-10 18:22:02.925', false, 'DbInspector', 'DbInspector', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987431854080, '2022-11-10 18:22:02.927', false, '2022-11-10 18:22:02.927', false, 'RoboGuic', 'RoboGuic', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987444436992, '2022-11-10 18:22:02.93', false, '2022-11-10 18:22:02.93', false, 'Fossil', 'Fossil', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987452825600, '2022-11-10 18:22:02.932', false, '2022-11-10 18:22:02.932', false, 'Microsoft Edge', 'Microsoft Edge', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987465408512, '2022-11-10 18:22:02.935', false, '2022-11-10 18:22:02.935', false, 'HTM', 'HTM', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987477991424, '2022-11-10 18:22:02.938', false, '2022-11-10 18:22:02.938', false, 'PyCon', 'PyCon', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987486380032, '2022-11-10 18:22:02.94', false, '2022-11-10 18:22:02.94', false, 'GAN', 'GAN', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987498962944, '2022-11-10 18:22:02.943', false, '2022-11-10 18:22:02.943', false, 'RTC', 'RTC', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987507351552, '2022-11-10 18:22:02.945', false, '2022-11-10 18:22:02.945', false, 'Mozilla', 'Mozilla', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987515740160, '2022-11-10 18:22:02.948', false, '2022-11-10 18:22:02.948', false, 'Smartisan OS', 'Smartisan OS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987528323072, '2022-11-10 18:22:02.95', false, '2022-11-10 18:22:02.95', false, 'FoundationDB', 'FoundationDB', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987536711680, '2022-11-10 18:22:02.952', false, '2022-11-10 18:22:02.952', false, 'iPadOS', 'iPadOS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987549294592, '2022-11-10 18:22:02.955', false, '2022-11-10 18:22:02.955', false, '掘金·日新计划', '掘金·日新计划', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987557683200, '2022-11-10 18:22:02.957', false, '2022-11-10 18:22:02.957', false, 'mPaaS', 'mPaaS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987570266112, '2022-11-10 18:22:02.96', false, '2022-11-10 18:22:02.96', false, 'NuGet', 'NuGet', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987578654720, '2022-11-10 18:22:02.963', false, '2022-11-10 18:22:02.963', false, 'Svelte', 'Svelte', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987591237632, '2022-11-10 18:22:02.965', false, '2022-11-10 18:22:02.965', false, 'CMake', 'CMake', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987603820544, '2022-11-10 18:22:02.968', false, '2022-11-10 18:22:02.968', false, '笔记测评', '笔记测评', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987612209152, '2022-11-10 18:22:02.97', false, '2022-11-10 18:22:02.97', false, 'Godot', 'Godot', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987624792064, '2022-11-10 18:22:02.973', false, '2022-11-10 18:22:02.973', false, 'NEO', 'NEO', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987633180672, '2022-11-10 18:22:02.975', false, '2022-11-10 18:22:02.975', false, '京东小程序', '京东小程序', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987645763584, '2022-11-10 18:22:02.978', false, '2022-11-10 18:22:02.978', false, 'AMA', 'AMA', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987658346496, '2022-11-10 18:22:02.981', false, '2022-11-10 18:22:02.981', false, 'GWT', 'GWT', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987666735104, '2022-11-10 18:22:02.983', false, '2022-11-10 18:22:02.983', false, 'Chameleon', 'Chameleon', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987679318016, '2022-11-10 18:22:02.986', false, '2022-11-10 18:22:02.986', false, 'tvOS', 'tvOS', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987687706624, '2022-11-10 18:22:02.988', false, '2022-11-10 18:22:02.988', false, '视频编码', '视频编码', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987700289536, '2022-11-10 18:22:02.991', false, '2022-11-10 18:22:02.991', false, 'Ramda', 'Ramda', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987712872448, '2022-11-10 18:22:02.994', false, '2022-11-10 18:22:02.994', false, 'Libra', 'Libra', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987721261056, '2022-11-10 18:22:02.996', false, '2022-11-10 18:22:02.996', false, 'TLA+', 'TLA+', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987733843968, '2022-11-10 18:22:02.999', false, '2022-11-10 18:22:02.999', false, 'D', 'D', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987742232576, '2022-11-10 18:22:03.001', false, '2022-11-10 18:22:03.001', false, 'Debezium', 'Debezium', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987750621184, '2022-11-10 18:22:03.004', false, '2022-11-10 18:22:03.004', false, 'greenplum', 'greenplum', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987763204096, '2022-11-10 18:22:03.006', false, '2022-11-10 18:22:03.006', false, 'SQL Server', 'SQL Server', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987771592704, '2022-11-10 18:22:03.008', false, '2022-11-10 18:22:03.008', false, 'Visual Studio', 'Visual Studio', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987779981312, '2022-11-10 18:22:03.01', false, '2022-11-10 18:22:03.01', false, 'Cocos Creator', 'Cocos Creator', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987792564224, '2022-11-10 18:22:03.013', false, '2022-11-10 18:22:03.013', false, 'arco design', 'arco design', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987800952832, '2022-11-10 18:22:03.015', false, '2022-11-10 18:22:03.015', false, 'Modern.js', 'Modern.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987809341440, '2022-11-10 18:22:03.018', false, '2022-11-10 18:22:03.018', false, 'Semi Design', 'Semi Design', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987821924352, '2022-11-10 18:22:03.02', false, '2022-11-10 18:22:03.02', false, '轻服务', '轻服务', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987830312960, '2022-11-10 18:22:03.022', false, '2022-11-10 18:22:03.022', false, 'Fes.js', 'Fes.js', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987838701568, '2022-11-10 18:22:03.024', false, '2022-11-10 18:22:03.024', false, '青训营', '青训营', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987847090176, '2022-11-10 18:22:03.026', false, '2022-11-10 18:22:03.026', false, '单片机', '单片机', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987855478784, '2022-11-10 18:22:03.028', false, '2022-11-10 18:22:03.028', false, 'kerberos', 'kerberos', 0, NULL, NULL);
INSERT INTO public.user_tag VALUES (1590650987868061696, '2022-11-10 18:22:03.031', false, '2022-11-10 18:22:03.031', true, '算法', '算法', 0, NULL, 3);
INSERT INTO public.user_tag VALUES (1590650987876450304, '2022-11-10 18:22:03.034', false, '2022-11-10 18:22:03.034', true, 'JavaScript', 'JavaScript', 0, NULL, 1);
INSERT INTO public.user_tag VALUES (1590650987889033216, '2022-11-10 18:22:03.037', false, '2022-11-10 18:22:03.037', true, '后端', '后端', 0, NULL, 1);
INSERT INTO public.user_tag VALUES (1590650987905810432, '2022-11-10 18:22:03.04', false, '2022-11-10 18:22:03.04', true, '面试', '面试', 0, NULL, 2);
INSERT INTO public.user_tag VALUES (1590650987918393344, '2022-11-10 18:22:03.043', false, '2022-11-10 18:22:03.043', true, 'GitHub', 'GitHub', 0, NULL, 2);


--
-- Data for Name: user_tag_ref; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.user_tag_ref VALUES (20, 4, 0);
INSERT INTO public.user_tag_ref VALUES (4, 1, 0);
INSERT INTO public.user_tag_ref VALUES (6, 1, 0);
INSERT INTO public.user_tag_ref VALUES (3, 3, 2);
INSERT INTO public.user_tag_ref VALUES (3, 2, 100);
INSERT INTO public.user_tag_ref VALUES (3, 5, 22);


--
-- Data for Name: users; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.users VALUES (1597170473374842880, '2022-11-28 18:08:09.517', false, '2022-11-28 18:08:09.517', NULL, NULL, 1, '7c4100e8bc00f9823f6527f95e613f7b', NULL, 'Dwsy_57082013', 1597170473458728960, 'Dwsy_57082013', 'yhopucd3', 1, true);
INSERT INTO public.users VALUES (1604415137320534016, '2022-12-18 17:55:52.003', false, '2022-12-18 17:55:52.003', NULL, NULL, 0, '7c4100e8bc00f9823f6527f95e613f7b', NULL, 'Test', 1604415137400225792, 'Test', 'yhopucd3', NULL, true);
INSERT INTO public.users VALUES (20, '2022-09-22 15:51:35.737', false, '2022-10-11 11:58:19.916', NULL, 'dwsycod@gmail.com', 1, '7c4100e8bc00f9823f6527f95e613f7b', NULL, 'EMT', 7, 'EMT', 'yhopucd3', 100, true);
INSERT INTO public.users VALUES (6, '2022-08-26 21:13:40.208', false, '2022-08-26 21:13:40.208', NULL, NULL, 6, '7c4100e8bc00f9823f6527f95e613f7b', NULL, 'Takagi-san', 6, 'Takagi-san', 'yhopucd3', 123456, false);
INSERT INTO public.users VALUES (1604412751390703616, '2022-12-18 17:46:23.136', false, '2022-12-18 17:46:23.136', NULL, NULL, 0, '7c4100e8bc00f9823f6527f95e613f7b', NULL, 'TESTUSER1', 1604412751394897920, 'TESTUSER1', 'yhopucd3', NULL, true);
INSERT INTO public.users VALUES (4, '2022-08-26 21:13:40.208', false, '2022-08-26 21:13:40.208', NULL, NULL, 6, '7c4100e8bc00f9823f6527f95e613f7b', NULL, 'Sumi', 4, 'Sumi', 'yhopucd3', 123123, false);
INSERT INTO public.users VALUES (5, '2022-08-26 20:33:41.969', false, '2022-08-26 20:33:41.969', NULL, NULL, 4, '7c4100e8bc00f9823f6527f95e613f7b', NULL, 'Megumin', 5, 'Megumin', 'yhopucd3', 5213, false);
INSERT INTO public.users VALUES (1604412387182510080, '2022-12-18 17:44:56.322', false, '2022-12-18 17:44:56.322', NULL, NULL, 0, '7c4100e8bc00f9823f6527f95e613f7b', NULL, 'TESTUSER', 1604412387278979072, 'TESTUSER', 'yhopucd3', NULL, true);
INSERT INTO public.users VALUES (1597170473374842881, '2022-11-28 18:08:09.517', true, '2022-12-02 15:44:07.149', NULL, NULL, 0, '7c4100e8bc00f9823f6527f95e613f7b', NULL, 'TestUser1', 1597170473458728961, 'TestUser1', 'yhopucd3', 1, true);
INSERT INTO public.users VALUES (1604413084942729216, '2022-12-18 17:47:42.661', false, '2022-12-18 17:47:42.661', NULL, NULL, 0, '7c4100e8bc00f9823f6527f95e613f7b', NULL, 'authorization', 1604413084946923520, 'authorization', 'yhopucd3', NULL, true);
INSERT INTO public.users VALUES (1604419761536499712, '2022-12-18 18:14:14.505', false, '2022-12-18 18:14:14.505', NULL, NULL, 0, 'ef62ccd7df887fc231f7f407d3965ade', NULL, 'Dwsy123', 1604419761658134528, 'Dwsy123', '2ihkn4yw', NULL, true);
INSERT INTO public.users VALUES (3, '2022-08-26 20:33:41.969', false, '2022-10-08 13:26:11.74', 'upTest', '1521986032@qq.com', 5, '7c4100e8bc00f9823f6527f95e613f7b', '123123', 'Dwsy', 3, 'Dwsy', 'yhopucd3', 12000, true);


--
-- Data for Name: word; Type: TABLE DATA; Schema: public; Owner: postgres
--

INSERT INTO public.word VALUES (1, NULL, false, NULL, 1, 'sb');
INSERT INTO public.word VALUES (2, NULL, false, NULL, 1, 'nmsl');
INSERT INTO public.word VALUES (3, NULL, false, NULL, 1, 'nt');
INSERT INTO public.word VALUES (4, NULL, false, NULL, 1, 'ntt');
INSERT INTO public.word VALUES (5, '2022-09-16 01:52:59.145', false, '2022-09-16 01:52:59.145', 0, 'sss');
INSERT INTO public.word VALUES (6, '2022-09-16 01:55:52.833', false, '2022-09-16 01:55:52.833', 1, 'dddd');
INSERT INTO public.word VALUES (7, '2022-09-16 01:57:26.601', false, '2022-09-16 01:57:26.601', 5, '绝绝子');


--
-- Name: article_comment_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.article_comment_id_seq', 187, true);


--
-- Name: article_content_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.article_content_id_seq', 15, true);


--
-- Name: article_field_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.article_field_id_seq', 22, true);


--
-- Name: article_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.article_group_id_seq', 1, false);


--
-- Name: article_tag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.article_tag_id_seq', 5, true);


--
-- Name: channel_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.channel_id_seq', 6, true);


--
-- Name: channel_message_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.channel_message_id_seq', 15, true);


--
-- Name: hibernate_sequence; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.hibernate_sequence', 158, true);


--
-- Name: qa_answer_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.qa_answer_id_seq', 14, true);


--
-- Name: qa_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.qa_group_id_seq', 3, true);


--
-- Name: qa_question_content_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.qa_question_content_id_seq', 4, true);


--
-- Name: qa_question_field_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.qa_question_field_id_seq', 4, true);


--
-- Name: qa_tag_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.qa_tag_id_seq', 4, true);


--
-- Name: system_message_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.system_message_id_seq', 1, true);


--
-- Name: system_users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.system_users_id_seq', 1, false);


--
-- Name: user_active_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_active_id_seq', 1831, true);


--
-- Name: user_collection_group_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_collection_group_id_seq', 14, true);


--
-- Name: user_collection_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_collection_id_seq', 53, true);


--
-- Name: user_following_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_following_id_seq', 26, true);


--
-- Name: user_info_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_info_id_seq', 7, true);


--
-- Name: user_message_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_message_id_seq', 235, true);


--
-- Name: user_notify_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_notify_id_seq', 97, true);


--
-- Name: user_points_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.user_points_id_seq', 64, true);


--
-- Name: users_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.users_id_seq', 20, true);


--
-- Name: word_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.word_id_seq', 7, true);


--
-- Data for Name: BLOBS; Type: BLOBS; Schema: -; Owner: -
--

BEGIN;

SELECT pg_catalog.lo_open('50331', 131072);
SELECT pg_catalog.lowrite(0, '\xe6938de4bd9ce5a48de695b00ae69c89e4b889e4b8aae587bde695b0e58fafe4bba5e7bb84e8a385e68896e88085e58886e8a7a3e5a48de695b0e38082e58685e7bdaee587bde695b020636f6d706c657820e4bc9ae69e84e980a0e4b880e4b8aae5a48de695b0efbc8c7265616c20e5928c20696d616720e4bc9ae58886e8a7a3e587bae5a48de695b0e79a84e5ae9ee983a8e5928ce8999ae983a8e380820a0a636f6d706c6578287265616c506172742c20696d6167696e6172795061727420666c6f6174542920636f6d706c6578540a7265616c28636f6d706c6578542920666c6f6174540a696d616728636f6d706c6578542920666c6f6174540ae58f82e695b0e79a84e7b1bbe59e8be5928ce8bf94e59b9ee580bce7b1bbe59e8be698afe5afb9e5ba94e79a84e38082e5afb9e4ba8e20636f6d706c6578efbc8ce4b8a4e4b8aae58f82e695b0e5bf85e9a1bbe698afe79bb8e5908ce79a84e6b5aee782b9e7b1bbe59e8befbc8ce5b9b6e8bf94e59b9ee794b1e79bb8e5908ce6b5aee782b9e695b0e7bb84e68890e79a84e5a48de695b0e7b1bbe59e8be38082636f6d706c6578363420e698af20666c6f6174333220e5afb9e5ba94e79a84e7b1bbe59e8befbc8c636f6d706c657831323820e698af20666c6f6174363420e5afb9e5ba94e79a84e58f82e695b0e7b1bbe59e8be38082e5a682e69e9ce58f82e695b0e698afe4b880e4b8aae697a0e7b1bbe59e8be5b8b8e9878fefbc8ce5ae83e4bc9ae8bdace68da2e68890e58fa6e4b880e4b8aae58f82e695b0e79a84e7b1bbe59e8be38082e5a682e69e9ce4b8a4e4b8aae58f82e695b0e983bde698afe697a0e7b1bbe59e8be5b8b8e9878fefbc8ce4bb96e4bbace5bf85e9a1bbe5ae9ee695b0e68896e88085e8999ae695b0e983a8e58886e4b8bae99bb6efbc8ce5b9b6e4b894e5ae83e4bc9ae8bf94e59b9ee4b880e4b8aae697a0e7b1bbe59e8be79a84e5a48de695b0e5b8b8e9878fe380820a0a7265616c20e5928c20696d616720e587bde695b0e5928c20636f6d706c657820e6ada3e5a5bde79bb8e58f8de79a84efbc8ce68980e4bba5e5afb9e4ba8ee4b880e4b8aae580bce5a48de695b0e7b1bbe59e8b205a20e79a84e580bc207aefbc8c7a3d3d5a28636f6d706c6578287265616c287a292c696d6167287a292929e380820a0ae5a682e69e9ce8bf99e4b988e6938de4bd9ce983bde698afe5b8b8e9878fefbc8ce982a3e4b988e8bf94e59b9ee79a84e580bce4b99fe698afe5b8b8e9878fe380820a0a7661722061203d20636f6d706c657828322c202d3229202020202020202020202020202f2f20636f6d706c65783132380a636f6e73742062203d20636f6d706c657828312e302c202d312e3429202020202020202f2f20756e747970656420636f6d706c657820636f6e7374616e742031202d20312e34690a78203a3d20666c6f61743332286d6174682e436f73286d6174682e50692f32292920202f2f20666c6f617433320a76617220633634203d20636f6d706c657828352c202d782920202020202020202020202f2f20636f6d706c657836340a76617220732075696e74203d20636f6d706c657828312c2030292020202020202020202f2f20756e747970656420636f6d706c657820636f6e7374616e742031202b2030692063616e20626520636f6e76657274656420746f2075696e740a5f203d20636f6d706c657828312c20323c7e0a');
SELECT pg_catalog.lo_close(0);

SELECT pg_catalog.lo_open('50332', 131072);
SELECT pg_catalog.lowrite(0, '\x7469746c65');
SELECT pg_catalog.lo_close(0);

COMMIT;

--
-- Name: article_comment article_comment_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_comment
    ADD CONSTRAINT article_comment_pkey PRIMARY KEY (id);


--
-- Name: article_content article_content_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_content
    ADD CONSTRAINT article_content_pkey PRIMARY KEY (id);


--
-- Name: article_daily_data article_daily_data_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_daily_data
    ADD CONSTRAINT article_daily_data_pkey PRIMARY KEY (id);


--
-- Name: article_field article_field_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_field
    ADD CONSTRAINT article_field_pkey PRIMARY KEY (id);


--
-- Name: article_group article_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_group
    ADD CONSTRAINT article_group_pkey PRIMARY KEY (id);


--
-- Name: article_tag article_tag_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_tag
    ADD CONSTRAINT article_tag_pkey PRIMARY KEY (id);


--
-- Name: article_tag_ref article_tag_ref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_tag_ref
    ADD CONSTRAINT article_tag_ref_pkey PRIMARY KEY (article_field_id, article_tag_id);


--
-- Name: channel_message channel_message_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.channel_message
    ADD CONSTRAINT channel_message_pkey PRIMARY KEY (id);


--
-- Name: channel channel_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.channel
    ADD CONSTRAINT channel_pkey PRIMARY KEY (id);


--
-- Name: channel_user_ref cuid; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.channel_user_ref
    ADD CONSTRAINT cuid PRIMARY KEY (channel_id, user_id);


--
-- Name: infinity_club_daily_data infinity_club_daily_data_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.infinity_club_daily_data
    ADD CONSTRAINT infinity_club_daily_data_pkey PRIMARY KEY (id);


--
-- Name: infinity_club_follow_ref infinity_club_follow_ref_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.infinity_club_follow_ref
    ADD CONSTRAINT infinity_club_follow_ref_pk PRIMARY KEY (user_id, club_id);


--
-- Name: infinity_club infinity_club_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.infinity_club
    ADD CONSTRAINT infinity_club_pkey PRIMARY KEY (id);


--
-- Name: infinity infinity_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.infinity
    ADD CONSTRAINT infinity_pkey PRIMARY KEY (id);


--
-- Name: infinity_topic_daily_data infinity_topic_daily_data_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.infinity_topic_daily_data
    ADD CONSTRAINT infinity_topic_daily_data_pkey PRIMARY KEY (id);


--
-- Name: infinity_topic_follow_ref infinity_topic_follow_ref_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.infinity_topic_follow_ref
    ADD CONSTRAINT infinity_topic_follow_ref_pk PRIMARY KEY (user_id, topic_id);


--
-- Name: infinity_topic infinity_topic_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.infinity_topic
    ADD CONSTRAINT infinity_topic_pkey PRIMARY KEY (id);


--
-- Name: oauth_user_ref oauth_user_ref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.oauth_user_ref
    ADD CONSTRAINT oauth_user_ref_pkey PRIMARY KEY (id);


--
-- Name: qa_answer qa_answer_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_answer
    ADD CONSTRAINT qa_answer_pkey PRIMARY KEY (id);


--
-- Name: qa_group qa_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_group
    ADD CONSTRAINT qa_group_pkey PRIMARY KEY (id);


--
-- Name: qa_question_content qa_question_content_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_question_content
    ADD CONSTRAINT qa_question_content_pkey PRIMARY KEY (id);


--
-- Name: qa_question_field qa_question_field_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_question_field
    ADD CONSTRAINT qa_question_field_pkey PRIMARY KEY (id);


--
-- Name: qa_tag qa_tag_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_tag
    ADD CONSTRAINT qa_tag_pkey PRIMARY KEY (id);


--
-- Name: qa_tag_ref qa_tag_ref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_tag_ref
    ADD CONSTRAINT qa_tag_ref_pkey PRIMARY KEY (qa_field_id, qa_tag_id);


--
-- Name: qa_user_watch_ref qa_user_watch_ref_pk; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_user_watch_ref
    ADD CONSTRAINT qa_user_watch_ref_pk PRIMARY KEY (user_id, question_id);


--
-- Name: question_daily_data question_daily_data_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.question_daily_data
    ADD CONSTRAINT question_daily_data_pkey PRIMARY KEY (id);


--
-- Name: system_message system_message_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.system_message
    ADD CONSTRAINT system_message_pkey PRIMARY KEY (id);


--
-- Name: system_users system_users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.system_users
    ADD CONSTRAINT system_users_pkey PRIMARY KEY (id);


--
-- Name: user_collection_group uk70kqqdcebyk8u7nmua9hqkujg; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_collection_group
    ADD CONSTRAINT uk70kqqdcebyk8u7nmua9hqkujg UNIQUE (user_id, group_name);


--
-- Name: article_field uk_imxkqq4octed9w2pbinct9om0; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_field
    ADD CONSTRAINT uk_imxkqq4octed9w2pbinct9om0 UNIQUE (article_content_id);


--
-- Name: user_active user_active_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_active
    ADD CONSTRAINT user_active_pkey PRIMARY KEY (id);


--
-- Name: user_collection_group user_collection_group_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_collection_group
    ADD CONSTRAINT user_collection_group_pkey PRIMARY KEY (id);


--
-- Name: user_collection user_collection_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_collection
    ADD CONSTRAINT user_collection_pkey PRIMARY KEY (id);


--
-- Name: user_file_ref user_file_ref_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_file_ref
    ADD CONSTRAINT user_file_ref_pkey PRIMARY KEY (id);


--
-- Name: user_following user_following_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_following
    ADD CONSTRAINT user_following_pkey PRIMARY KEY (id);


--
-- Name: user_info user_info_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_info
    ADD CONSTRAINT user_info_pkey PRIMARY KEY (id);


--
-- Name: user_message user_message_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_message
    ADD CONSTRAINT user_message_pkey PRIMARY KEY (id);


--
-- Name: user_notify user_notify_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_notify
    ADD CONSTRAINT user_notify_pkey PRIMARY KEY (id);


--
-- Name: user_points user_points_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_points
    ADD CONSTRAINT user_points_pkey PRIMARY KEY (id);


--
-- Name: user_tag user_tag_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_tag
    ADD CONSTRAINT user_tag_pkey PRIMARY KEY (id);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: word word_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.word
    ADD CONSTRAINT word_pkey PRIMARY KEY (id);


--
-- Name: article_comment_deleted_article_field_id_comment_type_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX article_comment_deleted_article_field_id_comment_type_index ON public.article_comment USING btree (deleted, article_field_id, comment_type);


--
-- Name: article_content_deleted_article_field_id_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX article_content_deleted_article_field_id_index ON public.article_content USING btree (deleted, article_field_id);


--
-- Name: infinity_deleted_id_type_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX infinity_deleted_id_type_index ON public.infinity USING btree (deleted, id, type);


--
-- Name: qa_question_content_deleted_id_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX qa_question_content_deleted_id_index ON public.qa_question_content USING btree (deleted, id);


--
-- Name: qa_question_field_deleted_id_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX qa_question_field_deleted_id_index ON public.qa_question_field USING btree (deleted, id);


--
-- Name: user_notify_deleted_to_user_id_notify_type_index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX user_notify_deleted_to_user_id_notify_type_index ON public.user_notify USING btree (deleted, to_user_id, notify_type);


--
-- Name: users_name__index; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX users_name__index ON public.users USING btree (id, username);


--
-- Name: infinity fk141s3vqt114vc34tnoqo93n1a; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.infinity
    ADD CONSTRAINT fk141s3vqt114vc34tnoqo93n1a FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: qa_tag fk2a1hbabd67txkhhs6fe0m16mq; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_tag
    ADD CONSTRAINT fk2a1hbabd67txkhhs6fe0m16mq FOREIGN KEY (qa_group_id) REFERENCES public.qa_group(id);


--
-- Name: users fk5wvwve0r2ex1otm6pil40qbhl; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.users
    ADD CONSTRAINT fk5wvwve0r2ex1otm6pil40qbhl FOREIGN KEY (user_info_id) REFERENCES public.user_info(id);


--
-- Name: qa_tag_ref fk6ce70yfxmv4xxxwnhitatepet; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_tag_ref
    ADD CONSTRAINT fk6ce70yfxmv4xxxwnhitatepet FOREIGN KEY (qa_field_id) REFERENCES public.qa_question_field(id);


--
-- Name: channel_user_ref fk7jthbehtjn1pqsg0y1mowmmy8; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.channel_user_ref
    ADD CONSTRAINT fk7jthbehtjn1pqsg0y1mowmmy8 FOREIGN KEY (channel_id) REFERENCES public.channel(id);


--
-- Name: qa_question_field fk9ymyv9yoghssqg7c07bec9j5h; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_question_field
    ADD CONSTRAINT fk9ymyv9yoghssqg7c07bec9j5h FOREIGN KEY (qa_group_id) REFERENCES public.qa_group(id);


--
-- Name: qa_answer fkbhv49s4v1ucmhdl9asmgl8mb7; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_answer
    ADD CONSTRAINT fkbhv49s4v1ucmhdl9asmgl8mb7 FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: article_comment fkbi8ayseyekgvrs01a12fjvyph; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_comment
    ADD CONSTRAINT fkbi8ayseyekgvrs01a12fjvyph FOREIGN KEY (article_field_id) REFERENCES public.article_field(id);


--
-- Name: user_tag_ref fkcw7ongxirhkbhnquevw4mh610; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_tag_ref
    ADD CONSTRAINT fkcw7ongxirhkbhnquevw4mh610 FOREIGN KEY (user_tag_id) REFERENCES public.user_tag(id);


--
-- Name: article_field fkdd1yxr21xllnaoad2wiaf0jhx; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_field
    ADD CONSTRAINT fkdd1yxr21xllnaoad2wiaf0jhx FOREIGN KEY (article_content_id) REFERENCES public.article_content(id);


--
-- Name: user_collection fkdw7blqittgwk75wk0xa362ny5; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_collection
    ADD CONSTRAINT fkdw7blqittgwk75wk0xa362ny5 FOREIGN KEY (user_collection_group_id) REFERENCES public.user_collection_group(id);


--
-- Name: infinity_topic__ref fkecslml5t4fy0332g9enc7npyd; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.infinity_topic__ref
    ADD CONSTRAINT fkecslml5t4fy0332g9enc7npyd FOREIGN KEY (topic_id) REFERENCES public.infinity_topic(id);


--
-- Name: qa_answer fkfehcjt2othv7r46tdmpgdl0t9; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_answer
    ADD CONSTRAINT fkfehcjt2othv7r46tdmpgdl0t9 FOREIGN KEY (question_field_id) REFERENCES public.qa_question_field(id);


--
-- Name: qa_question_field fkfpi90fy69ukwgft0k7p2rd5qc; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_question_field
    ADD CONSTRAINT fkfpi90fy69ukwgft0k7p2rd5qc FOREIGN KEY (qa_question_content_id) REFERENCES public.qa_question_content(id);


--
-- Name: article_comment fkfxl78naudwhrf5u5y4k9aybvk; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_comment
    ADD CONSTRAINT fkfxl78naudwhrf5u5y4k9aybvk FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: qa_tag_ref fkgpfy4nsqvfi97wwb3qjoybv20; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_tag_ref
    ADD CONSTRAINT fkgpfy4nsqvfi97wwb3qjoybv20 FOREIGN KEY (qa_tag_id) REFERENCES public.qa_tag(id);


--
-- Name: user_tag_ref fkhtt78gj1xemgb3f1qvo0pd9w2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_tag_ref
    ADD CONSTRAINT fkhtt78gj1xemgb3f1qvo0pd9w2 FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: article_field fkihs1mnmd8btreg0jrhxntmeq1; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_field
    ADD CONSTRAINT fkihs1mnmd8btreg0jrhxntmeq1 FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: article_tag_ref fkk5r0lrcl8tyvnqbxl0rgphapc; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_tag_ref
    ADD CONSTRAINT fkk5r0lrcl8tyvnqbxl0rgphapc FOREIGN KEY (article_tag_id) REFERENCES public.article_tag(id);


--
-- Name: channel_user_ref fkkg6p8ipyio9itcdrmnp7ahh2w; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.channel_user_ref
    ADD CONSTRAINT fkkg6p8ipyio9itcdrmnp7ahh2w FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: qa_question_field fkl5nvklfy7kaa0mkq5uiw5ouo3; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.qa_question_field
    ADD CONSTRAINT fkl5nvklfy7kaa0mkq5uiw5ouo3 FOREIGN KEY (user_id) REFERENCES public.users(id);


--
-- Name: infinity_club fkm7b61nshmaoxwrbmwsqy7uat6; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.infinity_club
    ADD CONSTRAINT fkm7b61nshmaoxwrbmwsqy7uat6 FOREIGN KEY (create_user_id) REFERENCES public.users(id);


--
-- Name: channel fknay35gmggqx2u0ooq1du0dosl; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.channel
    ADD CONSTRAINT fknay35gmggqx2u0ooq1du0dosl FOREIGN KEY (owner_id) REFERENCES public.users(id);


--
-- Name: user_tag fknovvu907o0srjjcehojtubcnd; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_tag
    ADD CONSTRAINT fknovvu907o0srjjcehojtubcnd FOREIGN KEY (qa_group_id) REFERENCES public.qa_group(id);


--
-- Name: article_field fknur5186078v39ks82ul2o7pfw; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_field
    ADD CONSTRAINT fknur5186078v39ks82ul2o7pfw FOREIGN KEY (article_group_id) REFERENCES public.article_group(id);


--
-- Name: infinity_topic fkpg8p5snj3g8108i9v3lkd49f2; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.infinity_topic
    ADD CONSTRAINT fkpg8p5snj3g8108i9v3lkd49f2 FOREIGN KEY (create_user_id) REFERENCES public.users(id);


--
-- Name: article_tag_ref fks4vhkv9qbw2j0rb0ipq5cfjoi; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_tag_ref
    ADD CONSTRAINT fks4vhkv9qbw2j0rb0ipq5cfjoi FOREIGN KEY (article_field_id) REFERENCES public.article_field(id);


--
-- Name: infinity_topic__ref fksubint0mrkig90adrfb80e643; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.infinity_topic__ref
    ADD CONSTRAINT fksubint0mrkig90adrfb80e643 FOREIGN KEY (infinity_id) REFERENCES public.infinity(id);


--
-- Name: infinity fktex2r20lm766xwswc0qaaowna; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.infinity
    ADD CONSTRAINT fktex2r20lm766xwswc0qaaowna FOREIGN KEY (infinity_club_id) REFERENCES public.infinity_club(id);


--
-- Name: article_tag fkxmu893p8gwrcfnyj8lg1pdic; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.article_tag
    ADD CONSTRAINT fkxmu893p8gwrcfnyj8lg1pdic FOREIGN KEY (article_group_id) REFERENCES public.article_group(id);


--
-- PostgreSQL database dump complete
--

