server:
  port: 9001
  servlet:
    context-path: /api
spring:
  application:
    name: ddl-gateway
  cloud:
    nacos:
      discovery:
        enabled: true # 如果不想使用 Nacos 进行服务注册和发现, 设置为 false 即可
        server-addr: localhost:8848
        namespace: ec208297-8a8a-4c6a-8771-b02b016c15f4
        metadata:
          management:
#            context-path: ${server.servlet.context-path}/actuator
            context-path: /actuator
    gateway:
      discovery:
        locator:
          enabled: true
          websocket: my-websocket-load-balancer-class
      globalcors:
        cors-configurations:
            '[/**]':
                allowedOrigins: '*'
                allowedHeaders: '*'

                allowedMethods:
                  - GET
                  - POST
                  - PUT
                  - DELETE
                  - OPTIONS
                maxAge: 18000
      routes:
        - id: ddl-service-article
          uri: lb://ddl-service-article
          predicates:
            - Path=/api/article/**
          filters:
            - StripPrefix=2
        - id: ddl-service-audit
          uri: lb://ddl-service-audit
          predicates:
            - Path=/api/audit/**
          filters:
            - StripPrefix=2
        - id: ddl-service-data
          uri: lb://ddl-service-data
          predicates:
            - Path=/api/data/**
          filters:
            - StripPrefix=2
        - id: ddl-service-file
          uri: lb://ddl-service-file
          predicates:
            - Path=/api/file/**
          filters:
            - StripPrefix=2
        - id: ddl-service-infinity
          uri: lb://ddl-service-infinity
          predicates:
            - Path=/api/infinity/**
          filters:
            - StripPrefix=2
        - id: ddl-service-message
          uri: lb://ddl-service-message
          predicates:
            - Path=/api/message/**
          filters:
            - StripPrefix=2
        - id: ddl-service-question
          uri: lb://ddl-service-question
          predicates:
            - Path=/api/question/**
          filters:
            - StripPrefix=2
        - id: ddl-service-search
          uri: lb://ddl-service-search
          predicates:
            - Path=/api/search/**
          filters:
            - StripPrefix=2
        - id: ddl-service-user
          uri: lb://ddl-service-user
          predicates:
            - Path=/api/user/**
          filters:
            - StripPrefix=2
    sentinel:
      eager: true
      transport:
        port: 8720
        dashboard: localhost:7749
      datasource:
        ds1:
          nacos:
            server-addr: ${spring.cloud.nacos.discovery.server-addr}
            namespace: ${spring.cloud.nacos.discovery.namespace}
            data-id: gateway-flow-rule-sentinel
            group-id: DEFAULT_GROUP
            data-type: json
            rule-type: gw-flow
        ds2:
          nacos:
            server-addr: ${spring.cloud.nacos.discovery.server-addr}
            namespace: ${spring.cloud.nacos.discovery.namespace}
            data-id: gateway-flow-rule-api-sentinel
            group-id: DEFAULT_GROUP
            data-type: json
            rule-type: gw-api-group

  zipkin:
    sender:
      type: web # 默认是 web
    base-url: http://localhost:9411/
  main:
    allow-bean-definition-overriding: true  # 因为将来会引入很多依赖, 难免有重名的 bean
#  kafka:
#    bootstrap-servers: 192.168.123.150:9092
#    producer:
#      retries: 3
#    consumer:
#      auto-offset-reset: latest
  redis:
    host: localhost
    port: 6379
    database: 0
    lettuce:
      pool:
        max-active: 16
        max-idle: 16
        min-idle: 8
# 这个地方独立配置, 是网关的数据, 代码 GatewayConfig.java 中读取被监听
nacos:
  gateway:
    route:
      config:
        data-id: ddl-gateway-router
        group: ddl
#            metadata:
#              management:
#                context-path: ${server.servlet.context-path}/actuator
#    sentinel:
#      eager: true
#      transport:
#        port: 8720
#        dashboard: 127.0.0.1:7777
#      datasource:
#        # 通过本地文件方式, 基于服务级别的配置
#        #        dsl.file:
#        #          file: classpath:gateway-flow-rule-sentinel.json
#        #          # 代表服务级别的限流, 一步步点进去看, 文件类型
#        #          ruleType: gw-flow
#        #        # 通过本地文件方式, 细粒度对指定 api 进行配置
#        #        ds2.file:
#        #          file: classpath:gateway-flow-rule-api-sentinel.json
#        #          # 代表 API 分组, 一步步点进去看, 文件类型
#        #          ruleType: gw-api-group
#        # 集成 Nacos
#        ds1:
#          nacos:
#            server-addr: ${spring.cloud.nacos.discovery.server-addr}
#            namespace: ${spring.cloud.nacos.discovery.namespace}
#            # 测试时, 看看 Nacos 中修改是否能让 dashboard 生效, 就把第二个 count 也修改为 3
#            data-id: gateway-flow-rule-sentinel
#            group-id: DEFAULT_GROUP
#            data-type: json
#            rule-type: gw-flow
#        ds2:
#          nacos:
#            server-addr: ${spring.cloud.nacos.discovery.server-addr}
#            namespace: ${spring.cloud.nacos.discovery.namespace}
#            data-id: gateway-flow-rule-api-sentinel
#            group-id: DEFAULT_GROUP
#            data-type: json
#            rule-type: gw-api-group
#



# 暴露端点
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
